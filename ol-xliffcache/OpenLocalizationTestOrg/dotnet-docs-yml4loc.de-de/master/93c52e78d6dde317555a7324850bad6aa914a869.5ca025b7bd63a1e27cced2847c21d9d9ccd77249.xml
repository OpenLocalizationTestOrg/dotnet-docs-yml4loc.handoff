{"nodes":[{"content":"Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.","nodes":[{"pos":[0,130],"content":"Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.","nodes":[{"content":"Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.","pos":[0,130],"nodes":[{"content":"Represents a strongly typed list of objects that can be accessed by index.","pos":[0,74]},{"content":"Provides methods to search, sort, and manipulate lists.","pos":[75,130]}]}]}],"pos":[5142,5273],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class. It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.  \n  \n You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods.  \n  \n The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer.  \n  \n-   Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements. The default equality comparer for type `T` is determined as follows. If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.  \n  \n-   Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements. The default comparer for type `T` is determined as follows.  If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface. If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.  \n  \n The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.  \n  \n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  \n  \n For very large <xref:System.Collections.Generic.List%601> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \n  \n <xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>.  \n  \n## Performance Considerations  \n In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe. If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical. However, if a value type is used for type `T`, you need to consider implementation and boxing issues.  \n  \n If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type. That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.  \n  \n Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface. If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method, which boxes the affected list element. If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements. If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods  \n  \n It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself. The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.  \n  \n## F# Considerations  \n The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code.  Instead, [Lists](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred. An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development. When used from F#, the<xref:System.Collections.Generic.List%601> class is typically referred to by the  [ResizeArray\\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists","nodes":[{"pos":[2,423],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,419],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646)</ept>.","pos":[1,182],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[183,411],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[430,705],"content":"The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class. It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.","nodes":[{"content":"The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class. It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.","pos":[0,275],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is the generic equivalent of the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> class.","pos":[0,128],"source":"The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class."},{"content":"It implements the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface by using an array whose size is dynamically increased as required.","pos":[129,275],"source":" It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required."}]}]},{"pos":[712,907],"content":"You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods.","nodes":[{"content":"You can add items to a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> by using the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> methods.","pos":[0,195],"source":"You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods."}]},{"pos":[914,1023],"content":"The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses both an equality comparer and an ordering comparer.","pos":[0,109],"source":"The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer."}]},{"pos":[1033,1696],"content":"Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements. The default equality comparer for type `T` is determined as follows. If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.","nodes":[{"content":"Methods such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph> use an equality comparer for the list elements.","pos":[0,296],"source":"Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements."},{"content":"The default equality comparer for type <ph id=\"ph1\">`T`</ph> is determined as follows.","pos":[297,365],"source":" The default equality comparer for type `T` is determined as follows."},{"content":"If type <ph id=\"ph1\">`T`</ph> implements the <ph id=\"ph2\">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, then the equality comparer is the <ph id=\"ph3\">&lt;xref:System.IEquatable%601.Equals%28%600%29&gt;</ph> method of that interface; otherwise, the default equality comparer is <ph id=\"ph4\">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=fullName&gt;</ph>.","pos":[366,663],"source":" If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>."}]},{"pos":[1706,2473],"content":"Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements. The default comparer for type `T` is determined as follows.  If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface. If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.","nodes":[{"content":"Methods such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> use an ordering comparer for the list elements.","pos":[0,177],"source":"Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements."},{"content":"The default comparer for type <ph id=\"ph1\">`T`</ph> is determined as follows.","pos":[178,237],"source":" The default comparer for type `T` is determined as follows."},{"content":"If type <ph id=\"ph1\">`T`</ph> implements the <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph> generic interface, then the default comparer is the <ph id=\"ph3\">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> method of that interface; otherwise, if type <ph id=\"ph4\">`T`</ph> implements the nongeneric <ph id=\"ph5\">&lt;xref:System.IComparable&gt;</ph> interface, then the default comparer is the <ph id=\"ph6\">&lt;xref:System.IComparable.CompareTo%28System.Object%29&gt;</ph> method of that interface.","pos":[239,623],"source":"  If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface."},{"content":"If type <ph id=\"ph1\">`T`</ph> implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.","pos":[624,767],"source":" If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly."}]},{"pos":[2480,2792],"content":"The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.","nodes":[{"content":"The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.","pos":[0,312],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is not guaranteed to be sorted.","pos":[0,78],"source":"The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted."},{"content":"You must sort the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> before performing operations (such as <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>) that require the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to be sorted.","pos":[80,312],"source":"  You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted."}]}]},{"pos":[2799,2910],"content":"Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","nodes":[{"content":"Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","pos":[0,111],"nodes":[{"content":"Elements in this collection can be accessed using an integer index.","pos":[0,67]},{"content":"Indexes in this collection are zero-based.","pos":[69,111]}]}]},{"pos":[2917,3166],"content":"For very large <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id=\"ph2\">`enabled`</ph> attribute of the  configuration element to <ph id=\"ph3\">`true`</ph> in the run-time environment.","source":"For very large <xref:System.Collections.Generic.List%601> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment."},{"pos":[3173,3298],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value for reference types and allows duplicate elements.","source":"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements."},{"pos":[3305,3445],"content":"For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>.","nodes":[{"content":"For an immutable version of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, see <ph id=\"ph2\">&lt;xref:System.Collections.Immutable.ImmutableList%601&gt;</ph>.","pos":[0,140],"source":"For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>."}]},{"pos":[3454,3480],"content":"Performance Considerations","linkify":"Performance Considerations","nodes":[{"content":"Performance Considerations","pos":[0,26]}]},{"pos":[3484,4006],"content":"In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe. If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical. However, if a value type is used for type `T`, you need to consider implementation and boxing issues.","nodes":[{"content":"In deciding whether to use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> class, both of which have similar functionality, remember that the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class performs better in most cases and is type safe.","pos":[0,276],"source":"In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe."},{"content":"If a reference type is used for type <ph id=\"ph1\">`T`</ph> of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, the behavior of the two classes is identical.","pos":[277,420],"source":" If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical."},{"content":"However, if a value type is used for type <ph id=\"ph1\">`T`</ph>, you need to consider implementation and boxing issues.","pos":[421,522],"source":" However, if a value type is used for type `T`, you need to consider implementation and boxing issues."}]},{"pos":[4013,4478],"content":"If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type. That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.","nodes":[{"content":"If a value type is used for type <ph id=\"ph1\">`T`</ph>, the compiler generates an implementation of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class specifically for that value type.","pos":[0,168],"source":"If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type."},{"content":"That means a list element of a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.","pos":[169,465],"source":" That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation."}]},{"pos":[4485,5361],"content":"Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface. If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method, which boxes the affected list element. If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements. If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods","nodes":[{"content":"Make certain the value type used for type <ph id=\"ph1\">`T`</ph> implements the <ph id=\"ph2\">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.","pos":[0,108],"source":"Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface."},{"content":"If not, methods such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> must call the <ph id=\"ph2\">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=fullName&gt;</ph> method, which boxes the affected list element.","pos":[109,320],"source":" If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method, which boxes the affected list element."},{"content":"If the value type implements the <ph id=\"ph1\">&lt;xref:System.IComparable&gt;</ph> interface and you own the source code, also implement the <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph> generic interface to prevent the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods from boxing list elements.","pos":[321,649],"source":" If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements."},{"content":"If you do not own the source code, pass an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> object to the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods","pos":[650,876],"source":" If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods"}]},{"pos":[5368,5822],"content":"It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself. The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.","nodes":[{"content":"It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself. The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.","pos":[0,454],"nodes":[{"content":"It is to your advantage to use the type-specific implementation of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class instead of using the <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph> class or writing a strongly typed wrapper collection yourself.","pos":[0,239],"source":"It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself."},{"content":"The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.","pos":[240,454]}]}]},{"pos":[5831,5848],"content":"F# Considerations","linkify":"F# Considerations","nodes":[{"content":"F# Considerations","pos":[0,17]}]},{"pos":[5852,6444],"content":"The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code.  Instead, [Lists](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred. An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development. When used from F#, the<xref:System.Collections.Generic.List%601> class is typically referred to by the  [ResizeArray\\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is used infrequently in F# code.","pos":[0,85],"source":"The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code."},{"content":"Instead, <bpt id=\"p1\">[</bpt>Lists<ept id=\"p1\">](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)</ept>, which are immutable, singly-linked lists, are typically preferred.","pos":[87,243],"source":"  Instead, [Lists](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred."},{"content":"An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development.","pos":[244,361]},{"content":"When used from F#, the<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is typically referred to by the  <bpt id=\"p1\">[</bpt>ResizeArray<ph id=\"ph2\">\\&lt;</ph>'T&gt;<ept id=\"p1\">](https://msdn.microsoft.com/library/ee353447.aspx)</ept> type abbreviation to avoid naming conflicts with F# Lists","pos":[362,592],"source":" When used from F#, the<xref:System.Collections.Generic.List%601> class is typically referred to by the  [ResizeArray\\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists"}]}],"pos":[5284,11765],"yaml":true,"extradata":"MT"},{"content":"The type of elements in the list.","nodes":[{"pos":[0,33],"content":"The type of elements in the list.","nodes":[{"content":"The type of elements in the list.","pos":[0,33]}]}],"pos":[15456,15490],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\"></xref> class that is empty and has the default initial capacity.","nodes":[{"pos":[0,146],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> class that is empty and has the default initial capacity.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\"></xref> class that is empty and has the default initial capacity."}],"pos":[45245,45392],"yaml":true},{"content":"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.  \n  \n The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.  \n  \n This constructor is an O(1) operation.","nodes":[{"pos":[0,307],"content":"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,307],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can hold.","pos":[0,148],"source":"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[149,307],"source":" As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[314,624],"content":"If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"If the size of the collection can be estimated, using the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[0,310],"source":"If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>."}]},{"pos":[631,955],"content":"The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.","pos":[0,324],"nodes":[{"content":"The capacity can be decreased by calling the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly.","pos":[0,202],"source":"The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly."},{"content":"Decreasing the capacity reallocates memory and copies all the elements in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[203,324],"source":" Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>."}]}]},{"pos":[962,1000],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[45403,46412],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.","nodes":[{"pos":[0,228],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied."}],"pos":[48994,49223],"yaml":true},{"content":"The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection.  \n  \n This constructor is an O(*n*) operation, where *n* is the number of elements in `collection`.","nodes":[{"pos":[0,144],"content":"The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection.","nodes":[{"content":"The elements are copied onto the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> in the same order they are read by the enumerator of the collection.","pos":[0,144],"source":"The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection."}]},{"pos":[151,244],"content":"This constructor is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the number of elements in <ph id=\"ph3\">`collection`</ph>.","source":"This constructor is an O(*n*) operation, where *n* is the number of elements in `collection`."}],"pos":[49234,49483],"yaml":true,"extradata":"MT"},{"content":"The collection whose elements are copied to the new list.","nodes":[{"pos":[0,57],"content":"The collection whose elements are copied to the new list.","nodes":[{"content":"The collection whose elements are copied to the new list.","pos":[0,57]}]}],"pos":[50519,50577],"yaml":true},{"content":"<code>collection</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>collection</code> is `null`."}],"pos":[50746,50781],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\"></xref> class that is empty and has the specified initial capacity.","nodes":[{"pos":[0,148],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> class that is empty and has the specified initial capacity.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\"></xref> class that is empty and has the specified initial capacity."}],"pos":[52268,52417],"yaml":true},{"content":"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.  \n  \n The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.  \n  \n This constructor is an O(*n*) operation, where *n* is `capacity`.","nodes":[{"pos":[0,307],"content":"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,307],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can hold.","pos":[0,148],"source":"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[149,307],"source":" As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[314,529],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[0,215],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>."}]},{"pos":[536,860],"content":"The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.","pos":[0,324],"nodes":[{"content":"The capacity can be decreased by calling the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly.","pos":[0,202],"source":"The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly."},{"content":"Decreasing the capacity reallocates memory and copies all the elements in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[203,324],"source":" Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>."}]}]},{"pos":[867,932],"content":"This constructor is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">`capacity`</ph>.","source":"This constructor is an O(*n*) operation, where *n* is `capacity`."}],"pos":[52428,53369],"yaml":true,"extradata":"MT"},{"content":"The number of elements that the new list can initially store.","nodes":[{"pos":[0,61],"content":"The number of elements that the new list can initially store.","nodes":[{"content":"The number of elements that the new list can initially store.","pos":[0,61]}]}],"pos":[54292,54354],"yaml":true},{"content":"<code>capacity</code> is less than 0.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than 0.","source":"<code>capacity</code> is less than 0."}],"pos":[54535,54573],"yaml":true},{"content":"Adds an object to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,88],"content":"Adds an object to the end of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Adds an object to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[55993,56082],"yaml":true},{"content":"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value for reference types and allows duplicate elements.","source":"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements."},{"pos":[132,470],"content":"If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> already equals <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[0,338],"source":"If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."}]},{"pos":[477,811],"content":"If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is less than <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(1) operation.","pos":[0,157],"source":"If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, this method becomes an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","pos":[158,334],"source":" If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}]}],"pos":[56093,56911],"yaml":true,"extradata":"MT"},{"content":"The object to be added to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,141],"content":"The object to be added to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The object to be added to the end of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,96],"source":"The object to be added to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[97,141],"source":" The value can be `null` for reference types."}]}],"pos":[59029,59171],"yaml":true},{"content":"Adds the elements of the specified collection to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,119],"content":"Adds the elements of the specified collection to the end of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Adds the elements of the specified collection to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[60848,60968],"yaml":true},{"content":"The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.  \n  \n If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \n  \n If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,107],"content":"The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The order of the elements in the collection is preserved in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[0,107],"source":"The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>."}]},{"pos":[114,598],"content":"If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.","nodes":[{"content":"If the new <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (the current <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.","pos":[0,484],"source":"If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added."}]},{"pos":[605,1081],"content":"If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can accommodate the new elements without increasing the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph4\">n</ph><ept id=\"p2\">*</ept> is the number of elements to be added.","pos":[0,246],"source":"If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added."},{"content":"If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept><ph id=\"ph2\"> + </ph><bpt id=\"p2\">*</bpt>m<ept id=\"p2\">*</ept>) operation, where <bpt id=\"p3\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p3\">*</ept> is the number of elements to be added and <bpt id=\"p4\">*</bpt>m<ept id=\"p4\">*</ept> is <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","pos":[247,476],"source":" If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>."}]}],"pos":[60979,62067],"yaml":true,"extradata":"MT"},{"content":"The collection whose elements should be added to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type.","nodes":[{"pos":[0,248],"content":"The collection whose elements should be added to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type.","nodes":[{"content":"The collection whose elements should be added to the end of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,119],"source":"The collection whose elements should be added to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The collection itself cannot be <ph id=\"ph1\">`null`</ph>, but it can contain elements that are <ph id=\"ph2\">`null`</ph>, if type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a reference type.","pos":[120,248],"source":" The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type."}]}],"pos":[63161,63410],"yaml":true},{"content":"<code>collection</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>collection</code> is `null`."}],"pos":[63582,63617],"yaml":true},{"content":"Returns a read-only <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> wrapper for the current collection.","nodes":[{"pos":[0,128],"content":"Returns a read-only <ph id=\"ph1\">&lt;xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> wrapper for the current collection.","source":"Returns a read-only <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> wrapper for the current collection."}],"pos":[65064,65193],"yaml":true},{"content":"To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper. A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection. However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,393],"content":"To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper. A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection. However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.","nodes":[{"content":"To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper. A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection. However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.","pos":[0,393],"nodes":[{"content":"To prevent any modifications to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, expose it only through this wrapper.","pos":[0,123],"source":"To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper."},{"content":"A  <ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> object does not expose methods that modify the collection.","pos":[124,246],"source":" A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection."},{"content":"However, if changes are made to the underlying <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, the read-only collection reflects those changes.","pos":[247,393],"source":" However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes."}]}]},{"pos":[400,433],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[65204,65642],"yaml":true,"extradata":"MT"},{"content":"An object that acts as a read-only wrapper around the current <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,117],"content":"An object that acts as a read-only wrapper around the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"An object that acts as a read-only wrapper around the current <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[67006,67124],"yaml":true},{"content":"Searches the entire sorted <xref href=\"System.Collections.Generic.List`1\"></xref> for an element using the default comparer and returns the zero-based index of the element.","nodes":[{"pos":[0,172],"content":"Searches the entire sorted <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> for an element using the default comparer and returns the zero-based index of the element.","source":"Searches the entire sorted <xref href=\"System.Collections.Generic.List`1\"></xref> for an element using the default comparer and returns the zero-based index of the element."}],"pos":[68553,68726],"yaml":true},{"content":"This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements. The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \n  \n The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  \n  \n Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.  \n  \n If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \n  \n If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.  \n  \n This method is an O(log *n*) operation, where *n* is the number of elements in the range.","nodes":[{"pos":[0,753],"content":"This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements. The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.","nodes":[{"content":"This method uses the default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> for type <ph id=\"ph2\">`T`</ph> to determine the order of list elements.","pos":[0,174],"source":"This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> property checks whether type <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.","pos":[175,401],"source":" The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> interface.","pos":[403,569],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface."},{"content":"If type <ph id=\"ph1\">`T`</ph> does not implement either interface, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[571,753],"source":"  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>."}]},{"pos":[760,907],"content":"The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.","pos":[0,147],"source":"The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect."}]},{"pos":[914,1133],"content":"Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.","nodes":[{"content":"Comparing <ph id=\"ph1\">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph> generic interface.","pos":[0,150],"source":"Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface."},{"content":"When sorting, <ph id=\"ph1\">`null`</ph> is considered to be less than any other object.","pos":[151,219],"source":" When sorting, `null` is considered to be less than any other object."}]},{"pos":[1140,1368],"content":"If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","pos":[0,228],"source":"If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one."}]},{"pos":[1375,1808],"content":"If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.","nodes":[{"content":"If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.","pos":[0,433],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.","pos":[0,126],"source":"If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer."},{"content":"You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.","pos":[127,278]},{"content":"When inserting the value into the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.","pos":[279,433],"source":" When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order."}]}]},{"pos":[1815,1904],"content":"This method is an O(log <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the number of elements in the range.","source":"This method is an O(log *n*) operation, where *n* is the number of elements in the range."}],"pos":[68737,70654],"yaml":true,"extradata":"MT"},{"content":"The object to locate. The value can be `null` for reference types.","nodes":[{"pos":[0,66],"content":"The object to locate. The value can be `null` for reference types.","nodes":[{"content":"The object to locate.","pos":[0,21]},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[22,66],"source":" The value can be `null` for reference types."}]}],"pos":[72312,72379],"yaml":true},{"content":"The zero-based index of <code>item</code> in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.","nodes":[{"pos":[0,396],"content":"The zero-based index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the sorted <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">item</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">item</ph><ept id=\"p3\">&lt;/code&gt;</ept> or, if there is no larger element, the bitwise complement of <ph id=\"ph5\">&lt;xref href=\"System.Collections.Generic.List`1.Count\"&gt;&lt;/xref&gt;</ph>.","source":"The zero-based index of <code>item</code> in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."}],"pos":[72435,72832],"yaml":true},{"content":"The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.","nodes":[{"pos":[0,266],"content":"The default comparer <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph> cannot find an implementation of the <ph id=\"ph2\">&lt;xref href=\"System.IComparable`1\"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id=\"ph3\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface for type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>."}],"pos":[73016,73283],"yaml":true},{"content":"Searches the entire sorted <xref href=\"System.Collections.Generic.List`1\"></xref> for an element using the specified comparer and returns the zero-based index of the element.","nodes":[{"pos":[0,174],"content":"Searches the entire sorted <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.","source":"Searches the entire sorted <xref href=\"System.Collections.Generic.List`1\"></xref> for an element using the specified comparer and returns the zero-based index of the element."}],"pos":[74922,75097],"yaml":true},{"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>.  \n  \n The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  \n  \n Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.  \n  \n If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \n  \n If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.  \n  \n This method is an O(log *n*) operation, where *n* is the number of elements in the range.","nodes":[{"pos":[0,201],"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.","nodes":[{"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.","pos":[0,201],"nodes":[{"content":"The comparer customizes how the elements are compared.","pos":[0,54]},{"content":"For example, you can use a <ph id=\"ph1\">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.","pos":[55,201],"source":" For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches."}]}]},{"pos":[208,417],"content":"If <ph id=\"ph1\">`comparer`</ph> is provided, the elements of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are compared to the specified value using the specified <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.","source":"If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation."},{"pos":[424,1032],"content":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>.","nodes":[{"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph4\">`T`</ph> implements the <ph id=\"ph5\">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.","pos":[0,259],"source":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> interface.","pos":[261,427],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface."},{"content":"If type <ph id=\"ph1\">`T`</ph> does not implement either interface, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> throws <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[429,608],"source":"  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>."}]},{"pos":[1039,1186],"content":"The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.","pos":[0,147],"source":"The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect."}]},{"pos":[1193,1412],"content":"Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.","nodes":[{"content":"Comparing <ph id=\"ph1\">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph> generic interface.","pos":[0,150],"source":"Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface."},{"content":"When sorting, <ph id=\"ph1\">`null`</ph> is considered to be less than any other object.","pos":[151,219],"source":" When sorting, `null` is considered to be less than any other object."}]},{"pos":[1419,1647],"content":"If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","pos":[0,228],"source":"If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one."}]},{"pos":[1654,2087],"content":"If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.","nodes":[{"content":"If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.","pos":[0,433],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.","pos":[0,126],"source":"If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer."},{"content":"You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.","pos":[127,278]},{"content":"When inserting the value into the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.","pos":[279,433],"source":" When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order."}]}]},{"pos":[2094,2183],"content":"This method is an O(log <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the number of elements in the range.","source":"This method is an O(log *n*) operation, where *n* is the number of elements in the range."}],"pos":[75108,77308],"yaml":true,"extradata":"MT"},{"content":"The object to locate. The value can be `null` for reference types.","nodes":[{"pos":[0,66],"content":"The object to locate. The value can be `null` for reference types.","nodes":[{"content":"The object to locate.","pos":[0,21]},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[22,66],"source":" The value can be `null` for reference types."}]}],"pos":[79639,79706],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing elements.","source":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements."},{"pos":[117,121],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[128,230],"content":"<ph id=\"ph1\">`null`</ph> to use the default comparer <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph>.","source":"`null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>."}],"pos":[79795,80036],"yaml":true},{"content":"The zero-based index of <code>item</code> in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.","nodes":[{"pos":[0,396],"content":"The zero-based index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the sorted <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">item</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">item</ph><ept id=\"p3\">&lt;/code&gt;</ept> or, if there is no larger element, the bitwise complement of <ph id=\"ph5\">&lt;xref href=\"System.Collections.Generic.List`1.Count\"&gt;&lt;/xref&gt;</ph>.","source":"The zero-based index of <code>item</code> in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."}],"pos":[80092,80489],"yaml":true},{"content":"<code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.","nodes":[{"pos":[0,303],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and the default comparer <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph> cannot find an implementation of the <ph id=\"ph4\">&lt;xref href=\"System.IComparable`1\"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id=\"ph5\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface for type <ph id=\"ph6\">&lt;code&gt;T&lt;/code&gt;</ph>.","source":"<code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>."}],"pos":[80673,80977],"yaml":true},{"content":"Searches a range of elements in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref> for an element using the specified comparer and returns the zero-based index of the element.","nodes":[{"pos":[0,190],"content":"Searches a range of elements in the sorted <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.","source":"Searches a range of elements in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref> for an element using the specified comparer and returns the zero-based index of the element."}],"pos":[82736,82927],"yaml":true},{"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>.  \n  \n The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  \n  \n Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.  \n  \n If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \n  \n If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.  \n  \n This method is an O(log *n*) operation, where *n* is the number of elements in the range.","nodes":[{"pos":[0,201],"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.","nodes":[{"content":"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.","pos":[0,201],"nodes":[{"content":"The comparer customizes how the elements are compared.","pos":[0,54]},{"content":"For example, you can use a <ph id=\"ph1\">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.","pos":[55,201],"source":" For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches."}]}]},{"pos":[208,417],"content":"If <ph id=\"ph1\">`comparer`</ph> is provided, the elements of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are compared to the specified value using the specified <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.","source":"If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation."},{"pos":[424,1032],"content":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>.","nodes":[{"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph4\">`T`</ph> implements the <ph id=\"ph5\">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.","pos":[0,259],"source":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> interface.","pos":[261,427],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface."},{"content":"If type <ph id=\"ph1\">`T`</ph> does not implement either interface, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> throws <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[429,608],"source":"  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>."}]},{"pos":[1039,1186],"content":"The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.","pos":[0,147],"source":"The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect."}]},{"pos":[1193,1412],"content":"Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.","nodes":[{"content":"Comparing <ph id=\"ph1\">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph> generic interface.","pos":[0,150],"source":"Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface."},{"content":"When sorting, <ph id=\"ph1\">`null`</ph> is considered to be less than any other object.","pos":[151,219],"source":" When sorting, `null` is considered to be less than any other object."}]},{"pos":[1419,1647],"content":"If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.","pos":[0,228],"source":"If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one."}]},{"pos":[1654,2087],"content":"If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.","nodes":[{"content":"If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.","pos":[0,433],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.","pos":[0,126],"source":"If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer."},{"content":"You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.","pos":[127,278]},{"content":"When inserting the value into the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.","pos":[279,433],"source":" When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order."}]}]},{"pos":[2094,2183],"content":"This method is an O(log <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the number of elements in the range.","source":"This method is an O(log *n*) operation, where *n* is the number of elements in the range."}],"pos":[82938,85138],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the range to search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the range to search.","nodes":[{"content":"The zero-based starting index of the range to search.","pos":[0,53]}]}],"pos":[87625,87679],"yaml":true},{"content":"The length of the range to search.","nodes":[{"pos":[0,34],"content":"The length of the range to search.","nodes":[{"content":"The length of the range to search.","pos":[0,34]}]}],"pos":[87739,87774],"yaml":true},{"content":"The object to locate. The value can be `null` for reference types.","nodes":[{"pos":[0,66],"content":"The object to locate. The value can be `null` for reference types.","nodes":[{"content":"The object to locate.","pos":[0,21]},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[22,66],"source":" The value can be `null` for reference types."}]}],"pos":[87822,87889],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>.","nodes":[{"pos":[0,216],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing elements, or <ph id=\"ph2\">`null`</ph> to use the default comparer <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>."}],"pos":[87978,88195],"yaml":true},{"content":"The zero-based index of <code>item</code> in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.","nodes":[{"pos":[0,396],"content":"The zero-based index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the sorted <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">item</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">item</ph><ept id=\"p3\">&lt;/code&gt;</ept> or, if there is no larger element, the bitwise complement of <ph id=\"ph5\">&lt;xref href=\"System.Collections.Generic.List`1.Count\"&gt;&lt;/xref&gt;</ph>.","source":"The zero-based index of <code>item</code> in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."}],"pos":[88251,88648],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,86],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."}],"pos":[88836,88929],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not denote a valid range in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[89023,89156],"yaml":true},{"content":"<code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.","nodes":[{"pos":[0,303],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and the default comparer <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph> cannot find an implementation of the <ph id=\"ph4\">&lt;xref href=\"System.IComparable`1\"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id=\"ph5\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface for type <ph id=\"ph6\">&lt;code&gt;T&lt;/code&gt;</ph>.","source":"<code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>."}],"pos":[89266,89570],"yaml":true},{"content":"Gets or sets the total number of elements the internal data structure can hold without resizing.","nodes":[{"pos":[0,96],"content":"Gets or sets the total number of elements the internal data structure can hold without resizing.","nodes":[{"content":"Gets or sets the total number of elements the internal data structure can hold without resizing.","pos":[0,96]}]}],"pos":[91001,91098],"yaml":true},{"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.  \n  \n <xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \n  \n If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value. When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is an O(*n*) operation, where *n* is the new capacity.","nodes":[{"pos":[0,326],"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can store before resizing is required, whereas <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[0,326],"source":"<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>."}]},{"pos":[333,752],"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","nodes":[{"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,419],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is always greater than or equal to <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","pos":[0,142],"source":"<xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> exceeds <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[143,419],"source":" If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[759,1324],"content":"If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value. When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.","nodes":[{"content":"If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value. When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.","pos":[0,565],"nodes":[{"content":"If the capacity is significantly larger than the count and you want to reduce the memory used by the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>,  you can  decrease capacity by calling the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly to a lower value.","pos":[0,362],"source":"If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value."},{"content":"When the value of <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.","pos":[363,565],"source":" When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied."}]}]},{"pos":[1331,1466],"content":"Retrieving the value of this property is an O(1) operation; setting the property is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the new capacity.","source":"Retrieving the value of this property is an O(1) operation; setting the property is an O(*n*) operation, where *n* is the new capacity."}],"pos":[91109,92584],"yaml":true,"extradata":"MT"},{"content":"The number of elements that the <xref href=\"System.Collections.Generic.List`1\"></xref> can contain before resizing is required.","nodes":[{"pos":[0,127],"content":"The number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> can contain before resizing is required.","source":"The number of elements that the <xref href=\"System.Collections.Generic.List`1\"></xref> can contain before resizing is required."}],"pos":[94956,95084],"yaml":true},{"content":"<xref href=\"System.Collections.Generic.List`1.Capacity\"></xref> is set to a value that is less than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1.Capacity\"&gt;&lt;/xref&gt;</ph> is set to a value that is less than <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Collections.Generic.List`1.Capacity\"></xref> is set to a value that is less than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."}],"pos":[95268,95430],"yaml":true},{"content":"There is not enough memory available on the system.","nodes":[{"pos":[0,51],"content":"There is not enough memory available on the system.","nodes":[{"content":"There is not enough memory available on the system.","pos":[0,51]}]}],"pos":[95530,95582],"yaml":true},{"content":"Removes all elements from the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,85],"content":"Removes all elements from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Removes all elements from the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[96999,97085],"yaml":true},{"content":"<xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.  \n  \n <xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,147],"content":"<xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is set to 0, and references to other objects from elements of the collection are also released.","pos":[0,147],"source":"<xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released."}]},{"pos":[154,734],"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.","nodes":[{"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.","pos":[0,580],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> remains unchanged.","pos":[0,73],"source":"<xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged."},{"content":"To reset the capacity of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, call the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or set the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property directly.","pos":[74,304],"source":" To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly."},{"content":"Decreasing the capacity reallocates memory and copies all the elements in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[305,426],"source":" Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>."},{"content":"Trimming an empty <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sets the capacity of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to the default capacity.","pos":[427,580],"source":" Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity."}]}]},{"pos":[741,842],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[97096,97945],"yaml":true,"extradata":"MT"},{"content":"Determines whether an element is in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,95],"content":"Determines whether an element is in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether an element is in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[100463,100559],"yaml":true},{"content":"This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref:System.IEquatable%601.Equals%2A?displayProperty=fullName> method for `T` (the type of values in the list).  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,233],"content":"This method determines equality by using the default equality comparer, as defined by the object's implementation of the <ph id=\"ph1\">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=fullName&gt;</ph> method for <ph id=\"ph2\">`T`</ph> (the type of values in the list).","source":"This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref:System.IEquatable%601.Equals%2A?displayProperty=fullName> method for `T` (the type of values in the list)."},{"pos":[240,390],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[100570,100965],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,128],"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The object to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[84,128],"source":" The value can be `null` for reference types."}]}],"pos":[102547,102676],"yaml":true},{"content":"`true` if <code>item</code> is found in the <xref href=\"System.Collections.Generic.List`1\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,119],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> is found in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>item</code> is found in the <xref href=\"System.Collections.Generic.List`1\"></xref>; otherwise, `false`."}],"pos":[102734,102856],"yaml":true},{"content":"Converts the elements in the current <xref href=\"System.Collections.Generic.List`1\"></xref> to another type, and returns a list containing the converted elements.","nodes":[{"pos":[0,162],"content":"Converts the elements in the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> to another type, and returns a list containing the converted elements.","source":"Converts the elements in the current <xref href=\"System.Collections.Generic.List`1\"></xref> to another type, and returns a list containing the converted elements."}],"pos":[104550,104713],"yaml":true},{"content":"The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.  \n  \n The current <xref:System.Collections.Generic.List%601> remains unchanged.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,334],"content":"The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.","pos":[0,334],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Converter%602&gt;</ph> is a delegate to a method that converts an object to the target type.","pos":[0,101],"source":"The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Converter%602&gt;</ph> delegate, and the converted elements are saved in the new <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[103,334],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>."}]}]},{"pos":[341,414],"content":"The current <xref:System.Collections.Generic.List%601> remains unchanged.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> remains unchanged.","pos":[0,73],"source":"The current <xref:System.Collections.Generic.List%601> remains unchanged."}]},{"pos":[421,522],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[104724,105253],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Converter`2\"></xref> delegate that converts each element from one type to another type.","nodes":[{"pos":[0,108],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Converter`2\"&gt;&lt;/xref&gt;</ph> delegate that converts each element from one type to another type.","source":"A <xref href=\"System.Converter`2\"></xref> delegate that converts each element from one type to another type."}],"pos":[106601,106710],"yaml":true},{"content":"The type of the elements of the target array.","nodes":[{"pos":[0,45],"content":"The type of the elements of the target array.","nodes":[{"content":"The type of the elements of the target array.","pos":[0,45]}]}],"pos":[106767,106813],"yaml":true},{"content":"A <xref href=\"System.Collections.Generic.List`1\"></xref> of the target type containing the converted elements from the current <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,182],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> of the target type containing the converted elements from the current <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Collections.Generic.List`1\"></xref> of the target type containing the converted elements from the current <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[106897,107080],"yaml":true},{"content":"<code>converter</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;converter&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>converter</code> is `null`."}],"pos":[107257,107291],"yaml":true},{"content":"Copies the entire <xref href=\"System.Collections.Generic.List`1\"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.","nodes":[{"pos":[0,164],"content":"Copies the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> to a compatible one-dimensional array, starting at the specified index of the target array.","source":"Copies the entire <xref href=\"System.Collections.Generic.List`1\"></xref> to a compatible one-dimensional array, starting at the specified index of the target array."}],"pos":[108497,108662],"yaml":true},{"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,91],"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph> to copy the elements.","pos":[0,91],"source":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."}]},{"pos":[98,255],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The elements are copied to the <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[0,157],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>."}]},{"pos":[262,363],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[108673,109043],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,230],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,161],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[162,230],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[110517,110748],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[110813,110881],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[111051,111081],"yaml":true},{"content":"<code>arrayIndex</code> is less than 0.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than 0.","source":"<code>arrayIndex</code> is less than 0."}],"pos":[111195,111235],"yaml":true},{"content":"The number of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,206],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arrayIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."}],"pos":[111329,111536],"yaml":true},{"content":"Copies a range of elements from the <xref href=\"System.Collections.Generic.List`1\"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.","nodes":[{"pos":[0,182],"content":"Copies a range of elements from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> to a compatible one-dimensional array, starting at the specified index of the target array.","source":"Copies a range of elements from the <xref href=\"System.Collections.Generic.List`1\"></xref> to a compatible one-dimensional array, starting at the specified index of the target array."}],"pos":[113166,113349],"yaml":true},{"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n*) operation, where *n* is `count`.","nodes":[{"pos":[0,91],"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph> to copy the elements.","pos":[0,91],"source":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."}]},{"pos":[98,255],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The elements are copied to the <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[0,157],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>."}]},{"pos":[262,319],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">`count`</ph>.","source":"This method is an O(*n*) operation, where *n* is `count`."}],"pos":[113360,113686],"yaml":true,"extradata":"MT"},{"content":"The zero-based index in the source <xref href=\"System.Collections.Generic.List`1\"></xref> at which copying begins.","nodes":[{"pos":[0,114],"content":"The zero-based index in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> at which copying begins.","source":"The zero-based index in the source <xref href=\"System.Collections.Generic.List`1\"></xref> at which copying begins."}],"pos":[115191,115306],"yaml":true},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,230],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,161],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[162,230],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[115357,115588],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[115653,115721],"yaml":true},{"content":"The number of elements to copy.","nodes":[{"pos":[0,31],"content":"The number of elements to copy.","nodes":[{"content":"The number of elements to copy.","pos":[0,31]}]}],"pos":[115781,115813],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[115983,116013],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>arrayIndex</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,91],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than 0.","source":"<code>arrayIndex</code> is less than 0."},{"pos":[98,102],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[109,143],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."}],"pos":[116127,116281],"yaml":true},{"content":"<code>index</code> is equal to or greater than the <xref href=\"System.Collections.Generic.List`1.Count\"></xref> of the source <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n The number of elements from <code>index</code> to the end of the source <xref href=\"System.Collections.Generic.List`1\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,181],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1.Count\"&gt;&lt;/xref&gt;</ph> of the source <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is equal to or greater than the <xref href=\"System.Collections.Generic.List`1.Count\"></xref> of the source <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"pos":[188,192],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[199,440],"content":"The number of elements from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the source <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">arrayIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">array</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The number of elements from <code>index</code> to the end of the source <xref href=\"System.Collections.Generic.List`1\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."}],"pos":[116375,116828],"yaml":true},{"content":"Copies the entire <xref href=\"System.Collections.Generic.List`1\"></xref> to a compatible one-dimensional array, starting at the beginning of the target array.","nodes":[{"pos":[0,158],"content":"Copies the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> to a compatible one-dimensional array, starting at the beginning of the target array.","source":"Copies the entire <xref href=\"System.Collections.Generic.List`1\"></xref> to a compatible one-dimensional array, starting at the beginning of the target array."}],"pos":[118278,118437],"yaml":true},{"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,91],"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph> to copy the elements.","pos":[0,91],"source":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."}]},{"pos":[98,255],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The elements are copied to the <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[0,157],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>."}]},{"pos":[262,363],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[118448,118818],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,230],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,161],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[162,230],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[120276,120507],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[120677,120707],"yaml":true},{"content":"The number of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref> is greater than the number of elements that the destination <code>array</code> can contain.","nodes":[{"pos":[0,183],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> is greater than the number of elements that the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> can contain.","source":"The number of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref> is greater than the number of elements that the destination <code>array</code> can contain."}],"pos":[120801,120985],"yaml":true},{"content":"Gets the number of elements contained in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,100],"content":"Gets the number of elements contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the number of elements contained in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[122398,122499],"yaml":true},{"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required. <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.  \n  \n <xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,318],"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required. <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required. <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.","pos":[0,318],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can store before resizing is required.","pos":[0,171],"source":"<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[172,318],"source":" <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>."}]}]},{"pos":[325,744],"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","nodes":[{"content":"<xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,419],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is always greater than or equal to <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","pos":[0,142],"source":"<xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> exceeds <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.","pos":[143,419],"source":" If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[751,810],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[122510,123327],"yaml":true,"extradata":"MT"},{"content":"The number of elements contained in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,95],"content":"The number of elements contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements contained in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[125070,125166],"yaml":true},{"content":"Determines whether the <xref href=\"System.Collections.Generic.List`1\"></xref> contains elements that match the conditions defined by the specified predicate.","nodes":[{"pos":[0,157],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> contains elements that match the conditions defined by the specified predicate.","source":"Determines whether the <xref href=\"System.Collections.Generic.List`1\"></xref> contains elements that match the conditions defined by the specified predicate."}],"pos":[126761,126919],"yaml":true},{"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,342],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate, and processing is stopped when a match is found.","pos":[154,342],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found."}]},{"pos":[349,499],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[126930,127434],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the elements to search for.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the elements to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the elements to search for."}],"pos":[130204,130316],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Generic.List`1\"></xref> contains one or more elements that match the conditions defined by the specified predicate; otherwise, `false`.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.Generic.List`1\"></xref> contains one or more elements that match the conditions defined by the specified predicate; otherwise, `false`."}],"pos":[130374,130557],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[130727,130757],"yaml":true},{"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,194],"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[132270,132465],"yaml":true},{"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element.  Processing is stopped when a match is found.  \n  \n> [!IMPORTANT]\n>  When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,471],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element.  Processing is stopped when a match is found.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate, moving forward in the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, starting with the first element and ending with the last element.","pos":[154,425],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element."},{"content":"Processing is stopped when a match is found.","pos":[427,471]}]},{"pos":[479,926],"content":"[!IMPORTANT]\n When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.","leadings":["","> "],"nodes":[{"content":" When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.","pos":[13,445],"nodes":[{"content":"When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.","pos":[1,126]},{"content":"Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.","pos":[127,299]},{"content":"If the default value satisfies the search predicate, use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method instead.","pos":[300,432],"source":" If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead."}]}]},{"pos":[933,1083],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[132476,133567],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the element to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for."}],"pos":[136725,136836],"yaml":true},{"content":"The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.","nodes":[{"pos":[0,145],"content":"The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>."}],"pos":[136881,137027],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[137195,137225],"yaml":true},{"content":"Retrieves all the elements that match the conditions defined by the specified predicate.","nodes":[{"pos":[0,88],"content":"Retrieves all the elements that match the conditions defined by the specified predicate.","nodes":[{"content":"Retrieves all the elements that match the conditions defined by the specified predicate.","pos":[0,88]}]}],"pos":[138756,138845],"yaml":true},{"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,406],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate, and the elements that match the conditions are saved in the returned <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[154,406],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>."}]},{"pos":[413,563],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[138856,139424],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the elements to search for.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the elements to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the elements to search for."}],"pos":[142059,142171],"yaml":true},{"content":"A <xref href=\"System.Collections.Generic.List`1\"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,232],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Collections.Generic.List`1\"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[142248,142481],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[142652,142682],"yaml":true},{"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,218],"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[144225,144444],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:  \n  \n```csharp  \npublic bool methodName(T obj)  \n```  \n  \n```vb  \nPublic Function methodName(obj As T) As Boolean  \n```  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,128],"content":"The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at the first element and ending at the last element.","pos":[0,128],"source":"The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element."}]},{"pos":[135,460],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate.","pos":[154,293],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate."},{"content":"The delegate has the signature:","pos":[294,325]}]},{"pos":[587,737],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[144455,145207],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the element to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for."}],"pos":[146798,146909],"yaml":true},{"content":"The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.","nodes":[{"pos":[0,142],"content":"The zero-based index of the first occurrence of an element that matches the conditions defined by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found; otherwise, –1.","source":"The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1."}],"pos":[146965,147108],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[147281,147311],"yaml":true},{"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the specified index to the last element.","nodes":[{"pos":[0,294],"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that extends from the specified index to the last element.","source":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the specified index to the last element."}],"pos":[148914,149209],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at the last element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:  \n  \n```csharp  \npublic bool methodName(T obj)  \n```  \n  \n```vb  \nPublic Function methodName(obj As T) As Boolean  \n```  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `startIndex` to the end of the <xref:System.Collections.Generic.List%601>.","nodes":[{"pos":[0,123],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id=\"ph2\">`startIndex`</ph> and ending at the last element.","source":"The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at the last element."},{"pos":[130,455],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate.","pos":[154,293],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate."},{"content":"The delegate has the signature:","pos":[294,325]}]},{"pos":[582,782],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the number of elements from <ph id=\"ph3\">`startIndex`</ph> to the end of the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `startIndex` to the end of the <xref:System.Collections.Generic.List%601>."}],"pos":[149220,150017],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[151701,151746],"yaml":true},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the element to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for."}],"pos":[151812,151923],"yaml":true},{"content":"The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.","nodes":[{"pos":[0,142],"content":"The zero-based index of the first occurrence of an element that matches the conditions defined by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found; otherwise, –1.","source":"The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1."}],"pos":[151979,152122],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[152295,152325],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[152439,152565],"yaml":true},{"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that starts at the specified index and contains the specified number of elements.","nodes":[{"pos":[0,317],"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that starts at the specified index and contains the specified number of elements.","source":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that starts at the specified index and contains the specified number of elements."}],"pos":[154228,154546],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:  \n  \n```csharp  \npublic bool methodName(T obj)  \n```  \n  \n```vb  \nPublic Function methodName(obj As T) As Boolean  \n```  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.","nodes":[{"pos":[0,170],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id=\"ph2\">`startIndex`</ph> and ending at <ph id=\"ph3\">`startIndex`</ph> plus <ph id=\"ph4\">`count`</ph> minus 1, if <ph id=\"ph5\">`count`</ph> is greater than 0.","source":"The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0."},{"pos":[177,502],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate.","pos":[154,293],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate."},{"content":"The delegate has the signature:","pos":[294,325]}]},{"pos":[629,735],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">`count`</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`."}],"pos":[154557,155307],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[157046,157091],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[157151,157200],"yaml":true},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the element to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for."}],"pos":[157266,157377],"yaml":true},{"content":"The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.","nodes":[{"pos":[0,142],"content":"The zero-based index of the first occurrence of an element that matches the conditions defined by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found; otherwise, –1.","source":"The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1."}],"pos":[157433,157576],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[157749,157779],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"pos":[132,136],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[143,177],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."},{"pos":[184,188],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[195,335],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[157893,158243],"yaml":true},{"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,193],"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[159780,159974],"yaml":true},{"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element.  Processing is stopped when a match is found.  \n  \n> [!IMPORTANT]\n>  When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,472],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element.  Processing is stopped when a match is found.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate, moving backward in the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, starting with the last element and ending with the first element.","pos":[154,426],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element."},{"content":"Processing is stopped when a match is found.","pos":[428,472]}]},{"pos":[480,931],"content":"[!IMPORTANT]\n When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.","leadings":["","> "],"nodes":[{"content":" When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.","pos":[13,449],"nodes":[{"content":"When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.","pos":[1,126]},{"content":"Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.","pos":[127,299]},{"content":"If the default value satisfies the search predicate, use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.FindLastIndex%2A&gt;</ph> method instead.","pos":[300,436],"source":" If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead."}]}]},{"pos":[938,1088],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[159985,161081],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the element to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for."}],"pos":[163684,163795],"yaml":true},{"content":"The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.","nodes":[{"pos":[0,144],"content":"The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>."}],"pos":[163840,163985],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[164157,164187],"yaml":true},{"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,217],"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[165754,165972],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,129],"content":"The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at the last element and ending at the first element.","pos":[0,129],"source":"The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element."}]},{"pos":[136,429],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate.","pos":[154,293],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate."}]},{"pos":[436,586],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[165983,166576],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the element to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for."}],"pos":[169186,169297],"yaml":true},{"content":"The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.","nodes":[{"pos":[0,141],"content":"The zero-based index of the last occurrence of an element that matches the conditions defined by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found; otherwise, –1.","source":"The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1."}],"pos":[169353,169495],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[169672,169702],"yaml":true},{"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the first element to the specified index.","nodes":[{"pos":[0,294],"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that extends from the first element to the specified index.","source":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the first element to the specified index."}],"pos":[171329,171624],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at the first element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `startIndex`.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id=\"ph2\">`startIndex`</ph> and ending at the first element.","source":"The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at the first element."},{"pos":[132,425],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate.","pos":[154,293],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate."}]},{"pos":[432,638],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the number of elements from the beginning of the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to <ph id=\"ph4\">`startIndex`</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `startIndex`."}],"pos":[171635,172280],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[172447,172501],"yaml":true},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the element to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for."}],"pos":[172567,172678],"yaml":true},{"content":"The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.","nodes":[{"pos":[0,141],"content":"The zero-based index of the last occurrence of an element that matches the conditions defined by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found; otherwise, –1.","source":"The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1."}],"pos":[172734,172876],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[173053,173083],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[173197,173323],"yaml":true},{"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that contains the specified number of elements and ends at the specified index.","nodes":[{"pos":[0,314],"content":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that contains the specified number of elements and ends at the specified index.","source":"Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that contains the specified number of elements and ends at the specified index."}],"pos":[175010,175325],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.","nodes":[{"pos":[0,171],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id=\"ph2\">`startIndex`</ph> and ending at <ph id=\"ph3\">`startIndex`</ph> minus <ph id=\"ph4\">`count`</ph> plus 1, if <ph id=\"ph5\">`count`</ph> is greater than 0.","source":"The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0."},{"pos":[178,471],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate.","pos":[154,293],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate."}]},{"pos":[478,584],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">`count`</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`."}],"pos":[175336,175927],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[178563,178617],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[178677,178726],"yaml":true},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the element to search for.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for."}],"pos":[178792,178903],"yaml":true},{"content":"The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.","nodes":[{"pos":[0,141],"content":"The zero-based index of the last occurrence of an element that matches the conditions defined by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found; otherwise, –1.","source":"The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1."}],"pos":[178959,179101],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[179278,179308],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"pos":[132,136],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[143,177],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."},{"pos":[184,188],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[195,335],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[179422,179772],"yaml":true},{"content":"Performs the specified action on each element of the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,108],"content":"Performs the specified action on each element of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Performs the specified action on each element of the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[181285,181394],"yaml":true},{"content":"The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.  \n  \n Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior.","nodes":[{"pos":[0,244],"content":"The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.","nodes":[{"content":"The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.","pos":[0,244],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Action%601&gt;</ph> is a delegate to a method that performs an action on the object passed to it.","pos":[0,106],"source":"The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Action%601&gt;</ph> delegate.","pos":[108,244],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate."}]}]},{"pos":[251,352],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."},{"pos":[359,495],"content":"Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior.","nodes":[{"content":"Modifying the underlying collection in the body of the <ph id=\"ph1\">&lt;xref:System.Action%601&gt;</ph> delegate is not supported and causes undefined behavior.","pos":[0,136],"source":"Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior."}]}],"pos":[181405,181907],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Action`1\"></xref> delegate to perform on each element of the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,139],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Action`1\"&gt;&lt;/xref&gt;</ph> delegate to perform on each element of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Action`1\"></xref> delegate to perform on each element of the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[182778,182918],"yaml":true},{"content":"<code>action</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;action&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>action</code> is `null`."}],"pos":[183089,183120],"yaml":true},{"content":"An element in the collection has been modified.","nodes":[{"pos":[0,47],"content":"An element in the collection has been modified.","nodes":[{"content":"An element in the collection has been modified.","pos":[0,47]}]}],"pos":[183230,183278],"yaml":true},{"content":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,103],"content":"Returns an enumerator that iterates through the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[184623,184727],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.  \n  \n The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called. <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,223],"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in C++, <ph id=\"ph3\">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,131],"source":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[132,223],"source":" Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[230,350],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[357,811],"content":"Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.","pos":[0,454],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"At this position, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> property is undefined.","pos":[84,193],"source":" At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined."},{"content":"Therefore, you must call the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>.","pos":[194,454],"source":" Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>."}]}]},{"pos":[818,1159],"content":"The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called. <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.","nodes":[{"content":"The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called. <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.","pos":[0,341],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> property returns the same object until <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> is called.","pos":[0,184],"source":"The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> to the next element.","pos":[185,341],"source":" <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element."}]}]},{"pos":[1166,1933],"content":"If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,259],"source":"If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[260,407],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> is undefined.","pos":[408,590],"source":" If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined."},{"content":"You cannot set <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.","pos":[591,767],"source":" You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead."}]},{"pos":[1940,2175],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2182,2572],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,390],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[155,260]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[262,390]}]}]},{"pos":[2579,2715],"content":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.","nodes":[{"content":"Default implementations of collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace are not synchronized.","pos":[0,136],"source":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized."}]},{"pos":[2722,2755],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[184738,187512],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Collections.Generic.List`1.Enumerator\"></xref> for the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1.Enumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Collections.Generic.List`1.Enumerator\"></xref> for the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[187703,187835],"yaml":true},{"content":"Creates a shallow copy of a range of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,115],"content":"Creates a shallow copy of a range of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a shallow copy of a range of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[189465,189581],"yaml":true},{"content":"A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection. The objects themselves are not copied. The references in the new list point to the same objects as the references in the original list.  \n  \n A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection. However, if the elements of the collection contain references to other objects, those objects are not copied. The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.  \n  \n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \n  \n This method is an O(*n*) operation, where *n* is `count`.","nodes":[{"pos":[0,282],"content":"A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection. The objects themselves are not copied. The references in the new list point to the same objects as the references in the original list.","nodes":[{"content":"A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection. The objects themselves are not copied. The references in the new list point to the same objects as the references in the original list.","pos":[0,282],"nodes":[{"content":"A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection.","pos":[0,146]},{"content":"The objects themselves are not copied.","pos":[147,185]},{"content":"The references in the new list point to the same objects as the references in the original list.","pos":[186,282]}]}]},{"pos":[289,659],"content":"A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection. However, if the elements of the collection contain references to other objects, those objects are not copied. The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.","nodes":[{"content":"A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection. However, if the elements of the collection contain references to other objects, those objects are not copied. The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.","pos":[0,370],"nodes":[{"content":"A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection.","pos":[0,119]},{"content":"However, if the elements of the collection contain references to other objects, those objects are not copied.","pos":[120,229]},{"content":"The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.","pos":[230,370]}]}]},{"pos":[666,792],"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","nodes":[{"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","pos":[0,126]}]},{"pos":[799,856],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">`count`</ph>.","source":"This method is an O(*n*) operation, where *n* is `count`."}],"pos":[189592,190457],"yaml":true,"extradata":"MT"},{"content":"The zero-based <xref href=\"System.Collections.Generic.List`1\"></xref> index at which the range starts.","nodes":[{"pos":[0,102],"content":"The zero-based <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> index at which the range starts.","source":"The zero-based <xref href=\"System.Collections.Generic.List`1\"></xref> index at which the range starts."}],"pos":[191552,191655],"yaml":true},{"content":"The number of elements in the range.","nodes":[{"pos":[0,36],"content":"The number of elements in the range.","nodes":[{"content":"The number of elements in the range.","pos":[0,36]}]}],"pos":[191715,191752],"yaml":true},{"content":"A shallow copy of a range of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,107],"content":"A shallow copy of a range of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"A shallow copy of a range of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[191829,191937],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,86],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."}],"pos":[192121,192214],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,144],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range of elements in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[192308,192453],"yaml":true},{"content":"Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the specified index to the last element.","nodes":[{"pos":[0,240],"content":"Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that extends from the specified index to the last element.","source":"Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the specified index to the last element."}],"pos":[193957,194198],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at the last element.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `index` to the end of the <xref:System.Collections.Generic.List%601>.","nodes":[{"pos":[0,118],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id=\"ph2\">`index`</ph> and ending at the last element.","source":"The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at the last element."},{"pos":[125,324],"content":"This method determines equality using the default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`T`</ph>, the type of values in the list.","source":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list."},{"pos":[331,526],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the number of elements from <ph id=\"ph3\">`index`</ph> to the end of the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `index` to the end of the <xref:System.Collections.Generic.List%601>."}],"pos":[194209,194742],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,128],"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The object to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[84,128],"source":" The value can be `null` for reference types."}]}],"pos":[196170,196299],"yaml":true},{"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","nodes":[{"pos":[0,80],"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","nodes":[{"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","pos":[0,80],"nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]},{"content":"0 (zero) is valid in an empty list.","pos":[45,80]}]}]}],"pos":[196359,196440],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from <code>index</code> to the last element, if found; otherwise, –1.","nodes":[{"pos":[0,239],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that extends from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept> to the last element, if found; otherwise, –1.","source":"The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from <code>index</code> to the last element, if found; otherwise, –1."}],"pos":[196496,196736],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[196919,197040],"yaml":true},{"content":"Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that starts at the specified index and contains the specified number of elements.","nodes":[{"pos":[0,263],"content":"Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that starts at the specified index and contains the specified number of elements.","source":"Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that starts at the specified index and contains the specified number of elements."}],"pos":[198604,198868],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at `index` plus `count` minus 1, if `count` is greater than 0.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.","nodes":[{"pos":[0,160],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id=\"ph2\">`index`</ph> and ending at <ph id=\"ph3\">`index`</ph> plus <ph id=\"ph4\">`count`</ph> minus 1, if <ph id=\"ph5\">`count`</ph> is greater than 0.","source":"The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at `index` plus `count` minus 1, if `count` is greater than 0."},{"pos":[167,366],"content":"This method determines equality using the default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`T`</ph>, the type of values in the list.","source":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list."},{"pos":[373,479],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">`count`</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`."}],"pos":[198879,199365],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,128],"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The object to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[84,128],"source":" The value can be `null` for reference types."}]}],"pos":[200804,200933],"yaml":true},{"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","nodes":[{"pos":[0,80],"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","nodes":[{"content":"The zero-based starting index of the search. 0 (zero) is valid in an empty list.","pos":[0,80],"nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]},{"content":"0 (zero) is valid in an empty list.","pos":[45,80]}]}]}],"pos":[200993,201074],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[201134,201183],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that starts at <code>index</code> and contains <code>count</code> number of elements, if found; otherwise, –1.","nodes":[{"pos":[0,267],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that starts at <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept> and contains <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> number of elements, if found; otherwise, –1.","source":"The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that starts at <code>index</code> and contains <code>count</code> number of elements, if found; otherwise, –1."}],"pos":[201239,201507],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"pos":[127,131],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[138,172],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,325],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[201690,202030],"yaml":true},{"content":"Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,164],"content":"Searches for the specified object and returns the zero-based index of the first occurrence within the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[203474,203639],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,128],"content":"The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at the first element and ending at the last element.","pos":[0,128],"source":"The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element."}]},{"pos":[135,334],"content":"This method determines equality using the default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`T`</ph>, the type of values in the list.","source":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list."},{"pos":[341,491],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[203650,204148],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,128],"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The object to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[84,128],"source":" The value can be `null` for reference types."}]}],"pos":[205565,205694],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>item</code> within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>, if found; otherwise, –1.","nodes":[{"pos":[0,164],"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the entire <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, if found; otherwise, –1.","source":"The zero-based index of the first occurrence of <code>item</code> within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>, if found; otherwise, –1."}],"pos":[205750,205915],"yaml":true},{"content":"Inserts an element into the <xref href=\"System.Collections.Generic.List`1\"></xref> at the specified index.","nodes":[{"pos":[0,106],"content":"Inserts an element into the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> at the specified index.","source":"Inserts an element into the <xref href=\"System.Collections.Generic.List`1\"></xref> at the specified index."}],"pos":[207485,207592],"yaml":true},{"content":"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, `item` is added to the end of <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value for reference types and allows duplicate elements.","source":"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements."},{"pos":[132,470],"content":"If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> already equals <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[0,338],"source":"If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."}]},{"pos":[477,626],"content":"If <ph id=\"ph1\">`index`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, <ph id=\"ph3\">`item`</ph> is added to the end of <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","source":"If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, `item` is added to the end of <xref:System.Collections.Generic.List%601>."},{"pos":[633,734],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[207603,208346],"yaml":true,"extradata":"MT"},{"content":"The zero-based index at which <code>item</code> should be inserted.","nodes":[{"pos":[0,67],"content":"The zero-based index at which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> should be inserted.","source":"The zero-based index at which <code>item</code> should be inserted."}],"pos":[210148,210216],"yaml":true},{"content":"The object to insert. The value can be `null` for reference types.","nodes":[{"pos":[0,66],"content":"The object to insert. The value can be `null` for reference types.","nodes":[{"content":"The object to insert.","pos":[0,21]},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[22,66],"source":" The value can be `null` for reference types."}]}],"pos":[210264,210331],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,148],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."}],"pos":[210513,210670],"yaml":true},{"content":"Inserts the elements of a collection into the <xref href=\"System.Collections.Generic.List`1\"></xref> at the specified index.","nodes":[{"pos":[0,124],"content":"Inserts the elements of a collection into the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> at the specified index.","source":"Inserts the elements of a collection into the <xref href=\"System.Collections.Generic.List`1\"></xref> at the specified index."}],"pos":[212357,212482],"yaml":true},{"content":"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \n  \n If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, the elements are added to the end of <xref:System.Collections.Generic.List%601>.  \n  \n The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value for reference types and allows duplicate elements.","source":"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements."},{"pos":[132,616],"content":"If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.","nodes":[{"content":"If the new <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (the current <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.","pos":[0,484],"source":"If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added."}]},{"pos":[623,779],"content":"If <ph id=\"ph1\">`index`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, the elements are added to the end of <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","source":"If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, the elements are added to the end of <xref:System.Collections.Generic.List%601>."},{"pos":[786,893],"content":"The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The order of the elements in the collection is preserved in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[0,107],"source":"The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>."}]},{"pos":[900,1053],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept><ph id=\"ph2\"> + </ph><bpt id=\"p2\">*</bpt>m<ept id=\"p2\">*</ept>) operation, where <bpt id=\"p3\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p3\">*</ept> is the number of elements to be added and <bpt id=\"p4\">*</bpt>m<ept id=\"p4\">*</ept> is <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[212493,213557],"yaml":true,"extradata":"MT"},{"content":"The zero-based index at which the new elements should be inserted.","nodes":[{"pos":[0,66],"content":"The zero-based index at which the new elements should be inserted.","nodes":[{"content":"The zero-based index at which the new elements should be inserted.","pos":[0,66]}]}],"pos":[214581,214648],"yaml":true},{"content":"The collection whose elements should be inserted into the <xref href=\"System.Collections.Generic.List`1\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type.","nodes":[{"pos":[0,242],"content":"The collection whose elements should be inserted into the <xref href=\"System.Collections.Generic.List`1\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type.","nodes":[{"content":"The collection whose elements should be inserted into the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,113],"source":"The collection whose elements should be inserted into the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The collection itself cannot be <ph id=\"ph1\">`null`</ph>, but it can contain elements that are <ph id=\"ph2\">`null`</ph>, if type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a reference type.","pos":[114,242],"source":" The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type."}]}],"pos":[214741,214984],"yaml":true},{"content":"<code>collection</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>collection</code> is `null`."}],"pos":[215159,215194],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,148],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."}],"pos":[215308,215465],"yaml":true},{"content":"Gets or sets the element at the specified index.","nodes":[{"pos":[0,48],"content":"Gets or sets the element at the specified index.","nodes":[{"content":"Gets or sets the element at the specified index.","pos":[0,48]}]}],"pos":[216935,216984],"yaml":true},{"content":"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value for reference types and allows duplicate elements.","source":"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements."},{"pos":[132,267],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[index]`</ph>.","source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`."},{"pos":[274,381],"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[0,107]}]}],"pos":[216995,217383],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to get or set.","nodes":[{"pos":[0,50],"content":"The zero-based index of the element to get or set.","nodes":[{"content":"The zero-based index of the element to get or set.","pos":[0,50]}]}],"pos":[219182,219233],"yaml":true},{"content":"The element at the specified index.","nodes":[{"pos":[0,35],"content":"The element at the specified index.","nodes":[{"content":"The element at the specified index.","pos":[0,35]}]}],"pos":[219278,219314],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,160],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."}],"pos":[219494,219663],"yaml":true},{"content":"Searches for the specified object and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,163],"content":"Searches for the specified object and returns the zero-based index of the last occurrence within the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Searches for the specified object and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[221131,221295],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,129],"content":"The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at the last element and ending at the first element.","pos":[0,129],"source":"The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element."}]},{"pos":[136,335],"content":"This method determines equality using the default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`T`</ph>, the type of values in the list.","source":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list."},{"pos":[342,492],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[221306,221805],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,128],"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The object to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[84,128],"source":" The value can be `null` for reference types."}]}],"pos":[223388,223517],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>item</code> within the entire the <xref href=\"System.Collections.Generic.List`1\"></xref>, if found; otherwise, –1.","nodes":[{"pos":[0,167],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the entire the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, if found; otherwise, –1.","source":"The zero-based index of the last occurrence of <code>item</code> within the entire the <xref href=\"System.Collections.Generic.List`1\"></xref>, if found; otherwise, –1."}],"pos":[223573,223741],"yaml":true},{"content":"Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the first element to the specified index.","nodes":[{"pos":[0,240],"content":"Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that extends from the first element to the specified index.","source":"Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the first element to the specified index."}],"pos":[225345,225586],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at the first element.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `index`.","nodes":[{"pos":[0,120],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id=\"ph2\">`index`</ph> and ending at the first element.","source":"The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at the first element."},{"pos":[127,326],"content":"This method determines equality using the default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`T`</ph>, the type of values in the list.","source":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list."},{"pos":[333,534],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the number of elements from the beginning of the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to <ph id=\"ph4\">`index`</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `index`."}],"pos":[225597,226138],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,128],"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The object to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[84,128],"source":" The value can be `null` for reference types."}]}],"pos":[227732,227861],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[227921,227975],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the first element to <code>index</code>, if found; otherwise, –1.","nodes":[{"pos":[0,239],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that extends from the first element to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept>, if found; otherwise, –1.","source":"The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the first element to <code>index</code>, if found; otherwise, –1."}],"pos":[228031,228271],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[228458,228579],"yaml":true},{"content":"Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that contains the specified number of elements and ends at the specified index.","nodes":[{"pos":[0,260],"content":"Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that contains the specified number of elements and ends at the specified index.","source":"Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that contains the specified number of elements and ends at the specified index."}],"pos":[230167,230428],"yaml":true},{"content":"The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at `index` minus `count` plus 1, if `count` is greater than 0.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.","nodes":[{"pos":[0,161],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id=\"ph2\">`index`</ph> and ending at <ph id=\"ph3\">`index`</ph> minus <ph id=\"ph4\">`count`</ph> plus 1, if <ph id=\"ph5\">`count`</ph> is greater than 0.","source":"The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at `index` minus `count` plus 1, if `count` is greater than 0."},{"pos":[168,367],"content":"This method determines equality using the default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`T`</ph>, the type of values in the list.","source":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list."},{"pos":[374,480],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">`count`</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`."}],"pos":[230439,230926],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,128],"content":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The object to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[84,128],"source":" The value can be `null` for reference types."}]}],"pos":[232528,232657],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[232717,232771],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[232831,232880],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that contains <code>count</code> number of elements and ends at <code>index</code>, if found; otherwise, –1.","nodes":[{"pos":[0,264],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> within the range of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that contains <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> number of elements and ends at <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">index</ph><ept id=\"p3\">&lt;/code&gt;</ept>, if found; otherwise, –1.","source":"The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that contains <code>count</code> number of elements and ends at <code>index</code>, if found; otherwise, –1."}],"pos":[232936,233201],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"pos":[127,131],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[138,172],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,325],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[233388,233728],"yaml":true},{"content":"Removes the first occurrence of a specific object from the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,114],"content":"Removes the first occurrence of a specific object from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the first occurrence of a specific object from the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[235166,235281],"yaml":true},{"content":"If type `T` implements the <xref:System.IEquatable%601> generic interface, the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,269],"content":"If type <ph id=\"ph1\">`T`</ph> implements the <ph id=\"ph2\">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, the equality comparer is the <ph id=\"ph3\">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method of that interface; otherwise, the default equality comparer is <ph id=\"ph4\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","source":"If type `T` implements the <xref:System.IEquatable%601> generic interface, the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"pos":[276,426],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[235292,235723],"yaml":true,"extradata":"MT"},{"content":"The object to remove from the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"pos":[0,130],"content":"The object to remove from the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.","nodes":[{"content":"The object to remove from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,85],"source":"The object to remove from the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph> for reference types.","pos":[86,130],"source":" The value can be `null` for reference types."}]}],"pos":[237556,237687],"yaml":true},{"content":"`true` if <code>item</code> is successfully removed; otherwise, `false`.  This method also returns `false` if <code>item</code> was not found in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,204],"content":"`true` if <code>item</code> is successfully removed; otherwise, `false`.  This method also returns `false` if <code>item</code> was not found in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> is successfully removed; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,72],"source":"`true` if <code>item</code> is successfully removed; otherwise, `false`."},{"content":"This method also returns <ph id=\"ph1\">`false`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> was not found in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","pos":[74,204],"source":"  This method also returns `false` if <code>item</code> was not found in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}]}],"pos":[237745,237952],"yaml":true},{"content":"Removes all the elements that match the conditions defined by the specified predicate.","nodes":[{"pos":[0,86],"content":"Removes all the elements that match the conditions defined by the specified predicate.","nodes":[{"content":"Removes all the elements that match the conditions defined by the specified predicate.","pos":[0,86]}]}],"pos":[239566,239653],"yaml":true},{"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,401],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate, and the elements that match the conditions are removed from the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[154,401],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>."}]},{"pos":[408,558],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[239664,240227],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the elements to remove.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions of the elements to remove.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the elements to remove."}],"pos":[242223,242331],"yaml":true},{"content":"The number of elements removed from the <xref href=\"System.Collections.Generic.List`1\"></xref> .","nodes":[{"pos":[0,96],"content":"The number of elements removed from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> .","source":"The number of elements removed from the <xref href=\"System.Collections.Generic.List`1\"></xref> ."}],"pos":[242387,242484],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[242657,242687],"yaml":true},{"content":"Removes the element at the specified index of the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,105],"content":"Removes the element at the specified index of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the element at the specified index of the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[244179,244285],"yaml":true},{"content":"When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item. For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position. In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.  \n  \n This method is an O(*n*) operation, where *n* is (<xref:System.Collections.Generic.List%601.Count%2A> - `index`).","nodes":[{"pos":[0,406],"content":"When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item. For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position. In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.","nodes":[{"content":"When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item. For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position. In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.","pos":[0,406],"nodes":[{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph> to remove an item, the remaining items in the list are renumbered to replace the removed item.","pos":[0,163],"source":"When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item."},{"content":"For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position.","pos":[164,259]},{"content":"In addition, the number of items in the list (as represented by the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property) is reduced by 1.","pos":[260,406],"source":" In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1."}]}]},{"pos":[413,526],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is (<ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph><ph id=\"ph4\"> - </ph><ph id=\"ph5\">`index`</ph>).","source":"This method is an O(*n*) operation, where *n* is (<xref:System.Collections.Generic.List%601.Count%2A> - `index`)."}],"pos":[244296,244827],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to remove.","nodes":[{"pos":[0,46],"content":"The zero-based index of the element to remove.","nodes":[{"content":"The zero-based index of the element to remove.","pos":[0,46]}]}],"pos":[245678,245725],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,160],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."}],"pos":[245909,246078],"yaml":true},{"content":"Removes a range of elements from the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,92],"content":"Removes a range of elements from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Removes a range of elements from the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[247648,247741],"yaml":true},{"content":"The items are removed and all the elements following them in the <xref:System.Collections.Generic.List%601> have their indexes reduced by `count`.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,146],"content":"The items are removed and all the elements following them in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> have their indexes reduced by <ph id=\"ph2\">`count`</ph>.","source":"The items are removed and all the elements following them in the <xref:System.Collections.Generic.List%601> have their indexes reduced by `count`."},{"pos":[153,254],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[247752,248011],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the range of elements to remove.","nodes":[{"pos":[0,65],"content":"The zero-based starting index of the range of elements to remove.","nodes":[{"content":"The zero-based starting index of the range of elements to remove.","pos":[0,65]}]}],"pos":[248900,248966],"yaml":true},{"content":"The number of elements to remove.","nodes":[{"pos":[0,33],"content":"The number of elements to remove.","nodes":[{"content":"The number of elements to remove.","pos":[0,33]}]}],"pos":[249026,249060],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,86],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."}],"pos":[249247,249340],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,144],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range of elements in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[249434,249579],"yaml":true},{"content":"Reverses the order of the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,104],"content":"Reverses the order of the elements in the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"Reverses the order of the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[251008,251113],"yaml":true},{"content":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,110],"content":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements.","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt;</ph> to reverse the order of the elements.","pos":[0,110],"source":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements."}]},{"pos":[117,218],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[251124,251347],"yaml":true,"extradata":"MT"},{"content":"Reverses the order of the elements in the specified range.","nodes":[{"pos":[0,58],"content":"Reverses the order of the elements in the specified range.","nodes":[{"content":"Reverses the order of the elements in the specified range.","pos":[0,58]}]}],"pos":[253911,253970],"yaml":true},{"content":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,110],"content":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements.","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt;</ph> to reverse the order of the elements.","pos":[0,110],"source":"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements."}]},{"pos":[117,218],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[253981,254204],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the range to reverse.","nodes":[{"pos":[0,54],"content":"The zero-based starting index of the range to reverse.","nodes":[{"content":"The zero-based starting index of the range to reverse.","pos":[0,54]}]}],"pos":[255227,255282],"yaml":true},{"content":"The number of elements in the range to reverse.","nodes":[{"pos":[0,47],"content":"The number of elements in the range to reverse.","nodes":[{"content":"The number of elements in the range to reverse.","pos":[0,47]}]}],"pos":[255342,255390],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,86],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."}],"pos":[255573,255666],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,144],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range of elements in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[255760,255905],"yaml":true},{"content":"Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref> using the specified <xref href=\"System.Comparison`1\"></xref>.","nodes":[{"pos":[0,149],"content":"Sorts the elements in the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.Comparison`1\"&gt;&lt;/xref&gt;</ph>.","source":"Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref> using the specified <xref href=\"System.Comparison`1\"></xref>."}],"pos":[257424,257574],"yaml":true},{"content":"If `comparison` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the method represented by the delegate.  \n  \n If `comparison` is `null`, an <xref:System.ArgumentNullException> is thrown.  \n  \n This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm  \n  \n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a Quicksort algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.","nodes":[{"pos":[0,148],"content":"If <ph id=\"ph1\">`comparison`</ph> is provided, the elements of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the method represented by the delegate.","source":"If `comparison` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the method represented by the delegate."},{"pos":[155,231],"content":"If <ph id=\"ph1\">`comparison`</ph> is <ph id=\"ph2\">`null`</ph>, an <ph id=\"ph3\">&lt;xref:System.ArgumentNullException&gt;</ph> is thrown.","source":"If `comparison` is `null`, an <xref:System.ArgumentNullException> is thrown."},{"pos":[238,357],"content":"This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;</ph>, which applies the introspective sort as follows:","pos":[0,119],"source":"This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:"}]},{"pos":[367,451],"content":"If the partition size is fewer than 16 elements, it uses an insertion sort algorithm","nodes":[{"content":"If the partition size is fewer than 16 elements, it uses an insertion sort algorithm","pos":[0,84]}]},{"pos":[461,621],"content":"If the number of partitions exceeds 2 log <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the range of the input array, it uses a <bpt id=\"p3\">[</bpt>Heapsort<ept id=\"p3\">](http://en.wikipedia.org/wiki/Heapsort)</ept> algorithm.","source":"If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm."},{"pos":[631,672],"content":"Otherwise, it uses a Quicksort algorithm.","nodes":[{"content":"Otherwise, it uses a Quicksort algorithm.","pos":[0,41]}]},{"pos":[679,872],"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.","nodes":[{"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.","pos":[0,193],"nodes":[{"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.","pos":[0,118]},{"content":"In contrast, a stable sort preserves the order of elements that are equal.","pos":[119,193]}]}]},{"pos":[879,1057],"content":"On average, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept> log <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept>) operation, where <bpt id=\"p3\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p3\">*</ept> is <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id=\"p4\">*</bpt><ph id=\"ph5\">n</ph><ept id=\"p4\">*</ept><bpt id=\"p5\">&lt;sup&gt;</bpt>2<ept id=\"p5\">&lt;/sup&gt;</ept>) operation.","source":"On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation."}],"pos":[257585,258659],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Comparison`1\"></xref> to use when comparing elements.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Comparison`1\"&gt;&lt;/xref&gt;</ph> to use when comparing elements.","source":"The <xref href=\"System.Comparison`1\"></xref> to use when comparing elements."}],"pos":[260846,260923],"yaml":true},{"content":"<code>comparison</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;comparison&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>comparison</code> is `null`."}],"pos":[261091,261126],"yaml":true},{"content":"The implementation of <code>comparison</code> caused an error during the sort. For example, <code>comparison</code> might not return 0 when comparing an item with itself.","nodes":[{"pos":[0,170],"content":"The implementation of <code>comparison</code> caused an error during the sort. For example, <code>comparison</code> might not return 0 when comparing an item with itself.","nodes":[{"content":"The implementation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">comparison</ph><ept id=\"p1\">&lt;/code&gt;</ept> caused an error during the sort.","pos":[0,78],"source":"The implementation of <code>comparison</code> caused an error during the sort."},{"content":"For example, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">comparison</ph><ept id=\"p1\">&lt;/code&gt;</ept> might not return 0 when comparing an item with itself.","pos":[79,170],"source":" For example, <code>comparison</code> might not return 0 when comparing an item with itself."}]}],"pos":[261220,261391],"yaml":true},{"content":"Sorts the elements in a range of elements in <xref href=\"System.Collections.Generic.List`1\"></xref> using the specified comparer.","nodes":[{"pos":[0,129],"content":"Sorts the elements in a range of elements in <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> using the specified comparer.","source":"Sorts the elements in a range of elements in <xref href=\"System.Collections.Generic.List`1\"></xref> using the specified comparer."}],"pos":[263084,263214],"yaml":true},{"content":"If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \n  \n This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm  \n  \n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a Quicksort algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.","nodes":[{"pos":[0,184],"content":"If <ph id=\"ph1\">`comparer`</ph> is provided, the elements of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the specified <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.","source":"If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation."},{"pos":[191,802],"content":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.","nodes":[{"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph4\">`T`</ph> implements the <ph id=\"ph5\">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.","pos":[0,259],"source":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> interface.","pos":[261,427],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface."},{"content":"If type <ph id=\"ph1\">`T`</ph> does not implement either interface, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[429,611],"source":"  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>."}]},{"pos":[809,928],"content":"This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;</ph>, which applies the introspective sort as follows:","pos":[0,119],"source":"This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:"}]},{"pos":[938,1022],"content":"If the partition size is fewer than 16 elements, it uses an insertion sort algorithm","nodes":[{"content":"If the partition size is fewer than 16 elements, it uses an insertion sort algorithm","pos":[0,84]}]},{"pos":[1032,1192],"content":"If the number of partitions exceeds 2 log <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the range of the input array, it uses a <bpt id=\"p3\">[</bpt>Heapsort<ept id=\"p3\">](http://en.wikipedia.org/wiki/Heapsort)</ept> algorithm.","source":"If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm."},{"pos":[1202,1243],"content":"Otherwise, it uses a Quicksort algorithm.","nodes":[{"content":"Otherwise, it uses a Quicksort algorithm.","pos":[0,41]}]},{"pos":[1250,1443],"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.","nodes":[{"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.","pos":[0,193],"nodes":[{"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.","pos":[0,118]},{"content":"In contrast, a stable sort preserves the order of elements that are equal.","pos":[119,193]}]}]},{"pos":[1450,1628],"content":"On average, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept> log <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept>) operation, where <bpt id=\"p3\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p3\">*</ept> is <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id=\"p4\">*</bpt><ph id=\"ph5\">n</ph><ept id=\"p4\">*</ept><bpt id=\"p5\">&lt;sup&gt;</bpt>2<ept id=\"p5\">&lt;/sup&gt;</ept>) operation.","source":"On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation."}],"pos":[263225,264870],"yaml":true,"extradata":"MT"},{"content":"The zero-based starting index of the range to sort.","nodes":[{"pos":[0,51],"content":"The zero-based starting index of the range to sort.","nodes":[{"content":"The zero-based starting index of the range to sort.","pos":[0,51]}]}],"pos":[267342,267394],"yaml":true},{"content":"The length of the range to sort.","nodes":[{"pos":[0,32],"content":"The length of the range to sort.","nodes":[{"content":"The length of the range to sort.","pos":[0,32]}]}],"pos":[267454,267487],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>.","nodes":[{"pos":[0,216],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing elements, or <ph id=\"ph2\">`null`</ph> to use the default comparer <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>."}],"pos":[267576,267793],"yaml":true},{"content":"<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","source":"<code>index</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,86],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."}],"pos":[267973,268066],"yaml":true},{"content":"<code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.","nodes":[{"pos":[0,133],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid range in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\"System.Collections.Generic.List`1\"></xref>."},{"pos":[140,144],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[151,317],"content":"The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.","nodes":[{"content":"The implementation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">comparer</ph><ept id=\"p1\">&lt;/code&gt;</ept> caused an error during the sort.","pos":[0,76],"source":"The implementation of <code>comparer</code> caused an error during the sort."},{"content":"For example, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">comparer</ph><ept id=\"p1\">&lt;/code&gt;</ept> might not return 0 when comparing an item with itself.","pos":[77,166],"source":" For example, <code>comparer</code> might not return 0 when comparing an item with itself."}]}],"pos":[268160,268486],"yaml":true},{"content":"<code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.","nodes":[{"pos":[0,300],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and the default comparer <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph> cannot find implementation of the <ph id=\"ph4\">&lt;xref href=\"System.IComparable`1\"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id=\"ph5\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface for type <ph id=\"ph6\">&lt;code&gt;T&lt;/code&gt;</ph>.","source":"<code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>."}],"pos":[268596,268897],"yaml":true},{"content":"Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref> using the default comparer.","nodes":[{"pos":[0,115],"content":"Sorts the elements in the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> using the default comparer.","source":"Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref> using the default comparer."}],"pos":[270308,270424],"yaml":true},{"content":"This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements. The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \n  \n This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.  \n  \n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.  \n  \n-   Otherwise, it uses a Quicksort algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.","nodes":[{"pos":[0,753],"content":"This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements. The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.","nodes":[{"content":"This method uses the default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> for type <ph id=\"ph2\">`T`</ph> to determine the order of list elements.","pos":[0,174],"source":"This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> property checks whether type <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.","pos":[175,401],"source":" The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> interface.","pos":[403,569],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface."},{"content":"If type <ph id=\"ph1\">`T`</ph> does not implement either interface, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[571,753],"source":"  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>."}]},{"pos":[760,890],"content":"This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:","nodes":[{"content":"This method uses the <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;</ph> method, which applies the introspective sort as follows:","pos":[0,130],"source":"This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:"}]},{"pos":[900,985],"content":"If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.","nodes":[{"content":"If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.","pos":[0,85]}]},{"pos":[995,1114],"content":"If the number of partitions exceeds 2 log <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the range of the input array, it uses a Heapsort algorithm.","source":"If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm."},{"pos":[1124,1165],"content":"Otherwise, it uses a Quicksort algorithm.","nodes":[{"content":"Otherwise, it uses a Quicksort algorithm.","pos":[0,41]}]},{"pos":[1172,1365],"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.","nodes":[{"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.","pos":[0,193],"nodes":[{"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.","pos":[0,118]},{"content":"In contrast, a stable sort preserves the order of elements that are equal.","pos":[119,193]}]}]},{"pos":[1372,1550],"content":"On average, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept> log <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept>) operation, where <bpt id=\"p3\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p3\">*</ept> is <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id=\"p4\">*</bpt><ph id=\"ph5\">n</ph><ept id=\"p4\">*</ept><bpt id=\"p5\">&lt;sup&gt;</bpt>2<ept id=\"p5\">&lt;/sup&gt;</ept>) operation.","source":"On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation."}],"pos":[270435,272000],"yaml":true,"extradata":"MT"},{"content":"The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.","nodes":[{"pos":[0,266],"content":"The default comparer <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph> cannot find an implementation of the <ph id=\"ph2\">&lt;xref href=\"System.IComparable`1\"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id=\"ph3\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface for type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>."}],"pos":[275127,275394],"yaml":true},{"content":"Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref> using the specified comparer.","nodes":[{"pos":[0,117],"content":"Sorts the elements in the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> using the specified comparer.","source":"Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref> using the specified comparer."}],"pos":[276967,277085],"yaml":true},{"content":"If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \n  \n This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.  \n  \n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.  \n  \n-   Otherwise, it uses a Quicksort algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.","nodes":[{"pos":[0,184],"content":"If <ph id=\"ph1\">`comparer`</ph> is provided, the elements of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the specified <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.","source":"If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation."},{"pos":[191,802],"content":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.","nodes":[{"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph4\">`T`</ph> implements the <ph id=\"ph5\">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.","pos":[0,259],"source":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available."},{"content":"If not, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> checks whether type <ph id=\"ph2\">`T`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IComparable&gt;</ph> interface.","pos":[261,427],"source":"  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface."},{"content":"If type <ph id=\"ph1\">`T`</ph> does not implement either interface, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[429,611],"source":"  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>."}]},{"pos":[809,939],"content":"This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:","nodes":[{"content":"This method uses the <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;</ph> method, which applies the introspective sort as follows:","pos":[0,130],"source":"This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:"}]},{"pos":[949,1034],"content":"If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.","nodes":[{"content":"If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.","pos":[0,85]}]},{"pos":[1044,1163],"content":"If the number of partitions exceeds 2 log <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is the range of the input array, it uses a Heapsort algorithm.","source":"If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm."},{"pos":[1173,1214],"content":"Otherwise, it uses a Quicksort algorithm.","nodes":[{"content":"Otherwise, it uses a Quicksort algorithm.","pos":[0,41]}]},{"pos":[1221,1414],"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.","nodes":[{"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.","pos":[0,193],"nodes":[{"content":"This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.","pos":[0,118]},{"content":"In contrast, a stable sort preserves the order of elements that are equal.","pos":[119,193]}]}]},{"pos":[1421,1599],"content":"On average, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept> log <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept>) operation, where <bpt id=\"p3\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p3\">*</ept> is <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id=\"p4\">*</bpt><ph id=\"ph5\">n</ph><ept id=\"p4\">*</ept><bpt id=\"p5\">&lt;sup&gt;</bpt>2<ept id=\"p5\">&lt;/sup&gt;</ept>) operation.","source":"On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation."}],"pos":[277096,278712],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>.","nodes":[{"pos":[0,216],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> implementation to use when comparing elements, or <ph id=\"ph2\">`null`</ph> to use the default comparer <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>."}],"pos":[281069,281286],"yaml":true},{"content":"<code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.","nodes":[{"pos":[0,300],"content":"<ph id=\"ph1\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and the default comparer <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.Comparer`1.Default\"&gt;&lt;/xref&gt;</ph> cannot find implementation of the <ph id=\"ph4\">&lt;xref href=\"System.IComparable`1\"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id=\"ph5\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface for type <ph id=\"ph6\">&lt;code&gt;T&lt;/code&gt;</ph>.","source":"<code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>."}],"pos":[281462,281763],"yaml":true},{"content":"The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.","nodes":[{"pos":[0,166],"content":"The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.","nodes":[{"content":"The implementation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">comparer</ph><ept id=\"p1\">&lt;/code&gt;</ept> caused an error during the sort.","pos":[0,76],"source":"The implementation of <code>comparer</code> caused an error during the sort."},{"content":"For example, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">comparer</ph><ept id=\"p1\">&lt;/code&gt;</ept> might not return 0 when comparing an item with itself.","pos":[77,166],"source":" For example, <code>comparer</code> might not return 0 when comparing an item with itself."}]}],"pos":[281857,282024],"yaml":true},{"content":"Copies the elements of the <xref href=\"System.Collections.Generic.List`1\"></xref> to a new array.","nodes":[{"pos":[0,97],"content":"Copies the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> to a new array.","source":"Copies the elements of the <xref href=\"System.Collections.Generic.List`1\"></xref> to a new array."}],"pos":[283453,283551],"yaml":true},{"content":"The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,179],"content":"The elements are copied using <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph>, which is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph4\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."},{"pos":[186,287],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[283562,283854],"yaml":true,"extradata":"MT"},{"content":"An array containing copies of the elements of the <xref href=\"System.Collections.Generic.List`1\"></xref>.","nodes":[{"pos":[0,105],"content":"An array containing copies of the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>.","source":"An array containing copies of the elements of the <xref href=\"System.Collections.Generic.List`1\"></xref>."}],"pos":[284886,284992],"yaml":true},{"content":"Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>, if that number is less than a threshold value.","nodes":[{"pos":[0,160],"content":"Sets the capacity to the actual number of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, if that number is less than a threshold value.","source":"Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>, if that number is less than a threshold value."}],"pos":[286511,286672],"yaml":true},{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.  \n  \n> [!NOTE]\n>  The current threshold of 90 percent might change in future releases.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.  \n  \n To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.  \n  \n The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property.","nodes":[{"pos":[0,449],"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.","nodes":[{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.","pos":[0,449],"nodes":[{"content":"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.","pos":[0,118]},{"content":"The cost of reallocating and copying a large <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can be considerable, however, so the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.","pos":[119,372],"source":" The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity."},{"content":"This avoids incurring a large reallocation cost for a relatively small gain.","pos":[373,449]}]}]},{"pos":[457,536],"content":"[!NOTE]\n The current threshold of 90 percent might change in future releases.","leadings":["","> "],"nodes":[{"content":"The current threshold of 90 percent might change in future releases.","pos":[9,77]}]},{"pos":[543,644],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."},{"pos":[651,1032],"content":"To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.","nodes":[{"content":"To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.","pos":[0,381],"nodes":[{"content":"To reset a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to its initial state, call the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method before calling the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method.","pos":[0,227],"source":"To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method."},{"content":"Trimming an empty <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sets the capacity of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to the default capacity.","pos":[228,381],"source":" Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity."}]}]},{"pos":[1039,1142],"content":"The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property.","nodes":[{"content":"The capacity can also be set using the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property.","pos":[0,103],"source":"The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property."}]}],"pos":[286683,287837],"yaml":true,"extradata":"MT"},{"content":"Determines whether every element in the <xref href=\"System.Collections.Generic.List`1\"></xref> matches the conditions defined by the specified predicate.","nodes":[{"pos":[0,153],"content":"Determines whether every element in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> matches the conditions defined by the specified predicate.","source":"Determines whether every element in the <xref href=\"System.Collections.Generic.List`1\"></xref> matches the conditions defined by the specified predicate."}],"pos":[291307,291461],"yaml":true},{"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element. The elements are processed in order, and all calls are made on a single thread.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,450],"content":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element. The elements are processed in order, and all calls are made on a single thread.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id=\"ph2\">`true`</ph> if the object passed to it matches the conditions defined in the delegate.","pos":[0,152],"source":"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate."},{"content":"The elements of the current <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id=\"ph2\">&lt;xref:System.Predicate%601&gt;</ph> delegate, and processing is stopped when the delegate returns <ph id=\"ph3\">`false`</ph> for any element.","pos":[154,370],"source":"  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element."},{"content":"The elements are processed in order, and all calls are made on a single thread.","pos":[371,450]}]},{"pos":[457,558],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[291472,292035],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions to check against the elements.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Predicate`1\"&gt;&lt;/xref&gt;</ph> delegate that defines the conditions to check against the elements.","source":"The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions to check against the elements."}],"pos":[293568,293680],"yaml":true},{"content":"`true` if every element in the <xref href=\"System.Collections.Generic.List`1\"></xref> matches the conditions defined by the specified predicate; otherwise, `false`. If the list has no elements, the return value is `true`.","nodes":[{"pos":[0,221],"content":"`true` if every element in the <xref href=\"System.Collections.Generic.List`1\"></xref> matches the conditions defined by the specified predicate; otherwise, `false`. If the list has no elements, the return value is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if every element in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> matches the conditions defined by the specified predicate; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,164],"source":"`true` if every element in the <xref href=\"System.Collections.Generic.List`1\"></xref> matches the conditions defined by the specified predicate; otherwise, `false`."},{"content":"If the list has no elements, the return value is <ph id=\"ph1\">`true`</ph>.","pos":[165,221],"source":" If the list has no elements, the return value is `true`."}]}],"pos":[293738,293962],"yaml":true},{"content":"<code>match</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;match&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>match</code> is `null`."}],"pos":[294136,294166],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.Generic.ICollection`1\"></xref> is read-only.","nodes":[{"pos":[0,111],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.ICollection`1\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.Generic.ICollection`1\"></xref> is read-only."}],"pos":[295794,295906],"yaml":true},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,129],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]},{"pos":[136,354],"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[0,218]}]},{"pos":[361,420],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[295917,296344],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.Generic.ICollection`1\"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.","nodes":[{"pos":[0,237],"content":"`true` if the <xref href=\"System.Collections.Generic.ICollection`1\"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.ICollection`1\"&gt;&lt;/xref&gt;</ph> is read-only; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,109],"source":"`true` if the <xref href=\"System.Collections.Generic.ICollection`1\"></xref> is read-only; otherwise, `false`."},{"content":"In the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, this property always returns <ph id=\"ph2\">`false`</ph>.","pos":[111,237],"source":"  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`."}]}],"pos":[296492,296732],"yaml":true},{"content":"Returns an enumerator that iterates through a collection.","nodes":[{"pos":[0,57],"content":"Returns an enumerator that iterates through a collection.","nodes":[{"content":"Returns an enumerator that iterates through a collection.","pos":[0,57]}]}],"pos":[298462,298520],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,223],"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in C++, <ph id=\"ph3\">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,131],"source":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[132,223],"source":" Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[230,350],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[357,787],"content":"Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.","pos":[0,430],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"At this position, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property is undefined.","pos":[84,189],"source":" At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined."},{"content":"Therefore, you must call the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.","pos":[190,430],"source":" Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>."}]}]},{"pos":[794,1095],"content":"The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.","nodes":[{"content":"The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.","pos":[0,301],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property returns the same object until <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.","pos":[0,164],"source":"The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.","pos":[165,301],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element."}]}]},{"pos":[1102,1797],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.","pos":[360,522],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined."},{"content":"You cannot set <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.","pos":[523,695],"source":" You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead."}]},{"pos":[1804,2039],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2046,2436],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,390],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[155,260]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[262,390]}]}]},{"pos":[2443,2579],"content":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.","nodes":[{"content":"Default implementations of collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace are not synchronized.","pos":[0,136],"source":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized."}]},{"pos":[2586,2619],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[298531,301169],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> that can be used to iterate through the collection.","nodes":[{"pos":[0,116],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerator`1\"&gt;&lt;/xref&gt;</ph> that can be used to iterate through the collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> that can be used to iterate through the collection."}],"pos":[301370,301487],"yaml":true},{"content":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.","nodes":[{"pos":[0,185],"content":"Copies the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> to an <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at a particular <ph id=\"ph3\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> index.","source":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index."}],"pos":[303290,303476],"yaml":true},{"content":"> [!NOTE]\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[2,369],"content":"[!NOTE]\n If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.","leadings":["","> "],"nodes":[{"content":"If the type of the source <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id=\"ph2\">`array`</ph>, the nongeneric implementations of <ph id=\"ph3\">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName&gt;</ph> throw <ph id=\"ph4\">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id=\"ph5\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[9,365],"source":" If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>."}]},{"pos":[376,477],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[303487,303970],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,227],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,158],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[159,227],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[304124,304352],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[304417,304485],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[304686,304716],"yaml":true},{"content":"<code>arrayIndex</code> is less than 0.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than 0.","source":"<code>arrayIndex</code> is less than 0."}],"pos":[304830,304870],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>array</code> does not have zero-based indexing.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,110],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> does not have zero-based indexing.","source":"<code>array</code> does not have zero-based indexing."},{"pos":[117,121],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[128,331],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arrayIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."},{"pos":[338,342],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[349,503],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[304964,305486],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).","nodes":[{"pos":[0,128],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe)."}],"pos":[307096,307225],"yaml":true},{"content":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,136],"content":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.","nodes":[{"content":"Default implementations of collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace are not synchronized.","pos":[0,136],"source":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized."}]},{"pos":[143,476],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.  In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.  In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,333],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.","pos":[80,203]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[205,333]}]}]},{"pos":[483,734],"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.","nodes":[{"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.","pos":[0,251],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[0,152],"source":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>."},{"content":"Synchronization is effective only if all threads lock this object before accessing the collection.","pos":[153,251]}]}]},{"pos":[741,800],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[307236,308045],"yaml":true,"extradata":"MT"},{"content":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.","nodes":[{"pos":[0,254],"content":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe); otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,126],"source":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`."},{"content":"In the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, this property always returns <ph id=\"ph2\">`false`</ph>.","pos":[128,254],"source":"  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`."}]}],"pos":[308186,308443],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.","nodes":[{"pos":[0,113],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."}],"pos":[310090,310204],"yaml":true},{"content":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \n  \n```csharp  \nICollection ic = ...;  \nlock (ic.SyncRoot)   \n{  \n    // Access the collection.  \n}  \n```  \n  \n```vb  \nDim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n    ' Access the collection.  \nEnd SyncLock  \n```  \n  \n```cpp#  \nICollection^ ic = ...;  \ntry   \n{  \n    Monitor::Enter(ic->SyncRoot);  \n    // Access the collection.  \n}  \nfinally   \n{  \n    Monitor::Exit(ic->SyncRoot);  \n}  \n```  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,136],"content":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.","nodes":[{"content":"Default implementations of collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace are not synchronized.","pos":[0,136],"source":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized."}]},{"pos":[143,458],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,315],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[80,185]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[187,315]}]}]},{"pos":[465,846],"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.","nodes":[{"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.","pos":[0,381],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[0,152],"source":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>."},{"content":"Synchronization is effective only if all threads lock this object before accessing the collection.","pos":[153,251]},{"content":"The following code shows the use of the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.","pos":[252,381],"source":" The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic."}]}]},{"pos":[1257,1316],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[310215,311568],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns the current instance.","nodes":[{"pos":[0,249],"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns the current instance.","nodes":[{"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,108],"source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"In the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, this property always returns the current instance.","pos":[110,249],"source":"  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns the current instance."}]}],"pos":[311704,311954],"yaml":true},{"content":"Returns an enumerator that iterates through a collection.","nodes":[{"pos":[0,57],"content":"Returns an enumerator that iterates through a collection.","nodes":[{"content":"Returns an enumerator that iterates through a collection.","pos":[0,57]}]}],"pos":[313629,313687],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,223],"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in C++, <ph id=\"ph3\">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,131],"source":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[132,223],"source":" Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[230,350],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[357,861],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,504],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.","pos":[182,275],"source":"  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined."},{"content":"Therefore, you must call the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[276,504],"source":" Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[868,1202],"content":"The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,334],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,209],"source":"The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[210,334],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1209,1944],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1951,2186],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2193,2584],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]},{"pos":[2591,2727],"content":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.","nodes":[{"content":"Default implementations of collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace are not synchronized.","pos":[0,136],"source":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized."}]},{"pos":[2734,2767],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[313698,316484],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> that can be used to iterate through the collection.","nodes":[{"pos":[0,106],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> that can be used to iterate through the collection.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> that can be used to iterate through the collection."}],"pos":[316661,316768],"yaml":true},{"content":"Adds an item to the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,66],"content":"Adds an item to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"Adds an item to the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[318452,318519],"yaml":true},{"content":"If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,334],"content":"If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is less than <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(1) operation.","pos":[0,157],"source":"If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, this method becomes an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","pos":[158,334],"source":" If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}]}],"pos":[318530,318865],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to add to the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,99],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to add to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Object\"></xref> to add to the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[318993,319093],"yaml":true},{"content":"The position into which the new element was inserted.","nodes":[{"pos":[0,53],"content":"The position into which the new element was inserted.","nodes":[{"content":"The position into which the new element was inserted.","pos":[0,53]}]}],"pos":[319149,319203],"yaml":true},{"content":"<code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is of a type that is not assignable to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[319387,319495],"yaml":true},{"content":"Determines whether the <xref href=\"System.Collections.IList\"></xref> contains a specific value.","nodes":[{"pos":[0,95],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> contains a specific value.","source":"Determines whether the <xref href=\"System.Collections.IList\"></xref> contains a specific value."}],"pos":[321100,321196],"yaml":true},{"content":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,199],"content":"This method determines equality using the default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`T`</ph>, the type of values in the list.","source":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list."},{"pos":[206,356],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[321207,321568],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,102],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to locate in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[321702,321805],"yaml":true},{"content":"`true` if <code>item</code> is found in the <xref href=\"System.Collections.IList\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,110],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> is found in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>item</code> is found in the <xref href=\"System.Collections.IList\"></xref>; otherwise, `false`."}],"pos":[321863,321976],"yaml":true},{"content":"Determines the index of a specific item in the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,93],"content":"Determines the index of a specific item in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"Determines the index of a specific item in the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[323673,323767],"yaml":true},{"content":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,199],"content":"This method determines equality using the default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`T`</ph>, the type of values in the list.","source":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list."},{"pos":[206,356],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[323778,324139],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,74],"content":"The object to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"The object to locate in the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[324271,324346],"yaml":true},{"content":"The index of <code>item</code> if found in the list; otherwise, –1.","nodes":[{"pos":[0,67],"content":"The index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> if found in the list; otherwise, –1.","source":"The index of <code>item</code> if found in the list; otherwise, –1."}],"pos":[324402,324470],"yaml":true},{"content":"<code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is of a type that is not assignable to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[324658,324766],"yaml":true},{"content":"Inserts an item to the <xref href=\"System.Collections.IList\"></xref> at the specified index.","nodes":[{"pos":[0,92],"content":"Inserts an item to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> at the specified index.","source":"Inserts an item to the <xref href=\"System.Collections.IList\"></xref> at the specified index."}],"pos":[326419,326512],"yaml":true},{"content":"If `index` equals the number of items in the <xref:System.Collections.IList>, then `item` is appended to the end.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,113],"content":"If <ph id=\"ph1\">`index`</ph> equals the number of items in the <ph id=\"ph2\">&lt;xref:System.Collections.IList&gt;</ph>, then <ph id=\"ph3\">`item`</ph> is appended to the end.","source":"If `index` equals the number of items in the <xref:System.Collections.IList>, then `item` is appended to the end."},{"pos":[120,221],"content":"This method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[326523,326749],"yaml":true,"extradata":"MT"},{"content":"The zero-based index at which <code>item</code> should be inserted.","nodes":[{"pos":[0,67],"content":"The zero-based index at which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> should be inserted.","source":"The zero-based index at which <code>item</code> should be inserted."}],"pos":[326892,326960],"yaml":true},{"content":"The object to insert into the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,76],"content":"The object to insert into the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"The object to insert into the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[327020,327097],"yaml":true},{"content":"<code>index</code> is not a valid index in the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is not a valid index in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is not a valid index in the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[327304,327398],"yaml":true},{"content":"<code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is of a type that is not assignable to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[327492,327600],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> has a fixed size.","nodes":[{"pos":[0,99],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> has a fixed size."}],"pos":[329156,329256],"yaml":true},{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,167],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","pos":[0,167]}]},{"pos":[174,444],"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,270]}]},{"pos":[451,510],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[329267,329784],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IList\"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.","nodes":[{"pos":[0,225],"content":"`true` if the <xref href=\"System.Collections.IList\"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> has a fixed size; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,97],"source":"`true` if the <xref href=\"System.Collections.IList\"></xref> has a fixed size; otherwise, `false`."},{"content":"In the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, this property always returns <ph id=\"ph2\">`false`</ph>.","pos":[99,225],"source":"  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`."}]}],"pos":[329916,330144],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> is read-only.","nodes":[{"pos":[0,95],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> is read-only."}],"pos":[331758,331854],"yaml":true},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,129],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]},{"pos":[136,354],"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[0,218]}]},{"pos":[361,420],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[331865,332292],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IList\"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.","nodes":[{"pos":[0,221],"content":"`true` if the <xref href=\"System.Collections.IList\"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> is read-only; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,93],"source":"`true` if the <xref href=\"System.Collections.IList\"></xref> is read-only; otherwise, `false`."},{"content":"In the default implementation of <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph>, this property always returns <ph id=\"ph2\">`false`</ph>.","pos":[95,221],"source":"  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`."}]}],"pos":[332423,332647],"yaml":true},{"content":"Gets or sets the element at the specified index.","nodes":[{"pos":[0,48],"content":"Gets or sets the element at the specified index.","nodes":[{"content":"Gets or sets the element at the specified index.","pos":[0,48]}]}],"pos":[334287,334336],"yaml":true},{"content":"The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"pos":[0,410],"content":"The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> property.","pos":[0,233],"source":"The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[234,410],"source":" Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality."}]},{"pos":[417,524],"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[0,107]}]}],"pos":[334347,334876],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to get or set.","nodes":[{"pos":[0,50],"content":"The zero-based index of the element to get or set.","nodes":[{"content":"The zero-based index of the element to get or set.","pos":[0,50]}]}],"pos":[335037,335088],"yaml":true},{"content":"The element at the specified index.","nodes":[{"pos":[0,35],"content":"The element at the specified index.","nodes":[{"content":"The element at the specified index.","pos":[0,35]}]}],"pos":[335145,335181],"yaml":true},{"content":"<code>index</code> is not a valid index in the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is not a valid index in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is not a valid index in the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[335386,335480],"yaml":true},{"content":"The property is set and <code>value</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,132],"content":"The property is set and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is of a type that is not assignable to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"The property is set and <code>value</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[335574,335707],"yaml":true},{"content":"Removes the first occurrence of a specific object from the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,105],"content":"Removes the first occurrence of a specific object from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the first occurrence of a specific object from the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[337263,337369],"yaml":true},{"content":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.","nodes":[{"pos":[0,199],"content":"This method determines equality using the default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`T`</ph>, the type of values in the list.","source":"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list."},{"pos":[206,356],"content":"This method performs a linear search; therefore, this method is an O(<bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>) operation, where <bpt id=\"p2\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p2\">*</ept> is <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."}],"pos":[337380,337741],"yaml":true,"extradata":"MT"},{"content":"The object to remove from the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,76],"content":"The object to remove from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"The object to remove from the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[337873,337950],"yaml":true},{"content":"<code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is of a type that is not assignable to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[338137,338245],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.List`1\n  commentId: T:System.Collections.Generic.List`1\n  id: List`1\n  children:\n  - System.Collections.Generic.List`1.#ctor\n  - System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.List`1.#ctor(System.Int32)\n  - System.Collections.Generic.List`1.Add(`0)\n  - System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.List`1.AsReadOnly\n  - System.Collections.Generic.List`1.BinarySearch(`0)\n  - System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\n  - System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\n  - System.Collections.Generic.List`1.Capacity\n  - System.Collections.Generic.List`1.Clear\n  - System.Collections.Generic.List`1.Contains(`0)\n  - System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})\n  - System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.CopyTo(`0[])\n  - System.Collections.Generic.List`1.Count\n  - System.Collections.Generic.List`1.Exists(System.Predicate{`0})\n  - System.Collections.Generic.List`1.Find(System.Predicate{`0})\n  - System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\n  - System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\n  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})\n  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\n  - System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\n  - System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})\n  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})\n  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\n  - System.Collections.Generic.List`1.ForEach(System.Action{`0})\n  - System.Collections.Generic.List`1.GetEnumerator\n  - System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\n  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.IndexOf(`0)\n  - System.Collections.Generic.List`1.Insert(System.Int32,`0)\n  - System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.List`1.Item(System.Int32)\n  - System.Collections.Generic.List`1.LastIndexOf(`0)\n  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\n  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.Remove(`0)\n  - System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})\n  - System.Collections.Generic.List`1.RemoveAt(System.Int32)\n  - System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.Reverse\n  - System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.Sort(System.Comparison{`0})\n  - System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})\n  - System.Collections.Generic.List`1.Sort\n  - System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})\n  - System.Collections.Generic.List`1.ToArray\n  - System.Collections.Generic.List`1.TrimExcess\n  - System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\n  - System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  - System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)\n  - System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)\n  - System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize\n  - System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly\n  - System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)\n  - System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>\n  type: Class\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class. It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.  \\n  \\n You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods.  \\n  \\n The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer.  \\n  \\n-   Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements. The default equality comparer for type `T` is determined as follows. If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.  \\n  \\n-   Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements. The default comparer for type `T` is determined as follows.  If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface. If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.  \\n  \\n The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.  \\n  \\n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  \\n  \\n For very large <xref:System.Collections.Generic.List%601> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \\n  \\n <xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \\n  \\n For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>.  \\n  \\n## Performance Considerations  \\n In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe. If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical. However, if a value type is used for type `T`, you need to consider implementation and boxing issues.  \\n  \\n If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type. That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.  \\n  \\n Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface. If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method, which boxes the affected list element. If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements. If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods  \\n  \\n It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself. The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.  \\n  \\n## F# Considerations  \\n The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code.  Instead, [Lists](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred. An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development. When used from F#, the<xref:System.Collections.Generic.List%601> class is typically referred to by the  [ResizeArray\\\\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists\"\n  example:\n  - \"The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \\n  \\n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  \\n  \\n The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class of type string. (For an example of a <xref:System.Collections.Generic.List%601> of complex types, see the <xref:System.Collections.Generic.List%601.Contains%2A> method.)  \\n  \\n The default constructor is used to create a list of strings with the default capacity. The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items. The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.  \\n  \\n The <xref:System.Collections.Generic.List%601.Contains%2A> method is used to test for the presence of an item in the list, the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.  \\n  \\n The default <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) is used to retrieve an item, the <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again. The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.  \\n  \\n The <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed. If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.  \\n  \\n Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.  \\n  \\n [!code-cpp[List\\\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\\n [!code-fsharp[List\\\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\\n [!code-vb[List\\\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]\"\n  syntax:\n    content: 'public class List<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.IList'\n    typeParameters:\n    - id: T\n      description: The type of elements in the list.\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Data.Services.ExpandSegmentCollection\n  - System.Workflow.Activities.OperationParameterInfoCollection\n  - System.Workflow.Activities.WorkflowRoleCollection\n  - System.Workflow.ComponentModel.ActivityCollection\n  - System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection\n  - System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection\n  - System.Workflow.Runtime.Tracking.ActivityTrackPointCollection\n  - System.Workflow.Runtime.Tracking.ExtractCollection\n  - System.Workflow.Runtime.Tracking.TrackingAnnotationCollection\n  - System.Workflow.Runtime.Tracking.TrackingConditionCollection\n  - System.Workflow.Runtime.Tracking.UserTrackingLocationCollection\n  - System.Workflow.Runtime.Tracking.UserTrackPointCollection\n  - System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection\n  implements:\n  - System.Collections.Generic.ICollection{T}\n  - System.Collections.Generic.IEnumerable{T}\n  - System.Collections.Generic.IList{T}\n  - System.Collections.Generic.IReadOnlyCollection{T}\n  - System.Collections.Generic.IReadOnlyList{T}\n  - System.Collections.IList\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.#ctor\n  commentId: M:System.Collections.Generic.List`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: List<T>()\n  nameWithType: List<T>.List<T>()\n  fullName: List<T>.List<T>()\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\"></xref> class that is empty and has the default initial capacity.\n  remarks: \"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.  \\n  \\n The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following example demonstrates the default constructor of the <xref:System.Collections.Generic.List%601> generic class. The default constructor creates a list with the default capacity, as demonstrated by displaying the <xref:System.Collections.Generic.List%601.Capacity%2A> property.  \\n  \\n The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.  \\n  \\n [!code-cpp[List\\\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\\n [!code-fsharp[List\\\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\\n [!code-vb[List\\\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]\"\n  syntax:\n    content: public List ();\n    parameters: []\n  overload: System.Collections.Generic.List`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: List<T>(IEnumerable<T>)\n  nameWithType: List<T>.List<T>(IEnumerable<T>)\n  fullName: List<T>.List<T>(IEnumerable<T>)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.\n  remarks: \"The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection.  \\n  \\n This constructor is an O(*n*) operation, where *n* is the number of elements in `collection`.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%2A> constructor and various methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. An array of strings is created and passed to the constructor, populating the list with the elements of the array. The <xref:System.Collections.Generic.List%601.Capacity%2A> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.  \\n  \\n [!code-cpp[List\\\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]\"\n  syntax:\n    content: public List (System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: The collection whose elements are copied to the new list.\n  overload: System.Collections.Generic.List`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>collection</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.#ctor(System.Int32)\n  commentId: M:System.Collections.Generic.List`1.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: List<T>(Int32)\n  nameWithType: List<T>.List<T>(Int32)\n  fullName: List<T>.List<T>(Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\"></xref> class that is empty and has the specified initial capacity.\n  remarks: \"The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.  \\n  \\n The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.  \\n  \\n This constructor is an O(*n*) operation, where *n* is `capacity`.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor. A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4. The list is populated with four strings, and a read-only copy is created by using the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.  \\n  \\n [!code-cpp[List\\\\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]\"\n  syntax:\n    content: public List (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The number of elements that the new list can initially store.\n  overload: System.Collections.Generic.List`1.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than 0.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Add(`0)\n  commentId: M:System.Collections.Generic.List`1.Add(`0)\n  id: Add(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Add(T)\n  nameWithType: List<T>.Add(T)\n  fullName: List<T>.Add(T)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Adds an object to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \\n  \\n If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \\n  \\n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  \\n  \\n The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class, including the <xref:System.Collections.Generic.List%601.Add%2A> method. The default constructor is used to create a list of strings with a capacity of 0. The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed, and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items. The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.  \\n  \\n Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.  \\n  \\n [!code-cpp[List\\\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\\n [!code-fsharp[List\\\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\\n [!code-vb[List\\\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]\"\n  syntax:\n    content: public void Add (T item);\n    parameters:\n    - id: item\n      type: T\n      description: The object to be added to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.\n  overload: System.Collections.Generic.List`1.Add*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})\n  id: AddRange(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: AddRange(IEnumerable<T>)\n  nameWithType: List<T>.AddRange(IEnumerable<T>)\n  fullName: List<T>.AddRange(IEnumerable<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Adds the elements of the specified collection to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.  \\n  \\n If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \\n  \\n If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.AddRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. An array of strings is created and passed to the constructor, populating the list with the elements of the array. The <xref:System.Collections.Generic.List%601.AddRange%2A> method is called, with the list as its argument. The result is that the current elements of the list are added to the end of the list, duplicating all the elements.  \\n  \\n [!code-cpp[List\\\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]\"\n  syntax:\n    content: public void AddRange (System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: The collection whose elements should be added to the end of the <xref href=\"System.Collections.Generic.List`1\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type.\n  overload: System.Collections.Generic.List`1.AddRange*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>collection</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.AsReadOnly\n  commentId: M:System.Collections.Generic.List`1.AsReadOnly\n  id: AsReadOnly\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: AsReadOnly()\n  nameWithType: List<T>.AsReadOnly()\n  fullName: List<T>.AsReadOnly()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Returns a read-only <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> wrapper for the current collection.\n  remarks: \"To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper. A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection. However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method. A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4. The list is populated with four strings, and the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method is used to get a read-only <xref:System.Collections.Generic.IList%601> generic interface implementation that wraps the original list.  \\n  \\n An element of the original list is set to \\\"Coelophysis\\\" using the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.  \\n  \\n [!code-cpp[List\\\\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]\"\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection`1\n      description: An object that acts as a read-only wrapper around the current <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  overload: System.Collections.Generic.List`1.AsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.BinarySearch(`0)\n  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)\n  id: BinarySearch(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: BinarySearch(T)\n  nameWithType: List<T>.BinarySearch(T)\n  fullName: List<T>.BinarySearch(T)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches the entire sorted <xref href=\"System.Collections.Generic.List`1\"></xref> for an element using the default comparer and returns the zero-based index of the element.\n  remarks: \"This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements. The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \\n  \\n The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  \\n  \\n Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.  \\n  \\n If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \\n  \\n If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.  \\n  \\n This method is an O(log *n*) operation, where *n* is the number of elements in the range.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload. A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted, and displayed again.  \\n  \\n The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them. The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method is negative in each case, because the strings are not in the list. Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order. The second search string is larger than any element in the list, so the insertion position is at the end of the list.  \\n  \\n [!code-cpp[List\\\\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]\"\n  syntax:\n    content: public int BinarySearch (T item);\n    parameters:\n    - id: item\n      type: T\n      description: The object to locate. The value can be `null` for reference types.\n    return:\n      type: System.Int32\n      description: The zero-based index of <code>item</code> in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.\n  overload: System.Collections.Generic.List`1.BinarySearch*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\n  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\n  id: BinarySearch(`0,System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: BinarySearch(T, IComparer<T>)\n  nameWithType: List<T>.BinarySearch(T, IComparer<T>)\n  fullName: List<T>.BinarySearch(T, IComparer<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches the entire sorted <xref href=\"System.Collections.Generic.List`1\"></xref> for an element using the specified comparer and returns the zero-based index of the element.\n  remarks: \"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \\n  \\n If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \\n  \\n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>.  \\n  \\n The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  \\n  \\n Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.  \\n  \\n If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \\n  \\n If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.  \\n  \\n This method is an O(log *n*) operation, where *n* is the number of elements in the range.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.  \\n  \\n The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \\n  \\n A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted using the alternate comparer, and displayed again.  \\n  \\n The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer. The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings. These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.  \\n  \\n [!code-cpp[List\\\\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]\"\n  syntax:\n    content: public int BinarySearch (T item, System.Collections.Generic.IComparer<T> comparer);\n    parameters:\n    - id: item\n      type: T\n      description: The object to locate. The value can be `null` for reference types.\n    - id: comparer\n      type: System.Collections.Generic.IComparer`1\n      description: \"The <xref href=\\\"System.Collections.Generic.IComparer`1\\\"></xref> implementation to use when comparing elements.  \\n  \\n -or-  \\n  \\n `null` to use the default comparer <xref href=\\\"System.Collections.Generic.Comparer`1.Default\\\"></xref>.\"\n    return:\n      type: System.Int32\n      description: The zero-based index of <code>item</code> in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.\n  overload: System.Collections.Generic.List`1.BinarySearch*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\n  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\n  id: BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: BinarySearch(Int32, Int32, T, IComparer<T>)\n  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)\n  fullName: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches a range of elements in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref> for an element using the specified comparer and returns the zero-based index of the element.\n  remarks: \"The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \\n  \\n If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \\n  \\n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>.  \\n  \\n The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  \\n  \\n Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.  \\n  \\n If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \\n  \\n If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.  \\n  \\n This method is an O(log *n*) operation, where *n* is the number of elements in the range.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.  \\n  \\n The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \\n  \\n A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs. Within each of the two groups, the names are not in any particular sort order. The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.  \\n  \\n The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for \\\"Brachiosaurus\\\". The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.  \\n  \\n [!code-cpp[List\\\\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]\"\n  syntax:\n    content: public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer<T> comparer);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the range to search.\n    - id: count\n      type: System.Int32\n      description: The length of the range to search.\n    - id: item\n      type: T\n      description: The object to locate. The value can be `null` for reference types.\n    - id: comparer\n      type: System.Collections.Generic.IComparer`1\n      description: The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>.\n    return:\n      type: System.Int32\n      description: The zero-based index of <code>item</code> in the sorted <xref href=\"System.Collections.Generic.List`1\"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.\n  overload: System.Collections.Generic.List`1.BinarySearch*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not denote a valid range in the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Capacity\n  commentId: P:System.Collections.Generic.List`1.Capacity\n  id: Capacity\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: List<T>.Capacity\n  fullName: List<T>.Capacity\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets or sets the total number of elements the internal data structure can hold without resizing.\n  remarks: \"<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.  \\n  \\n <xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value. When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is an O(*n*) operation, where *n* is the new capacity.\"\n  example:\n  - \"The following example demonstrates how to check the capacity and count of a <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.  \\n  \\n [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  \\n  \\n The following example shows the <xref:System.Collections.Generic.List%601.Capacity%2A> property at several points in the life of a list. The default constructor is used to create a list of strings with a capacity of 0, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed to demonstrate this. After the <xref:System.Collections.Generic.List%601.Add%2A> method has been used to add several items, the items are listed, and then the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.  \\n  \\n The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count. Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed again.  \\n  \\n [!code-cpp[List\\\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\\n [!code-fsharp[List\\\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\\n [!code-vb[List\\\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]\"\n  syntax:\n    content: public int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: The number of elements that the <xref href=\"System.Collections.Generic.List`1\"></xref> can contain before resizing is required.\n  overload: System.Collections.Generic.List`1.Capacity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <xref href=\"System.Collections.Generic.List`1.Capacity\"></xref> is set to a value that is less than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory available on the system.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Clear\n  commentId: M:System.Collections.Generic.List`1.Clear\n  id: Clear\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: List<T>.Clear()\n  fullName: List<T>.Clear()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes all elements from the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"<xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.  \\n  \\n <xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.Clear%2A> method and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class. The <xref:System.Collections.Generic.List%601.Clear%2A> method is used at the end of the program, to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are then displayed.  \\n  \\n [!code-cpp[List\\\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\\n [!code-fsharp[List\\\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\\n [!code-vb[List\\\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Collections.Generic.List`1.Clear*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Contains(`0)\n  commentId: M:System.Collections.Generic.List`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Contains(T)\n  nameWithType: List<T>.Contains(T)\n  fullName: List<T>.Contains(T)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Determines whether an element is in the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref:System.IEquatable%601.Equals%2A?displayProperty=fullName> method for `T` (the type of values in the list).  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.  \\n  \\n [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  \\n  \\n The following example contains a list of complex objects of type `Cube`. The `Cube` class implements the <xref:System.IEquatable%601.Equals%2A?displayProperty=fullName> method so that two cubes are considered equal if their dimensions are the same. In this example, the <xref:System.Collections.Generic.List%601.Contains%2A> method returns `true`, because a cube that has the specified dimensions is already in the collection.  \\n  \\n [!code-csharp[System.Collections.Generic.List.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.List.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]\"\n  syntax:\n    content: public bool Contains (T item);\n    parameters:\n    - id: item\n      type: T\n      description: The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>item</code> is found in the <xref href=\"System.Collections.Generic.List`1\"></xref>; otherwise, `false`.'\n  overload: System.Collections.Generic.List`1.Contains*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})\n  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})\n  id: ConvertAll``1(System.Converter{`0,``0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ConvertAll<TOutput>(Converter<T,TOutput>)\n  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T,TOutput>)\n  fullName: List<T>.ConvertAll<TOutput>(Converter<T,TOutput>)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: Converts the elements in the current <xref href=\"System.Collections.Generic.List`1\"></xref> to another type, and returns a list containing the converted elements.\n  remarks: \"The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.  \\n  \\n The current <xref:System.Collections.Generic.List%601> remains unchanged.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure. The example then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Drawing.PointF> structures, creates a `Converter\\\\<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Collections.Generic.List%601.ConvertAll%2A> method. The <xref:System.Collections.Generic.List%601.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures. Both lists are displayed.  \\n  \\n [!code-cpp[List\\\\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]\"\n  syntax:\n    content: public System.Collections.Generic.List<TOutput> ConvertAll<TOutput> (Converter<T,TOutput> converter);\n    parameters:\n    - id: converter\n      type: System.Converter{T,TOutput}\n      description: A <xref href=\"System.Converter`2\"></xref> delegate that converts each element from one type to another type.\n    typeParameters:\n    - id: TOutput\n      description: The type of the elements of the target array.\n    return:\n      type: System.Collections.Generic.List{TOutput}\n      description: A <xref href=\"System.Collections.Generic.List`1\"></xref> of the target type containing the converted elements from the current <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  overload: System.Collections.Generic.List`1.ConvertAll``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>converter</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\n  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: CopyTo(T[], Int32)\n  nameWithType: List<T>.CopyTo(T[], Int32)\n  fullName: List<T>.CopyTo(T[], Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Copies the entire <xref href=\"System.Collections.Generic.List`1\"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.\n  remarks: \"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.  \\n  \\n [!code-cpp[List\\\\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]\"\n  syntax:\n    content: public void CopyTo (T[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: T[]\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.Generic.List`1.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>arrayIndex</code> is less than 0.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The number of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\n  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\n  id: CopyTo(System.Int32,`0[],System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: CopyTo(Int32, T[], Int32, Int32)\n  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)\n  fullName: List<T>.CopyTo(Int32, T[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Copies a range of elements from the <xref href=\"System.Collections.Generic.List`1\"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.\n  remarks: \"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  \\n  \\n This method is an O(*n*) operation, where *n* is `count`.\"\n  example:\n  - \"The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.  \\n  \\n [!code-cpp[List\\\\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]\"\n  syntax:\n    content: public void CopyTo (int index, T[] array, int arrayIndex, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index in the source <xref href=\"System.Collections.Generic.List`1\"></xref> at which copying begins.\n    - id: array\n      type: T[]\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n    - id: count\n      type: System.Int32\n      description: The number of elements to copy.\n  overload: System.Collections.Generic.List`1.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>arrayIndex</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>index</code> is equal to or greater than the <xref href=\\\"System.Collections.Generic.List`1.Count\\\"></xref> of the source <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.  \\n  \\n -or-  \\n  \\n The number of elements from <code>index</code> to the end of the source <xref href=\\\"System.Collections.Generic.List`1\\\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.CopyTo(`0[])\n  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])\n  id: CopyTo(`0[])\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: CopyTo(T[])\n  nameWithType: List<T>.CopyTo(T[])\n  fullName: List<T>.CopyTo(T[])\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Copies the entire <xref href=\"System.Collections.Generic.List`1\"></xref> to a compatible one-dimensional array, starting at the beginning of the target array.\n  remarks: \"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.  \\n  \\n [!code-cpp[List\\\\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]\"\n  syntax:\n    content: public void CopyTo (T[] array);\n    parameters:\n    - id: array\n      type: T[]\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n  overload: System.Collections.Generic.List`1.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The number of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref> is greater than the number of elements that the destination <code>array</code> can contain.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Count\n  commentId: P:System.Collections.Generic.List`1.Count\n  id: Count\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: List<T>.Count\n  fullName: List<T>.Count\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets the number of elements contained in the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required. <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.  \\n  \\n <xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.  \\n  \\n [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  \\n  \\n The following example shows the value of the <xref:System.Collections.Generic.List%601.Count%2A> property at various points in the life of a list. After the list has been created and populated and its elements displayed, the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed. These properties are displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method has been called, and again after the contents of the list are cleared.  \\n  \\n [!code-cpp[List\\\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\\n [!code-fsharp[List\\\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\\n [!code-vb[List\\\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements contained in the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  overload: System.Collections.Generic.List`1.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})\n  id: Exists(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Exists(Predicate<T>)\n  nameWithType: List<T>.Exists(Predicate<T>)\n  fullName: List<T>.Exists(Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Determines whether the <xref href=\"System.Collections.Generic.List`1\"></xref> contains elements that match the conditions defined by the specified predicate.\n  remarks: \"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A>methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.  \\n  \\n [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  \\n  \\n The following example demonstrates the <xref:System.Collections.Generic.List%601.Exists%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.  \\n  \\n A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \\\"saurus\\\". The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \\\"saurus\\\".  \\n  \\n The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method, and then the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with \\\"saurus\\\".  \\n  \\n Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method is called. It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method. The search stops and the method returns `true` if the `EndsWithSaurus` method returns `true` for any element. The <xref:System.Collections.Generic.List%601.Exists%2A> method returns `false` because all such elements have been removed.  \\n  \\n> [!NOTE]\\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \\n  \\n [!code-cpp[List\\\\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]\"\n  syntax:\n    content: public bool Exists (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the elements to search for.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Generic.List`1\"></xref> contains one or more elements that match the conditions defined by the specified predicate; otherwise, `false`.'\n  overload: System.Collections.Generic.List`1.Exists*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})\n  id: Find(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Find(Predicate<T>)\n  nameWithType: List<T>.Find(Predicate<T>)\n  fullName: List<T>.Find(Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element.  Processing is stopped when a match is found.  \\n  \\n> [!IMPORTANT]\\n>  When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.Find%2A> method on a <xref:System.Collections.Generic.List%601> that contains a simple complex object.  \\n  \\n [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  \\n  \\n The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \\n  \\n The following table describes the examples provided for the find methods.  \\n  \\n|Method|Example|  \\n|------------|-------------|  \\n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \\\"Computer\\\" using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n  \\n [!code-csharp[List\\\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\\n [!code-vb[List\\\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]\"\n  syntax:\n    content: public T Find (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.\n    return:\n      type: T\n      description: The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.\n  overload: System.Collections.Generic.List`1.Find*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\n  id: FindAll(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindAll(Predicate<T>)\n  nameWithType: List<T>.FindAll(Predicate<T>)\n  fullName: List<T>.FindAll(Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Retrieves all the elements that match the conditions defined by the specified predicate.\n  remarks: \"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \\n  \\n The following table describes the examples provided for the find methods.  \\n  \\n|Method|Example|  \\n|------------|-------------|  \\n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \\\"Computer\\\" using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n  \\n [!code-csharp[List\\\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\\n [!code-vb[List\\\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]\"\n  syntax:\n    content: public System.Collections.Generic.List<T> FindAll (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the elements to search for.\n    return:\n      type: System.Collections.Generic.List`1\n      description: A <xref href=\"System.Collections.Generic.List`1\"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  overload: System.Collections.Generic.List`1.FindAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\n  id: FindIndex(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindIndex(Predicate<T>)\n  nameWithType: List<T>.FindIndex(Predicate<T>)\n  fullName: List<T>.FindIndex(Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.  \\n  \\n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:  \\n  \\n```csharp  \\npublic bool methodName(T obj)  \\n```  \\n  \\n```vb  \\nPublic Function methodName(obj As T) As Boolean  \\n```  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example defines an `Employee` class with two fields, `Name` and `Id`. It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor. Note  the signature of this method  \\n  \\n```csharp  \\npublic bool StartsWith(Employee e)  \\n```  \\n  \\n```vb  \\nPublic Function StartsWith(e As Employee) As Boolean  \\n```  \\n  \\n corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method. The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection , the first time for the first `Employee` object whose `Name` field begins with \\\"J\\\", and the second time for the first `Employee` object whose `Name` field begins with \\\"Ju\\\".  \\n  \\n [!code-csharp[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]\\n [!code-vb[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]\"\n  syntax:\n    content: public int FindIndex (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.FindIndex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})\n  id: FindIndex(System.Int32,System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindIndex(Int32, Predicate<T>)\n  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)\n  fullName: List<T>.FindIndex(Int32, Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the specified index to the last element.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at the last element.  \\n  \\n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:  \\n  \\n```csharp  \\npublic bool methodName(T obj)  \\n```  \\n  \\n```vb  \\nPublic Function methodName(obj As T) As Boolean  \\n```  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `startIndex` to the end of the <xref:System.Collections.Generic.List%601>.\"\n  example:\n  - \"The following example defines an `Employee` class with two fields, `Name` and `Id`. It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor. Note  the signature of this method  \\n  \\n```csharp  \\npublic bool StartsWith(Employee e)  \\n```  \\n  \\n```vb  \\nPublic Function StartsWith(e As Employee) As Boolean  \\n```  \\n  \\n corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method. The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the collection starting with its fifth member (that is, the member at index 4). The first time, it searches for the first `Employee` object whose `Name` field begins with \\\"J\\\"; the second time, it searches for the first `Employee` object whose `Name` field begins with \\\"Ju\\\".  \\n  \\n [!code-csharp[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]\\n [!code-vb[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]\"\n  syntax:\n    content: public int FindIndex (int startIndex, Predicate<T> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.FindIndex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\n  id: FindIndex(System.Int32,System.Int32,System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindIndex(Int32, Int32, Predicate<T>)\n  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)\n  fullName: List<T>.FindIndex(Int32, Int32, Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that starts at the specified index and contains the specified number of elements.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.  \\n  \\n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:  \\n  \\n```csharp  \\npublic bool methodName(T obj)  \\n```  \\n  \\n```vb  \\nPublic Function methodName(obj As T) As Boolean  \\n```  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.\"\n  example:\n  - \"The following example defines an `Employee` class with two fields, `Name` and `Id`. It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor. Note  the signature of this method  \\n  \\n```csharp  \\npublic bool StartsWith(Employee e)  \\n```  \\n  \\n```vb  \\nPublic Function StartsWith(e As Employee) As Boolean  \\n```  \\n  \\n corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method. The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection (that is, the members from index 0 to index <xref:System.Collections.Generic.List%601.Count%2A> - 1). The first time, it searches for the first `Employee` object whose `Name` field begins with \\\"J\\\"; the second time, it searches for the first `Employee` object whose `Name` field begins with \\\"Ju\\\".  \\n  \\n [!code-csharp[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]\\n [!code-vb[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]\"\n  syntax:\n    content: public int FindIndex (int startIndex, int count, Predicate<T> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.FindIndex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\n  id: FindLast(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindLast(Predicate<T>)\n  nameWithType: List<T>.FindLast(Predicate<T>)\n  fullName: List<T>.FindLast(Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element.  Processing is stopped when a match is found.  \\n  \\n> [!IMPORTANT]\\n>  When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \\n  \\n The following table describes the examples provided for the find methods.  \\n  \\n|Method|Example|  \\n|------------|-------------|  \\n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \\\"Computer\\\" using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n  \\n [!code-csharp[List\\\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\\n [!code-vb[List\\\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]\"\n  syntax:\n    content: public T FindLast (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.\n    return:\n      type: T\n      description: The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.\n  overload: System.Collections.Generic.List`1.FindLast*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})\n  id: FindLastIndex(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindLastIndex(Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Predicate<T>)\n  fullName: List<T>.FindLastIndex(Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.  \\n  \\n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \\n  \\n The following table describes the examples provided for the find methods.  \\n  \\n|Method|Example|  \\n|------------|-------------|  \\n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \\\"Computer\\\" using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n  \\n [!code-csharp[List\\\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\\n [!code-vb[List\\\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]\"\n  syntax:\n    content: public int FindLastIndex (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.FindLastIndex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})\n  id: FindLastIndex(System.Int32,System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindLastIndex(Int32, Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)\n  fullName: List<T>.FindLastIndex(Int32, Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the first element to the specified index.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at the first element.  \\n  \\n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `startIndex`.\"\n  syntax:\n    content: public int FindLastIndex (int startIndex, Predicate<T> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.FindLastIndex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\n  id: FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindLastIndex(Int32, Int32, Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)\n  fullName: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that contains the specified number of elements and ends at the specified index.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.  \\n  \\n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.\"\n  example:\n  - \"The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \\n  \\n The following table describes the examples provided for the find methods.  \\n  \\n|Method|Example|  \\n|------------|-------------|  \\n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \\\"Computer\\\" using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \\n  \\n [!code-csharp[List\\\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\\n [!code-vb[List\\\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]\"\n  syntax:\n    content: public int FindLastIndex (int startIndex, int count, Predicate<T> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the element to search for.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.FindLastIndex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for the <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})\n  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})\n  id: ForEach(System.Action{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ForEach(Action<T>)\n  nameWithType: List<T>.ForEach(Action<T>)\n  fullName: List<T>.ForEach(Action<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Performs the specified action on each element of the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.  \\n  \\n Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior.\"\n  example:\n  - \"The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object. In this example the `Print` method is used to display the contents of the list to the console.  \\n  \\n> [!NOTE]\\n>  In addition to displaying the contents using the `Print` method, the C# example demonstrates the use of  to display the results to the console.  \\n  \\n [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]\\n [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]\"\n  syntax:\n    content: public void ForEach (Action<T> action);\n    parameters:\n    - id: action\n      type: System.Action`1\n      description: The <xref href=\"System.Action`1\"></xref> delegate to perform on each element of the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  overload: System.Collections.Generic.List`1.ForEach*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>action</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An element in the collection has been modified.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.GetEnumerator\n  commentId: M:System.Collections.Generic.List`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: List<T>.GetEnumerator()\n  fullName: List<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.  \\n  \\n The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called. <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public System.Collections.Generic.List<T>.Enumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.List{T}\n      description: A <xref href=\"System.Collections.Generic.List`1.Enumerator\"></xref> for the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  overload: System.Collections.Generic.List`1.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\n  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\n  id: GetRange(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: GetRange(Int32, Int32)\n  nameWithType: List<T>.GetRange(Int32, Int32)\n  fullName: List<T>.GetRange(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Creates a shallow copy of a range of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection. The objects themselves are not copied. The references in the new list point to the same objects as the references in the original list.  \\n  \\n A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection. However, if the elements of the collection contain references to other objects, those objects are not copied. The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.  \\n  \\n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \\n  \\n This method is an O(*n*) operation, where *n* is `count`.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.GetRange%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2. The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements. The elements of the array are displayed.  \\n  \\n [!code-cpp[List\\\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]\"\n  syntax:\n    content: public System.Collections.Generic.List<T> GetRange (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based <xref href=\"System.Collections.Generic.List`1\"></xref> index at which the range starts.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the range.\n    return:\n      type: System.Collections.Generic.List`1\n      description: A shallow copy of a range of elements in the source <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  overload: System.Collections.Generic.List`1.GetRange*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\n  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\n  id: IndexOf(`0,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IndexOf(T, Int32)\n  nameWithType: List<T>.IndexOf(T, Int32)\n  fullName: List<T>.IndexOf(T, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the specified index to the last element.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at the last element.  \\n  \\n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `index` to the end of the <xref:System.Collections.Generic.List%601>.\"\n  example:\n  - \"The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.  \\n  \\n [!code-cpp[List\\\\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]\"\n  syntax:\n    content: public int IndexOf (T item, int index);\n    parameters:\n    - id: item\n      type: T\n      description: The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from <code>index</code> to the last element, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.IndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\n  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\n  id: IndexOf(`0,System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IndexOf(T, Int32, Int32)\n  nameWithType: List<T>.IndexOf(T, Int32, Int32)\n  fullName: List<T>.IndexOf(T, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that starts at the specified index and contains the specified number of elements.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at `index` plus `count` minus 1, if `count` is greater than 0.  \\n  \\n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.\"\n  example:\n  - \"The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.  \\n  \\n [!code-cpp[List\\\\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]\"\n  syntax:\n    content: public int IndexOf (T item, int index, int count);\n    parameters:\n    - id: item\n      type: T\n      description: The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that starts at <code>index</code> and contains <code>count</code> number of elements, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.IndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is outside the range of valid indexes for the <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not specify a valid section in the <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.IndexOf(`0)\n  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IndexOf(T)\n  nameWithType: List<T>.IndexOf(T)\n  fullName: List<T>.IndexOf(T)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.  \\n  \\n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.  \\n  \\n [!code-cpp[List\\\\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]\"\n  syntax:\n    content: public int IndexOf (T item);\n    parameters:\n    - id: item\n      type: T\n      description: The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>item</code> within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.IndexOf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)\n  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)\n  id: Insert(System.Int32,`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Insert(Int32, T)\n  nameWithType: List<T>.Insert(Int32, T)\n  fullName: List<T>.Insert(Int32, T)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Inserts an element into the <xref href=\"System.Collections.Generic.List`1\"></xref> at the specified index.\n  remarks: \"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \\n  \\n If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, `item` is added to the end of <xref:System.Collections.Generic.List%601>.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \\n  \\n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  \\n  \\n The following example demonstrates the <xref:System.Collections.Generic.List%601.Insert%2A> method, along with various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class. After the list is created, elements are added. The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert an item into the middle of the list. The item inserted is a duplicate, which is later removed using the <xref:System.Collections.Generic.List%601.Remove%2A> method.  \\n  \\n [!code-cpp[List\\\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\\n [!code-fsharp[List\\\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\\n [!code-vb[List\\\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]\"\n  syntax:\n    content: public void Insert (int index, T item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which <code>item</code> should be inserted.\n    - id: item\n      type: T\n      description: The object to insert. The value can be `null` for reference types.\n  overload: System.Collections.Generic.List`1.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than <xref href=\\\"System.Collections.Generic.List`1.Count\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\n  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: InsertRange(Int32, IEnumerable<T>)\n  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)\n  fullName: List<T>.InsertRange(Int32, IEnumerable<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Inserts the elements of a collection into the <xref href=\"System.Collections.Generic.List`1\"></xref> at the specified index.\n  remarks: \"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \\n  \\n If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \\n  \\n If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, the elements are added to the end of <xref:System.Collections.Generic.List%601>.  \\n  \\n The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.  \\n  \\n This method is an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates <xref:System.Collections.Generic.List%601.InsertRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <xref:System.Collections.Generic.List%601.InsertRange%2A> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.  \\n  \\n [!code-cpp[List\\\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]\"\n  syntax:\n    content: public void InsertRange (int index, System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which the new elements should be inserted.\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: The collection whose elements should be inserted into the <xref href=\"System.Collections.Generic.List`1\"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type.\n  overload: System.Collections.Generic.List`1.InsertRange*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>collection</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than <xref href=\\\"System.Collections.Generic.List`1.Count\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Item(System.Int32)\n  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: List<T>.Item(Int32)\n  fullName: List<T>.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets or sets the element at the specified index.\n  remarks: \"<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \\n  \\n This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  example:\n  - \"The example in this section demonstrates the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class. After the list has been created and populated using the <xref:System.Collections.Generic.List%601.Add%2A> method, an element is retrieved and displayed using the <xref:System.Collections.Generic.List%601.Item%2A> property. (For an example that uses the <xref:System.Collections.Generic.List%601.Item%2A> property to set the value of a list element, see <xref:System.Collections.Generic.List%601.AsReadOnly%2A>.)  \\n  \\n> [!NOTE]\\n>  Visual Basic, C#, and C++ all have syntax for accessing the <xref:System.Collections.Generic.List%601.Item%2A> property without using its name. Instead, the variable containing the <xref:System.Collections.Generic.List%601> is used as if it were an array.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.List%601.Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]\\n [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  \\n[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]\\n[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]\"\n  syntax:\n    content: public T this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to get or set.\n    return:\n      type: T\n      description: The element at the specified index.\n  overload: System.Collections.Generic.List`1.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref href=\\\"System.Collections.Generic.List`1.Count\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0)\n  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)\n  id: LastIndexOf(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: LastIndexOf(T)\n  nameWithType: List<T>.LastIndexOf(T)\n  fullName: List<T>.LastIndexOf(T)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.  \\n  \\n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.  \\n  \\n [!code-cpp[List\\\\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (T item);\n    parameters:\n    - id: item\n      type: T\n      description: The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>item</code> within the entire the <xref href=\"System.Collections.Generic.List`1\"></xref>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.LastIndexOf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\n  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\n  id: LastIndexOf(`0,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: LastIndexOf(T, Int32)\n  nameWithType: List<T>.LastIndexOf(T, Int32)\n  fullName: List<T>.LastIndexOf(T, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the first element to the specified index.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at the first element.  \\n  \\n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `index`.\"\n  example:\n  - \"The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.  \\n  \\n [!code-cpp[List\\\\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (T item, int index);\n    parameters:\n    - id: item\n      type: T\n      description: The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that extends from the first element to <code>index</code>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\n  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\n  id: LastIndexOf(`0,System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: LastIndexOf(T, Int32, Int32)\n  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)\n  fullName: List<T>.LastIndexOf(T, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that contains the specified number of elements and ends at the specified index.\n  remarks: \"The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at `index` minus `count` plus 1, if `count` is greater than 0.  \\n  \\n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.\"\n  example:\n  - \"The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.  \\n  \\n [!code-cpp[List\\\\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]\"\n  syntax:\n    content: public int LastIndexOf (T item, int index, int count);\n    parameters:\n    - id: item\n      type: T\n      description: The object to locate in the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref> that contains <code>count</code> number of elements and ends at <code>index</code>, if found; otherwise, –1.\n  overload: System.Collections.Generic.List`1.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is outside the range of valid indexes for the <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not specify a valid section in the <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Remove(`0)\n  commentId: M:System.Collections.Generic.List`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Remove(T)\n  nameWithType: List<T>.Remove(T)\n  fullName: List<T>.Remove(T)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes the first occurrence of a specific object from the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"If type `T` implements the <xref:System.IEquatable%601> generic interface, the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \\n  \\n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  \\n  \\n The following example demonstrates <xref:System.Collections.Generic.List%601.Remove%2A> method. Several properties and methods of the <xref:System.Collections.Generic.List%601> generic class are used to add, insert, and search the list. After these operations, the list contains a duplicate. The <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item, and the contents are displayed. The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.  \\n  \\n [!code-cpp[List\\\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\\n [!code-fsharp[List\\\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\\n [!code-vb[List\\\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]\"\n  syntax:\n    content: public bool Remove (T item);\n    parameters:\n    - id: item\n      type: T\n      description: The object to remove from the <xref href=\"System.Collections.Generic.List`1\"></xref>. The value can be `null` for reference types.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>item</code> is successfully removed; otherwise, `false`.  This method also returns `false` if <code>item</code> was not found in the <xref href=\"System.Collections.Generic.List`1\"></xref>.'\n  overload: System.Collections.Generic.List`1.Remove*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})\n  id: RemoveAll(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: RemoveAll(Predicate<T>)\n  nameWithType: List<T>.RemoveAll(Predicate<T>)\n  fullName: List<T>.RemoveAll(Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes all the elements that match the conditions defined by the specified predicate.\n  remarks: \"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.  \\n  \\n A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \\\"saurus\\\". The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \\\"saurus\\\".  \\n  \\n The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method.  \\n  \\n The <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with \\\"saurus\\\". It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method. The element is removed if the `EndsWithSaurus` method returns `true`.  \\n  \\n> [!NOTE]\\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context, and create it automatically.  \\n  \\n Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method verifies that there are no strings in the list that end with \\\"saurus\\\".  \\n  \\n [!code-cpp[List\\\\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]\"\n  syntax:\n    content: public int RemoveAll (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions of the elements to remove.\n    return:\n      type: System.Int32\n      description: The number of elements removed from the <xref href=\"System.Collections.Generic.List`1\"></xref> .\n  overload: System.Collections.Generic.List`1.RemoveAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)\n  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: List<T>.RemoveAt(Int32)\n  fullName: List<T>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes the element at the specified index of the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item. For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position. In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.  \\n  \\n This method is an O(*n*) operation, where *n* is (<xref:System.Collections.Generic.List%601.Count%2A> - `index`).\"\n  example:\n  - \"The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \\n  \\n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]\"\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to remove.\n  overload: System.Collections.Generic.List`1.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref href=\\\"System.Collections.Generic.List`1.Count\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)\n  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)\n  id: RemoveRange(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: RemoveRange(Int32, Int32)\n  nameWithType: List<T>.RemoveRange(Int32, Int32)\n  fullName: List<T>.RemoveRange(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes a range of elements from the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"The items are removed and all the elements following them in the <xref:System.Collections.Generic.List%601> have their indexes reduced by `count`.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. After the list has been created and modified, the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method is used to remove two elements from the list, beginning at index location 2.  \\n  \\n [!code-cpp[List\\\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]\"\n  syntax:\n    content: public void RemoveRange (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the range of elements to remove.\n    - id: count\n      type: System.Int32\n      description: The number of elements to remove.\n  overload: System.Collections.Generic.List`1.RemoveRange*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Reverse\n  commentId: M:System.Collections.Generic.List`1.Reverse\n  id: Reverse\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Reverse()\n  nameWithType: List<T>.Reverse()\n  fullName: List<T>.Reverse()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Reverses the order of the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  remarks: \"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method. The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings. The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.  \\n  \\n [!code-cpp[List\\\\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]\"\n  syntax:\n    content: public void Reverse ();\n    parameters: []\n  overload: System.Collections.Generic.List`1.Reverse*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)\n  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)\n  id: Reverse(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Reverse(Int32, Int32)\n  nameWithType: List<T>.Reverse(Int32, Int32)\n  fullName: List<T>.Reverse(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Reverses the order of the elements in the specified range.\n  remarks: \"This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method. The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings. The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.  \\n  \\n [!code-cpp[List\\\\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]\"\n  syntax:\n    content: public void Reverse (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the range to reverse.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the range to reverse.\n  overload: System.Collections.Generic.List`1.Reverse*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})\n  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})\n  id: Sort(System.Comparison{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Sort(Comparison<T>)\n  nameWithType: List<T>.Sort(Comparison<T>)\n  fullName: List<T>.Sort(Comparison<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref> using the specified <xref href=\"System.Comparison`1\"></xref>.\n  remarks: \"If `comparison` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the method represented by the delegate.  \\n  \\n If `comparison` is `null`, an <xref:System.ArgumentNullException> is thrown.  \\n  \\n This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:  \\n  \\n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm  \\n  \\n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \\n  \\n-   Otherwise, it uses a Quicksort algorithm.  \\n  \\n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \\n  \\n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.\"\n  example:\n  - \"The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> method overloads on a simple business object. Calling the <xref:System.Collections.Generic.List%601.Sort%2A> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%2A> method is implemented using an anonymous method.  \\n  \\n [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  \\n  \\n The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.  \\n  \\n The example defines an alternative comparison method for strings, named `CompareDinosByLength`. This method works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \\n  \\n A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list also includes an empty string and a null reference. The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.  \\n  \\n [!code-cpp[List\\\\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]\"\n  syntax:\n    content: public void Sort (Comparison<T> comparison);\n    parameters:\n    - id: comparison\n      type: System.Comparison`1\n      description: The <xref href=\"System.Comparison`1\"></xref> to use when comparing elements.\n  overload: System.Collections.Generic.List`1.Sort*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>comparison</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The implementation of <code>comparison</code> caused an error during the sort. For example, <code>comparison</code> might not return 0 when comparing an item with itself.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})\n  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})\n  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Sort(Int32, Int32, IComparer<T>)\n  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)\n  fullName: List<T>.Sort(Int32, Int32, IComparer<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Sorts the elements in a range of elements in <xref href=\"System.Collections.Generic.List`1\"></xref> using the specified comparer.\n  remarks: \"If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \\n  \\n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \\n  \\n This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:  \\n  \\n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm  \\n  \\n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \\n  \\n-   Otherwise, it uses a Quicksort algorithm.  \\n  \\n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \\n  \\n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.  \\n  \\n The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \\n  \\n A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs. Within each of the two groups, the names are not in any particular sort order. The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.  \\n  \\n The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for \\\"Brachiosaurus\\\". The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.  \\n  \\n [!code-cpp[List\\\\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]\"\n  syntax:\n    content: public void Sort (int index, int count, System.Collections.Generic.IComparer<T> comparer);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based starting index of the range to sort.\n    - id: count\n      type: System.Int32\n      description: The length of the range to sort.\n    - id: comparer\n      type: System.Collections.Generic.IComparer`1\n      description: The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>.\n  overload: System.Collections.Generic.List`1.Sort*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\\\"System.Collections.Generic.List`1\\\"></xref>.  \\n  \\n -or-  \\n  \\n The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Sort\n  commentId: M:System.Collections.Generic.List`1.Sort\n  id: Sort\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Sort()\n  nameWithType: List<T>.Sort()\n  fullName: List<T>.Sort()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref> using the default comparer.\n  remarks: \"This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements. The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \\n  \\n This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:  \\n  \\n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.  \\n  \\n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.  \\n  \\n-   Otherwise, it uses a Quicksort algorithm.  \\n  \\n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \\n  \\n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.\"\n  example:\n  - \"The following example adds some names to a `List<String>` object, displays the list in unsorted order, calls the <xref:System.Collections.Generic.List%601.Sort%2A> method, and then displays the sorted list.  \\n  \\n [!code-csharp[System.Collections.Generic.List.Sort#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]\\n [!code-vb[System.Collections.Generic.List.Sort#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  \\n  \\n The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort> and <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overloads on a simple business object. Calling the <xref:System.Collections.Generic.List%601.Sort> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method is implemented by using an anonymous method.  \\n  \\n [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  \\n  \\n The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload. A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted, and displayed again.  \\n  \\n The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them. The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%2A> method is negative in each case, because the strings are not in the list. Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order. The second search string is larger than any element in the list, so the insertion position is at the end of the list.  \\n  \\n [!code-cpp[List\\\\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]\"\n  syntax:\n    content: public void Sort ();\n    parameters: []\n  overload: System.Collections.Generic.List`1.Sort*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})\n  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})\n  id: Sort(System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Sort(IComparer<T>)\n  nameWithType: List<T>.Sort(IComparer<T>)\n  fullName: List<T>.Sort(IComparer<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\"></xref> using the specified comparer.\n  remarks: \"If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \\n  \\n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \\n  \\n This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:  \\n  \\n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.  \\n  \\n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.  \\n  \\n-   Otherwise, it uses a Quicksort algorithm.  \\n  \\n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \\n  \\n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.  \\n  \\n The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \\n  \\n A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted using the alternate comparer, and displayed again.  \\n  \\n The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer. The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings. These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.  \\n  \\n [!code-cpp[List\\\\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]\"\n  syntax:\n    content: public void Sort (System.Collections.Generic.IComparer<T> comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.Generic.IComparer`1\n      description: The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>.\n  overload: System.Collections.Generic.List`1.Sort*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>comparer</code> is `null`, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface for type <code>T</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.ToArray\n  commentId: M:System.Collections.Generic.List`1.ToArray\n  id: ToArray\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: List<T>.ToArray()\n  fullName: List<T>.ToArray()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Copies the elements of the <xref href=\"System.Collections.Generic.List`1\"></xref> to a new array.\n  remarks: \"The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.ToArray%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2. The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements. The elements of the array are displayed.  \\n  \\n [!code-cpp[List\\\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]\"\n  syntax:\n    content: public T[] ToArray ();\n    parameters: []\n    return:\n      type: T[]\n      description: An array containing copies of the elements of the <xref href=\"System.Collections.Generic.List`1\"></xref>.\n  overload: System.Collections.Generic.List`1.ToArray*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.TrimExcess\n  commentId: M:System.Collections.Generic.List`1.TrimExcess\n  id: TrimExcess\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: TrimExcess()\n  nameWithType: List<T>.TrimExcess()\n  fullName: List<T>.TrimExcess()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.List`1\"></xref>, if that number is less than a threshold value.\n  remarks: \"This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.  \\n  \\n> [!NOTE]\\n>  The current threshold of 90 percent might change in future releases.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.  \\n  \\n To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.  \\n  \\n The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property.\"\n  example:\n  - \"The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.  \\n  \\n [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  \\n  \\n The following example demonstrates the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method. Several properties and methods of the <xref:System.Collections.Generic.List%601> class are used to add, insert, and remove items from a list of strings. Then the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed. If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized. Finally, the contents of the list are cleared.  \\n  \\n [!code-cpp[List\\\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\\n [!code-fsharp[List\\\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\\n [!code-vb[List\\\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]\"\n  syntax:\n    content: public void TrimExcess ();\n    parameters: []\n  overload: System.Collections.Generic.List`1.TrimExcess*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\n  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\n  id: TrueForAll(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: TrueForAll(Predicate<T>)\n  nameWithType: List<T>.TrueForAll(Predicate<T>)\n  fullName: List<T>.TrueForAll(Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Determines whether every element in the <xref href=\"System.Collections.Generic.List`1\"></xref> matches the conditions defined by the specified predicate.\n  remarks: \"The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element. The elements are processed in order, and all calls are made on a single thread.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Collections.Generic.List%601.TrueForAll%2A> method and several other methods that use <xref:System.Predicate%601> generic delegate.  \\n  \\n A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \\\"saurus\\\". The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \\\"saurus\\\".  \\n  \\n The <xref:System.Collections.Generic.List%601.TrueForAll%2A> method traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `false`.  \\n  \\n> [!NOTE]\\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \\n  \\n [!code-cpp[List\\\\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]\\n [!code-csharp[List\\\\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]\\n [!code-vb[List\\\\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]\"\n  syntax:\n    content: public bool TrueForAll (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: The <xref href=\"System.Predicate`1\"></xref> delegate that defines the conditions to check against the elements.\n    return:\n      type: System.Boolean\n      description: '`true` if every element in the <xref href=\"System.Collections.Generic.List`1\"></xref> matches the conditions defined by the specified predicate; otherwise, `false`. If the list has no elements, the return value is `true`.'\n  overload: System.Collections.Generic.List`1.TrueForAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>match</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection<T>#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ICollection<T>.IsReadOnly\n  nameWithType: List<T>.ICollection<T>.IsReadOnly\n  fullName: List<T>.ICollection<T>.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Generic.ICollection`1\"></xref> is read-only.\n  remarks: \"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Generic.ICollection`1\"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.'\n  overload: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IEnumerable<T>.GetEnumerator()\n  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()\n  fullName: List<T>.IEnumerable<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Returns an enumerator that iterates through a collection.\n  remarks: \"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \\n  \\n The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator`1\n      description: An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> that can be used to iterate through the collection.\n  overload: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)\n  fullName: List<T>.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.\n  remarks: \"> [!NOTE]\\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  syntax:\n    content: void ICollection.CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>arrayIndex</code> is less than 0.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n <code>array</code> does not have zero-based indexing.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.ICollection\\\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  \\n  \\n -or-  \\n  \\n The type of the source <xref href=\\\"System.Collections.ICollection\\\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: List<T>.ICollection.IsSynchronized\n  fullName: List<T>.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).\n  remarks: \"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure.  In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.'\n  overload: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: List<T>.ICollection.SyncRoot\n  fullName: List<T>.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.\n  remarks: \"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \\n  \\n```csharp  \\nICollection ic = ...;  \\nlock (ic.SyncRoot)   \\n{  \\n    // Access the collection.  \\n}  \\n```  \\n  \\n```vb  \\nDim ic As ICollection = ...  \\nSyncLock ic.SyncRoot  \\n    ' Access the collection.  \\nEnd SyncLock  \\n```  \\n  \\n```cpp#  \\nICollection^ ic = ...;  \\ntry   \\n{  \\n    Monitor::Enter(ic->SyncRoot);  \\n    // Access the collection.  \\n}  \\nfinally   \\n{  \\n    Monitor::Exit(ic->SyncRoot);  \\n}  \\n```  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns the current instance.\n  overload: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: List<T>.IEnumerable.GetEnumerator()\n  fullName: List<T>.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Returns an enumerator that iterates through a collection.\n  remarks: \"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> that can be used to iterate through the collection.\n  overload: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IList.Add(Object)\n  nameWithType: List<T>.IList.Add(Object)\n  fullName: List<T>.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Adds an item to the <xref href=\"System.Collections.IList\"></xref>.\n  remarks: If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\n  syntax:\n    content: int IList.Add (object item);\n    parameters:\n    - id: item\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to add to the <xref href=\"System.Collections.IList\"></xref>.\n    return:\n      type: System.Int32\n      description: The position into which the new element was inserted.\n  overload: System.Collections.Generic.List`1.System#Collections#IList#Add*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IList.Contains(Object)\n  nameWithType: List<T>.IList.Contains(Object)\n  fullName: List<T>.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Determines whether the <xref href=\"System.Collections.IList\"></xref> contains a specific value.\n  remarks: \"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  syntax:\n    content: bool IList.Contains (object item);\n    parameters:\n    - id: item\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to locate in the <xref href=\"System.Collections.IList\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>item</code> is found in the <xref href=\"System.Collections.IList\"></xref>; otherwise, `false`.'\n  overload: System.Collections.Generic.List`1.System#Collections#IList#Contains*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IList.IndexOf(Object)\n  nameWithType: List<T>.IList.IndexOf(Object)\n  fullName: List<T>.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Determines the index of a specific item in the <xref href=\"System.Collections.IList\"></xref>.\n  remarks: \"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  syntax:\n    content: int IList.IndexOf (object item);\n    parameters:\n    - id: item\n      type: System.Object\n      description: The object to locate in the <xref href=\"System.Collections.IList\"></xref>.\n    return:\n      type: System.Int32\n      description: The index of <code>item</code> if found in the list; otherwise, –1.\n  overload: System.Collections.Generic.List`1.System#Collections#IList#IndexOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IList.Insert(Int32, Object)\n  nameWithType: List<T>.IList.Insert(Int32, Object)\n  fullName: List<T>.IList.Insert(Int32, Object)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Inserts an item to the <xref href=\"System.Collections.IList\"></xref> at the specified index.\n  remarks: \"If `index` equals the number of items in the <xref:System.Collections.IList>, then `item` is appended to the end.  \\n  \\n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  syntax:\n    content: void IList.Insert (int index, object item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which <code>item</code> should be inserted.\n    - id: item\n      type: System.Object\n      description: The object to insert into the <xref href=\"System.Collections.IList\"></xref>.\n  overload: System.Collections.Generic.List`1.System#Collections#IList#Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is not a valid index in the <xref href=\"System.Collections.IList\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize\n  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IList.IsFixedSize\n  nameWithType: List<T>.IList.IsFixedSize\n  fullName: List<T>.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IList\"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.'\n  overload: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly\n  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IList.IsReadOnly\n  nameWithType: List<T>.IList.IsReadOnly\n  fullName: List<T>.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> is read-only.\n  remarks: \"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IList\"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href=\"System.Collections.Generic.List`1\"></xref>, this property always returns `false`.'\n  overload: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IList.Item(Int32)\n  nameWithType: List<T>.IList.Item(Int32)\n  fullName: List<T>.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets or sets the element at the specified index.\n  remarks: \"The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to get or set.\n    return:\n      type: System.Object\n      description: The element at the specified index.\n  overload: System.Collections.Generic.List`1.System#Collections#IList#Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is not a valid index in the <xref href=\"System.Collections.IList\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The property is set and <code>value</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IList.Remove(Object)\n  nameWithType: List<T>.IList.Remove(Object)\n  fullName: List<T>.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Removes the first occurrence of a specific object from the <xref href=\"System.Collections.IList\"></xref>.\n  remarks: \"This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \\n  \\n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.\"\n  syntax:\n    content: void IList.Remove (object item);\n    parameters:\n    - id: item\n      type: System.Object\n      description: The object to remove from the <xref href=\"System.Collections.IList\"></xref>.\n  overload: System.Collections.Generic.List`1.System#Collections#IList#Remove*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>item</code> is of a type that is not assignable to the <xref href=\"System.Collections.IList\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.Collections.Generic.List`1.#ctor\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: List<T>()\n  nameWithType: List<T>.List<T>()\n  fullName: List<T>.List<T>()\n- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: List<T>(IEnumerable<T>)\n  nameWithType: List<T>.List<T>(IEnumerable<T>)\n  fullName: List<T>.List<T>(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.List`1.#ctor(System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: List<T>(Int32)\n  nameWithType: List<T>.List<T>(Int32)\n  fullName: List<T>.List<T>(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.Add(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Add(T)\n  nameWithType: List<T>.Add(T)\n  fullName: List<T>.Add(T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: AddRange(IEnumerable<T>)\n  nameWithType: List<T>.AddRange(IEnumerable<T>)\n  fullName: List<T>.AddRange(IEnumerable<T>)\n- uid: System.Collections.Generic.List`1.AsReadOnly\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: AsReadOnly()\n  nameWithType: List<T>.AsReadOnly()\n  fullName: List<T>.AsReadOnly()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Collections.Generic.List`1.BinarySearch(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: BinarySearch(T)\n  nameWithType: List<T>.BinarySearch(T)\n  fullName: List<T>.BinarySearch(T)\n- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: BinarySearch(T, IComparer<T>)\n  nameWithType: List<T>.BinarySearch(T, IComparer<T>)\n  fullName: List<T>.BinarySearch(T, IComparer<T>)\n- uid: System.Collections.Generic.IComparer`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: BinarySearch(Int32, Int32, T, IComparer<T>)\n  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)\n  fullName: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)\n- uid: System.Collections.Generic.List`1.Capacity\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Capacity\n  nameWithType: List<T>.Capacity\n  fullName: List<T>.Capacity\n- uid: System.Collections.Generic.List`1.Clear\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Clear()\n  nameWithType: List<T>.Clear()\n  fullName: List<T>.Clear()\n- uid: System.Collections.Generic.List`1.Contains(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Contains(T)\n  nameWithType: List<T>.Contains(T)\n  fullName: List<T>.Contains(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ConvertAll<TOutput>(Converter<T,TOutput>)\n  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T,TOutput>)\n  fullName: List<T>.ConvertAll<TOutput>(Converter<T,TOutput>)\n- uid: System.Collections.Generic.List`1\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>\n- uid: TOutput\n  name: TOutput\n  nameWithType: TOutput\n  fullName: TOutput\n- uid: System.Collections.Generic.List{TOutput}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<TOutput>\n  nameWithType: List<TOutput>\n  fullName: System.Collections.Generic.List<TOutput>\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    nameWithType: List\n    fullName: System.Collections.Generic.List\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOutput\n    name: TOutput\n    nameWithType: TOutput\n    fullName: TOutput\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Converter`2\n  name: Converter<TInput,TOutput>\n  nameWithType: Converter<TInput,TOutput>\n  fullName: System.Converter<TInput,TOutput>\n- uid: System.Converter{T,TOutput}\n  parent: System\n  isExternal: false\n  name: Converter<T,TOutput>\n  nameWithType: Converter<T,TOutput>\n  fullName: System.Converter<T,TOutput>\n  spec.csharp:\n  - uid: System.Converter`2\n    name: Converter\n    nameWithType: Converter\n    fullName: System.Converter\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TOutput\n    name: TOutput\n    nameWithType: TOutput\n    fullName: TOutput\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: CopyTo(T[], Int32)\n  nameWithType: List<T>.CopyTo(T[], Int32)\n  fullName: List<T>.CopyTo(T[], Int32)\n- uid: T[]\n  isExternal: true\n  name: T[]\n  nameWithType: T[]\n  fullName: T[]\n  spec.csharp:\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: CopyTo(Int32, T[], Int32, Int32)\n  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)\n  fullName: List<T>.CopyTo(Int32, T[], Int32, Int32)\n- uid: System.Collections.Generic.List`1.CopyTo(`0[])\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: CopyTo(T[])\n  nameWithType: List<T>.CopyTo(T[])\n  fullName: List<T>.CopyTo(T[])\n- uid: System.Collections.Generic.List`1.Count\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Count\n  nameWithType: List<T>.Count\n  fullName: List<T>.Count\n- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Exists(Predicate<T>)\n  nameWithType: List<T>.Exists(Predicate<T>)\n  fullName: List<T>.Exists(Predicate<T>)\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Find(Predicate<T>)\n  nameWithType: List<T>.Find(Predicate<T>)\n  fullName: List<T>.Find(Predicate<T>)\n- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindAll(Predicate<T>)\n  nameWithType: List<T>.FindAll(Predicate<T>)\n  fullName: List<T>.FindAll(Predicate<T>)\n- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindIndex(Predicate<T>)\n  nameWithType: List<T>.FindIndex(Predicate<T>)\n  fullName: List<T>.FindIndex(Predicate<T>)\n- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindIndex(Int32, Predicate<T>)\n  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)\n  fullName: List<T>.FindIndex(Int32, Predicate<T>)\n- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindIndex(Int32, Int32, Predicate<T>)\n  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)\n  fullName: List<T>.FindIndex(Int32, Int32, Predicate<T>)\n- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLast(Predicate<T>)\n  nameWithType: List<T>.FindLast(Predicate<T>)\n  fullName: List<T>.FindLast(Predicate<T>)\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLastIndex(Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Predicate<T>)\n  fullName: List<T>.FindLastIndex(Predicate<T>)\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLastIndex(Int32, Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)\n  fullName: List<T>.FindLastIndex(Int32, Predicate<T>)\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLastIndex(Int32, Int32, Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)\n  fullName: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)\n- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ForEach(Action<T>)\n  nameWithType: List<T>.ForEach(Action<T>)\n  fullName: List<T>.ForEach(Action<T>)\n- uid: System.Action`1\n  parent: System\n  isExternal: false\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Collections.Generic.List`1.GetEnumerator\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: List<T>.GetEnumerator()\n  fullName: List<T>.GetEnumerator()\n- uid: System.Collections.Generic.List{T}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>+Enumerator\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    nameWithType: List\n    fullName: System.Collections.Generic.List\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: GetRange(Int32, Int32)\n  nameWithType: List<T>.GetRange(Int32, Int32)\n  fullName: List<T>.GetRange(Int32, Int32)\n- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IndexOf(T, Int32)\n  nameWithType: List<T>.IndexOf(T, Int32)\n  fullName: List<T>.IndexOf(T, Int32)\n- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IndexOf(T, Int32, Int32)\n  nameWithType: List<T>.IndexOf(T, Int32, Int32)\n  fullName: List<T>.IndexOf(T, Int32, Int32)\n- uid: System.Collections.Generic.List`1.IndexOf(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IndexOf(T)\n  nameWithType: List<T>.IndexOf(T)\n  fullName: List<T>.IndexOf(T)\n- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Insert(Int32, T)\n  nameWithType: List<T>.Insert(Int32, T)\n  fullName: List<T>.Insert(Int32, T)\n- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: InsertRange(Int32, IEnumerable<T>)\n  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)\n  fullName: List<T>.InsertRange(Int32, IEnumerable<T>)\n- uid: System.Collections.Generic.List`1.Item(System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: List<T>.Item(Int32)\n  fullName: List<T>.Item(Int32)\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: LastIndexOf(T)\n  nameWithType: List<T>.LastIndexOf(T)\n  fullName: List<T>.LastIndexOf(T)\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: LastIndexOf(T, Int32)\n  nameWithType: List<T>.LastIndexOf(T, Int32)\n  fullName: List<T>.LastIndexOf(T, Int32)\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: LastIndexOf(T, Int32, Int32)\n  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)\n  fullName: List<T>.LastIndexOf(T, Int32, Int32)\n- uid: System.Collections.Generic.List`1.Remove(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Remove(T)\n  nameWithType: List<T>.Remove(T)\n  fullName: List<T>.Remove(T)\n- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: RemoveAll(Predicate<T>)\n  nameWithType: List<T>.RemoveAll(Predicate<T>)\n  fullName: List<T>.RemoveAll(Predicate<T>)\n- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: List<T>.RemoveAt(Int32)\n  fullName: List<T>.RemoveAt(Int32)\n- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: RemoveRange(Int32, Int32)\n  nameWithType: List<T>.RemoveRange(Int32, Int32)\n  fullName: List<T>.RemoveRange(Int32, Int32)\n- uid: System.Collections.Generic.List`1.Reverse\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Reverse()\n  nameWithType: List<T>.Reverse()\n  fullName: List<T>.Reverse()\n- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Reverse(Int32, Int32)\n  nameWithType: List<T>.Reverse(Int32, Int32)\n  fullName: List<T>.Reverse(Int32, Int32)\n- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Sort(Comparison<T>)\n  nameWithType: List<T>.Sort(Comparison<T>)\n  fullName: List<T>.Sort(Comparison<T>)\n- uid: System.Comparison`1\n  parent: System\n  isExternal: false\n  name: Comparison<T>\n  nameWithType: Comparison<T>\n  fullName: System.Comparison<T>\n- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Sort(Int32, Int32, IComparer<T>)\n  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)\n  fullName: List<T>.Sort(Int32, Int32, IComparer<T>)\n- uid: System.Collections.Generic.List`1.Sort\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Sort()\n  nameWithType: List<T>.Sort()\n  fullName: List<T>.Sort()\n- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Sort(IComparer<T>)\n  nameWithType: List<T>.Sort(IComparer<T>)\n  fullName: List<T>.Sort(IComparer<T>)\n- uid: System.Collections.Generic.List`1.ToArray\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ToArray()\n  nameWithType: List<T>.ToArray()\n  fullName: List<T>.ToArray()\n- uid: System.Collections.Generic.List`1.TrimExcess\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: TrimExcess()\n  nameWithType: List<T>.TrimExcess()\n  fullName: List<T>.TrimExcess()\n- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: TrueForAll(Predicate<T>)\n  nameWithType: List<T>.TrueForAll(Predicate<T>)\n  fullName: List<T>.TrueForAll(Predicate<T>)\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ICollection<T>.IsReadOnly\n  nameWithType: List<T>.ICollection<T>.IsReadOnly\n  fullName: List<T>.ICollection<T>.IsReadOnly\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IEnumerable<T>.GetEnumerator()\n  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()\n  fullName: List<T>.IEnumerable<T>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)\n  fullName: List<T>.ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: List<T>.ICollection.IsSynchronized\n  fullName: List<T>.ICollection.IsSynchronized\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: List<T>.ICollection.SyncRoot\n  fullName: List<T>.ICollection.SyncRoot\n- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: List<T>.IEnumerable.GetEnumerator()\n  fullName: List<T>.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IList.Add(Object)\n  nameWithType: List<T>.IList.Add(Object)\n  fullName: List<T>.IList.Add(Object)\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IList.Contains(Object)\n  nameWithType: List<T>.IList.Contains(Object)\n  fullName: List<T>.IList.Contains(Object)\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IList.IndexOf(Object)\n  nameWithType: List<T>.IList.IndexOf(Object)\n  fullName: List<T>.IList.IndexOf(Object)\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IList.Insert(Int32, Object)\n  nameWithType: List<T>.IList.Insert(Int32, Object)\n  fullName: List<T>.IList.Insert(Int32, Object)\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IList.IsFixedSize\n  nameWithType: List<T>.IList.IsFixedSize\n  fullName: List<T>.IList.IsFixedSize\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IList.IsReadOnly\n  nameWithType: List<T>.IList.IsReadOnly\n  fullName: List<T>.IList.IsReadOnly\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IList.Item(Int32)\n  nameWithType: List<T>.IList.Item(Int32)\n  fullName: List<T>.IList.Item(Int32)\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IList.Remove(Object)\n  nameWithType: List<T>.IList.Remove(Object)\n  fullName: List<T>.IList.Remove(Object)\n- uid: System.Collections.Generic.List`1.Sort*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Sort\n  nameWithType: List<T>.Sort\n  fullName: List<T>.Sort\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.#ctor*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: List<T>\n  nameWithType: List<T>.List<T>\n  fullName: List<T>.List<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Add*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Add\n  nameWithType: List<T>.Add\n  fullName: List<T>.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.AddRange*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: AddRange\n  nameWithType: List<T>.AddRange\n  fullName: List<T>.AddRange\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.AsReadOnly*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: AsReadOnly\n  nameWithType: List<T>.AsReadOnly\n  fullName: List<T>.AsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.BinarySearch*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: BinarySearch\n  nameWithType: List<T>.BinarySearch\n  fullName: List<T>.BinarySearch\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Capacity*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Capacity\n  nameWithType: List<T>.Capacity\n  fullName: List<T>.Capacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Clear*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Clear\n  nameWithType: List<T>.Clear\n  fullName: List<T>.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Contains*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Contains\n  nameWithType: List<T>.Contains\n  fullName: List<T>.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.ConvertAll``1*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ConvertAll<TOutput>\n  nameWithType: List<T>.ConvertAll<TOutput>\n  fullName: List<T>.ConvertAll<TOutput>\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.CopyTo*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: CopyTo\n  nameWithType: List<T>.CopyTo\n  fullName: List<T>.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Count*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Count\n  nameWithType: List<T>.Count\n  fullName: List<T>.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Exists*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Exists\n  nameWithType: List<T>.Exists\n  fullName: List<T>.Exists\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Find*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Find\n  nameWithType: List<T>.Find\n  fullName: List<T>.Find\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.FindAll*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindAll\n  nameWithType: List<T>.FindAll\n  fullName: List<T>.FindAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.FindIndex*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindIndex\n  nameWithType: List<T>.FindIndex\n  fullName: List<T>.FindIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.FindLast*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLast\n  nameWithType: List<T>.FindLast\n  fullName: List<T>.FindLast\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.FindLastIndex*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLastIndex\n  nameWithType: List<T>.FindLastIndex\n  fullName: List<T>.FindLastIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.ForEach*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ForEach\n  nameWithType: List<T>.ForEach\n  fullName: List<T>.ForEach\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.GetEnumerator*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: List<T>.GetEnumerator\n  fullName: List<T>.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.GetRange*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: GetRange\n  nameWithType: List<T>.GetRange\n  fullName: List<T>.GetRange\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.IndexOf*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IndexOf\n  nameWithType: List<T>.IndexOf\n  fullName: List<T>.IndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Insert*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Insert\n  nameWithType: List<T>.Insert\n  fullName: List<T>.Insert\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.InsertRange*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: InsertRange\n  nameWithType: List<T>.InsertRange\n  fullName: List<T>.InsertRange\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Item*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Item\n  nameWithType: List<T>.Item\n  fullName: List<T>.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.LastIndexOf*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: LastIndexOf\n  nameWithType: List<T>.LastIndexOf\n  fullName: List<T>.LastIndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Remove*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Remove\n  nameWithType: List<T>.Remove\n  fullName: List<T>.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.RemoveAll*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: RemoveAll\n  nameWithType: List<T>.RemoveAll\n  fullName: List<T>.RemoveAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.RemoveAt*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: RemoveAt\n  nameWithType: List<T>.RemoveAt\n  fullName: List<T>.RemoveAt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.RemoveRange*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: RemoveRange\n  nameWithType: List<T>.RemoveRange\n  fullName: List<T>.RemoveRange\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.Reverse*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Reverse\n  nameWithType: List<T>.Reverse\n  fullName: List<T>.Reverse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.ToArray*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ToArray\n  nameWithType: List<T>.ToArray\n  fullName: List<T>.ToArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.TrimExcess*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: TrimExcess\n  nameWithType: List<T>.TrimExcess\n  fullName: List<T>.TrimExcess\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.TrueForAll*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: TrueForAll\n  nameWithType: List<T>.TrueForAll\n  fullName: List<T>.TrueForAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.IsReadOnly\n  nameWithType: List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullName: List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  nameWithType: List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  fullName: List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: List<T>.System.Collections.ICollection.CopyTo\n  fullName: List<T>.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: List<T>.System.Collections.ICollection.IsSynchronized\n  fullName: List<T>.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: List<T>.System.Collections.ICollection.SyncRoot\n  fullName: List<T>.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: List<T>.System.Collections.IEnumerable.GetEnumerator\n  fullName: List<T>.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Add*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: List<T>.System.Collections.IList.Add\n  fullName: List<T>.System.Collections.IList.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: List<T>.System.Collections.IList.Contains\n  fullName: List<T>.System.Collections.IList.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: List<T>.System.Collections.IList.IndexOf\n  fullName: List<T>.System.Collections.IList.IndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: List<T>.System.Collections.IList.Insert\n  fullName: List<T>.System.Collections.IList.Insert\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: List<T>.System.Collections.IList.IsFixedSize\n  fullName: List<T>.System.Collections.IList.IsFixedSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: List<T>.System.Collections.IList.IsReadOnly\n  fullName: List<T>.System.Collections.IList.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Item*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: List<T>.System.Collections.IList.Item\n  fullName: List<T>.System.Collections.IList.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: List<T>.System.Collections.IList.Remove\n  fullName: List<T>.System.Collections.IList.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableArray\n  isExternal: false\n  name: ToImmutableArray<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableList\n  isExternal: false\n  name: ToImmutableList<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(IEnumerable<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>)\n  fullName: Extensions.Attributes(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)\n  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)\n  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodesAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>)\n  fullName: Extensions.Elements<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: InDocumentOrder<T>(IEnumerable<T>)\n  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Nodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)\n  fullName: Extensions.Nodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove(IEnumerable<XAttribute>)\n  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)\n  fullName: Extensions.Remove(IEnumerable<XAttribute>)\n- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove<T>(IEnumerable<T>)\n  nameWithType: Extensions.Remove<T>(IEnumerable<T>)\n  fullName: Extensions.Remove<T>(IEnumerable<T>)\n- uid: System.Collections.Generic.ICollection`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<T>\n  nameWithType: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n- uid: System.Collections.Generic.IList`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.IReadOnlyCollection`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IReadOnlyCollection<T>\n  nameWithType: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n- uid: System.Collections.Generic.IReadOnlyList`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IReadOnlyList<T>\n  nameWithType: IReadOnlyList<T>\n  fullName: System.Collections.Generic.IReadOnlyList<T>\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n"}