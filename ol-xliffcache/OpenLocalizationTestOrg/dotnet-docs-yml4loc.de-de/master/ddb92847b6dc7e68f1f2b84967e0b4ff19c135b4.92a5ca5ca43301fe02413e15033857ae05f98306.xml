{"nodes":[{"content":"Discovers the attributes of a field and provides access to field metadata.","nodes":[{"pos":[0,74],"content":"Discovers the attributes of a field and provides access to field metadata.","nodes":[{"content":"Discovers the attributes of a field and provides access to field metadata.","pos":[0,74]}]}],"pos":[3052,3127],"yaml":true},{"content":"The field information is obtained from metadata. The <xref:System.Reflection.FieldInfo> class does not have a public constructor. <xref:System.Reflection.FieldInfo> objects are obtained by calling either the <xref:System.Type.GetFields%2A> or <xref:System.Type.GetField%2A> method of a `Type` object.  \n  \n Fields are variables defined in the class. <xref:System.Reflection.FieldInfo> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field. The class is not loaded into memory until invoke or get is called on the object.","nodes":[{"pos":[0,300],"content":"The field information is obtained from metadata. The <xref:System.Reflection.FieldInfo> class does not have a public constructor. <xref:System.Reflection.FieldInfo> objects are obtained by calling either the <xref:System.Type.GetFields%2A> or <xref:System.Type.GetField%2A> method of a `Type` object.","nodes":[{"content":"The field information is obtained from metadata.","pos":[0,48]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> class does not have a public constructor.","pos":[49,129],"source":" The <xref:System.Reflection.FieldInfo> class does not have a public constructor."},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects are obtained by calling either the <ph id=\"ph2\">&lt;xref:System.Type.GetFields%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Type.GetField%2A&gt;</ph> method of a <ph id=\"ph4\">`Type`</ph> object.","pos":[130,300],"source":" <xref:System.Reflection.FieldInfo> objects are obtained by calling either the <xref:System.Type.GetFields%2A> or <xref:System.Type.GetField%2A> method of a `Type` object."}]},{"pos":[307,586],"content":"Fields are variables defined in the class. <xref:System.Reflection.FieldInfo> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field. The class is not loaded into memory until invoke or get is called on the object.","nodes":[{"content":"Fields are variables defined in the class. <xref:System.Reflection.FieldInfo> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field. The class is not loaded into memory until invoke or get is called on the object.","pos":[0,279],"nodes":[{"content":"Fields are variables defined in the class.","pos":[0,42]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field.","pos":[43,198],"source":" <xref:System.Reflection.FieldInfo> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field."},{"content":"The class is not loaded into memory until invoke or get is called on the object.","pos":[199,279]}]}]}],"pos":[3138,3729],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the `FieldInfo` class.","nodes":[{"pos":[0,52],"content":"Initializes a new instance of the <ph id=\"ph1\">`FieldInfo`</ph> class.","source":"Initializes a new instance of the `FieldInfo` class."}],"pos":[9981,10034],"yaml":true},{"content":"Gets the attributes associated with this field.","nodes":[{"pos":[0,47],"content":"Gets the attributes associated with this field.","nodes":[{"content":"Gets the attributes associated with this field.","pos":[0,47]}]}],"pos":[11295,11343],"yaml":true},{"content":"All members have a set of attributes, which are defined in relation to the specific type of member. `FieldAttributes` informs the user whether this field is the private field, a static field, and so on.  \n  \n To get the `Attributes` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `Attributes`.","nodes":[{"pos":[0,202],"content":"All members have a set of attributes, which are defined in relation to the specific type of member. `FieldAttributes` informs the user whether this field is the private field, a static field, and so on.","nodes":[{"content":"All members have a set of attributes, which are defined in relation to the specific type of member.","pos":[0,99]},{"content":"<ph id=\"ph1\">`FieldAttributes`</ph> informs the user whether this field is the private field, a static field, and so on.","pos":[100,202],"source":"`FieldAttributes` informs the user whether this field is the private field, a static field, and so on."}]},{"pos":[209,352],"content":"To get the `Attributes` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `Attributes`.","nodes":[{"content":"To get the <ph id=\"ph1\">`Attributes`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,61],"source":"To get the `Attributes` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`FieldInfo`</ph>.","pos":[62,99],"source":" From the `Type`, get the `FieldInfo`."},{"content":"From the <ph id=\"ph1\">`FieldInfo`</ph>, get the <ph id=\"ph2\">`Attributes`</ph>.","pos":[100,143],"source":" From the `FieldInfo`, get the `Attributes`."}]}],"pos":[11354,11711],"yaml":true,"extradata":"MT"},{"content":"The `FieldAttributes` for this field.","nodes":[{"pos":[0,37],"content":"The <ph id=\"ph1\">`FieldAttributes`</ph> for this field.","source":"The `FieldAttributes` for this field."}],"pos":[12564,12602],"yaml":true},{"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"pos":[0,84],"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"content":"Returns a value that indicates whether this instance is equal to a specified object.","pos":[0,84]}]}],"pos":[14189,14274],"yaml":true},{"content":"An object to compare with this instance, or `null`.","nodes":[{"pos":[0,51],"content":"An object to compare with this instance, or <ph id=\"ph1\">`null`</ph>.","source":"An object to compare with this instance, or `null`."}],"pos":[14414,14466],"yaml":true},{"content":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals the type and value of this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`."}],"pos":[14524,14617],"yaml":true},{"content":"Gets a `RuntimeFieldHandle`, which is a handle to the internal metadata representation of a field.","nodes":[{"pos":[0,98],"content":"Gets a <ph id=\"ph1\">`RuntimeFieldHandle`</ph>, which is a handle to the internal metadata representation of a field.","source":"Gets a `RuntimeFieldHandle`, which is a handle to the internal metadata representation of a field."}],"pos":[16141,16240],"yaml":true},{"content":"The handles are valid only in the appdomain in which they were obtained.","nodes":[{"pos":[0,72],"content":"The handles are valid only in the appdomain in which they were obtained.","nodes":[{"content":"The handles are valid only in the appdomain in which they were obtained.","pos":[0,72]}]}],"pos":[16251,16324],"yaml":true,"extradata":"MT"},{"content":"A handle to the internal metadata representation of a field.","nodes":[{"pos":[0,60],"content":"A handle to the internal metadata representation of a field.","nodes":[{"content":"A handle to the internal metadata representation of a field.","pos":[0,60]}]}],"pos":[17026,17087],"yaml":true},{"content":"Gets the type of this field object.","nodes":[{"pos":[0,35],"content":"Gets the type of this field object.","nodes":[{"content":"Gets the type of this field object.","pos":[0,35]}]}],"pos":[18282,18318],"yaml":true},{"content":"The type is some primitive data type, such as `String`, `Boolean`, or `GUID`.  \n  \n To get the `FieldType` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `FieldType` value.","nodes":[{"pos":[0,77],"content":"The type is some primitive data type, such as <ph id=\"ph1\">`String`</ph>, <ph id=\"ph2\">`Boolean`</ph>, or <ph id=\"ph3\">`GUID`</ph>.","source":"The type is some primitive data type, such as `String`, `Boolean`, or `GUID`."},{"pos":[84,231],"content":"To get the `FieldType` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `FieldType` value.","nodes":[{"content":"To get the <ph id=\"ph1\">`FieldType`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,60],"source":"To get the `FieldType` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`FieldInfo`</ph>.","pos":[61,98],"source":" From the `Type`, get the `FieldInfo`."},{"content":"From the <ph id=\"ph1\">`FieldInfo`</ph>, get the <ph id=\"ph2\">`FieldType`</ph> value.","pos":[99,147],"source":" From the `FieldInfo`, get the `FieldType` value."}]}],"pos":[18329,18565],"yaml":true,"extradata":"MT"},{"content":"The type of this field object.","nodes":[{"pos":[0,30],"content":"The type of this field object.","nodes":[{"content":"The type of this field object.","pos":[0,30]}]}],"pos":[19336,19367],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.FieldInfo\"></xref> for the field represented by the specified handle.","nodes":[{"pos":[0,106],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> for the field represented by the specified handle.","source":"Gets a <xref href=\"System.Reflection.FieldInfo\"></xref> for the field represented by the specified handle."}],"pos":[21097,21204],"yaml":true},{"content":"Handles are valid only in the application domain in which they were obtained.","nodes":[{"pos":[0,77],"content":"Handles are valid only in the application domain in which they were obtained.","nodes":[{"content":"Handles are valid only in the application domain in which they were obtained.","pos":[0,77]}]}],"pos":[21215,21293],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.RuntimeFieldHandle\"></xref> structure that contains the handle to the internal metadata representation of a field.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.RuntimeFieldHandle\"&gt;&lt;/xref&gt;</ph> structure that contains the handle to the internal metadata representation of a field.","source":"A <xref href=\"System.RuntimeFieldHandle\"></xref> structure that contains the handle to the internal metadata representation of a field."}],"pos":[22407,22543],"yaml":true},{"content":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field specified by <code>handle</code>.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> object representing the field specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">handle</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field specified by <code>handle</code>."}],"pos":[22614,22729],"yaml":true},{"content":"<code>handle</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;handle&lt;/code&gt;</ph> is invalid.","source":"<code>handle</code> is invalid."}],"pos":[22897,22929],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.FieldInfo\"></xref> for the field represented by the specified handle, for the specified generic type.","nodes":[{"pos":[0,138],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> for the field represented by the specified handle, for the specified generic type.","source":"Gets a <xref href=\"System.Reflection.FieldInfo\"></xref> for the field represented by the specified handle, for the specified generic type."}],"pos":[24723,24862],"yaml":true},{"content":"Handles are valid only in the application domain in which they were obtained.  \n  \n The recommended practice is that `declaringType` should always be the runtime type handle of the constructed type that `handle` belongs to. That is, if `handle` is a runtime field handle for a field that belongs to `MyType<int>` (`MyType(Of Integer)` in Visual Basic), `declaringType` is the runtime type handle for `MyType<int>`. Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.  \n  \n Implementations are compatible in some cases. For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments. For example, `MyType<string>`, `MyType<object>`, and `MyType<ArrayList>` all share the same implementation. In this situation, the <xref:System.Reflection.FieldInfo> object that is returned represents a field on the type that `declaringType` specifies, regardless of the original source of `handle`. This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.  \n  \n If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position. In that case, the only way to use the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=fullName> overload is to ensure that `declaringType` is the runtime type handle for the constructed type that `handle` belongs to.","nodes":[{"pos":[0,77],"content":"Handles are valid only in the application domain in which they were obtained.","nodes":[{"content":"Handles are valid only in the application domain in which they were obtained.","pos":[0,77]}]},{"pos":[84,564],"content":"The recommended practice is that `declaringType` should always be the runtime type handle of the constructed type that `handle` belongs to. That is, if `handle` is a runtime field handle for a field that belongs to `MyType<int>` (`MyType(Of Integer)` in Visual Basic), `declaringType` is the runtime type handle for `MyType<int>`. Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.","nodes":[{"content":"The recommended practice is that <ph id=\"ph1\">`declaringType`</ph> should always be the runtime type handle of the constructed type that <ph id=\"ph2\">`handle`</ph> belongs to.","pos":[0,139],"source":"The recommended practice is that `declaringType` should always be the runtime type handle of the constructed type that `handle` belongs to."},{"content":"That is, if <ph id=\"ph1\">`handle`</ph> is a runtime field handle for a field that belongs to <ph id=\"ph2\">`MyType&lt;int&gt;`</ph> (<ph id=\"ph3\">`MyType(Of Integer)`</ph> in Visual Basic), <ph id=\"ph4\">`declaringType`</ph> is the runtime type handle for <ph id=\"ph5\">`MyType&lt;int&gt;`</ph>.","pos":[140,330],"source":" That is, if `handle` is a runtime field handle for a field that belongs to `MyType<int>` (`MyType(Of Integer)` in Visual Basic), `declaringType` is the runtime type handle for `MyType<int>`."},{"content":"Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.","pos":[331,480]}]},{"pos":[571,1227],"content":"Implementations are compatible in some cases. For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments. For example, `MyType<string>`, `MyType<object>`, and `MyType<ArrayList>` all share the same implementation. In this situation, the <xref:System.Reflection.FieldInfo> object that is returned represents a field on the type that `declaringType` specifies, regardless of the original source of `handle`. This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.","nodes":[{"content":"Implementations are compatible in some cases.","pos":[0,45]},{"content":"For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments.","pos":[46,225]},{"content":"For example, <ph id=\"ph1\">`MyType&lt;string&gt;`</ph>, <ph id=\"ph2\">`MyType&lt;object&gt;`</ph>, and <ph id=\"ph3\">`MyType&lt;ArrayList&gt;`</ph> all share the same implementation.","pos":[226,333],"source":" For example, `MyType<string>`, `MyType<object>`, and `MyType<ArrayList>` all share the same implementation."},{"content":"In this situation, the <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> object that is returned represents a field on the type that <ph id=\"ph2\">`declaringType`</ph> specifies, regardless of the original source of <ph id=\"ph3\">`handle`</ph>.","pos":[334,525],"source":" In this situation, the <xref:System.Reflection.FieldInfo> object that is returned represents a field on the type that `declaringType` specifies, regardless of the original source of `handle`."},{"content":"This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.","pos":[526,656]}]},{"pos":[1234,1801],"content":"If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position. In that case, the only way to use the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=fullName> overload is to ensure that `declaringType` is the runtime type handle for the constructed type that `handle` belongs to.","nodes":[{"content":"If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position.","pos":[0,271]},{"content":"In that case, the only way to use the <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=fullName&gt;</ph> overload is to ensure that <ph id=\"ph2\">`declaringType`</ph> is the runtime type handle for the constructed type that <ph id=\"ph3\">`handle`</ph> belongs to.","pos":[272,567],"source":" In that case, the only way to use the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=fullName> overload is to ensure that `declaringType` is the runtime type handle for the constructed type that `handle` belongs to."}]}],"pos":[24873,26683],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.RuntimeFieldHandle\"></xref> structure that contains the handle to the internal metadata representation of a field.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.RuntimeFieldHandle\"&gt;&lt;/xref&gt;</ph> structure that contains the handle to the internal metadata representation of a field.","source":"A <xref href=\"System.RuntimeFieldHandle\"></xref> structure that contains the handle to the internal metadata representation of a field."}],"pos":[28455,28591],"yaml":true},{"content":"A <xref href=\"System.RuntimeTypeHandle\"></xref> structure that contains the handle to the generic type that defines the field.","nodes":[{"pos":[0,126],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.RuntimeTypeHandle\"&gt;&lt;/xref&gt;</ph> structure that contains the handle to the generic type that defines the field.","source":"A <xref href=\"System.RuntimeTypeHandle\"></xref> structure that contains the handle to the generic type that defines the field."}],"pos":[28671,28798],"yaml":true},{"content":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field specified by <code>handle</code>, in the generic type specified by <code>declaringType</code>.","nodes":[{"pos":[0,175],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> object representing the field specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">handle</ph><ept id=\"p1\">&lt;/code&gt;</ept>, in the generic type specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">declaringType</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field specified by <code>handle</code>, in the generic type specified by <code>declaringType</code>."}],"pos":[28869,29045],"yaml":true},{"content":"<code>handle</code> is invalid.  \n  \n -or-  \n  \n <code>declaringType</code> is not compatible with <code>handle</code>. For example, <code>declaringType</code> is the runtime type handle of the generic type definition, and <code>handle</code> comes from a constructed type.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;handle&lt;/code&gt;</ph> is invalid.","source":"<code>handle</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,273],"content":"<code>declaringType</code> is not compatible with <code>handle</code>. For example, <code>declaringType</code> is the runtime type handle of the generic type definition, and <code>handle</code> comes from a constructed type.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;declaringType&lt;/code&gt;</ph> is not compatible with <ph id=\"ph2\">&lt;code&gt;handle&lt;/code&gt;</ph>.","pos":[0,70],"source":"<code>declaringType</code> is not compatible with <code>handle</code>."},{"content":"For example, <ph id=\"ph1\">&lt;code&gt;declaringType&lt;/code&gt;</ph> is the runtime type handle of the generic type definition, and <ph id=\"ph2\">&lt;code&gt;handle&lt;/code&gt;</ph> comes from a constructed type.","pos":[71,224],"source":" For example, <code>declaringType</code> is the runtime type handle of the generic type definition, and <code>handle</code> comes from a constructed type."}]}],"pos":[29213,29493],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[31053,31094],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[31228,31263],"yaml":true},{"content":"Gets an array of types that identify the optional custom modifiers of the field.","nodes":[{"pos":[0,80],"content":"Gets an array of types that identify the optional custom modifiers of the field.","nodes":[{"content":"Gets an array of types that identify the optional custom modifiers of the field.","pos":[0,80]}]}],"pos":[32908,32989],"yaml":true},{"content":"The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,731],"content":"The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.","pos":[0,194],"source":"The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers."},{"content":"For more information on custom modifiers, see <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.","pos":[195,434],"source":" For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[435,731],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[33000,33732],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects that identify the optional custom modifiers of the current field, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>.","nodes":[{"pos":[0,188],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that identify the optional custom modifiers of the current field, such as <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","source":"An array of <xref href=\"System.Type\"></xref> objects that identify the optional custom modifiers of the current field, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."}],"pos":[33884,34073],"yaml":true},{"content":"Returns a literal value associated with the field by a compiler.","nodes":[{"pos":[0,64],"content":"Returns a literal value associated with the field by a compiler.","nodes":[{"content":"Returns a literal value associated with the field by a compiler.","pos":[0,64]}]}],"pos":[35491,35556],"yaml":true},{"content":"This method is provided for designers of managed compilers and code analyzers.  \n  \n This method can be used in both the execution context and the reflection-only context.  \n  \n In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  \n  \n> [!NOTE]\n>  For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,78],"content":"This method is provided for designers of managed compilers and code analyzers.","nodes":[{"content":"This method is provided for designers of managed compilers and code analyzers.","pos":[0,78]}]},{"pos":[85,171],"content":"This method can be used in both the execution context and the reflection-only context.","nodes":[{"content":"This method can be used in both the execution context and the reflection-only context.","pos":[0,86]}]},{"pos":[178,645],"content":"In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.","nodes":[{"content":"In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.","pos":[0,467],"nodes":[{"content":"In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.","pos":[0,114]},{"content":"Constant information does not directly influence runtime behavior.","pos":[115,181]},{"content":"Compilers inspect this information, at compile time, when importing metadata.","pos":[182,259]},{"content":"If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.","pos":[260,377]},{"content":"There are no MSIL instructions that can be used to access the Constant table at run time.","pos":[378,467]}]}]},{"pos":[653,1065],"content":"[!NOTE]\n For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,410],"nodes":[{"content":"For more information on constant values and the Constant table, see the ECMA Partition II documentation.","pos":[1,105]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[106,402],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[35567,36642],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is `null`.","nodes":[{"pos":[0,192],"content":"An <xref href=\"System.Object\"></xref> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is `null`.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that contains the literal value associated with the field.","pos":[0,96],"source":"An <xref href=\"System.Object\"></xref> that contains the literal value associated with the field."},{"content":"If the literal value is a class type with an element value of zero, the return value is <ph id=\"ph1\">`null`</ph>.","pos":[97,192],"source":" If the literal value is a class type with an element value of zero, the return value is `null`."}]}],"pos":[36787,36980],"yaml":true},{"content":"The Constant table in unmanaged metadata does not contain a constant value for the current field.","nodes":[{"pos":[0,97],"content":"The Constant table in unmanaged metadata does not contain a constant value for the current field.","nodes":[{"content":"The Constant table in unmanaged metadata does not contain a constant value for the current field.","pos":[0,97]}]}],"pos":[37165,37263],"yaml":true},{"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.","nodes":[{"pos":[0,216],"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.","nodes":[{"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.","pos":[0,216],"nodes":[{"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS).","pos":[0,99]},{"content":"See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.","pos":[100,216]}]}]}],"pos":[37353,37572],"yaml":true},{"content":"The constant value for the field is not set.","nodes":[{"pos":[0,44],"content":"The constant value for the field is not set.","nodes":[{"content":"The constant value for the field is not set.","pos":[0,44]}]}],"pos":[37674,37719],"yaml":true},{"content":"Gets an array of types that identify the required custom modifiers of the property.","nodes":[{"pos":[0,83],"content":"Gets an array of types that identify the required custom modifiers of the property.","nodes":[{"content":"Gets an array of types that identify the required custom modifiers of the property.","pos":[0,83]}]}],"pos":[39094,39178],"yaml":true},{"content":"The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,731],"content":"The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.","pos":[0,194],"source":"The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers."},{"content":"For more information on custom modifiers, see <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.","pos":[195,434],"source":" For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[435,731],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[39189,39921],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects that identify the required custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"></xref>.","nodes":[{"pos":[0,272],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"&gt;&lt;/xref&gt;</ph>.","source":"An array of <xref href=\"System.Type\"></xref> objects that identify the required custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"></xref>."}],"pos":[40073,40346],"yaml":true},{"content":"When overridden in a derived class, returns the value of a field supported by a given object.","nodes":[{"pos":[0,93],"content":"When overridden in a derived class, returns the value of a field supported by a given object.","nodes":[{"content":"When overridden in a derived class, returns the value of a field supported by a given object.","pos":[0,93]}]}],"pos":[41761,41855],"yaml":true},{"content":"If the field is static, `obj` is ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. Note that the return type of `GetValue` is `Object`. For example, if the field holds a Boolean primitive value, an instance of `Object` with the appropriate Boolean value is returned. Before returning the value, `GetValue` checks to see if the user has access permission.  \n  \n> [!NOTE]\n>  Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,412],"content":"If the field is static, `obj` is ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. Note that the return type of `GetValue` is `Object`. For example, if the field holds a Boolean primitive value, an instance of `Object` with the appropriate Boolean value is returned. Before returning the value, `GetValue` checks to see if the user has access permission.","nodes":[{"content":"If the field is static, <ph id=\"ph1\">`obj`</ph> is ignored.","pos":[0,41],"source":"If the field is static, `obj` is ignored."},{"content":"For non-static fields, <ph id=\"ph1\">`obj`</ph> should be an instance of a class that inherits or declares the field.","pos":[42,140],"source":" For non-static fields, `obj` should be an instance of a class that inherits or declares the field."},{"content":"Note that the return type of <ph id=\"ph1\">`GetValue`</ph> is <ph id=\"ph2\">`Object`</ph>.","pos":[141,193],"source":" Note that the return type of `GetValue` is `Object`."},{"content":"For example, if the field holds a Boolean primitive value, an instance of <ph id=\"ph1\">`Object`</ph> with the appropriate Boolean value is returned.","pos":[194,324],"source":" For example, if the field holds a Boolean primitive value, an instance of `Object` with the appropriate Boolean value is returned."},{"content":"Before returning the value, <ph id=\"ph1\">`GetValue`</ph> checks to see if the user has access permission.","pos":[325,412],"source":" Before returning the value, `GetValue` checks to see if the user has access permission."}]},{"pos":[420,632],"content":"[!NOTE]\n Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.","leadings":["","> "],"nodes":[{"content":" Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.","pos":[8,210],"nodes":[{"content":"Access restrictions are ignored for fully trusted code.","pos":[1,56]},{"content":"That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.","pos":[57,202]}]}]},{"pos":[640,1210],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1221,1348],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[41866,43225],"yaml":true,"extradata":"MT"},{"content":"The object whose field value will be returned.","nodes":[{"pos":[0,46],"content":"The object whose field value will be returned.","nodes":[{"content":"The object whose field value will be returned.","pos":[0,46]}]}],"pos":[44537,44584],"yaml":true},{"content":"An object containing the value of the field reflected by this instance.","nodes":[{"pos":[0,71],"content":"An object containing the value of the field reflected by this instance.","nodes":[{"content":"An object containing the value of the field reflected by this instance.","pos":[0,71]}]}],"pos":[44641,44713],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The field is non-static and <code>obj</code> is `null`.","nodes":[{"pos":[0,214],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch <xref href=\"System.Exception\"></xref> instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instead.","pos":[47,214],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch <xref href=\"System.Exception\"></xref> instead."}]},{"pos":[220,237],"content":"</p>\n    </block>","nodes":[]},{"pos":[244,299],"content":"The field is non-static and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The field is non-static and <code>obj</code> is `null`."}],"pos":[44889,45204],"yaml":true},{"content":"A field is marked literal, but the field does not have one of the accepted literal types.","nodes":[{"pos":[0,89],"content":"A field is marked literal, but the field does not have one of the accepted literal types.","nodes":[{"content":"A field is marked literal, but the field does not have one of the accepted literal types.","pos":[0,89]}]}],"pos":[45306,45396],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The caller does not have permission to access this field.","nodes":[{"pos":[0,253],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.MemberAccessException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,253],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead."}]},{"pos":[259,276],"content":"</p>\n    </block>","nodes":[]},{"pos":[283,340],"content":"The caller does not have permission to access this field.","nodes":[{"content":"The caller does not have permission to access this field.","pos":[0,57]}]}],"pos":[45496,45852],"yaml":true},{"content":"The method is neither declared nor inherited by the class of <code>obj</code>.","nodes":[{"pos":[0,78],"content":"The method is neither declared nor inherited by the class of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The method is neither declared nor inherited by the class of <code>obj</code>."}],"pos":[45946,46025],"yaml":true},{"content":"Returns the value of a field supported by a given object.","nodes":[{"pos":[0,57],"content":"Returns the value of a field supported by a given object.","nodes":[{"content":"Returns the value of a field supported by a given object.","pos":[0,57]}]}],"pos":[47617,47675],"yaml":true},{"content":"A <xref href=\"System.TypedReference\"></xref> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.","nodes":[{"pos":[0,184],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TypedReference\"&gt;&lt;/xref&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.","source":"A <xref href=\"System.TypedReference\"></xref> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location."}],"pos":[47885,48070],"yaml":true},{"content":"An `Object` containing a field value.","nodes":[{"pos":[0,37],"content":"An <ph id=\"ph1\">`Object`</ph> containing a field value.","source":"An `Object` containing a field value."}],"pos":[48127,48165],"yaml":true},{"content":"The caller requires the Common Language Specification (CLS) alternative, but called this method instead.","nodes":[{"pos":[0,104],"content":"The caller requires the Common Language Specification (CLS) alternative, but called this method instead.","nodes":[{"content":"The caller requires the Common Language Specification (CLS) alternative, but called this method instead.","pos":[0,104]}]}],"pos":[48337,48442],"yaml":true},{"content":"Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Assembly\"></xref>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.","nodes":[{"pos":[0,284],"content":"Gets a value indicating whether the potential visibility of this field is described by <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldAttributes.Assembly\"&gt;&lt;/xref&gt;</ph>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.","source":"Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Assembly\"></xref>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly."}],"pos":[49694,49979],"yaml":true},{"content":"The actual visibility of a field is limited by the visibility of its type. The <xref:System.Reflection.FieldInfo.IsAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.  \n  \n The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic). This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.","nodes":[{"pos":[0,270],"content":"The actual visibility of a field is limited by the visibility of its type. The <xref:System.Reflection.FieldInfo.IsAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.","nodes":[{"content":"The actual visibility of a field is limited by the visibility of its type.","pos":[0,74]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph> property might be <ph id=\"ph2\">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.","pos":[75,270],"source":" The <xref:System.Reflection.FieldInfo.IsAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type."}]},{"pos":[277,702],"content":"The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic). This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.","nodes":[{"content":"The visibility of a field is exactly described by <ph id=\"ph1\">&lt;xref:System.Reflection.FieldAttributes?displayProperty=fullName&gt;</ph> if the only visibility modifier is <ph id=\"ph2\">`internal`</ph> (<ph id=\"ph3\">`Friend`</ph> in Visual Basic).","pos":[0,189],"source":"The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic)."},{"content":"This property is <ph id=\"ph1\">`false`</ph> for fields that are <ph id=\"ph2\">`protected internal`</ph> in C# (<ph id=\"ph3\">`Protected Friend`</ph> in Visual Basic, <ph id=\"ph4\">`protected public`</ph> in C++); use the <ph id=\"ph5\">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.","pos":[190,425],"source":" This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields."}]}],"pos":[49990,50697],"yaml":true,"extradata":"MT"},{"content":"`true` if the visibility of this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Assembly\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,147],"content":"<ph id=\"ph1\">`true`</ph> if the visibility of this field is exactly described by <ph id=\"ph2\">&lt;xref href=\"System.Reflection.FieldAttributes.Assembly\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the visibility of this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Assembly\"></xref>; otherwise, `false`."}],"pos":[51860,52010],"yaml":true},{"content":"Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Family\"></xref>; that is, the field is visible only within its class and derived classes.","nodes":[{"pos":[0,212],"content":"Gets a value indicating whether the visibility of this field is described by <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldAttributes.Family\"&gt;&lt;/xref&gt;</ph>; that is, the field is visible only within its class and derived classes.","source":"Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Family\"></xref>; that is, the field is visible only within its class and derived classes."}],"pos":[53542,53755],"yaml":true},{"content":"The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `protected`. This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.","nodes":[{"pos":[0,399],"content":"The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `protected`. This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.","nodes":[{"content":"The visibility of a field is exactly described by <ph id=\"ph1\">&lt;xref:System.Reflection.FieldAttributes?displayProperty=fullName&gt;</ph> if the only visibility modifier is <ph id=\"ph2\">`protected`</ph>.","pos":[0,163],"source":"The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `protected`."},{"content":"This property is <ph id=\"ph1\">`false`</ph> for fields that are <ph id=\"ph2\">`protected internal`</ph> in C# (<ph id=\"ph3\">`Protected Friend`</ph> in Visual Basic, <ph id=\"ph4\">`protected public`</ph> in C++); use the <ph id=\"ph5\">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.","pos":[164,399],"source":" This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields."}]}],"pos":[53766,54166],"yaml":true,"extradata":"MT"},{"content":"`true` if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Family\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,137],"content":"<ph id=\"ph1\">`true`</ph> if access to this field is exactly described by <ph id=\"ph2\">&lt;xref href=\"System.Reflection.FieldAttributes.Family\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Family\"></xref>; otherwise, `false`."}],"pos":[55327,55467],"yaml":true},{"content":"Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\"></xref>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.","nodes":[{"pos":[0,244],"content":"Gets a value indicating whether the visibility of this field is described by <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldAttributes.FamANDAssem\"&gt;&lt;/xref&gt;</ph>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.","source":"Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\"></xref>; that is, the field can be accessed from derived classes, but only if they are in the same assembly."}],"pos":[57063,57308],"yaml":true},{"content":"If a field has <xref:System.Reflection.FieldAttributes.FamANDAssem> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.  \n  \n The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++. Fields with this visibility cannot be defined in Visual Basic or C#.","nodes":[{"pos":[0,201],"content":"If a field has <xref:System.Reflection.FieldAttributes.FamANDAssem> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.","nodes":[{"content":"If a field has <ph id=\"ph1\">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem&gt;</ph> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.","pos":[0,201],"source":"If a field has <xref:System.Reflection.FieldAttributes.FamANDAssem> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type."}]},{"pos":[208,450],"content":"The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++. Fields with this visibility cannot be defined in Visual Basic or C#.","nodes":[{"content":"The visibility of a field is exactly described by <ph id=\"ph1\">&lt;xref:System.Reflection.FieldAttributes?displayProperty=fullName&gt;</ph> if the visibility modifier is <ph id=\"ph2\">`protected private`</ph> in C++.","pos":[0,173],"source":"The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++."},{"content":"Fields with this visibility cannot be defined in Visual Basic or C#.","pos":[174,242]}]}],"pos":[57319,57774],"yaml":true,"extradata":"MT"},{"content":"`true` if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,142],"content":"<ph id=\"ph1\">`true`</ph> if access to this field is exactly described by <ph id=\"ph2\">&lt;xref href=\"System.Reflection.FieldAttributes.FamANDAssem\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\"></xref>; otherwise, `false`."}],"pos":[58946,59091],"yaml":true},{"content":"Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\"></xref>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.","nodes":[{"pos":[0,263],"content":"Gets a value indicating whether the potential visibility of this field is described by <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldAttributes.FamORAssem\"&gt;&lt;/xref&gt;</ph>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.","source":"Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\"></xref>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly."}],"pos":[60692,60956],"yaml":true},{"content":"If a field has <xref:System.Reflection.FieldAttributes.FamORAssem> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.  \n  \n The actual visibility of a field is limited by the visibility of its type. The <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.  \n  \n The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++).","nodes":[{"pos":[0,201],"content":"If a field has <xref:System.Reflection.FieldAttributes.FamORAssem> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.","nodes":[{"content":"If a field has <ph id=\"ph1\">&lt;xref:System.Reflection.FieldAttributes.FamORAssem&gt;</ph> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.","pos":[0,201],"source":"If a field has <xref:System.Reflection.FieldAttributes.FamORAssem> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type."}]},{"pos":[208,486],"content":"The actual visibility of a field is limited by the visibility of its type. The <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.","nodes":[{"content":"The actual visibility of a field is limited by the visibility of its type.","pos":[0,74]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property might be <ph id=\"ph2\">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.","pos":[75,278],"source":" The <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type."}]},{"pos":[493,730],"content":"The visibility of a field is exactly described by <ph id=\"ph1\">&lt;xref:System.Reflection.FieldAttributes?displayProperty=fullName&gt;</ph> if the visibility modifier is <ph id=\"ph2\">`protected internal`</ph> in C# (<ph id=\"ph3\">`Protected Friend`</ph> in Visual Basic, <ph id=\"ph4\">`protected public`</ph> in C++).","source":"The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++)."}],"pos":[60967,61704],"yaml":true,"extradata":"MT"},{"content":"`true` if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">`true`</ph> if access to this field is exactly described by <ph id=\"ph2\">&lt;xref href=\"System.Reflection.FieldAttributes.FamORAssem\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\"></xref>; otherwise, `false`."}],"pos":[62875,63019],"yaml":true},{"content":"Gets a value indicating whether the field can only be set in the body of the constructor.","nodes":[{"pos":[0,89],"content":"Gets a value indicating whether the field can only be set in the body of the constructor.","nodes":[{"content":"Gets a value indicating whether the field can only be set in the body of the constructor.","pos":[0,89]}]}],"pos":[64571,64661],"yaml":true},{"content":"If the returned value is `true`, the field can only be initialized, and is read-only thereafter.  \n  \n To get the `IsInitOnly` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsInitOnly` property. To access a non-public field, combine <xref:System.Reflection.BindingFlags?displayProperty=fullName> with either or both of <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> in the `GetField` method.  \n  \n The `IsInitOnly` property is set when the <xref:System.Reflection.FieldAttributes?displayProperty=fullName> attribute is set.","nodes":[{"pos":[0,96],"content":"If the returned value is <ph id=\"ph1\">`true`</ph>, the field can only be initialized, and is read-only thereafter.","source":"If the returned value is `true`, the field can only be initialized, and is read-only thereafter."},{"pos":[103,535],"content":"To get the `IsInitOnly` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsInitOnly` property. To access a non-public field, combine <xref:System.Reflection.BindingFlags?displayProperty=fullName> with either or both of <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> in the `GetField` method.","nodes":[{"content":"To get the <ph id=\"ph1\">`IsInitOnly`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,61],"source":"To get the `IsInitOnly` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`FieldInfo`</ph>.","pos":[62,99],"source":" From the `Type`, get the `FieldInfo`."},{"content":"From the <ph id=\"ph1\">`FieldInfo`</ph>, get the <ph id=\"ph2\">`IsInitOnly`</ph> property.","pos":[100,152],"source":" From the `FieldInfo`, get the `IsInitOnly` property."},{"content":"To access a non-public field, combine <ph id=\"ph1\">&lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;</ph> with either or both of <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;</ph> in the <ph id=\"ph4\">`GetField`</ph> method.","pos":[153,432],"source":" To access a non-public field, combine <xref:System.Reflection.BindingFlags?displayProperty=fullName> with either or both of <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> in the `GetField` method."}]},{"pos":[542,667],"content":"The <ph id=\"ph1\">`IsInitOnly`</ph> property is set when the <ph id=\"ph2\">&lt;xref:System.Reflection.FieldAttributes?displayProperty=fullName&gt;</ph> attribute is set.","source":"The `IsInitOnly` property is set when the <xref:System.Reflection.FieldAttributes?displayProperty=fullName> attribute is set."}],"pos":[64672,65346],"yaml":true,"extradata":"MT"},{"content":"`true` if the field has the `InitOnly` attribute set; otherwise, `false`.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">`true`</ph> if the field has the <ph id=\"ph2\">`InitOnly`</ph> attribute set; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the field has the `InitOnly` attribute set; otherwise, `false`."}],"pos":[66283,66359],"yaml":true},{"content":"Gets a value indicating whether the value is written at compile time and cannot be changed.","nodes":[{"pos":[0,91],"content":"Gets a value indicating whether the value is written at compile time and cannot be changed.","nodes":[{"content":"Gets a value indicating whether the value is written at compile time and cannot be changed.","pos":[0,91]}]}],"pos":[67897,67989],"yaml":true},{"content":"The `IsLiteral` property is set when the `FieldAttributes.Literal` attribute is set. If this attribute is set, the field cannot be changed and is constant.","nodes":[{"pos":[0,155],"content":"The `IsLiteral` property is set when the `FieldAttributes.Literal` attribute is set. If this attribute is set, the field cannot be changed and is constant.","nodes":[{"content":"The <ph id=\"ph1\">`IsLiteral`</ph> property is set when the <ph id=\"ph2\">`FieldAttributes.Literal`</ph> attribute is set.","pos":[0,84],"source":"The `IsLiteral` property is set when the `FieldAttributes.Literal` attribute is set."},{"content":"If this attribute is set, the field cannot be changed and is constant.","pos":[85,155]}]}],"pos":[68000,68156],"yaml":true,"extradata":"MT"},{"content":"`true` if the field has the `Literal` attribute set; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the field has the <ph id=\"ph2\">`Literal`</ph> attribute set; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the field has the `Literal` attribute set; otherwise, `false`."}],"pos":[68268,68343],"yaml":true},{"content":"Gets a value indicating whether this field has the `NotSerialized` attribute.","nodes":[{"pos":[0,77],"content":"Gets a value indicating whether this field has the <ph id=\"ph1\">`NotSerialized`</ph> attribute.","source":"Gets a value indicating whether this field has the `NotSerialized` attribute."}],"pos":[69894,69972],"yaml":true},{"content":"The `IsNotSerialized` property returns `true` when the field is marked with the `FieldAttributes.NotSerialized` flag. When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.","nodes":[{"pos":[0,236],"content":"The `IsNotSerialized` property returns `true` when the field is marked with the `FieldAttributes.NotSerialized` flag. When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.","nodes":[{"content":"The <ph id=\"ph1\">`IsNotSerialized`</ph> property returns <ph id=\"ph2\">`true`</ph> when the field is marked with the <ph id=\"ph3\">`FieldAttributes.NotSerialized`</ph> flag.","pos":[0,117],"source":"The `IsNotSerialized` property returns `true` when the field is marked with the `FieldAttributes.NotSerialized` flag."},{"content":"When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.","pos":[118,236]}]}],"pos":[69983,70220],"yaml":true,"extradata":"MT"},{"content":"`true` if the field has the `NotSerialized` attribute set; otherwise, `false`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">`true`</ph> if the field has the <ph id=\"ph2\">`NotSerialized`</ph> attribute set; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the field has the `NotSerialized` attribute set; otherwise, `false`."}],"pos":[70950,71031],"yaml":true},{"content":"Gets a value indicating whether the corresponding `PinvokeImpl` attribute is set in <xref href=\"System.Reflection.FieldAttributes\"></xref>.","nodes":[{"pos":[0,139],"content":"Gets a value indicating whether the corresponding <ph id=\"ph1\">`PinvokeImpl`</ph> attribute is set in <ph id=\"ph2\">&lt;xref href=\"System.Reflection.FieldAttributes\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a value indicating whether the corresponding `PinvokeImpl` attribute is set in <xref href=\"System.Reflection.FieldAttributes\"></xref>."}],"pos":[72232,72372],"yaml":true},{"content":"`true` if the `PinvokeImpl` attribute is set in <xref href=\"System.Reflection.FieldAttributes\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">`PinvokeImpl`</ph> attribute is set in <ph id=\"ph3\">&lt;xref href=\"System.Reflection.FieldAttributes\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the `PinvokeImpl` attribute is set in <xref href=\"System.Reflection.FieldAttributes\"></xref>; otherwise, `false`."}],"pos":[73103,73229],"yaml":true},{"content":"Gets a value indicating whether the field is private.","nodes":[{"pos":[0,53],"content":"Gets a value indicating whether the field is private.","nodes":[{"content":"Gets a value indicating whether the field is private.","pos":[0,53]}]}],"pos":[74426,74480],"yaml":true},{"content":"Private fields are accessible only from member functions.  \n  \n The `IsPrivate` property is set when the `FieldAttributes.Private` attribute is set.  \n  \n To get the `IsPrivate` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsPrivate` property. To access a non-public field, set the `BindingFlags` to `NonPublic`, and either `Static` or `Instance` in the `GetField` method.","nodes":[{"pos":[0,57],"content":"Private fields are accessible only from member functions.","nodes":[{"content":"Private fields are accessible only from member functions.","pos":[0,57]}]},{"pos":[64,148],"content":"The <ph id=\"ph1\">`IsPrivate`</ph> property is set when the <ph id=\"ph2\">`FieldAttributes.Private`</ph> attribute is set.","source":"The `IsPrivate` property is set when the `FieldAttributes.Private` attribute is set."},{"pos":[155,434],"content":"To get the `IsPrivate` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsPrivate` property. To access a non-public field, set the `BindingFlags` to `NonPublic`, and either `Static` or `Instance` in the `GetField` method.","nodes":[{"content":"To get the <ph id=\"ph1\">`IsPrivate`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,60],"source":"To get the `IsPrivate` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`FieldInfo`</ph>.","pos":[61,98],"source":" From the `Type`, get the `FieldInfo`."},{"content":"From the <ph id=\"ph1\">`FieldInfo`</ph>, get the <ph id=\"ph2\">`IsPrivate`</ph> property.","pos":[99,150],"source":" From the `FieldInfo`, get the `IsPrivate` property."},{"content":"To access a non-public field, set the <ph id=\"ph1\">`BindingFlags`</ph> to <ph id=\"ph2\">`NonPublic`</ph>, and either <ph id=\"ph3\">`Static`</ph> or <ph id=\"ph4\">`Instance`</ph> in the <ph id=\"ph5\">`GetField`</ph> method.","pos":[151,279],"source":" To access a non-public field, set the `BindingFlags` to `NonPublic`, and either `Static` or `Instance` in the `GetField` method."}]}],"pos":[74491,74932],"yaml":true,"extradata":"MT"},{"content":"`true` if the field is private; otherwise; `false`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">`true`</ph> if the field is private; otherwise; <ph id=\"ph2\">`false`</ph>.","source":"`true` if the field is private; otherwise; `false`."}],"pos":[75556,75610],"yaml":true},{"content":"Gets a value indicating whether the field is public.","nodes":[{"pos":[0,52],"content":"Gets a value indicating whether the field is public.","nodes":[{"content":"Gets a value indicating whether the field is public.","pos":[0,52]}]}],"pos":[77141,77194],"yaml":true},{"content":"Public fields are accessible everywhere their corresponding classes are visible.  \n  \n The `IsPublic` property is set when the `FieldAttributes.Public` attribute is set.  \n  \n To get the `IsPublic` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsPublic` property. If the field is other than public, it is protected and cannot be readily accessed. To access a nonpublic field, set the `BindingFlags` to `NonPublic`, specify either `BindingFlags.Instance` or `BindingFlags.Static`, and use this for the `GetField` method.","nodes":[{"pos":[0,80],"content":"Public fields are accessible everywhere their corresponding classes are visible.","nodes":[{"content":"Public fields are accessible everywhere their corresponding classes are visible.","pos":[0,80]}]},{"pos":[87,169],"content":"The <ph id=\"ph1\">`IsPublic`</ph> property is set when the <ph id=\"ph2\">`FieldAttributes.Public`</ph> attribute is set.","source":"The `IsPublic` property is set when the `FieldAttributes.Public` attribute is set."},{"pos":[176,580],"content":"To get the `IsPublic` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsPublic` property. If the field is other than public, it is protected and cannot be readily accessed. To access a nonpublic field, set the `BindingFlags` to `NonPublic`, specify either `BindingFlags.Instance` or `BindingFlags.Static`, and use this for the `GetField` method.","nodes":[{"content":"To get the <ph id=\"ph1\">`IsPublic`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,59],"source":"To get the `IsPublic` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`FieldInfo`</ph>.","pos":[60,97],"source":" From the `Type`, get the `FieldInfo`."},{"content":"From the <ph id=\"ph1\">`FieldInfo`</ph>, get the <ph id=\"ph2\">`IsPublic`</ph> property.","pos":[98,148],"source":" From the `FieldInfo`, get the `IsPublic` property."},{"content":"If the field is other than public, it is protected and cannot be readily accessed.","pos":[149,231]},{"content":"To access a nonpublic field, set the <ph id=\"ph1\">`BindingFlags`</ph> to <ph id=\"ph2\">`NonPublic`</ph>, specify either <ph id=\"ph3\">`BindingFlags.Instance`</ph> or <ph id=\"ph4\">`BindingFlags.Static`</ph>, and use this for the <ph id=\"ph5\">`GetField`</ph> method.","pos":[232,404],"source":" To access a nonpublic field, set the `BindingFlags` to `NonPublic`, specify either `BindingFlags.Instance` or `BindingFlags.Static`, and use this for the `GetField` method."}]}],"pos":[77205,77792],"yaml":true,"extradata":"MT"},{"content":"`true` if this field is public; otherwise, `false`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">`true`</ph> if this field is public; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this field is public; otherwise, `false`."}],"pos":[78500,78554],"yaml":true},{"content":"Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.","nodes":[{"pos":[0,128],"content":"Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.","nodes":[{"content":"Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.","pos":[0,128]}]}],"pos":[80122,80251],"yaml":true},{"content":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,392],"content":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,392],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).","pos":[0,321],"source":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[322,392]}]}]},{"pos":[399,413],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[414,432],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[433,455],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[456,477],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[589,597],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[625,638],"content":"Safe critical","nodes":[{"content":"Safe critical","pos":[0,13]}]},{"pos":[665,676],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[707,910],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,203]}]},{"pos":[918,2034],"content":"[!IMPORTANT]\n For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","leadings":["","> "],"nodes":[{"content":" For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","pos":[13,1114],"nodes":[{"content":"For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.","pos":[1,109]},{"content":"If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.","pos":[110,298]},{"content":"The assembly and all its types are treated as transparent.","pos":[299,357]},{"content":"The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).","pos":[358,591]},{"content":"By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.","pos":[592,847]},{"content":"You can determine the current trust levels of assemblies and application domains by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> properties.","pos":[848,1101],"source":" You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties."}]}]},{"pos":[2041,2332],"content":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection and transparency, see <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.","pos":[0,184],"source":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[185,291],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[80262,82610],"yaml":true,"extradata":"MT"},{"content":"`true` if the current field is security-critical or security-safe-critical at the current trust level; `false` if it is transparent.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">`true`</ph> if the current field is security-critical or security-safe-critical at the current trust level; <ph id=\"ph2\">`false`</ph> if it is transparent.","source":"`true` if the current field is security-critical or security-safe-critical at the current trust level; `false` if it is transparent."}],"pos":[82739,82874],"yaml":true},{"content":"Gets a value that indicates whether the current field is security-safe-critical at the current trust level.","nodes":[{"pos":[0,107],"content":"Gets a value that indicates whether the current field is security-safe-critical at the current trust level.","nodes":[{"content":"Gets a value that indicates whether the current field is security-safe-critical at the current trust level.","pos":[0,107]}]}],"pos":[84132,84240],"yaml":true},{"content":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,392],"content":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,392],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).","pos":[0,321],"source":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[322,392]}]}]},{"pos":[399,413],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[414,432],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[433,455],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[456,477],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[589,597],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[625,638],"content":"Safe critical","nodes":[{"content":"Safe critical","pos":[0,13]}]},{"pos":[665,676],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[707,910],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,203]}]},{"pos":[918,2034],"content":"[!IMPORTANT]\n For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","leadings":["","> "],"nodes":[{"content":" For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","pos":[13,1114],"nodes":[{"content":"For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.","pos":[1,109]},{"content":"If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.","pos":[110,298]},{"content":"The assembly and all its types are treated as transparent.","pos":[299,357]},{"content":"The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).","pos":[358,591]},{"content":"By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.","pos":[592,847]},{"content":"You can determine the current trust levels of assemblies and application domains by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> properties.","pos":[848,1101],"source":" You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties."}]}]},{"pos":[2041,2332],"content":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection and transparency, see <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.","pos":[0,184],"source":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[185,291],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[84251,86599],"yaml":true,"extradata":"MT"},{"content":"`true` if the current field is security-safe-critical at the current trust level; `false` if it is security-critical or transparent.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">`true`</ph> if the current field is security-safe-critical at the current trust level; <ph id=\"ph2\">`false`</ph> if it is security-critical or transparent.","source":"`true` if the current field is security-safe-critical at the current trust level; `false` if it is security-critical or transparent."}],"pos":[86732,86867],"yaml":true},{"content":"Gets a value that indicates whether the current field is transparent at the current trust level.","nodes":[{"pos":[0,96],"content":"Gets a value that indicates whether the current field is transparent at the current trust level.","nodes":[{"content":"Gets a value that indicates whether the current field is transparent at the current trust level.","pos":[0,96]}]}],"pos":[88123,88220],"yaml":true},{"content":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,392],"content":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,392],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).","pos":[0,321],"source":"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[322,392]}]}]},{"pos":[399,413],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[414,432],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[433,455],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[456,477],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[589,597],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[625,638],"content":"Safe critical","nodes":[{"content":"Safe critical","pos":[0,13]}]},{"pos":[665,676],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[707,910],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,203]}]},{"pos":[918,2034],"content":"[!IMPORTANT]\n For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","leadings":["","> "],"nodes":[{"content":" For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","pos":[13,1114],"nodes":[{"content":"For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.","pos":[1,109]},{"content":"If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.","pos":[110,298]},{"content":"The assembly and all its types are treated as transparent.","pos":[299,357]},{"content":"The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).","pos":[358,591]},{"content":"By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.","pos":[592,847]},{"content":"You can determine the current trust levels of assemblies and application domains by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> properties.","pos":[848,1101],"source":" You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties."}]}]},{"pos":[2041,2332],"content":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection and transparency, see <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.","pos":[0,184],"source":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[185,291],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[88231,90579],"yaml":true,"extradata":"MT"},{"content":"`true` if the field is security-transparent at the current trust level; otherwise, `false`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">`true`</ph> if the field is security-transparent at the current trust level; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the field is security-transparent at the current trust level; otherwise, `false`."}],"pos":[90711,90805],"yaml":true},{"content":"Gets a value indicating whether the corresponding `SpecialName` attribute is set in the <xref href=\"System.Reflection.FieldAttributes\"></xref> enumerator.","nodes":[{"pos":[0,154],"content":"Gets a value indicating whether the corresponding <ph id=\"ph1\">`SpecialName`</ph> attribute is set in the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.FieldAttributes\"&gt;&lt;/xref&gt;</ph> enumerator.","source":"Gets a value indicating whether the corresponding `SpecialName` attribute is set in the <xref href=\"System.Reflection.FieldAttributes\"></xref> enumerator."}],"pos":[92034,92189],"yaml":true},{"content":"Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.","nodes":[{"pos":[0,192],"content":"Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.","nodes":[{"content":"Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.","pos":[0,192]}]}],"pos":[92200,92393],"yaml":true,"extradata":"MT"},{"content":"`true` if the `SpecialName` attribute is set in <xref href=\"System.Reflection.FieldAttributes\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">`SpecialName`</ph> attribute is set in <ph id=\"ph3\">&lt;xref href=\"System.Reflection.FieldAttributes\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the `SpecialName` attribute is set in <xref href=\"System.Reflection.FieldAttributes\"></xref>; otherwise, `false`."}],"pos":[93079,93205],"yaml":true},{"content":"Gets a value indicating whether the field is static.","nodes":[{"pos":[0,52],"content":"Gets a value indicating whether the field is static.","nodes":[{"content":"Gets a value indicating whether the field is static.","pos":[0,52]}]}],"pos":[94740,94793],"yaml":true},{"content":"When a field is static, one copy of the field is shared by all instances of the type.  \n  \n The `IsStatic` property is set when the `FieldAttributes.Static` attribute is set.  \n  \n To get the `IsStatic` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsStatic` property. To access a non-public field, set the `BindingFlags` to `NonPublic` in the `GetField` method and set the accessibility to `Instance` or `Static`.","nodes":[{"pos":[0,85],"content":"When a field is static, one copy of the field is shared by all instances of the type.","nodes":[{"content":"When a field is static, one copy of the field is shared by all instances of the type.","pos":[0,85]}]},{"pos":[92,174],"content":"The <ph id=\"ph1\">`IsStatic`</ph> property is set when the <ph id=\"ph2\">`FieldAttributes.Static`</ph> attribute is set.","source":"The `IsStatic` property is set when the `FieldAttributes.Static` attribute is set."},{"pos":[181,475],"content":"To get the `IsStatic` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsStatic` property. To access a non-public field, set the `BindingFlags` to `NonPublic` in the `GetField` method and set the accessibility to `Instance` or `Static`.","nodes":[{"content":"To get the <ph id=\"ph1\">`IsStatic`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,59],"source":"To get the `IsStatic` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`FieldInfo`</ph>.","pos":[60,97],"source":" From the `Type`, get the `FieldInfo`."},{"content":"From the <ph id=\"ph1\">`FieldInfo`</ph>, get the <ph id=\"ph2\">`IsStatic`</ph> property.","pos":[98,148],"source":" From the `FieldInfo`, get the `IsStatic` property."},{"content":"To access a non-public field, set the <ph id=\"ph1\">`BindingFlags`</ph> to <ph id=\"ph2\">`NonPublic`</ph> in the <ph id=\"ph3\">`GetField`</ph> method and set the accessibility to <ph id=\"ph4\">`Instance`</ph> or <ph id=\"ph5\">`Static`</ph>.","pos":[149,294],"source":" To access a non-public field, set the `BindingFlags` to `NonPublic` in the `GetField` method and set the accessibility to `Instance` or `Static`."}]}],"pos":[94804,95286],"yaml":true,"extradata":"MT"},{"content":"`true` if this field is static; otherwise, `false`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">`true`</ph> if this field is static; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this field is static; otherwise, `false`."}],"pos":[96163,96217],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a field.","nodes":[{"pos":[0,103],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberTypes\"&gt;&lt;/xref&gt;</ph> value indicating that this member is a field.","source":"Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a field."}],"pos":[97759,97863],"yaml":true},{"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a field.","nodes":[{"pos":[0,397],"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a field.","nodes":[{"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a field.","pos":[0,397],"nodes":[{"content":"This property overrides <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.","pos":[0,74],"source":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>."},{"content":"Therefore, when you examine a set of <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id=\"ph2\">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id=\"ph3\">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id=\"ph4\">&lt;xref:System.Reflection.MemberTypes?displayProperty=fullName&gt;</ph> only when a given member is a field.","pos":[75,397],"source":" Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a field."}]}]}],"pos":[97874,98272],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a field.","nodes":[{"pos":[0,98],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberTypes\"&gt;&lt;/xref&gt;</ph> value indicating that this member is a field.","source":"A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a field."}],"pos":[99173,99272],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.FieldInfo\"></xref> objects are equal.","nodes":[{"pos":[0,89],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Indicates whether two <xref href=\"System.Reflection.FieldInfo\"></xref> objects are equal."}],"pos":[100837,100927],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[101142,101171],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[101246,101276],"yaml":true},{"content":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`."}],"pos":[101334,101416],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.FieldInfo\"></xref> objects are not equal.","nodes":[{"pos":[0,93],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> objects are not equal.","source":"Indicates whether two <xref href=\"System.Reflection.FieldInfo\"></xref> objects are not equal."}],"pos":[102850,102944],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[103161,103190],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[103265,103295],"yaml":true},{"content":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`."}],"pos":[103353,103439],"yaml":true},{"content":"Sets the value of the field supported by the given object.","nodes":[{"pos":[0,58],"content":"Sets the value of the field supported by the given object.","nodes":[{"content":"Sets the value of the field supported by the given object.","pos":[0,58]}]}],"pos":[104763,104822],"yaml":true},{"content":"This method will assign `value` to the field reflected by this instance on object `obj`. If the field is static, `obj` will be ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. The new value is passed as an `Object`. For example, if the field's type is Boolean, an instance of `Object` with the appropriate Boolean value is passed. Before setting the value, `SetValue` checks to see if the user has access permission. This final method is a convenience method for calling the following `SetValue` method.  \n  \n> [!NOTE]\n>  Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,562],"content":"This method will assign `value` to the field reflected by this instance on object `obj`. If the field is static, `obj` will be ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. The new value is passed as an `Object`. For example, if the field's type is Boolean, an instance of `Object` with the appropriate Boolean value is passed. Before setting the value, `SetValue` checks to see if the user has access permission. This final method is a convenience method for calling the following `SetValue` method.","nodes":[{"content":"This method will assign <ph id=\"ph1\">`value`</ph> to the field reflected by this instance on object <ph id=\"ph2\">`obj`</ph>.","pos":[0,88],"source":"This method will assign `value` to the field reflected by this instance on object `obj`."},{"content":"If the field is static, <ph id=\"ph1\">`obj`</ph> will be ignored.","pos":[89,135],"source":" If the field is static, `obj` will be ignored."},{"content":"For non-static fields, <ph id=\"ph1\">`obj`</ph> should be an instance of a class that inherits or declares the field.","pos":[136,234],"source":" For non-static fields, `obj` should be an instance of a class that inherits or declares the field."},{"content":"The new value is passed as an <ph id=\"ph1\">`Object`</ph>.","pos":[235,274],"source":" The new value is passed as an `Object`."},{"content":"For example, if the field's type is Boolean, an instance of <ph id=\"ph1\">`Object`</ph> with the appropriate Boolean value is passed.","pos":[275,389],"source":" For example, if the field's type is Boolean, an instance of `Object` with the appropriate Boolean value is passed."},{"content":"Before setting the value, <ph id=\"ph1\">`SetValue`</ph> checks to see if the user has access permission.","pos":[390,475],"source":" Before setting the value, `SetValue` checks to see if the user has access permission."},{"content":"This final method is a convenience method for calling the following <ph id=\"ph1\">`SetValue`</ph> method.","pos":[476,562],"source":" This final method is a convenience method for calling the following `SetValue` method."}]},{"pos":[570,728],"content":"[!NOTE]\n Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.","leadings":["","> "],"nodes":[{"content":"Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.","pos":[9,156]}]},{"pos":[736,1306],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1317,1444],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[104833,106288],"yaml":true,"extradata":"MT"},{"content":"The object whose field value will be set.","nodes":[{"pos":[0,41],"content":"The object whose field value will be set.","nodes":[{"content":"The object whose field value will be set.","pos":[0,41]}]}],"pos":[106962,107004],"yaml":true},{"content":"The value to assign to the field.","nodes":[{"pos":[0,33],"content":"The value to assign to the field.","nodes":[{"content":"The value to assign to the field.","pos":[0,33]}]}],"pos":[107065,107099],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The caller does not have permission to access this field.","nodes":[{"pos":[0,349],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.MemberAccessException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,349],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead."}]},{"pos":[355,372],"content":"</p>\n    </block>","nodes":[]},{"pos":[379,436],"content":"The caller does not have permission to access this field.","nodes":[{"content":"The caller does not have permission to access this field.","pos":[0,57]}]}],"pos":[107263,107715],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The <code>obj</code> parameter is `null` and the field is an instance field.","nodes":[{"pos":[0,310],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instead.","pos":[47,310],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead."}]},{"pos":[316,333],"content":"</p>\n    </block>","nodes":[]},{"pos":[340,416],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> and the field is an instance field.","source":"The <code>obj</code> parameter is `null` and the field is an instance field."}],"pos":[107827,108259],"yaml":true},{"content":"The field does not exist on the object.  \n  \n -or-  \n  \n The <code>value</code> parameter cannot be converted and stored in the field.","nodes":[{"pos":[0,39],"content":"The field does not exist on the object.","nodes":[{"content":"The field does not exist on the object.","pos":[0,39]}]},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,134],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter cannot be converted and stored in the field.","source":"The <code>value</code> parameter cannot be converted and stored in the field."}],"pos":[108353,108494],"yaml":true},{"content":"When overridden in a derived class, sets the value of the field supported by the given object.","nodes":[{"pos":[0,94],"content":"When overridden in a derived class, sets the value of the field supported by the given object.","nodes":[{"content":"When overridden in a derived class, sets the value of the field supported by the given object.","pos":[0,94]}]}],"pos":[110457,110552],"yaml":true},{"content":"This method will assign `value` to the field reflected by this instance on `obj`. If the field is static, `obj` will be ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. The new value is passed as an `Object`. For example, if the field's type is `Boolean`, an instance of `Object` with the appropriate Boolean value is passed. Before setting the value, `SetValue` checks to see if the user has access permission.  \n  \n> [!NOTE]\n>  Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,470],"content":"This method will assign `value` to the field reflected by this instance on `obj`. If the field is static, `obj` will be ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. The new value is passed as an `Object`. For example, if the field's type is `Boolean`, an instance of `Object` with the appropriate Boolean value is passed. Before setting the value, `SetValue` checks to see if the user has access permission.","nodes":[{"content":"This method will assign <ph id=\"ph1\">`value`</ph> to the field reflected by this instance on <ph id=\"ph2\">`obj`</ph>.","pos":[0,81],"source":"This method will assign `value` to the field reflected by this instance on `obj`."},{"content":"If the field is static, <ph id=\"ph1\">`obj`</ph> will be ignored.","pos":[82,128],"source":" If the field is static, `obj` will be ignored."},{"content":"For non-static fields, <ph id=\"ph1\">`obj`</ph> should be an instance of a class that inherits or declares the field.","pos":[129,227],"source":" For non-static fields, `obj` should be an instance of a class that inherits or declares the field."},{"content":"The new value is passed as an <ph id=\"ph1\">`Object`</ph>.","pos":[228,267],"source":" The new value is passed as an `Object`."},{"content":"For example, if the field's type is <ph id=\"ph1\">`Boolean`</ph>, an instance of <ph id=\"ph2\">`Object`</ph> with the appropriate Boolean value is passed.","pos":[268,384],"source":" For example, if the field's type is `Boolean`, an instance of `Object` with the appropriate Boolean value is passed."},{"content":"Before setting the value, <ph id=\"ph1\">`SetValue`</ph> checks to see if the user has access permission.","pos":[385,470],"source":" Before setting the value, `SetValue` checks to see if the user has access permission."}]},{"pos":[478,636],"content":"[!NOTE]\n Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.","leadings":["","> "],"nodes":[{"content":"Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.","pos":[9,156]}]},{"pos":[644,1214],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1225,1352],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[110563,111926],"yaml":true,"extradata":"MT"},{"content":"The object whose field value will be set.","nodes":[{"pos":[0,41],"content":"The object whose field value will be set.","nodes":[{"content":"The object whose field value will be set.","pos":[0,41]}]}],"pos":[112200,112242],"yaml":true},{"content":"The value to assign to the field.","nodes":[{"pos":[0,33],"content":"The value to assign to the field.","nodes":[{"content":"The value to assign to the field.","pos":[0,33]}]}],"pos":[112303,112337],"yaml":true},{"content":"A field of `Binder` that specifies the type of binding that is desired (for example, `Binder.CreateInstance` or `Binder.ExactBinding`).","nodes":[{"pos":[0,135],"content":"A field of <ph id=\"ph1\">`Binder`</ph> that specifies the type of binding that is desired (for example, <ph id=\"ph2\">`Binder.CreateInstance`</ph> or <ph id=\"ph3\">`Binder.ExactBinding`</ph>).","source":"A field of `Binder` that specifies the type of binding that is desired (for example, `Binder.CreateInstance` or `Binder.ExactBinding`)."}],"pos":[112420,112556],"yaml":true},{"content":"A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <code>binder</code> is `null`, then `Binder.DefaultBinding` is used.","nodes":[{"pos":[0,191],"content":"A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <code>binder</code> is `null`, then `Binder.DefaultBinding` is used.","nodes":[{"content":"A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.","pos":[0,119]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, then <ph id=\"ph3\">`Binder.DefaultBinding`</ph> is used.","pos":[120,191],"source":" If <code>binder</code> is `null`, then `Binder.DefaultBinding` is used."}]}],"pos":[112629,112821],"yaml":true},{"content":"The software preferences of a particular culture.","nodes":[{"pos":[0,49],"content":"The software preferences of a particular culture.","nodes":[{"content":"The software preferences of a particular culture.","pos":[0,49]}]}],"pos":[112903,112953],"yaml":true},{"content":"The caller does not have permission to access this field.","nodes":[{"pos":[0,57],"content":"The caller does not have permission to access this field.","nodes":[{"content":"The caller does not have permission to access this field.","pos":[0,57]}]}],"pos":[113117,113175],"yaml":true},{"content":"The <code>obj</code> parameter is `null` and the field is an instance field.","nodes":[{"pos":[0,76],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> and the field is an instance field.","source":"The <code>obj</code> parameter is `null` and the field is an instance field."}],"pos":[113287,113364],"yaml":true},{"content":"The field does not exist on the object.  \n  \n -or-  \n  \n The <code>value</code> parameter cannot be converted and stored in the field.","nodes":[{"pos":[0,39],"content":"The field does not exist on the object.","nodes":[{"content":"The field does not exist on the object.","pos":[0,39]}]},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,134],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter cannot be converted and stored in the field.","source":"The <code>value</code> parameter cannot be converted and stored in the field."}],"pos":[113458,113599],"yaml":true},{"content":"Sets the value of the field supported by the given object.","nodes":[{"pos":[0,58],"content":"Sets the value of the field supported by the given object.","nodes":[{"content":"Sets the value of the field supported by the given object.","pos":[0,58]}]}],"pos":[114913,114972],"yaml":true},{"content":"> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[2,572],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[583,710],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[114983,115699],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TypedReference\"></xref> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.","nodes":[{"pos":[0,182],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TypedReference\"&gt;&lt;/xref&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.","source":"A <xref href=\"System.TypedReference\"></xref> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location."}],"pos":[115921,116104],"yaml":true},{"content":"The value to assign to the field.","nodes":[{"pos":[0,33],"content":"The value to assign to the field.","nodes":[{"content":"The value to assign to the field.","pos":[0,33]}]}],"pos":[116165,116199],"yaml":true},{"content":"The caller requires the Common Language Specification (CLS) alternative, but called this method instead.","nodes":[{"pos":[0,104],"content":"The caller requires the Common Language Specification (CLS) alternative, but called this method instead.","nodes":[{"content":"The caller requires the Common Language Specification (CLS) alternative, but called this method instead.","pos":[0,104]}]}],"pos":[116371,116476],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[118287,118355],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[118366,118553],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[118756,118799],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[118864,118903],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[118965,118998],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[119058,119110],"yaml":true},{"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"pos":[0,73],"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]}],"pos":[119174,119248],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[119465,119548],"yaml":true},{"content":"Gets a <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.FieldInfo\"></xref> type.","nodes":[{"pos":[0,118],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> type.","source":"Gets a <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.FieldInfo\"></xref> type."}],"pos":[120623,120742],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.FieldInfo\"></xref> type.","nodes":[{"pos":[0,113],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> type.","source":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.FieldInfo\"></xref> type."}],"pos":[120867,120981],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[122383,122498],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[122509,122694],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[122865,122897],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[122957,123005],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[123068,123129],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[123344,123427],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[124622,124715],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[124726,124916],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[125071,125172],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[125392,125475],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[127054,127118],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[127129,127309],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[127575,127598],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[127656,127699],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[127759,127811],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[127872,127914],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[127981,128141],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[128207,128265],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[128331,128391],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[128455,128506],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[128716,128799],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.FieldInfo\n  commentId: T:System.Reflection.FieldInfo\n  id: FieldInfo\n  children:\n  - System.Reflection.FieldInfo.#ctor\n  - System.Reflection.FieldInfo.Attributes\n  - System.Reflection.FieldInfo.Equals(System.Object)\n  - System.Reflection.FieldInfo.FieldHandle\n  - System.Reflection.FieldInfo.FieldType\n  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)\n  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  - System.Reflection.FieldInfo.GetHashCode\n  - System.Reflection.FieldInfo.GetOptionalCustomModifiers\n  - System.Reflection.FieldInfo.GetRawConstantValue\n  - System.Reflection.FieldInfo.GetRequiredCustomModifiers\n  - System.Reflection.FieldInfo.GetValue(System.Object)\n  - System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)\n  - System.Reflection.FieldInfo.IsAssembly\n  - System.Reflection.FieldInfo.IsFamily\n  - System.Reflection.FieldInfo.IsFamilyAndAssembly\n  - System.Reflection.FieldInfo.IsFamilyOrAssembly\n  - System.Reflection.FieldInfo.IsInitOnly\n  - System.Reflection.FieldInfo.IsLiteral\n  - System.Reflection.FieldInfo.IsNotSerialized\n  - System.Reflection.FieldInfo.IsPinvokeImpl\n  - System.Reflection.FieldInfo.IsPrivate\n  - System.Reflection.FieldInfo.IsPublic\n  - System.Reflection.FieldInfo.IsSecurityCritical\n  - System.Reflection.FieldInfo.IsSecuritySafeCritical\n  - System.Reflection.FieldInfo.IsSecurityTransparent\n  - System.Reflection.FieldInfo.IsSpecialName\n  - System.Reflection.FieldInfo.IsStatic\n  - System.Reflection.FieldInfo.MemberType\n  - System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  - System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  - System.Reflection.FieldInfo.SetValue(System.Object,System.Object)\n  - System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)\n  - System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)\n  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType\n  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n  type: Class\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Discovers the attributes of a field and provides access to field metadata.\n  remarks: \"The field information is obtained from metadata. The <xref:System.Reflection.FieldInfo> class does not have a public constructor. <xref:System.Reflection.FieldInfo> objects are obtained by calling either the <xref:System.Type.GetFields%2A> or <xref:System.Type.GetField%2A> method of a `Type` object.  \\n  \\n Fields are variables defined in the class. <xref:System.Reflection.FieldInfo> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field. The class is not loaded into memory until invoke or get is called on the object.\"\n  example:\n  - \"The following example uses the <xref:System.Type.GetFields%2A?displayProperty=fullName> method to get the field-related information from the <xref:System.Reflection.FieldInfo> class, and then displays field attributes.  \\n  \\n [!code-cpp[FieldInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo/CPP/fieldinfo.cpp#1)]\\n [!code-csharp[FieldInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo/CS/fieldinfo.cs#1)]\\n [!code-vb[FieldInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo/VB/fieldinfo.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class FieldInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._FieldInfo\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  derivedClasses:\n  - Microsoft.JScript.COMFieldInfo\n  - Microsoft.JScript.JSField\n  - Microsoft.JScript.JSFieldInfo\n  - System.Reflection.Emit.FieldBuilder\n  implements:\n  - System.Runtime.InteropServices._FieldInfo\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.ReflectedType\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.#ctor\n  commentId: M:System.Reflection.FieldInfo.#ctor\n  id: '#ctor'\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: FieldInfo()\n  nameWithType: FieldInfo.FieldInfo()\n  fullName: FieldInfo.FieldInfo()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the `FieldInfo` class.\n  syntax:\n    content: protected FieldInfo ();\n    parameters: []\n  overload: System.Reflection.FieldInfo.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.Attributes\n  commentId: P:System.Reflection.FieldInfo.Attributes\n  id: Attributes\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: FieldInfo.Attributes\n  fullName: FieldInfo.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the attributes associated with this field.\n  remarks: \"All members have a set of attributes, which are defined in relation to the specific type of member. `FieldAttributes` informs the user whether this field is the private field, a static field, and so on.  \\n  \\n To get the `Attributes` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `Attributes`.\"\n  example:\n  - \"The following code example builds three fields and displays their field attributes. A `FieldAttributes` value can contain more than one attribute, such as both `Public` and `Literal`, as shown in the third field.  \\n  \\n [!code-cpp[Classic FieldAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldAttributes Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract System.Reflection.FieldAttributes Attributes { get; }\n    return:\n      type: System.Reflection.FieldAttributes\n      description: The `FieldAttributes` for this field.\n  overload: System.Reflection.FieldInfo.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.Equals(System.Object)\n  commentId: M:System.Reflection.FieldInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: FieldInfo.Equals(Object)\n  fullName: FieldInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether this instance is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object to compare with this instance, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.FieldHandle\n  commentId: P:System.Reflection.FieldInfo.FieldHandle\n  id: FieldHandle\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: FieldHandle\n  nameWithType: FieldInfo.FieldHandle\n  fullName: FieldInfo.FieldHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a `RuntimeFieldHandle`, which is a handle to the internal metadata representation of a field.\n  remarks: The handles are valid only in the appdomain in which they were obtained.\n  example:\n  - \"The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.  \\n  \\n [!code-cpp[FieldInfo_FieldHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_FieldHandle/CPP/fieldinfo_fieldhandle.cpp#1)]\\n [!code-csharp[FieldInfo_FieldHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_FieldHandle/CS/fieldinfo_fieldhandle.cs#1)]\\n [!code-vb[FieldInfo_FieldHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_FieldHandle/VB/fieldinfo_fieldhandle.vb#1)]\"\n  syntax:\n    content: public abstract RuntimeFieldHandle FieldHandle { get; }\n    return:\n      type: System.RuntimeFieldHandle\n      description: A handle to the internal metadata representation of a field.\n  overload: System.Reflection.FieldInfo.FieldHandle*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.FieldType\n  commentId: P:System.Reflection.FieldInfo.FieldType\n  id: FieldType\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: FieldType\n  nameWithType: FieldInfo.FieldType\n  fullName: FieldInfo.FieldType\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the type of this field object.\n  remarks: \"The type is some primitive data type, such as `String`, `Boolean`, or `GUID`.  \\n  \\n To get the `FieldType` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `FieldType` value.\"\n  example:\n  - \"The following example creates a field, gets its type and <xref:System.Reflection.FieldInfo>, and displays its <xref:System.Reflection.FieldInfo.FieldType%2A>.  \\n  \\n [!code-cpp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldInfo.FieldType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract Type FieldType { get; }\n    return:\n      type: System.Type\n      description: The type of this field object.\n  overload: System.Reflection.FieldInfo.FieldType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)\n  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)\n  id: GetFieldFromHandle(System.RuntimeFieldHandle)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: GetFieldFromHandle(RuntimeFieldHandle)\n  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)\n  fullName: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Reflection.FieldInfo\"></xref> for the field represented by the specified handle.\n  remarks: Handles are valid only in the application domain in which they were obtained.\n  example:\n  - \"The following code example uses the <xref:System.Type.GetFields%2A?displayProperty=fullName> method to get <xref:System.Reflection.FieldInfo> objects for the fields of a type, gets a <xref:System.RuntimeFieldHandle> structure for each field, and then retrieves the <xref:System.Reflection.FieldInfo> objects from the handles using this overload of the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A> method.  \\n  \\n [!code-cpp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CPP/fieldinfo_getfieldfromhandle.cpp#1)]\\n [!code-csharp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CS/fieldinfo_getfieldfromhandle.cs#1)]\\n [!code-vb[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/VB/fieldinfo_getfieldfromhandle.vb#1)]\"\n  syntax:\n    content: public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle);\n    parameters:\n    - id: handle\n      type: System.RuntimeFieldHandle\n      description: A <xref href=\"System.RuntimeFieldHandle\"></xref> structure that contains the handle to the internal metadata representation of a field.\n    return:\n      type: System.Reflection.FieldInfo\n      description: A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field specified by <code>handle</code>.\n  overload: System.Reflection.FieldInfo.GetFieldFromHandle*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>handle</code> is invalid.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  id: GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)\n  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)\n  fullName: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Reflection.FieldInfo\"></xref> for the field represented by the specified handle, for the specified generic type.\n  remarks: \"Handles are valid only in the application domain in which they were obtained.  \\n  \\n The recommended practice is that `declaringType` should always be the runtime type handle of the constructed type that `handle` belongs to. That is, if `handle` is a runtime field handle for a field that belongs to `MyType<int>` (`MyType(Of Integer)` in Visual Basic), `declaringType` is the runtime type handle for `MyType<int>`. Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.  \\n  \\n Implementations are compatible in some cases. For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments. For example, `MyType<string>`, `MyType<object>`, and `MyType<ArrayList>` all share the same implementation. In this situation, the <xref:System.Reflection.FieldInfo> object that is returned represents a field on the type that `declaringType` specifies, regardless of the original source of `handle`. This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.  \\n  \\n If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position. In that case, the only way to use the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=fullName> overload is to ensure that `declaringType` is the runtime type handle for the constructed type that `handle` belongs to.\"\n  example:\n  - \"The following example shows how to retrieve <xref:System.Reflection.FieldInfo> objects for fields on constructed generic classes. The example defines the generic type `Test<T>` (`Test(Of T)` in Visual Basic) with a single field named `TestField`, of type `T`. The example gets the <xref:System.RuntimeFieldHandle> and <xref:System.RuntimeTypeHandle> for the case where `T` is <xref:System.String>, and demonstrates the following:  \\n  \\n-   An exception is thrown if the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29> method overload is used. This is true even if the field is not of type `T`.  \\n  \\n-   A <xref:System.Reflection.FieldInfo> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case `Test<string>`.  \\n  \\n-   If the runtime type handle is from a compatible construction, in this case `Test<object>`, a <xref:System.Reflection.FieldInfo> for the field on the compatible construction is retrieved.  \\n  \\n-   If the runtime type handle is not from a compatible construction, an exception is thrown. In this case, a value type is specified for `T`.  \\n  \\n [!code-csharp[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/cs/source.cs#1)]\\n [!code-vb[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/vb/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);\n    parameters:\n    - id: handle\n      type: System.RuntimeFieldHandle\n      description: A <xref href=\"System.RuntimeFieldHandle\"></xref> structure that contains the handle to the internal metadata representation of a field.\n    - id: declaringType\n      type: System.RuntimeTypeHandle\n      description: A <xref href=\"System.RuntimeTypeHandle\"></xref> structure that contains the handle to the generic type that defines the field.\n    return:\n      type: System.Reflection.FieldInfo\n      description: A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field specified by <code>handle</code>, in the generic type specified by <code>declaringType</code>.\n  overload: System.Reflection.FieldInfo.GetFieldFromHandle*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>handle</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>declaringType</code> is not compatible with <code>handle</code>. For example, <code>declaringType</code> is the runtime type handle of the generic type definition, and <code>handle</code> comes from a constructed type.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.GetHashCode\n  commentId: M:System.Reflection.FieldInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: FieldInfo.GetHashCode()\n  fullName: FieldInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Reflection.FieldInfo.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.GetOptionalCustomModifiers\n  commentId: M:System.Reflection.FieldInfo.GetOptionalCustomModifiers\n  id: GetOptionalCustomModifiers\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: GetOptionalCustomModifiers()\n  nameWithType: FieldInfo.GetOptionalCustomModifiers()\n  fullName: FieldInfo.GetOptionalCustomModifiers()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets an array of types that identify the optional custom modifiers of the field.\n  remarks: The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  syntax:\n    content: public virtual Type[] GetOptionalCustomModifiers ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that identify the optional custom modifiers of the current field, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>.\n  overload: System.Reflection.FieldInfo.GetOptionalCustomModifiers*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.GetRawConstantValue\n  commentId: M:System.Reflection.FieldInfo.GetRawConstantValue\n  id: GetRawConstantValue\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: GetRawConstantValue()\n  nameWithType: FieldInfo.GetRawConstantValue()\n  fullName: FieldInfo.GetRawConstantValue()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a literal value associated with the field by a compiler.\n  remarks: \"This method is provided for designers of managed compilers and code analyzers.  \\n  \\n This method can be used in both the execution context and the reflection-only context.  \\n  \\n In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  \\n  \\n> [!NOTE]\\n>  For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public virtual object GetRawConstantValue ();\n    parameters: []\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is `null`.\n  overload: System.Reflection.FieldInfo.GetRawConstantValue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The Constant table in unmanaged metadata does not contain a constant value for the current field.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: 'The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.'\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The constant value for the field is not set.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.GetRequiredCustomModifiers\n  commentId: M:System.Reflection.FieldInfo.GetRequiredCustomModifiers\n  id: GetRequiredCustomModifiers\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: GetRequiredCustomModifiers()\n  nameWithType: FieldInfo.GetRequiredCustomModifiers()\n  fullName: FieldInfo.GetRequiredCustomModifiers()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets an array of types that identify the required custom modifiers of the property.\n  remarks: The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  syntax:\n    content: public virtual Type[] GetRequiredCustomModifiers ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that identify the required custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"></xref>.\n  overload: System.Reflection.FieldInfo.GetRequiredCustomModifiers*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.GetValue(System.Object)\n  commentId: M:System.Reflection.FieldInfo.GetValue(System.Object)\n  id: GetValue(System.Object)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: GetValue(Object)\n  nameWithType: FieldInfo.GetValue(Object)\n  fullName: FieldInfo.GetValue(Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, returns the value of a field supported by a given object.\n  remarks: \"If the field is static, `obj` is ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. Note that the return type of `GetValue` is `Object`. For example, if the field holds a Boolean primitive value, an instance of `Object` with the appropriate Boolean value is returned. Before returning the value, `GetValue` checks to see if the user has access permission.  \\n  \\n> [!NOTE]\\n>  Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  example:\n  - \"The following example uses the <xref:System.Reflection.FieldInfo.GetValue%2A> method to retrieve the value of a static field. Note that the value of the `obj` argument is `null`.  \\n  \\n [!code-cpp[getfldval#1](~/samples/snippets/cpp/VS_Snippets_CLR/GetFldVal/CPP/getfldval.cpp#1)]\\n [!code-csharp[getfldval#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetFldVal/CS/getfldval.cs#1)]\\n [!code-vb[getfldval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetFldVal/VB/getfldval.vb#1)]  \\n  \\n The following example retrieves an array of <xref:System.Reflection.FieldInfo> objects that represents the fields of the `FieldsClass` type, and then calls the <xref:System.Reflection.FieldInfo.GetValue%2A> to display the value of each field for the `fieldsInst` object.  \\n  \\n [!code-cpp[FieldInfo_GetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetValue/CPP/fieldinfo_getvalue.cpp#1)]\\n [!code-csharp[FieldInfo_GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetValue/CS/fieldinfo_getvalue.cs#1)]\\n [!code-vb[FieldInfo_GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetValue/VB/fieldinfo_getvalue.vb#1)]\"\n  syntax:\n    content: public abstract object GetValue (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose field value will be returned.\n    return:\n      type: System.Object\n      description: An object containing the value of the field reflected by this instance.\n  overload: System.Reflection.FieldInfo.GetValue*\n  exceptions:\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch <xref href=\\\"System.Exception\\\"></xref> instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The field is non-static and <code>obj</code> is `null`.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A field is marked literal, but the field does not have one of the accepted literal types.\n  - type: System.FieldAccessException\n    commentId: T:System.FieldAccessException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MemberAccessException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The caller does not have permission to access this field.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The method is neither declared nor inherited by the class of <code>obj</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)\n  commentId: M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)\n  id: GetValueDirect(System.TypedReference)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: GetValueDirect(TypedReference)\n  nameWithType: FieldInfo.GetValueDirect(TypedReference)\n  fullName: FieldInfo.GetValueDirect(TypedReference)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the value of a field supported by a given object.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public virtual object GetValueDirect (TypedReference obj);\n    parameters:\n    - id: obj\n      type: System.TypedReference\n      description: A <xref href=\"System.TypedReference\"></xref> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.\n    return:\n      type: System.Object\n      description: An `Object` containing a field value.\n  overload: System.Reflection.FieldInfo.GetValueDirect*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The caller requires the Common Language Specification (CLS) alternative, but called this method instead.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Reflection.FieldInfo.GetValue(System.Object)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsAssembly\n  commentId: P:System.Reflection.FieldInfo.IsAssembly\n  id: IsAssembly\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsAssembly\n  nameWithType: FieldInfo.IsAssembly\n  fullName: FieldInfo.IsAssembly\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Assembly\"></xref>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.\n  remarks: \"The actual visibility of a field is limited by the visibility of its type. The <xref:System.Reflection.FieldInfo.IsAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.  \\n  \\n The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic). This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.\"\n  example:\n  - \"The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \\n  \\n [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsAssembly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the visibility of this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Assembly\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsAssembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsFamily\n  commentId: P:System.Reflection.FieldInfo.IsFamily\n  id: IsFamily\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsFamily\n  nameWithType: FieldInfo.IsFamily\n  fullName: FieldInfo.IsFamily\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Family\"></xref>; that is, the field is visible only within its class and derived classes.\n  remarks: The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `protected`. This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.\n  example:\n  - \"The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \\n  \\n [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsFamily { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Family\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsFamily*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly\n  commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly\n  id: IsFamilyAndAssembly\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsFamilyAndAssembly\n  nameWithType: FieldInfo.IsFamilyAndAssembly\n  fullName: FieldInfo.IsFamilyAndAssembly\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\"></xref>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.\n  remarks: \"If a field has <xref:System.Reflection.FieldAttributes.FamANDAssem> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.  \\n  \\n The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++. Fields with this visibility cannot be defined in Visual Basic or C#.\"\n  example:\n  - \"The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \\n  \\n [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsFamilyAndAssembly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsFamilyAndAssembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly\n  commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly\n  id: IsFamilyOrAssembly\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsFamilyOrAssembly\n  nameWithType: FieldInfo.IsFamilyOrAssembly\n  fullName: FieldInfo.IsFamilyOrAssembly\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\"></xref>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.\n  remarks: \"If a field has <xref:System.Reflection.FieldAttributes.FamORAssem> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.  \\n  \\n The actual visibility of a field is limited by the visibility of its type. The <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.  \\n  \\n The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++).\"\n  example:\n  - \"The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \\n  \\n [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsFamilyOrAssembly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsFamilyOrAssembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsInitOnly\n  commentId: P:System.Reflection.FieldInfo.IsInitOnly\n  id: IsInitOnly\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsInitOnly\n  nameWithType: FieldInfo.IsInitOnly\n  fullName: FieldInfo.IsInitOnly\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the field can only be set in the body of the constructor.\n  remarks: \"If the returned value is `true`, the field can only be initialized, and is read-only thereafter.  \\n  \\n To get the `IsInitOnly` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsInitOnly` property. To access a non-public field, combine <xref:System.Reflection.BindingFlags?displayProperty=fullName> with either or both of <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> in the `GetField` method.  \\n  \\n The `IsInitOnly` property is set when the <xref:System.Reflection.FieldAttributes?displayProperty=fullName> attribute is set.\"\n  example:\n  - \"In the following example, two fields are created. The second field is read-only, having no set accessor, and `IsInitOnly` is set to `true`.  \\n  \\n [!code-cpp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/VB/source.vb#1)]  \\n  \\n This code produces the following output:  \\n  \\n Reflection.FieldInfo  \\n  \\n Myfielda - A- modified, IsInitOnly = False  \\n  \\n Myfieldb - B readonly field, IsInitOnly = True\"\n  syntax:\n    content: public bool IsInitOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the field has the `InitOnly` attribute set; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsInitOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsLiteral\n  commentId: P:System.Reflection.FieldInfo.IsLiteral\n  id: IsLiteral\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsLiteral\n  nameWithType: FieldInfo.IsLiteral\n  fullName: FieldInfo.IsLiteral\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the value is written at compile time and cannot be changed.\n  remarks: The `IsLiteral` property is set when the `FieldAttributes.Literal` attribute is set. If this attribute is set, the field cannot be changed and is constant.\n  syntax:\n    content: public bool IsLiteral { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the field has the `Literal` attribute set; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsLiteral*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsNotSerialized\n  commentId: P:System.Reflection.FieldInfo.IsNotSerialized\n  id: IsNotSerialized\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsNotSerialized\n  nameWithType: FieldInfo.IsNotSerialized\n  fullName: FieldInfo.IsNotSerialized\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether this field has the `NotSerialized` attribute.\n  remarks: The `IsNotSerialized` property returns `true` when the field is marked with the `FieldAttributes.NotSerialized` flag. When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.\n  example:\n  - \"The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.  \\n  \\n [!code-cpp[FieldInfo_IsNotSerialized#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CPP/fieldinfo_isnotserialized.cpp#1)]\\n [!code-csharp[FieldInfo_IsNotSerialized#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CS/fieldinfo_isnotserialized.cs#1)]\\n [!code-vb[FieldInfo_IsNotSerialized#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsNotSerialized/VB/fieldinfo_isnotserialized.vb#1)]\"\n  syntax:\n    content: public bool IsNotSerialized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the field has the `NotSerialized` attribute set; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsNotSerialized*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsPinvokeImpl\n  commentId: P:System.Reflection.FieldInfo.IsPinvokeImpl\n  id: IsPinvokeImpl\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsPinvokeImpl\n  nameWithType: FieldInfo.IsPinvokeImpl\n  fullName: FieldInfo.IsPinvokeImpl\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the corresponding `PinvokeImpl` attribute is set in <xref href=\"System.Reflection.FieldAttributes\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates a class and displays the name, field and <xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A> property value of the field.  \\n  \\n [!code-cpp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CPP/fieldinfo_ispinvokeimpl.cpp#1)]\\n [!code-csharp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CS/fieldinfo_ispinvokeimpl.cs#1)]\\n [!code-vb[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/VB/fieldinfo_ispinvokeimpl.vb#1)]\"\n  syntax:\n    content: public bool IsPinvokeImpl { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the `PinvokeImpl` attribute is set in <xref href=\"System.Reflection.FieldAttributes\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsPinvokeImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsPrivate\n  commentId: P:System.Reflection.FieldInfo.IsPrivate\n  id: IsPrivate\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsPrivate\n  nameWithType: FieldInfo.IsPrivate\n  fullName: FieldInfo.IsPrivate\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the field is private.\n  remarks: \"Private fields are accessible only from member functions.  \\n  \\n The `IsPrivate` property is set when the `FieldAttributes.Private` attribute is set.  \\n  \\n To get the `IsPrivate` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsPrivate` property. To access a non-public field, set the `BindingFlags` to `NonPublic`, and either `Static` or `Instance` in the `GetField` method.\"\n  example:\n  - \"The following example returns a value indicating whether or not the field of the class is private.  \\n  \\n [!code-cpp[FieldInfo_IsPrivate#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPrivate/CPP/fieldinfo_isprivate.cpp#1)]\\n [!code-csharp[FieldInfo_IsPrivate#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPrivate/CS/fieldinfo_isprivate.cs#1)]\\n [!code-vb[FieldInfo_IsPrivate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPrivate/VB/fieldinfo_isprivate.vb#1)]\"\n  syntax:\n    content: public bool IsPrivate { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the field is private; otherwise; `false`.'\n  overload: System.Reflection.FieldInfo.IsPrivate*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsPublic\n  commentId: P:System.Reflection.FieldInfo.IsPublic\n  id: IsPublic\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsPublic\n  nameWithType: FieldInfo.IsPublic\n  fullName: FieldInfo.IsPublic\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the field is public.\n  remarks: \"Public fields are accessible everywhere their corresponding classes are visible.  \\n  \\n The `IsPublic` property is set when the `FieldAttributes.Public` attribute is set.  \\n  \\n To get the `IsPublic` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsPublic` property. If the field is other than public, it is protected and cannot be readily accessed. To access a nonpublic field, set the `BindingFlags` to `NonPublic`, specify either `BindingFlags.Instance` or `BindingFlags.Static`, and use this for the `GetField` method.\"\n  example:\n  - \"The following example returns a value indicating whether or not the field of the class is public or private.  \\n  \\n [!code-cpp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsPublic { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this field is public; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsPublic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsSecurityCritical\n  commentId: P:System.Reflection.FieldInfo.IsSecurityCritical\n  id: IsSecurityCritical\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsSecurityCritical\n  nameWithType: FieldInfo.IsSecurityCritical\n  fullName: FieldInfo.IsSecurityCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.\n  remarks: \"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n> [!IMPORTANT]\\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \\n  \\n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public virtual bool IsSecurityCritical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current field is security-critical or security-safe-critical at the current trust level; `false` if it is transparent.'\n  overload: System.Reflection.FieldInfo.IsSecurityCritical*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsSecuritySafeCritical\n  commentId: P:System.Reflection.FieldInfo.IsSecuritySafeCritical\n  id: IsSecuritySafeCritical\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsSecuritySafeCritical\n  nameWithType: FieldInfo.IsSecuritySafeCritical\n  fullName: FieldInfo.IsSecuritySafeCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates whether the current field is security-safe-critical at the current trust level.\n  remarks: \"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n> [!IMPORTANT]\\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \\n  \\n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public virtual bool IsSecuritySafeCritical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current field is security-safe-critical at the current trust level; `false` if it is security-critical or transparent.'\n  overload: System.Reflection.FieldInfo.IsSecuritySafeCritical*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsSecurityTransparent\n  commentId: P:System.Reflection.FieldInfo.IsSecurityTransparent\n  id: IsSecurityTransparent\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsSecurityTransparent\n  nameWithType: FieldInfo.IsSecurityTransparent\n  fullName: FieldInfo.IsSecurityTransparent\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates whether the current field is transparent at the current trust level.\n  remarks: \"The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n> [!IMPORTANT]\\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \\n  \\n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public virtual bool IsSecurityTransparent { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the field is security-transparent at the current trust level; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsSecurityTransparent*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsSpecialName\n  commentId: P:System.Reflection.FieldInfo.IsSpecialName\n  id: IsSpecialName\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsSpecialName\n  nameWithType: FieldInfo.IsSpecialName\n  fullName: FieldInfo.IsSpecialName\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the corresponding `SpecialName` attribute is set in the <xref href=\"System.Reflection.FieldAttributes\"></xref> enumerator.\n  remarks: Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.\n  example:\n  - \"The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.  \\n  \\n [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]\\n [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]\\n [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]\"\n  syntax:\n    content: public bool IsSpecialName { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the `SpecialName` attribute is set in <xref href=\"System.Reflection.FieldAttributes\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsSpecialName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.IsStatic\n  commentId: P:System.Reflection.FieldInfo.IsStatic\n  id: IsStatic\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: IsStatic\n  nameWithType: FieldInfo.IsStatic\n  fullName: FieldInfo.IsStatic\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the field is static.\n  remarks: \"When a field is static, one copy of the field is shared by all instances of the type.  \\n  \\n The `IsStatic` property is set when the `FieldAttributes.Static` attribute is set.  \\n  \\n To get the `IsStatic` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsStatic` property. To access a non-public field, set the `BindingFlags` to `NonPublic` in the `GetField` method and set the accessibility to `Instance` or `Static`.\"\n  example:\n  - \"The following example determines whether the specified field is static and displays the result.  \\n  \\n [!code-cpp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/VB/source.vb#1)]  \\n  \\n This code produces the following output:  \\n  \\n Reflection.FieldInfo  \\n  \\n Myfielda - A private field; IsStatic - False  \\n  \\n Myfieldb - B static field; IsStatic - True\"\n  syntax:\n    content: public bool IsStatic { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this field is static; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.IsStatic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.MemberType\n  commentId: P:System.Reflection.FieldInfo.MemberType\n  id: MemberType\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: MemberType\n  nameWithType: FieldInfo.MemberType\n  fullName: FieldInfo.MemberType\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a field.\n  remarks: This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a field.\n  example:\n  - \"The following example determines whether the specified member is a field and displays the result.  \\n  \\n [!code-cpp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CS/source.cs#1)]\\n [!code-vb[Classic FieldInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/VB/source.vb#1)]  \\n  \\n This code produces the following output:  \\n  \\n Reflection.FieldInfo  \\n  \\n Myfield.field - a private field; MemberType is a Field\"\n  syntax:\n    content: public override System.Reflection.MemberTypes MemberType { get; }\n    return:\n      type: System.Reflection.MemberTypes\n      description: A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a field.\n  overload: System.Reflection.FieldInfo.MemberType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  commentId: M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  id: op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: op_Equality(FieldInfo, FieldInfo)\n  nameWithType: FieldInfo.op_Equality(FieldInfo, FieldInfo)\n  fullName: FieldInfo.op_Equality(FieldInfo, FieldInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.FieldInfo\"></xref> objects are equal.\n  syntax:\n    content: public static bool op_Equality (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);\n    parameters:\n    - id: left\n      type: System.Reflection.FieldInfo\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.FieldInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.op_Equality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  commentId: M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  id: op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: op_Inequality(FieldInfo, FieldInfo)\n  nameWithType: FieldInfo.op_Inequality(FieldInfo, FieldInfo)\n  fullName: FieldInfo.op_Inequality(FieldInfo, FieldInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.FieldInfo\"></xref> objects are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);\n    parameters:\n    - id: left\n      type: System.Reflection.FieldInfo\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.FieldInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.FieldInfo.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object)\n  commentId: M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)\n  id: SetValue(System.Object,System.Object)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: SetValue(Object, Object)\n  nameWithType: FieldInfo.SetValue(Object, Object)\n  fullName: FieldInfo.SetValue(Object, Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Sets the value of the field supported by the given object.\n  remarks: \"This method will assign `value` to the field reflected by this instance on object `obj`. If the field is static, `obj` will be ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. The new value is passed as an `Object`. For example, if the field's type is Boolean, an instance of `Object` with the appropriate Boolean value is passed. Before setting the value, `SetValue` checks to see if the user has access permission. This final method is a convenience method for calling the following `SetValue` method.  \\n  \\n> [!NOTE]\\n>  Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  example:\n  - \"The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.  \\n  \\n [!code-cpp[FieldInfo_SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_SetValue/CPP/fieldinfo_setvalue.cpp#1)]\\n [!code-csharp[FieldInfo_SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_SetValue/CS/fieldinfo_setvalue.cs#1)]\\n [!code-vb[FieldInfo_SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_SetValue/VB/fieldinfo_setvalue.vb#1)]\"\n  syntax:\n    content: public void SetValue (object obj, object value);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose field value will be set.\n    - id: value\n      type: System.Object\n      description: The value to assign to the field.\n  overload: System.Reflection.FieldInfo.SetValue*\n  exceptions:\n  - type: System.FieldAccessException\n    commentId: T:System.FieldAccessException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.MemberAccessException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The caller does not have permission to access this field.\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\\\"System.Exception\\\"></xref> instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The <code>obj</code> parameter is `null` and the field is an instance field.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The field does not exist on the object.  \\n  \\n -or-  \\n  \\n The <code>value</code> parameter cannot be converted and stored in the field.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)\n  id: SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: SetValue(Object, Object, BindingFlags, Binder, CultureInfo)\n  nameWithType: FieldInfo.SetValue(Object, Object, BindingFlags, Binder, CultureInfo)\n  fullName: FieldInfo.SetValue(Object, Object, BindingFlags, Binder, CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, sets the value of the field supported by the given object.\n  remarks: \"This method will assign `value` to the field reflected by this instance on `obj`. If the field is static, `obj` will be ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. The new value is passed as an `Object`. For example, if the field's type is `Boolean`, an instance of `Object` with the appropriate Boolean value is passed. Before setting the value, `SetValue` checks to see if the user has access permission.  \\n  \\n> [!NOTE]\\n>  Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose field value will be set.\n    - id: value\n      type: System.Object\n      description: The value to assign to the field.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: A field of `Binder` that specifies the type of binding that is desired (for example, `Binder.CreateInstance` or `Binder.ExactBinding`).\n    - id: binder\n      type: System.Reflection.Binder\n      description: A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <code>binder</code> is `null`, then `Binder.DefaultBinding` is used.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The software preferences of a particular culture.\n  overload: System.Reflection.FieldInfo.SetValue*\n  exceptions:\n  - type: System.FieldAccessException\n    commentId: T:System.FieldAccessException\n    description: The caller does not have permission to access this field.\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: The <code>obj</code> parameter is `null` and the field is an instance field.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The field does not exist on the object.  \\n  \\n -or-  \\n  \\n The <code>value</code> parameter cannot be converted and stored in the field.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)\n  commentId: M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)\n  id: SetValueDirect(System.TypedReference,System.Object)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: SetValueDirect(TypedReference, Object)\n  nameWithType: FieldInfo.SetValueDirect(TypedReference, Object)\n  fullName: FieldInfo.SetValueDirect(TypedReference, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Sets the value of the field supported by the given object.\n  remarks: \"> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public virtual void SetValueDirect (TypedReference obj, object value);\n    parameters:\n    - id: obj\n      type: System.TypedReference\n      description: A <xref href=\"System.TypedReference\"></xref> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.\n    - id: value\n      type: System.Object\n      description: The value to assign to the field.\n  overload: System.Reflection.FieldInfo.SetValueDirect*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The caller requires the Common Language Specification (CLS) alternative, but called this method instead.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: _FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: FieldInfo._FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: FieldInfo._FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _FieldInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType\n  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType\n  id: System#Runtime#InteropServices#_FieldInfo#GetType\n  isEii: true\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: _FieldInfo.GetType()\n  nameWithType: FieldInfo._FieldInfo.GetType()\n  fullName: FieldInfo._FieldInfo.GetType()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.FieldInfo\"></xref> type.\n  syntax:\n    content: Type _FieldInfo.GetType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.FieldInfo\"></xref> type.\n  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: _FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: FieldInfo._FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: FieldInfo._FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _FieldInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: _FieldInfo.GetTypeInfoCount(UInt32)\n  nameWithType: FieldInfo._FieldInfo.GetTypeInfoCount(UInt32)\n  fullName: FieldInfo._FieldInfo.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _FieldInfo.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  name: _FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: FieldInfo._FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: FieldInfo._FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _FieldInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Reflection.TargetException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetException\n  nameWithType: TargetException\n  fullName: System.Reflection.TargetException\n- uid: System.FieldAccessException\n  parent: System\n  isExternal: false\n  name: FieldAccessException\n  nameWithType: FieldAccessException\n  fullName: System.FieldAccessException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.FieldInfo.#ctor\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: FieldInfo()\n  nameWithType: FieldInfo.FieldInfo()\n  fullName: FieldInfo.FieldInfo()\n- uid: System.Reflection.FieldInfo.Attributes\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: FieldInfo.Attributes\n  fullName: FieldInfo.Attributes\n- uid: System.Reflection.FieldAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: FieldAttributes\n  nameWithType: FieldAttributes\n  fullName: System.Reflection.FieldAttributes\n- uid: System.Reflection.FieldInfo.Equals(System.Object)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: FieldInfo.Equals(Object)\n  fullName: FieldInfo.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.FieldInfo.FieldHandle\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: FieldHandle\n  nameWithType: FieldInfo.FieldHandle\n  fullName: FieldInfo.FieldHandle\n- uid: System.RuntimeFieldHandle\n  parent: System\n  isExternal: false\n  name: RuntimeFieldHandle\n  nameWithType: RuntimeFieldHandle\n  fullName: System.RuntimeFieldHandle\n- uid: System.Reflection.FieldInfo.FieldType\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: FieldType\n  nameWithType: FieldInfo.FieldType\n  fullName: FieldInfo.FieldType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetFieldFromHandle(RuntimeFieldHandle)\n  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)\n  fullName: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)\n  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)\n  fullName: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.FieldInfo.GetHashCode\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: FieldInfo.GetHashCode()\n  fullName: FieldInfo.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.FieldInfo.GetOptionalCustomModifiers\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetOptionalCustomModifiers()\n  nameWithType: FieldInfo.GetOptionalCustomModifiers()\n  fullName: FieldInfo.GetOptionalCustomModifiers()\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.FieldInfo.GetRawConstantValue\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetRawConstantValue()\n  nameWithType: FieldInfo.GetRawConstantValue()\n  fullName: FieldInfo.GetRawConstantValue()\n- uid: System.Reflection.FieldInfo.GetRequiredCustomModifiers\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetRequiredCustomModifiers()\n  nameWithType: FieldInfo.GetRequiredCustomModifiers()\n  fullName: FieldInfo.GetRequiredCustomModifiers()\n- uid: System.Reflection.FieldInfo.GetValue(System.Object)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetValue(Object)\n  nameWithType: FieldInfo.GetValue(Object)\n  fullName: FieldInfo.GetValue(Object)\n- uid: System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetValueDirect(TypedReference)\n  nameWithType: FieldInfo.GetValueDirect(TypedReference)\n  fullName: FieldInfo.GetValueDirect(TypedReference)\n- uid: System.TypedReference\n  parent: System\n  isExternal: false\n  name: TypedReference\n  nameWithType: TypedReference\n  fullName: System.TypedReference\n- uid: System.Reflection.FieldInfo.IsAssembly\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsAssembly\n  nameWithType: FieldInfo.IsAssembly\n  fullName: FieldInfo.IsAssembly\n- uid: System.Reflection.FieldInfo.IsFamily\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsFamily\n  nameWithType: FieldInfo.IsFamily\n  fullName: FieldInfo.IsFamily\n- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsFamilyAndAssembly\n  nameWithType: FieldInfo.IsFamilyAndAssembly\n  fullName: FieldInfo.IsFamilyAndAssembly\n- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsFamilyOrAssembly\n  nameWithType: FieldInfo.IsFamilyOrAssembly\n  fullName: FieldInfo.IsFamilyOrAssembly\n- uid: System.Reflection.FieldInfo.IsInitOnly\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsInitOnly\n  nameWithType: FieldInfo.IsInitOnly\n  fullName: FieldInfo.IsInitOnly\n- uid: System.Reflection.FieldInfo.IsLiteral\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsLiteral\n  nameWithType: FieldInfo.IsLiteral\n  fullName: FieldInfo.IsLiteral\n- uid: System.Reflection.FieldInfo.IsNotSerialized\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsNotSerialized\n  nameWithType: FieldInfo.IsNotSerialized\n  fullName: FieldInfo.IsNotSerialized\n- uid: System.Reflection.FieldInfo.IsPinvokeImpl\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsPinvokeImpl\n  nameWithType: FieldInfo.IsPinvokeImpl\n  fullName: FieldInfo.IsPinvokeImpl\n- uid: System.Reflection.FieldInfo.IsPrivate\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsPrivate\n  nameWithType: FieldInfo.IsPrivate\n  fullName: FieldInfo.IsPrivate\n- uid: System.Reflection.FieldInfo.IsPublic\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsPublic\n  nameWithType: FieldInfo.IsPublic\n  fullName: FieldInfo.IsPublic\n- uid: System.Reflection.FieldInfo.IsSecurityCritical\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: FieldInfo.IsSecurityCritical\n  fullName: FieldInfo.IsSecurityCritical\n- uid: System.Reflection.FieldInfo.IsSecuritySafeCritical\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: FieldInfo.IsSecuritySafeCritical\n  fullName: FieldInfo.IsSecuritySafeCritical\n- uid: System.Reflection.FieldInfo.IsSecurityTransparent\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: FieldInfo.IsSecurityTransparent\n  fullName: FieldInfo.IsSecurityTransparent\n- uid: System.Reflection.FieldInfo.IsSpecialName\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: FieldInfo.IsSpecialName\n  fullName: FieldInfo.IsSpecialName\n- uid: System.Reflection.FieldInfo.IsStatic\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsStatic\n  nameWithType: FieldInfo.IsStatic\n  fullName: FieldInfo.IsStatic\n- uid: System.Reflection.FieldInfo.MemberType\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: FieldInfo.MemberType\n  fullName: FieldInfo.MemberType\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  nameWithType: MemberTypes\n  fullName: System.Reflection.MemberTypes\n- uid: System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: op_Equality(FieldInfo, FieldInfo)\n  nameWithType: FieldInfo.op_Equality(FieldInfo, FieldInfo)\n  fullName: FieldInfo.op_Equality(FieldInfo, FieldInfo)\n- uid: System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: op_Inequality(FieldInfo, FieldInfo)\n  nameWithType: FieldInfo.op_Inequality(FieldInfo, FieldInfo)\n  fullName: FieldInfo.op_Inequality(FieldInfo, FieldInfo)\n- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: SetValue(Object, Object)\n  nameWithType: FieldInfo.SetValue(Object, Object)\n  fullName: FieldInfo.SetValue(Object, Object)\n- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: SetValue(Object, Object, BindingFlags, Binder, CultureInfo)\n  nameWithType: FieldInfo.SetValue(Object, Object, BindingFlags, Binder, CultureInfo)\n  fullName: FieldInfo.SetValue(Object, Object, BindingFlags, Binder, CultureInfo)\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: SetValueDirect(TypedReference, Object)\n  nameWithType: FieldInfo.SetValueDirect(TypedReference, Object)\n  fullName: FieldInfo.SetValueDirect(TypedReference, Object)\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: _FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: FieldInfo._FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: FieldInfo._FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: _FieldInfo.GetType()\n  nameWithType: FieldInfo._FieldInfo.GetType()\n  fullName: FieldInfo._FieldInfo.GetType()\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: _FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: FieldInfo._FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: FieldInfo._FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: _FieldInfo.GetTypeInfoCount(UInt32)\n  nameWithType: FieldInfo._FieldInfo.GetTypeInfoCount(UInt32)\n  fullName: FieldInfo._FieldInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: _FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: FieldInfo._FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: FieldInfo._FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.FieldInfo.#ctor*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo.FieldInfo\n  fullName: FieldInfo.FieldInfo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.Attributes*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: FieldInfo.Attributes\n  fullName: FieldInfo.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.Equals*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: Equals\n  nameWithType: FieldInfo.Equals\n  fullName: FieldInfo.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.FieldHandle*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: FieldHandle\n  nameWithType: FieldInfo.FieldHandle\n  fullName: FieldInfo.FieldHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.FieldType*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: FieldType\n  nameWithType: FieldInfo.FieldType\n  fullName: FieldInfo.FieldType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.GetFieldFromHandle*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetFieldFromHandle\n  nameWithType: FieldInfo.GetFieldFromHandle\n  fullName: FieldInfo.GetFieldFromHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.GetHashCode*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: FieldInfo.GetHashCode\n  fullName: FieldInfo.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.GetOptionalCustomModifiers*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetOptionalCustomModifiers\n  nameWithType: FieldInfo.GetOptionalCustomModifiers\n  fullName: FieldInfo.GetOptionalCustomModifiers\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.GetRawConstantValue*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetRawConstantValue\n  nameWithType: FieldInfo.GetRawConstantValue\n  fullName: FieldInfo.GetRawConstantValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.GetRequiredCustomModifiers*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetRequiredCustomModifiers\n  nameWithType: FieldInfo.GetRequiredCustomModifiers\n  fullName: FieldInfo.GetRequiredCustomModifiers\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.GetValue*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetValue\n  nameWithType: FieldInfo.GetValue\n  fullName: FieldInfo.GetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.GetValueDirect*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: GetValueDirect\n  nameWithType: FieldInfo.GetValueDirect\n  fullName: FieldInfo.GetValueDirect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsAssembly*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsAssembly\n  nameWithType: FieldInfo.IsAssembly\n  fullName: FieldInfo.IsAssembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsFamily*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsFamily\n  nameWithType: FieldInfo.IsFamily\n  fullName: FieldInfo.IsFamily\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsFamilyAndAssembly\n  nameWithType: FieldInfo.IsFamilyAndAssembly\n  fullName: FieldInfo.IsFamilyAndAssembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsFamilyOrAssembly\n  nameWithType: FieldInfo.IsFamilyOrAssembly\n  fullName: FieldInfo.IsFamilyOrAssembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsInitOnly*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsInitOnly\n  nameWithType: FieldInfo.IsInitOnly\n  fullName: FieldInfo.IsInitOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsLiteral*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsLiteral\n  nameWithType: FieldInfo.IsLiteral\n  fullName: FieldInfo.IsLiteral\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsNotSerialized*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsNotSerialized\n  nameWithType: FieldInfo.IsNotSerialized\n  fullName: FieldInfo.IsNotSerialized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsPinvokeImpl*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsPinvokeImpl\n  nameWithType: FieldInfo.IsPinvokeImpl\n  fullName: FieldInfo.IsPinvokeImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsPrivate*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsPrivate\n  nameWithType: FieldInfo.IsPrivate\n  fullName: FieldInfo.IsPrivate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsPublic*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsPublic\n  nameWithType: FieldInfo.IsPublic\n  fullName: FieldInfo.IsPublic\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsSecurityCritical*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: FieldInfo.IsSecurityCritical\n  fullName: FieldInfo.IsSecurityCritical\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsSecuritySafeCritical*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: FieldInfo.IsSecuritySafeCritical\n  fullName: FieldInfo.IsSecuritySafeCritical\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsSecurityTransparent*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: FieldInfo.IsSecurityTransparent\n  fullName: FieldInfo.IsSecurityTransparent\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsSpecialName*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: FieldInfo.IsSpecialName\n  fullName: FieldInfo.IsSpecialName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.IsStatic*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: IsStatic\n  nameWithType: FieldInfo.IsStatic\n  fullName: FieldInfo.IsStatic\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.MemberType*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: FieldInfo.MemberType\n  fullName: FieldInfo.MemberType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.op_Equality*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: op_Equality\n  nameWithType: FieldInfo.op_Equality\n  fullName: FieldInfo.op_Equality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.op_Inequality*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: op_Inequality\n  nameWithType: FieldInfo.op_Inequality\n  fullName: FieldInfo.op_Inequality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.SetValue*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: SetValue\n  nameWithType: FieldInfo.SetValue\n  fullName: FieldInfo.SetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.SetValueDirect*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: SetValueDirect\n  nameWithType: FieldInfo.SetValueDirect\n  fullName: FieldInfo.SetValueDirect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._FieldInfo.GetIDsOfNames\n  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetIDsOfNames\n  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._FieldInfo.GetType\n  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetType\n  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._FieldInfo.GetTypeInfo\n  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfo\n  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount\n  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount\n  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke*\n  parent: System.Reflection.FieldInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._FieldInfo.Invoke\n  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.Invoke\n  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  fullName: MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.IsDefined(Type, Boolean)\n  fullName: MemberInfo.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  nameWithType: MemberInfo.Module\n  fullName: MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  nameWithType: MemberInfo.Name\n  fullName: MemberInfo.Name\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.ReflectedType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ReflectedType\n  nameWithType: MemberInfo.ReflectedType\n  fullName: MemberInfo.ReflectedType\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Runtime.InteropServices._FieldInfo\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _FieldInfo\n  nameWithType: _FieldInfo\n  fullName: System.Runtime.InteropServices._FieldInfo\n"}