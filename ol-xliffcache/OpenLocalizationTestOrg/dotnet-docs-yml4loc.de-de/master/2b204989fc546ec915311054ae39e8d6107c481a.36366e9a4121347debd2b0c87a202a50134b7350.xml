{"nodes":[{"content":"Provides an iterator that supports the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic.","nodes":[{"pos":[0,298],"content":"Provides an iterator that supports the following operations: moving forward one position by calling <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">operator++</ph><ept id=\"p1\">&lt;/code&gt;</ept>, moving backward one position by calling <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">operator--</ph><ept id=\"p2\">&lt;/code&gt;</ept>, accessing an element by using <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">operator[]</ph><ept id=\"p3\">&lt;/code&gt;</ept>, and accessing an element by using pointer arithmetic.","source":"Provides an iterator that supports the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic."}],"pos":[6038,6339],"yaml":true},{"content":"[!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]","nodes":[],"pos":[6350,6408],"yaml":true,"extradata":"MT"},{"content":"[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]","nodes":[],"pos":[6605,6663],"yaml":true},{"content":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,125],"content":"Allocates and initializes a new <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[8202,8328],"yaml":true},{"content":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object from an existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\"></xref> object.","nodes":[{"pos":[0,228],"content":"Allocates and initializes a new <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object from an existing <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object from an existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\"></xref> object."}],"pos":[11762,11991],"yaml":true},{"content":"An existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\"></xref> object to be copied to the current container.","nodes":[{"pos":[0,136],"content":"An existing <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\"&gt;&lt;/xref&gt;</ph> object to be copied to the current container.","source":"An existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\"></xref> object to be copied to the current container."}],"pos":[12258,12395],"yaml":true},{"content":"The offset of the element that the iterator will point to after creation.","nodes":[{"pos":[0,73],"content":"The offset of the element that the iterator will point to after creation.","nodes":[{"content":"The offset of the element that the iterator will point to after creation.","pos":[0,73]}]}],"pos":[12457,12531],"yaml":true},{"content":"Creates a copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,123],"content":"Creates a copy of the current <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[13660,13784],"yaml":true},{"content":"A copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,115],"content":"A copy of the current <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"A copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[13915,14031],"yaml":true},{"content":"Gets the container that the iterator is traversing.","nodes":[{"pos":[0,51],"content":"Gets the container that the iterator is traversing.","nodes":[{"content":"Gets the container that the iterator is traversing.","pos":[0,51]}]}],"pos":[15184,15236],"yaml":true},{"content":"The container that the iterator is traversing.","nodes":[{"pos":[0,46],"content":"The container that the iterator is traversing.","nodes":[{"content":"The container that the iterator is traversing.","pos":[0,46]}]}],"pos":[15371,15418],"yaml":true},{"content":"Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.","nodes":[{"pos":[0,140],"content":"Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.","nodes":[{"content":"Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.","pos":[0,140]}]}],"pos":[18582,18723],"yaml":true},{"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"pos":[0,75],"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"content":"A valid iterator that points to the same container as the current iterator.","pos":[0,75]}]}],"pos":[18968,19044],"yaml":true},{"content":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to. This number will be negative if <code>_Right</code> points to an element that is before the element that the current iterator points to.","nodes":[{"pos":[0,291],"content":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to. This number will be negative if <code>_Right</code> points to an element that is before the element that the current iterator points to.","nodes":[{"content":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">_Right</ph><ept id=\"p1\">&lt;/code&gt;</ept> is pointing to.","pos":[0,154],"source":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to."},{"content":"This number will be negative if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">_Right</ph><ept id=\"p1\">&lt;/code&gt;</ept> points to an element that is before the element that the current iterator points to.","pos":[155,291],"source":" This number will be negative if <code>_Right</code> points to an element that is before the element that the current iterator points to."}]}],"pos":[19100,19392],"yaml":true},{"content":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,227],"content":"Determines whether the given <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[22516,22744],"yaml":true},{"content":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,203],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[22976,23180],"yaml":true},{"content":"`true` if the two iterators are the same object; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the two iterators are the same object; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two iterators are the same object; otherwise, `false`."}],"pos":[23238,23309],"yaml":true},{"content":"Accesses the element at the given position in the container.","nodes":[{"pos":[0,60],"content":"Accesses the element at the given position in the container.","nodes":[{"content":"Accesses the element at the given position in the container.","pos":[0,60]}]}],"pos":[24494,24555],"yaml":true},{"content":"The position of the element to access.","nodes":[{"pos":[0,38],"content":"The position of the element to access.","nodes":[{"content":"The position of the element to access.","pos":[0,38]}]}],"pos":[24696,24735],"yaml":true},{"content":"The element at the given position in the container.","nodes":[{"pos":[0,51],"content":"The element at the given position in the container.","nodes":[{"content":"The element at the given position in the container.","pos":[0,51]}]}],"pos":[24785,24837],"yaml":true},{"content":"Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.","nodes":[{"pos":[0,144],"content":"Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.","nodes":[{"content":"Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.","pos":[0,144]}]}],"pos":[28013,28158],"yaml":true},{"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"pos":[0,75],"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"content":"A valid iterator that points to the same container as the current iterator.","pos":[0,75]}]}],"pos":[28405,28481],"yaml":true},{"content":"`true` if the current iterator is pointing to an element that comes before the element that <code>_Right</code> is pointing to; otherwise, `false`.","nodes":[{"pos":[0,147],"content":"<ph id=\"ph1\">`true`</ph> if the current iterator is pointing to an element that comes before the element that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">_Right</ph><ept id=\"p1\">&lt;/code&gt;</ept> is pointing to; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the current iterator is pointing to an element that comes before the element that <code>_Right</code> is pointing to; otherwise, `false`."}],"pos":[28539,28689],"yaml":true},{"content":"Moves the iterator by the given number of elements.","nodes":[{"pos":[0,51],"content":"Moves the iterator by the given number of elements.","nodes":[{"content":"Moves the iterator by the given number of elements.","pos":[0,51]}]}],"pos":[29873,29925],"yaml":true},{"content":"The number of elements to traverse. To move the iterator forward, specify a positive number. To move the iterator backward, use a negative number.","nodes":[{"pos":[0,146],"content":"The number of elements to traverse. To move the iterator forward, specify a positive number. To move the iterator backward, use a negative number.","nodes":[{"content":"The number of elements to traverse. To move the iterator forward, specify a positive number. To move the iterator backward, use a negative number.","pos":[0,146],"nodes":[{"content":"The number of elements to traverse.","pos":[0,35]},{"content":"To move the iterator forward, specify a positive number.","pos":[36,92]},{"content":"To move the iterator backward, use a negative number.","pos":[93,146]}]}]}],"pos":[30065,30212],"yaml":true},{"content":"The actual number of elements traversed. This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements.","nodes":[{"pos":[0,191],"content":"The actual number of elements traversed. This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements.","nodes":[{"content":"The actual number of elements traversed.","pos":[0,40]},{"content":"This number will differ from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">_Offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> if the beginning or end of the container is reached before iterating the desired number of elements.","pos":[41,191],"source":" This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements."}]}],"pos":[30268,30460],"yaml":true},{"content":"Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.","nodes":[{"pos":[0,174],"content":"Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.","nodes":[{"content":"Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.","pos":[0,174]}]}],"pos":[31582,31757],"yaml":true},{"content":"Increments the iterator by the given number of elements. The integer parameter is specified on the right side of the addition operator.","nodes":[{"pos":[0,135],"content":"Increments the iterator by the given number of elements. The integer parameter is specified on the right side of the addition operator.","nodes":[{"content":"Increments the iterator by the given number of elements. The integer parameter is specified on the right side of the addition operator.","pos":[0,135],"nodes":[{"content":"Increments the iterator by the given number of elements.","pos":[0,56]},{"content":"The integer parameter is specified on the right side of the addition operator.","pos":[57,135]}]}]}],"pos":[33372,33508],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"pos":[0,241],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName&gt;</ph>","pos":[0,241],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>"}]}],"pos":[33519,33761],"yaml":true,"extradata":"MT"},{"content":"The number of elements to increment.","nodes":[{"pos":[0,36],"content":"The number of elements to increment.","nodes":[{"content":"The number of elements to increment.","pos":[0,36]}]}],"pos":[34140,34177],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[34284,34297],"yaml":true},{"content":"Decrements the iterator by one element. This is the prefix version of the decrement operator.","nodes":[{"pos":[0,93],"content":"Decrements the iterator by one element. This is the prefix version of the decrement operator.","nodes":[{"content":"Decrements the iterator by one element. This is the prefix version of the decrement operator.","pos":[0,93],"nodes":[{"content":"Decrements the iterator by one element.","pos":[0,39]},{"content":"This is the prefix version of the decrement operator.","pos":[40,93]}]}]}],"pos":[40203,40297],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[40711,40724],"yaml":true},{"content":"Decrements the iterator by one element. This is the postfix version of the decrement operator.","nodes":[{"pos":[0,94],"content":"Decrements the iterator by one element. This is the postfix version of the decrement operator.","nodes":[{"content":"Decrements the iterator by one element. This is the postfix version of the decrement operator.","pos":[0,94],"nodes":[{"content":"Decrements the iterator by one element.","pos":[0,39]},{"content":"This is the postfix version of the decrement operator.","pos":[40,94]}]}]}],"pos":[42282,42377],"yaml":true},{"content":"An unused parameter that indicates this is the postfix version of the operator.","nodes":[{"pos":[0,79],"content":"An unused parameter that indicates this is the postfix version of the operator.","nodes":[{"content":"An unused parameter that indicates this is the postfix version of the operator.","pos":[0,79]}]}],"pos":[42751,42831],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[42938,42951],"yaml":true},{"content":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,227],"content":"Determines whether the given <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[44350,44578],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Equals%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"pos":[0,211],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Equals%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Equals%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph>","pos":[0,211],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Equals%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName>"}]}],"pos":[44589,44801],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,203],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[45167,45371],"yaml":true},{"content":"`true` if the two iterators are the same object; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the two iterators are the same object; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two iterators are the same object; otherwise, `false`."}],"pos":[45429,45500],"yaml":true},{"content":"Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.","nodes":[{"pos":[0,132],"content":"Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.","nodes":[{"content":"Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.","pos":[0,132]}]}],"pos":[55383,55516],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"pos":[0,219],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph>","pos":[0,219],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>"}]}],"pos":[55527,55747],"yaml":true,"extradata":"MT"},{"content":"The iterator to compare with the left-side iterator.","nodes":[{"pos":[0,52],"content":"The iterator to compare with the left-side iterator.","nodes":[{"content":"The iterator to compare with the left-side iterator.","pos":[0,52]}]}],"pos":[55998,56051],"yaml":true},{"content":"`true` if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, `false`.","nodes":[{"pos":[0,111],"content":"<ph id=\"ph1\">`true`</ph> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, `false`."}],"pos":[56109,56223],"yaml":true},{"content":"Increments the iterator by one element. This is the prefix version of the increment operator.","nodes":[{"pos":[0,93],"content":"Increments the iterator by one element. This is the prefix version of the increment operator.","nodes":[{"content":"Increments the iterator by one element. This is the prefix version of the increment operator.","pos":[0,93],"nodes":[{"content":"Increments the iterator by one element.","pos":[0,39]},{"content":"This is the prefix version of the increment operator.","pos":[40,93]}]}]}],"pos":[59138,59232],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[59646,59659],"yaml":true},{"content":"Increments the iterator by one element. This is the postfix version of the increment operator.","nodes":[{"pos":[0,94],"content":"Increments the iterator by one element. This is the postfix version of the increment operator.","nodes":[{"content":"Increments the iterator by one element. This is the postfix version of the increment operator.","pos":[0,94],"nodes":[{"content":"Increments the iterator by one element.","pos":[0,39]},{"content":"This is the postfix version of the increment operator.","pos":[40,94]}]}]}],"pos":[61217,61312],"yaml":true},{"content":"An unused parameter that indicates this is the postfix version of the operator.","nodes":[{"pos":[0,79],"content":"An unused parameter that indicates this is the postfix version of the operator.","nodes":[{"content":"An unused parameter that indicates this is the postfix version of the operator.","pos":[0,79]}]}],"pos":[61686,61766],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[61873,61886],"yaml":true},{"content":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object differs from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,225],"content":"Determines whether the given <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object differs from the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object differs from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[65088,65314],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"pos":[0,212],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph>","pos":[0,212],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName>"}]}],"pos":[65325,65538],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,203],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[65767,65971],"yaml":true},{"content":"`true` if the two iterators are different objects; otherwise, `false`.","nodes":[{"pos":[0,70],"content":"<ph id=\"ph1\">`true`</ph> if the two iterators are different objects; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two iterators are different objects; otherwise, `false`."}],"pos":[66029,66102],"yaml":true},{"content":"Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.","nodes":[{"pos":[0,117],"content":"Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.","nodes":[{"content":"Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.","pos":[0,117]}]}],"pos":[67544,67662],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"pos":[0,219],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph>","pos":[0,219],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>"}]}],"pos":[67673,67893],"yaml":true,"extradata":"MT"},{"content":"The iterator to compare with the left-side iterator.","nodes":[{"pos":[0,52],"content":"The iterator to compare with the left-side iterator.","nodes":[{"content":"The iterator to compare with the left-side iterator.","pos":[0,52]}]}],"pos":[68273,68326],"yaml":true},{"content":"`true` if the left-side iterator is less than the given right-side iterator; otherwise, `false`.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">`true`</ph> if the left-side iterator is less than the given right-side iterator; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the left-side iterator is less than the given right-side iterator; otherwise, `false`."}],"pos":[68384,68483],"yaml":true},{"content":"Determines the difference between two iterators.","nodes":[{"pos":[0,48],"content":"Determines the difference between two iterators.","nodes":[{"content":"Determines the difference between two iterators.","pos":[0,48]}]}],"pos":[80236,80285],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"pos":[0,220],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph>","pos":[0,220],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>"}]}],"pos":[80296,80517],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> to be subtracted from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,209],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> to be subtracted from the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> to be subtracted from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object."}],"pos":[80899,81109],"yaml":true},{"content":"The difference (number of elements) between the two iterators.","nodes":[{"pos":[0,62],"content":"The difference (number of elements) between the two iterators.","nodes":[{"content":"The difference (number of elements) between the two iterators.","pos":[0,62]}]}],"pos":[81165,81228],"yaml":true},{"content":"Decrements the iterator by the given number of elements. The integer parameter is specified on the right side of the subtraction operator.","nodes":[{"pos":[0,138],"content":"Decrements the iterator by the given number of elements. The integer parameter is specified on the right side of the subtraction operator.","nodes":[{"content":"Decrements the iterator by the given number of elements. The integer parameter is specified on the right side of the subtraction operator.","pos":[0,138],"nodes":[{"content":"Decrements the iterator by the given number of elements.","pos":[0,56]},{"content":"The integer parameter is specified on the right side of the subtraction operator.","pos":[57,138]}]}]}],"pos":[82871,83010],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"pos":[0,246],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName&gt;</ph>","pos":[0,246],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>"}]}],"pos":[83021,83268],"yaml":true,"extradata":"MT"},{"content":"The number of elements to decrement.","nodes":[{"pos":[0,36],"content":"The number of elements to decrement.","nodes":[{"content":"The number of elements to decrement.","pos":[0,36]}]}],"pos":[83650,83687],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[83794,83807],"yaml":true},{"content":"Positions the iterator to the element immediately before the current element.","nodes":[{"pos":[0,77],"content":"Positions the iterator to the element immediately before the current element.","nodes":[{"content":"Positions the iterator to the element immediately before the current element.","pos":[0,77]}]}],"pos":[84939,85017],"yaml":true},{"content":"Determines whether the iterator is valid and can be safely used to traverse the underlying container.","nodes":[{"pos":[0,101],"content":"Determines whether the iterator is valid and can be safely used to traverse the underlying container.","nodes":[{"content":"Determines whether the iterator is valid and can be safely used to traverse the underlying container.","pos":[0,101]}]}],"pos":[86216,86318],"yaml":true},{"content":"`true` if the iterator is valid and safe to use; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the iterator is valid and safe to use; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the iterator is valid and safe to use; otherwise, `false`."}],"pos":[86448,86519],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  commentId: T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  id: ContainerRandomAccessIterator`1\n  children:\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid\n  langs:\n  - csharp\n  name: ContainerRandomAccessIterator<TValue>\n  nameWithType: ContainerRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue>\n  type: Class\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: 'Provides an iterator that supports the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic.'\n  remarks: '[!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]'\n  syntax:\n    content: 'public class ContainerRandomAccessIterator<TValue> : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue>'\n    typeParameters:\n    - id: TValue\n      description: '[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]'\n  inheritance:\n  - System.Object\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{TValue}\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: ContainerRandomAccessIterator<TValue>()\n  nameWithType: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>()\n  fullName: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n  syntax:\n    content: public ContainerRandomAccessIterator ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: '#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)'\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: ContainerRandomAccessIterator<TValue>(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>(ContainerRandomAccessIterator)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public ContainerRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)\n  id: '#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)'\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: ContainerRandomAccessIterator<TValue>(IRandomAccessContainer<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>(IRandomAccessContainer<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>(IRandomAccessContainer<TValue>, Int32)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object from an existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\"></xref> object.\n  syntax:\n    content: public ContainerRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer<TValue> _Cont, int _Offset);\n    parameters:\n    - id: _Cont\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\n      description: An existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\"></xref> object to be copied to the current container.\n    - id: _Offset\n      type: System.Int32\n      description: The offset of the element that the iterator will point to after creation.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone\n  id: Clone\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: ContainerRandomAccessIterator<TValue>.Clone()\n  fullName: ContainerRandomAccessIterator<TValue>.Clone()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Creates a copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container\n  id: container\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: container()\n  nameWithType: ContainerRandomAccessIterator<TValue>.container()\n  fullName: ContainerRandomAccessIterator<TValue>.container()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Gets the container that the iterator is traversing.\n  syntax:\n    content: public virtual object container ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The container that the iterator is traversing.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: distance(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.distance(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.distance(ContainerRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public int distance (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: distance(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.\n  syntax:\n    content: public virtual int distance (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: A valid iterator that points to the same container as the current iterator.\n    return:\n      type: System.Int32\n      description: The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to. This number will be negative if <code>_Right</code> points to an element that is before the element that the current iterator points to.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: equal_to(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.equal_to(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.equal_to(ContainerRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool equal_to (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  id: equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: equal_to(IInputIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.equal_to(IInputIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.equal_to(IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n  syntax:\n    content: public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the two iterators are the same object; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)\n  commentId: P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.Item(Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.Item(Int32)\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Accesses the element at the given position in the container.\n  syntax:\n    content: public TValue this[int _Pos] { get; set; }\n    parameters:\n    - id: _Pos\n      type: System.Int32\n      description: The position of the element to access.\n    return:\n      type: TValue\n      description: The element at the given position in the container.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: less_than(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.less_than(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.less_than(ContainerRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool less_than (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: less_than(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.\n  syntax:\n    content: public virtual bool less_than (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: A valid iterator that points to the same container as the current iterator.\n    return:\n      type: System.Boolean\n      description: '`true` if the current iterator is pointing to an element that comes before the element that <code>_Right</code> is pointing to; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)\n  id: move(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: move(Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.move(Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.move(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Moves the iterator by the given number of elements.\n  syntax:\n    content: public virtual int move (int _Offset);\n    parameters:\n    - id: _Offset\n      type: System.Int32\n      description: The number of elements to traverse. To move the iterator forward, specify a positive number. To move the iterator backward, use a negative number.\n    return:\n      type: System.Int32\n      description: The actual number of elements traversed. This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next\n  id: next\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: next()\n  nameWithType: ContainerRandomAccessIterator<TValue>.next()\n  fullName: ContainerRandomAccessIterator<TValue>.next()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.\n  syntax:\n    content: public virtual void next ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  id: op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Addition(ContainerRandomAccessIterator<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Addition(ContainerRandomAccessIterator<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Addition(ContainerRandomAccessIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the iterator by the given number of elements. The integer parameter is specified on the right side of the addition operator.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , int _Right);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: ''\n    - id: _Right\n      type: System.Int32\n      description: The number of elements to increment.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Addition(ContainerRandomAccessIterator<TValue>, Int32, ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Addition(ContainerRandomAccessIterator<TValue>, Int32, ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Addition(ContainerRandomAccessIterator<TValue>, Int32, ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public static Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , int _Left, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: ''\n    - id: _Left\n      type: System.Int32\n      description: ''\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Assign(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Assign(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Assign(ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  id: op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Decrement(ContainerRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Decrement(ContainerRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Decrement(ContainerRandomAccessIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Decrements the iterator by one element. This is the prefix version of the decrement operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  id: op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Decrement(ContainerRandomAccessIterator<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Decrement(ContainerRandomAccessIterator<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Decrement(ContainerRandomAccessIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Decrements the iterator by one element. This is the postfix version of the decrement operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , int A_0);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: ''\n    - id: A_0\n      type: System.Int32\n      description: An unused parameter that indicates this is the postfix version of the operator.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  id: op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Equality(IInputIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Equality(IInputIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Equality(IInputIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Equals%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName>\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_Equality (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the two iterators are the same object; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Equality(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Equality(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Equality(ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_Equality (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_GreaterThan(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThan(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThan(ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_GreaterThan (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_GreaterThan(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThan(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThan(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public static bool op_GreaterThan (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Left, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: ''\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_GreaterThanOrEqual(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual(ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_GreaterThanOrEqual (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_GreaterThanOrEqual(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual(IRandomAccessIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>\n  syntax:\n    content: public bool op_GreaterThanOrEqual (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: The iterator to compare with the left-side iterator.\n    return:\n      type: System.Boolean\n      description: '`true` if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}\n  id: op_Implicit\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Implicit\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Implicit\n  fullName: ContainerRandomAccessIterator<TValue>.op_Implicit\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> op_Implicit ();\n    parameters: []\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  id: op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Increment(ContainerRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Increment(ContainerRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Increment(ContainerRandomAccessIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the iterator by one element. This is the prefix version of the increment operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  id: op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Increment(ContainerRandomAccessIterator<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Increment(ContainerRandomAccessIterator<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Increment(ContainerRandomAccessIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the iterator by one element. This is the postfix version of the increment operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , int A_0);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: ''\n    - id: A_0\n      type: System.Int32\n      description: An unused parameter that indicates this is the postfix version of the operator.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Inequality(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Inequality(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Inequality(ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_Inequality (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  id: op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Inequality(IInputIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object differs from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName>\n  syntax:\n    content: public bool op_Inequality (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the two iterators are different objects; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_LessThan(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThan(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThan(IRandomAccessIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_LessThan (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: The iterator to compare with the left-side iterator.\n    return:\n      type: System.Boolean\n      description: '`true` if the left-side iterator is less than the given right-side iterator; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_LessThan(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThan(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThan(ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_LessThan (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_LessThanOrEqual(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual(ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_LessThanOrEqual (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_LessThanOrEqual(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public static bool op_LessThanOrEqual (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Left, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Right);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: ''\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_MemberSelection(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_MemberSelection(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_MemberSelection(ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public static TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Left);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: TValue@\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_PointerDereference(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_PointerDereference(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_PointerDereference(ContainerRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public static TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Left);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: ''\n    return:\n      type: TValue@\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Subtraction(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Subtraction(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Subtraction(IRandomAccessIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines the difference between two iterators.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public int op_Subtraction (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: The <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> to be subtracted from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\"></xref> object.\n    return:\n      type: System.Int32\n      description: The difference (number of elements) between the two iterators.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  id: op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Subtraction(ContainerRandomAccessIterator<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Subtraction(ContainerRandomAccessIterator<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Subtraction(ContainerRandomAccessIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Decrements the iterator by the given number of elements. The integer parameter is specified on the right side of the subtraction operator.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Subtraction (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , int _Right);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: ''\n    - id: _Right\n      type: System.Int32\n      description: The number of elements to decrement.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev\n  id: prev\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: prev()\n  nameWithType: ContainerRandomAccessIterator<TValue>.prev()\n  fullName: ContainerRandomAccessIterator<TValue>.prev()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Positions the iterator to the element immediately before the current element.\n  syntax:\n    content: public virtual void prev ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid\n  id: valid\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  langs:\n  - csharp\n  name: valid()\n  nameWithType: ContainerRandomAccessIterator<TValue>.valid()\n  fullName: ContainerRandomAccessIterator<TValue>.valid()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the iterator is valid and can be safely used to traverse the underlying container.\n  syntax:\n    content: public virtual bool valid ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the iterator is valid and safe to use; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>()\n  nameWithType: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>()\n  fullName: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>()\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerRandomAccessIterator\n  nameWithType: ContainerRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>(IRandomAccessContainer<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>(IRandomAccessContainer<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>(IRandomAccessContainer<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IRandomAccessContainer<TValue>\n  nameWithType: IRandomAccessContainer<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer<TValue>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: Clone()\n  nameWithType: ContainerRandomAccessIterator<TValue>.Clone()\n  fullName: ContainerRandomAccessIterator<TValue>.Clone()\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: container()\n  nameWithType: ContainerRandomAccessIterator<TValue>.container()\n  fullName: ContainerRandomAccessIterator<TValue>.container()\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: distance(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.distance(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.distance(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: distance(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IRandomAccessIterator<TValue>\n  nameWithType: IRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: equal_to(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.equal_to(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.equal_to(ContainerRandomAccessIterator)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: equal_to(IInputIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.equal_to(IInputIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.equal_to(IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.Item(Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.Item(Int32)\n- uid: TValue\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: less_than(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.less_than(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.less_than(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: less_than(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: move(Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.move(Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.move(Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: next()\n  nameWithType: ContainerRandomAccessIterator<TValue>.next()\n  fullName: ContainerRandomAccessIterator<TValue>.next()\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Addition(ContainerRandomAccessIterator<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Addition(ContainerRandomAccessIterator<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Addition(ContainerRandomAccessIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>\n  nameWithType: ContainerRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Addition(ContainerRandomAccessIterator<TValue>, Int32, ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Addition(ContainerRandomAccessIterator<TValue>, Int32, ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Addition(ContainerRandomAccessIterator<TValue>, Int32, ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Assign(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Assign(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Assign(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Decrement(ContainerRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Decrement(ContainerRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Decrement(ContainerRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Decrement(ContainerRandomAccessIterator<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Decrement(ContainerRandomAccessIterator<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Decrement(ContainerRandomAccessIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Equality(IInputIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Equality(IInputIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Equality(IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Equality(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Equality(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Equality(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThan(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThan(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThan(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThan(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThan(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThan(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThanOrEqual(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThanOrEqual(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual(IRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Implicit\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Implicit\n  fullName: ContainerRandomAccessIterator<TValue>.op_Implicit\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Increment(ContainerRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Increment(ContainerRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Increment(ContainerRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Increment(ContainerRandomAccessIterator<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Increment(ContainerRandomAccessIterator<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Increment(ContainerRandomAccessIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Inequality(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Inequality(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Inequality(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Inequality(IInputIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThan(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThan(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThan(IRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThan(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThan(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThan(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThanOrEqual(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThanOrEqual(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual(IRandomAccessIterator<TValue>, ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_MemberSelection(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_MemberSelection(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_MemberSelection(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_PointerDereference(ContainerRandomAccessIterator)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_PointerDereference(ContainerRandomAccessIterator)\n  fullName: ContainerRandomAccessIterator<TValue>.op_PointerDereference(ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Subtraction(IRandomAccessIterator<TValue>)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Subtraction(IRandomAccessIterator<TValue>)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Subtraction(IRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Subtraction(ContainerRandomAccessIterator<TValue>, Int32)\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Subtraction(ContainerRandomAccessIterator<TValue>, Int32)\n  fullName: ContainerRandomAccessIterator<TValue>.op_Subtraction(ContainerRandomAccessIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: prev()\n  nameWithType: ContainerRandomAccessIterator<TValue>.prev()\n  fullName: ContainerRandomAccessIterator<TValue>.prev()\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: valid()\n  nameWithType: ContainerRandomAccessIterator<TValue>.valid()\n  fullName: ContainerRandomAccessIterator<TValue>.valid()\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>\n  nameWithType: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>\n  fullName: ContainerRandomAccessIterator<TValue>.ContainerRandomAccessIterator<TValue>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: Clone\n  nameWithType: ContainerRandomAccessIterator<TValue>.Clone\n  fullName: ContainerRandomAccessIterator<TValue>.Clone\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: container\n  nameWithType: ContainerRandomAccessIterator<TValue>.container\n  fullName: ContainerRandomAccessIterator<TValue>.container\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: distance\n  nameWithType: ContainerRandomAccessIterator<TValue>.distance\n  fullName: ContainerRandomAccessIterator<TValue>.distance\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: equal_to\n  nameWithType: ContainerRandomAccessIterator<TValue>.equal_to\n  fullName: ContainerRandomAccessIterator<TValue>.equal_to\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: Item\n  nameWithType: ContainerRandomAccessIterator<TValue>.Item\n  fullName: ContainerRandomAccessIterator<TValue>.Item\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: less_than\n  nameWithType: ContainerRandomAccessIterator<TValue>.less_than\n  fullName: ContainerRandomAccessIterator<TValue>.less_than\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: move\n  nameWithType: ContainerRandomAccessIterator<TValue>.move\n  fullName: ContainerRandomAccessIterator<TValue>.move\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: next\n  nameWithType: ContainerRandomAccessIterator<TValue>.next\n  fullName: ContainerRandomAccessIterator<TValue>.next\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Addition\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Addition\n  fullName: ContainerRandomAccessIterator<TValue>.op_Addition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Assign\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Assign\n  fullName: ContainerRandomAccessIterator<TValue>.op_Assign\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Decrement\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Decrement\n  fullName: ContainerRandomAccessIterator<TValue>.op_Decrement\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Equality\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Equality\n  fullName: ContainerRandomAccessIterator<TValue>.op_Equality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThan\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThan\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThan\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThanOrEqual\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual\n  fullName: ContainerRandomAccessIterator<TValue>.op_GreaterThanOrEqual\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Implicit\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Implicit\n  fullName: ContainerRandomAccessIterator<TValue>.op_Implicit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Increment\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Increment\n  fullName: ContainerRandomAccessIterator<TValue>.op_Increment\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Inequality\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Inequality\n  fullName: ContainerRandomAccessIterator<TValue>.op_Inequality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThan\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThan\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThan\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThanOrEqual\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual\n  fullName: ContainerRandomAccessIterator<TValue>.op_LessThanOrEqual\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_MemberSelection\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_MemberSelection\n  fullName: ContainerRandomAccessIterator<TValue>.op_MemberSelection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_PointerDereference\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_PointerDereference\n  fullName: ContainerRandomAccessIterator<TValue>.op_PointerDereference\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: op_Subtraction\n  nameWithType: ContainerRandomAccessIterator<TValue>.op_Subtraction\n  fullName: ContainerRandomAccessIterator<TValue>.op_Subtraction\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: prev\n  nameWithType: ContainerRandomAccessIterator<TValue>.prev\n  fullName: ContainerRandomAccessIterator<TValue>.prev\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  isExternal: false\n  name: valid\n  nameWithType: ContainerRandomAccessIterator<TValue>.valid\n  fullName: ContainerRandomAccessIterator<TValue>.valid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ContainerRandomAccessIterator`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}