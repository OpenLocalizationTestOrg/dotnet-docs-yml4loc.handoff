{"nodes":[{"content":"A customizable parser for a hierarchical URI.","nodes":[{"pos":[0,45],"content":"A customizable parser for a hierarchical URI.","nodes":[{"content":"A customizable parser for a hierarchical URI.","pos":[0,45]}]}],"pos":[426,472],"yaml":true},{"content":"If you want to create a parser based on a well-known scheme, use <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>, <xref:System.LdapStyleUriParser>, or <xref:System.NewsStyleUriParser>.  \n  \n When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to the <xref:System.GenericUriParser> constructor.  \n  \n The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN). Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.  \n  \n All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default. The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support. Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN.  \n  \n For more information on IRI and IDN support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.","nodes":[{"pos":[0,238],"content":"If you want to create a parser based on a well-known scheme, use <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>, <xref:System.LdapStyleUriParser>, or <xref:System.NewsStyleUriParser>.","nodes":[{"content":"If you want to create a parser based on a well-known scheme, use <ph id=\"ph1\">&lt;xref:System.HttpStyleUriParser&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.FtpStyleUriParser&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.GopherStyleUriParser&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.LdapStyleUriParser&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.NewsStyleUriParser&gt;</ph>.","pos":[0,238],"source":"If you want to create a parser based on a well-known scheme, use <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>, <xref:System.LdapStyleUriParser>, or <xref:System.NewsStyleUriParser>."}]},{"pos":[245,511],"content":"When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to the <xref:System.GenericUriParser> constructor.","nodes":[{"content":"When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <ph id=\"ph1\">&lt;xref:System.GenericUriParserOptions?displayProperty=fullName&gt;</ph> enumeration to the <ph id=\"ph2\">&lt;xref:System.GenericUriParser&gt;</ph> constructor.","pos":[0,266],"source":"When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to the <xref:System.GenericUriParser> constructor."}]},{"pos":[518,897],"content":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN). Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.","nodes":[{"content":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN). Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.","pos":[0,379],"nodes":[{"content":"The existing <ph id=\"ph1\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN).","pos":[0,185],"source":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN)."},{"content":"Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI.","pos":[186,297]},{"content":"This ensures application compatibility with prior versions of the .NET Framework.","pos":[298,379]}]}]},{"pos":[904,1260],"content":"All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default. The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support. Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN.","nodes":[{"content":"All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default. The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support. Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN.","pos":[0,356],"nodes":[{"content":"All parsers derived from <ph id=\"ph1\">&lt;xref:System.GenericUriParser&gt;</ph> will not gain IRI and IDN support by default.","pos":[0,101],"source":"All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default."},{"content":"The <ph id=\"ph1\">&lt;xref:System.GenericUriParserOptions.Default&gt;</ph> option does not include IRI and IDN support.","pos":[102,196],"source":" The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support."},{"content":"Two new values are added to the <ph id=\"ph1\">&lt;xref:System.GenericUriParserOptions?displayProperty=fullName&gt;</ph> enumeration to indicate if a custom parser supports IRI and IDN.","pos":[197,356],"source":" Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN."}]}]},{"pos":[1267,1393],"content":"For more information on IRI and IDN support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.","nodes":[{"content":"For more information on IRI and IDN support, see the Remarks section for the <ph id=\"ph1\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class.","pos":[0,126],"source":"For more information on IRI and IDN support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class."}]}],"pos":[483,1887],"yaml":true,"extradata":"MT"},{"content":"Create a customizable parser for a hierarchical URI.","nodes":[{"pos":[0,52],"content":"Create a customizable parser for a hierarchical URI.","nodes":[{"content":"Create a customizable parser for a hierarchical URI.","pos":[0,52]}]}],"pos":[4143,4196],"yaml":true},{"content":"Use this constructor as an argument to <xref:System.UriParser.Register%28System.UriParser%2CSystem.String%2CSystem.Int32%29?displayProperty=fullName>  \n  \n If you want to create a parser based on a well-known scheme, use <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>, <xref:System.LdapStyleUriParser>, or <xref:System.NewsStyleUriParser>.  \n  \n When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to the <xref:System.GenericUriParser> constructor.  \n  \n The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN). Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.  \n  \n All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default. The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support. Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN.  \n  \n The <xref:System.GenericUriParserOptions.IriParsing> type indicates the parser supports the parsing rules specified in RFC 3987 for International Resource Identifiers (IRI). Whether IRI is used is dictated by configuration values.  \n  \n The <xref:System.GenericUriParserOptions.Idn> type indicates the parser supports Internationalized Domain Name (IDN) parsing (IDN) of host names. Whether IDN is used is dictated by configuration values.  \n  \n The configuration setting for the <xref:System.Configuration.IdnElement?displayProperty=fullName> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.  \n  \n The Internationalized Domain Name (IDN) attribute only controls IDN processing. All other IRI processing (character normalization, for example) is performed by default.  \n  \n For more information on IRI and IDN support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.","nodes":[{"pos":[0,149],"content":"Use this constructor as an argument to <xref:System.UriParser.Register%28System.UriParser%2CSystem.String%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"content":"Use this constructor as an argument to <ph id=\"ph1\">&lt;xref:System.UriParser.Register%28System.UriParser%2CSystem.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph>","pos":[0,149],"source":"Use this constructor as an argument to <xref:System.UriParser.Register%28System.UriParser%2CSystem.String%2CSystem.Int32%29?displayProperty=fullName>"}]},{"pos":[156,394],"content":"If you want to create a parser based on a well-known scheme, use <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>, <xref:System.LdapStyleUriParser>, or <xref:System.NewsStyleUriParser>.","nodes":[{"content":"If you want to create a parser based on a well-known scheme, use <ph id=\"ph1\">&lt;xref:System.HttpStyleUriParser&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.FtpStyleUriParser&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.GopherStyleUriParser&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.LdapStyleUriParser&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.NewsStyleUriParser&gt;</ph>.","pos":[0,238],"source":"If you want to create a parser based on a well-known scheme, use <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>, <xref:System.LdapStyleUriParser>, or <xref:System.NewsStyleUriParser>."}]},{"pos":[401,667],"content":"When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to the <xref:System.GenericUriParser> constructor.","nodes":[{"content":"When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <ph id=\"ph1\">&lt;xref:System.GenericUriParserOptions?displayProperty=fullName&gt;</ph> enumeration to the <ph id=\"ph2\">&lt;xref:System.GenericUriParser&gt;</ph> constructor.","pos":[0,266],"source":"When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to the <xref:System.GenericUriParser> constructor."}]},{"pos":[674,1053],"content":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN). Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.","nodes":[{"content":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN). Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.","pos":[0,379],"nodes":[{"content":"The existing <ph id=\"ph1\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN).","pos":[0,185],"source":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN)."},{"content":"Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI.","pos":[186,297]},{"content":"This ensures application compatibility with prior versions of the .NET Framework.","pos":[298,379]}]}]},{"pos":[1060,1416],"content":"All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default. The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support. Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN.","nodes":[{"content":"All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default. The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support. Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN.","pos":[0,356],"nodes":[{"content":"All parsers derived from <ph id=\"ph1\">&lt;xref:System.GenericUriParser&gt;</ph> will not gain IRI and IDN support by default.","pos":[0,101],"source":"All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default."},{"content":"The <ph id=\"ph1\">&lt;xref:System.GenericUriParserOptions.Default&gt;</ph> option does not include IRI and IDN support.","pos":[102,196],"source":" The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support."},{"content":"Two new values are added to the <ph id=\"ph1\">&lt;xref:System.GenericUriParserOptions?displayProperty=fullName&gt;</ph> enumeration to indicate if a custom parser supports IRI and IDN.","pos":[197,356],"source":" Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN."}]}]},{"pos":[1423,1653],"content":"The <xref:System.GenericUriParserOptions.IriParsing> type indicates the parser supports the parsing rules specified in RFC 3987 for International Resource Identifiers (IRI). Whether IRI is used is dictated by configuration values.","nodes":[{"content":"The <xref:System.GenericUriParserOptions.IriParsing> type indicates the parser supports the parsing rules specified in RFC 3987 for International Resource Identifiers (IRI). Whether IRI is used is dictated by configuration values.","pos":[0,230],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.GenericUriParserOptions.IriParsing&gt;</ph> type indicates the parser supports the parsing rules specified in RFC 3987 for International Resource Identifiers (IRI).","pos":[0,173],"source":"The <xref:System.GenericUriParserOptions.IriParsing> type indicates the parser supports the parsing rules specified in RFC 3987 for International Resource Identifiers (IRI)."},{"content":"Whether IRI is used is dictated by configuration values.","pos":[174,230]}]}]},{"pos":[1660,1862],"content":"The <xref:System.GenericUriParserOptions.Idn> type indicates the parser supports Internationalized Domain Name (IDN) parsing (IDN) of host names. Whether IDN is used is dictated by configuration values.","nodes":[{"content":"The <xref:System.GenericUriParserOptions.Idn> type indicates the parser supports Internationalized Domain Name (IDN) parsing (IDN) of host names. Whether IDN is used is dictated by configuration values.","pos":[0,202],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.GenericUriParserOptions.Idn&gt;</ph> type indicates the parser supports Internationalized Domain Name (IDN) parsing (IDN) of host names.","pos":[0,145],"source":"The <xref:System.GenericUriParserOptions.Idn> type indicates the parser supports Internationalized Domain Name (IDN) parsing (IDN) of host names."},{"content":"Whether IDN is used is dictated by configuration values.","pos":[146,202]}]}]},{"pos":[1869,2421],"content":"The configuration setting for the <xref:System.Configuration.IdnElement?displayProperty=fullName> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.","nodes":[{"content":"The configuration setting for the <xref:System.Configuration.IdnElement?displayProperty=fullName> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.","pos":[0,552],"nodes":[{"content":"The configuration setting for the <ph id=\"ph1\">&lt;xref:System.Configuration.IdnElement?displayProperty=fullName&gt;</ph> is indirectly controlled by the <ph id=\"ph2\">&lt;xref:System.Configuration.IriParsingElement?displayProperty=fullName&gt;</ph> configuration setting that controls IRI processing in the <ph id=\"ph3\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class.","pos":[0,308],"source":"The configuration setting for the <xref:System.Configuration.IdnElement?displayProperty=fullName> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class."},{"content":"IRI processing must be enabled for IDN processing to be possible.","pos":[309,374]},{"content":"If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.","pos":[375,552]}]}]},{"pos":[2428,2596],"content":"The Internationalized Domain Name (IDN) attribute only controls IDN processing. All other IRI processing (character normalization, for example) is performed by default.","nodes":[{"content":"The Internationalized Domain Name (IDN) attribute only controls IDN processing. All other IRI processing (character normalization, for example) is performed by default.","pos":[0,168],"nodes":[{"content":"The Internationalized Domain Name (IDN) attribute only controls IDN processing.","pos":[0,79]},{"content":"All other IRI processing (character normalization, for example) is performed by default.","pos":[80,168]}]}]},{"pos":[2603,2729],"content":"For more information on IRI and IDN support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.","nodes":[{"content":"For more information on IRI and IDN support, see the Remarks section for the <ph id=\"ph1\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class.","pos":[0,126],"source":"For more information on IRI and IDN support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class."}]}],"pos":[4207,6957],"yaml":true,"extradata":"MT"},{"content":"Specify the options for this <xref href=\"System.GenericUriParser\"></xref>.","nodes":[{"pos":[0,74],"content":"Specify the options for this <ph id=\"ph1\">&lt;xref href=\"System.GenericUriParser\"&gt;&lt;/xref&gt;</ph>.","source":"Specify the options for this <xref href=\"System.GenericUriParser\"></xref>."}],"pos":[7135,7210],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.GenericUriParser\n  commentId: T:System.GenericUriParser\n  id: GenericUriParser\n  children:\n  - System.GenericUriParser.#ctor(System.GenericUriParserOptions)\n  langs:\n  - csharp\n  name: GenericUriParser\n  nameWithType: GenericUriParser\n  fullName: System.GenericUriParser\n  type: Class\n  assemblies:\n  - System\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: A customizable parser for a hierarchical URI.\n  remarks: \"If you want to create a parser based on a well-known scheme, use <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>, <xref:System.LdapStyleUriParser>, or <xref:System.NewsStyleUriParser>.  \\n  \\n When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to the <xref:System.GenericUriParser> constructor.  \\n  \\n The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN). Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.  \\n  \\n All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default. The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support. Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN.  \\n  \\n For more information on IRI and IDN support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.\"\n  syntax:\n    content: 'public class GenericUriParser : UriParser'\n  inheritance:\n  - System.Object\n  - System.UriParser\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)\n  - System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)\n  - System.UriParser.IsBaseOf(System.Uri,System.Uri)\n  - System.UriParser.IsKnownScheme(System.String)\n  - System.UriParser.IsWellFormedOriginalString(System.Uri)\n  - System.UriParser.OnNewUri\n  - System.UriParser.OnRegister(System.String,System.Int32)\n  - System.UriParser.Register(System.UriParser,System.String,System.Int32)\n  - System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/GenericUriParser.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: bobdel\n  manager: markl\n- uid: System.GenericUriParser.#ctor(System.GenericUriParserOptions)\n  commentId: M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)\n  id: '#ctor(System.GenericUriParserOptions)'\n  parent: System.GenericUriParser\n  langs:\n  - csharp\n  name: GenericUriParser(GenericUriParserOptions)\n  nameWithType: GenericUriParser.GenericUriParser(GenericUriParserOptions)\n  fullName: GenericUriParser.GenericUriParser(GenericUriParserOptions)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Create a customizable parser for a hierarchical URI.\n  remarks: \"Use this constructor as an argument to <xref:System.UriParser.Register%28System.UriParser%2CSystem.String%2CSystem.Int32%29?displayProperty=fullName>  \\n  \\n If you want to create a parser based on a well-known scheme, use <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>, <xref:System.LdapStyleUriParser>, or <xref:System.NewsStyleUriParser>.  \\n  \\n When creating a customizable parser, the behavior of the parser is specified by passing a bitwise combination of the values available in the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to the <xref:System.GenericUriParser> constructor.  \\n  \\n The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) and Internationalized Domain Names (IDN). Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.  \\n  \\n All parsers derived from <xref:System.GenericUriParser> will not gain IRI and IDN support by default. The <xref:System.GenericUriParserOptions.Default> option does not include IRI and IDN support. Two new values are added to the <xref:System.GenericUriParserOptions?displayProperty=fullName> enumeration to indicate if a custom parser supports IRI and IDN.  \\n  \\n The <xref:System.GenericUriParserOptions.IriParsing> type indicates the parser supports the parsing rules specified in RFC 3987 for International Resource Identifiers (IRI). Whether IRI is used is dictated by configuration values.  \\n  \\n The <xref:System.GenericUriParserOptions.Idn> type indicates the parser supports Internationalized Domain Name (IDN) parsing (IDN) of host names. Whether IDN is used is dictated by configuration values.  \\n  \\n The configuration setting for the <xref:System.Configuration.IdnElement?displayProperty=fullName> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.  \\n  \\n The Internationalized Domain Name (IDN) attribute only controls IDN processing. All other IRI processing (character normalization, for example) is performed by default.  \\n  \\n For more information on IRI and IDN support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.\"\n  syntax:\n    content: public GenericUriParser (GenericUriParserOptions options);\n    parameters:\n    - id: options\n      type: System.GenericUriParserOptions\n      description: Specify the options for this <xref href=\"System.GenericUriParser\"></xref>.\n  overload: System.GenericUriParser.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/GenericUriParser.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.UriParser\n  parent: System\n  isExternal: false\n  name: UriParser\n  nameWithType: UriParser\n  fullName: System.UriParser\n- uid: System.GenericUriParser.#ctor(System.GenericUriParserOptions)\n  parent: System.GenericUriParser\n  isExternal: false\n  name: GenericUriParser(GenericUriParserOptions)\n  nameWithType: GenericUriParser.GenericUriParser(GenericUriParserOptions)\n  fullName: GenericUriParser.GenericUriParser(GenericUriParserOptions)\n- uid: System.GenericUriParserOptions\n  parent: System\n  isExternal: false\n  name: GenericUriParserOptions\n  nameWithType: GenericUriParserOptions\n  fullName: System.GenericUriParserOptions\n- uid: System.GenericUriParser.#ctor*\n  parent: System.GenericUriParser\n  isExternal: false\n  name: GenericUriParser\n  nameWithType: GenericUriParser.GenericUriParser\n  fullName: GenericUriParser.GenericUriParser\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/GenericUriParser.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)\n  parent: System.UriParser\n  isExternal: false\n  name: GetComponents(Uri, UriComponents, UriFormat)\n  nameWithType: UriParser.GetComponents(Uri, UriComponents, UriFormat)\n  fullName: UriParser.GetComponents(Uri, UriComponents, UriFormat)\n- uid: System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)\n  parent: System.UriParser\n  isExternal: false\n  name: InitializeAndValidate(Uri, UriFormatException)\n  nameWithType: UriParser.InitializeAndValidate(Uri, UriFormatException)\n  fullName: UriParser.InitializeAndValidate(Uri, UriFormatException)\n- uid: System.UriParser.IsBaseOf(System.Uri,System.Uri)\n  parent: System.UriParser\n  isExternal: false\n  name: IsBaseOf(Uri, Uri)\n  nameWithType: UriParser.IsBaseOf(Uri, Uri)\n  fullName: UriParser.IsBaseOf(Uri, Uri)\n- uid: System.UriParser.IsKnownScheme(System.String)\n  parent: System.UriParser\n  isExternal: false\n  name: IsKnownScheme(String)\n  nameWithType: UriParser.IsKnownScheme(String)\n  fullName: UriParser.IsKnownScheme(String)\n- uid: System.UriParser.IsWellFormedOriginalString(System.Uri)\n  parent: System.UriParser\n  isExternal: false\n  name: IsWellFormedOriginalString(Uri)\n  nameWithType: UriParser.IsWellFormedOriginalString(Uri)\n  fullName: UriParser.IsWellFormedOriginalString(Uri)\n- uid: System.UriParser.OnNewUri\n  parent: System.UriParser\n  isExternal: false\n  name: OnNewUri()\n  nameWithType: UriParser.OnNewUri()\n  fullName: UriParser.OnNewUri()\n- uid: System.UriParser.OnRegister(System.String,System.Int32)\n  parent: System.UriParser\n  isExternal: false\n  name: OnRegister(String, Int32)\n  nameWithType: UriParser.OnRegister(String, Int32)\n  fullName: UriParser.OnRegister(String, Int32)\n- uid: System.UriParser.Register(System.UriParser,System.String,System.Int32)\n  parent: System.UriParser\n  isExternal: false\n  name: Register(UriParser, String, Int32)\n  nameWithType: UriParser.Register(UriParser, String, Int32)\n  fullName: UriParser.Register(UriParser, String, Int32)\n- uid: System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)\n  parent: System.UriParser\n  isExternal: false\n  name: Resolve(Uri, Uri, UriFormatException)\n  nameWithType: UriParser.Resolve(Uri, Uri, UriFormatException)\n  fullName: UriParser.Resolve(Uri, Uri, UriFormatException)\n"}