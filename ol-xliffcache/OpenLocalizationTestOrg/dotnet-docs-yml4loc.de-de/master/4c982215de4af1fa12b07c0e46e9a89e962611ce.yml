### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Logging.Log
  commentId: T:Microsoft.VisualBasic.Logging.Log
  id: Log
  children:
  - Microsoft.VisualBasic.Logging.Log.#ctor
  - Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  - Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  - Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  - Microsoft.VisualBasic.Logging.Log.TraceSource
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  langs:
  - csharp
  name: Log
  nameWithType: Log
  fullName: Microsoft.VisualBasic.Logging.Log
  type: Class
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Provides a property and methods for writing event and exception information to the application's log listeners.
  remarks: "The `My.Application.Log` object provides a straightforward entry point from which to access the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]'s logging services. The `WriteEntry` and `WriteException` methods write messages to the application's log listeners. The listeners can be configured by the application's configuration file. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) and [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n The `My.Application.Log` object is available only for client applications. For Web applications, use `My.Log`. For more information, see <xref:Microsoft.VisualBasic.Logging.AspLog>.  \n  \n The following table lists examples of tasks involving the `My.Application.Log` object.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \n|Write exception information to the application's log listeners|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \n|Determine where `My.Application.Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]"
  syntax:
    content: public class Log
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.VisualBasic.Logging.AspLog
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.#ctor
  commentId: M:Microsoft.VisualBasic.Logging.Log.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: Log()
  nameWithType: Log.Log()
  fullName: Log.Log()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Initializes a new instance of the <xref href="Microsoft.VisualBasic.Logging.Log"></xref> class.
  syntax:
    content: public Log ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.Log.#ctor*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  commentId: M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: Log(String)
  nameWithType: Log.Log(String)
  fullName: Log.Log(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Initializes a new instance of the <xref href="Microsoft.VisualBasic.Logging.Log"></xref> class.
  syntax:
    content: public Log (string name);
    parameters:
    - id: name
      type: System.String
      description: <xref href="System.String"></xref>. The name to give to the <xref href="Microsoft.VisualBasic.Logging.Log.TraceSource"></xref> property object.
  overload: Microsoft.VisualBasic.Logging.Log.#ctor*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  commentId: P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  id: DefaultFileLogWriter
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
  fullName: Log.DefaultFileLogWriter
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Gets the file the <xref href="Microsoft.VisualBasic.Logging.FileLogTraceListener"></xref> object that underlies the `Log` object.
  remarks: "You can use this property to determine the current configuration of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object."
  syntax:
    content: >-
      [get: System.Security.SecuritySafeCritical]

      public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }
    return:
      type: Microsoft.VisualBasic.Logging.FileLogTraceListener
      description: Returns the <xref href="Microsoft.VisualBasic.Logging.FileLogTraceListener"></xref> object that underlies the `Log` object.
  overload: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecuritySafeCritical'
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  commentId: M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  id: InitializeWithDefaultsSinceNoConfigExists
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: InitializeWithDefaultsSinceNoConfigExists()
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()
  fullName: Log.InitializeWithDefaultsSinceNoConfigExists()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Creates a new <xref href="Microsoft.VisualBasic.Logging.FileLogTraceListener"></xref> object and adds it to the <xref href="System.Diagnostics.TraceSource.Listeners"></xref> collection.
  remarks: "This method creates a new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, sets its name to `FileLog`, and configures it to log messages with severity level <xref:System.Diagnostics.SourceLevels.Information> and greater. The new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object is then added to the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.  \n  \n The <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> calls the method if the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> property has not been configured. The trace source can be configured in the application's configuration file."
  syntax:
    content: protected virtual void InitializeWithDefaultsSinceNoConfigExists ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource
  commentId: P:Microsoft.VisualBasic.Logging.Log.TraceSource
  id: TraceSource
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: TraceSource
  nameWithType: Log.TraceSource
  fullName: Log.TraceSource
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Gets to the <xref href="System.Diagnostics.TraceSource"></xref> object that underlies the `Log` object.
  remarks: "You can use this property to determine the current configuration of the `Log` object.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n This is an advanced member; it does not show in IntelliSense unless you select the **All** tab.  \n  \n The following table lists an example of a task involving the `TraceSource` property.  \n  \n|To|See|  \n|--------|---------|  \n|Get information for each of the `Log` object's log listeners.|[Troubleshooting: Log Listeners](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  syntax:
    content: public System.Diagnostics.TraceSource TraceSource { get; }
    return:
      type: System.Diagnostics.TraceSource
      description: Returns the <xref href="System.Diagnostics.TraceSource"></xref> object that underlies the `Log` object.
  overload: Microsoft.VisualBasic.Logging.Log.TraceSource*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  id: WriteEntry(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String)
  nameWithType: Log.WriteEntry(String)
  fullName: Log.WriteEntry(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Writes a message to the application's log listeners.
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message);
    parameters:
    - id: message
      type: System.String
      description: Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  id: WriteEntry(System.String,System.Diagnostics.TraceEventType)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String, TraceEventType)
  nameWithType: Log.WriteEntry(String, TraceEventType)
  fullName: Log.WriteEntry(String, TraceEventType)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Writes a message to the application's log listeners.
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);
    parameters:
    - id: message
      type: System.String
      description: Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: The type of message. By default, `TraceEventType.Information`.
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: The message type is not one of the <xref href="System.Diagnostics.TraceEventType"></xref> enumeration values.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String, TraceEventType, Int32)
  nameWithType: Log.WriteEntry(String, TraceEventType, Int32)
  fullName: Log.WriteEntry(String, TraceEventType, Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Writes a message to the application's log listeners.
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);
    parameters:
    - id: message
      type: System.String
      description: Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: The type of message. By default, `TraceEventType.Information`.
    - id: id
      type: System.Int32
      description: Message identifier, typically used for correlation. By default, related to <code>entryType</code> as described in the table.
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: The message type is not one of the <xref href="System.Diagnostics.TraceEventType"></xref> enumeration values.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  id: WriteException(System.Exception)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception)
  nameWithType: Log.WriteException(Exception)
  fullName: Log.WriteException(Exception)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Writes exception information to the application's log listeners.
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex);
    parameters:
    - id: ex
      type: System.Exception
      description: Required. Exception to log.
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>ex</code> is `Nothing`.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception, TraceEventType, String)
  nameWithType: Log.WriteException(Exception, TraceEventType, String)
  fullName: Log.WriteException(Exception, TraceEventType, String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Writes exception information to the application's log listeners.
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);
    parameters:
    - id: ex
      type: System.Exception
      description: Required. Exception to log.
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: The type of message. By default, <xref href="System.Diagnostics.TraceEventType.Error"></xref>.
    - id: additionalInfo
      type: System.String
      description: String to append to the message. By default, this is an empty string.
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>ex</code> is `Nothing`.
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: The message type is not one of the <xref href="System.Diagnostics.TraceEventType"></xref> enumeration values.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception, TraceEventType, String, Int32)
  nameWithType: Log.WriteException(Exception, TraceEventType, String, Int32)
  fullName: Log.WriteException(Exception, TraceEventType, String, Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: Writes exception information to the application's log listeners.
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);
    parameters:
    - id: ex
      type: System.Exception
      description: Required. Exception to log.
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: The type of message. By default, <xref href="System.Diagnostics.TraceEventType.Error"></xref>.
    - id: additionalInfo
      type: System.String
      description: String to append to the message. By default, this is an empty string.
    - id: id
      type: System.Int32
      description: Message identifier, typically used for correlation. By default, related to <code>entryType</code> as described in the table in the Remarks section.
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>ex</code> is `Nothing`.
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: The message type is not one of the <xref href="System.Diagnostics.TraceEventType"></xref> enumeration values.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Logging.Log.#ctor
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log()
  nameWithType: Log.Log()
  fullName: Log.Log()
- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log(String)
  nameWithType: Log.Log(String)
  fullName: Log.Log(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
  fullName: Log.DefaultFileLogWriter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: InitializeWithDefaultsSinceNoConfigExists()
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()
  fullName: Log.InitializeWithDefaultsSinceNoConfigExists()
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: TraceSource
  nameWithType: Log.TraceSource
  fullName: Log.TraceSource
- uid: System.Diagnostics.TraceSource
  parent: System.Diagnostics
  isExternal: false
  name: TraceSource
  nameWithType: TraceSource
  fullName: System.Diagnostics.TraceSource
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String)
  nameWithType: Log.WriteEntry(String)
  fullName: Log.WriteEntry(String)
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String, TraceEventType)
  nameWithType: Log.WriteEntry(String, TraceEventType)
  fullName: Log.WriteEntry(String, TraceEventType)
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String, TraceEventType, Int32)
  nameWithType: Log.WriteEntry(String, TraceEventType, Int32)
  fullName: Log.WriteEntry(String, TraceEventType, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception)
  nameWithType: Log.WriteException(Exception)
  fullName: Log.WriteException(Exception)
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception, TraceEventType, String)
  nameWithType: Log.WriteException(Exception, TraceEventType, String)
  fullName: Log.WriteException(Exception, TraceEventType, String)
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception, TraceEventType, String, Int32)
  nameWithType: Log.WriteException(Exception, TraceEventType, String, Int32)
  fullName: Log.WriteException(Exception, TraceEventType, String, Int32)
- uid: Microsoft.VisualBasic.Logging.Log.#ctor*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log
  nameWithType: Log.Log
  fullName: Log.Log
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
  fullName: Log.DefaultFileLogWriter
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: InitializeWithDefaultsSinceNoConfigExists
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists
  fullName: Log.InitializeWithDefaultsSinceNoConfigExists
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: TraceSource
  nameWithType: Log.TraceSource
  fullName: Log.TraceSource
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry
  nameWithType: Log.WriteEntry
  fullName: Log.WriteEntry
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
- uid: Microsoft.VisualBasic.Logging.Log.WriteException*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException
  nameWithType: Log.WriteException
  fullName: Log.WriteException
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
