{"nodes":[{"content":"Represents an X.509 certificate.","nodes":[{"pos":[0,32],"content":"Represents an X.509 certificate.","nodes":[{"content":"Represents an X.509 certificate.","pos":[0,32]}]}],"pos":[5207,5240],"yaml":true},{"content":"The X.509 structure originated in the International Organization for Standardization (ISO) working groups. This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth). Although the ISO specifications are most informative on the structure itself, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group. The most informative of these specifications is RFC 3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\"  \n  \n> [!IMPORTANT]\n>  Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], this type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n>   \n>  For apps that target the [!INCLUDE[net_v452](~/includes/net-v452-md.md)] and earlier versions, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class does not implement the <xref:System.IDisposable> interface and therefore does not have a `Dispose` method.","nodes":[{"pos":[0,792],"content":"The X.509 structure originated in the International Organization for Standardization (ISO) working groups. This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth). Although the ISO specifications are most informative on the structure itself, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group. The most informative of these specifications is RFC 3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\"","nodes":[{"content":"The X.509 structure originated in the International Organization for Standardization (ISO) working groups.","pos":[0,106]},{"content":"This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth).","pos":[107,292]},{"content":"Although the ISO specifications are most informative on the structure itself, the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group.","pos":[293,625],"source":" Although the ISO specifications are most informative on the structure itself, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group."},{"content":"The most informative of these specifications is RFC 3280, \"<bpt id=\"p1\">[</bpt>Certificate and Certificate Revocation List (CRL) Profile<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=45286)</ept>.\"","pos":[626,792],"source":" The most informative of these specifications is RFC 3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\""}]},{"pos":[800,1391],"content":"[!IMPORTANT]\n Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], this type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], this type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,589],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, this type implements the <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,127],"source":" Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], this type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[128,222]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[223,334],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[335,442],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[443,576],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[1402,1683],"content":"For apps that target the <ph id=\"ph1\">[!INCLUDE[net_v452](~/includes/net-v452-md.md)]</ph> and earlier versions, the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> class does not implement the <ph id=\"ph3\">&lt;xref:System.IDisposable&gt;</ph> interface and therefore does not have a <ph id=\"ph4\">`Dispose`</ph> method.","source":"For apps that target the [!INCLUDE[net_v452](~/includes/net-v452-md.md)] and earlier versions, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class does not implement the <xref:System.IDisposable> interface and therefore does not have a `Dispose` method."}],"pos":[5251,6946],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class.","nodes":[{"pos":[0,124],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class."}],"pos":[14300,14425],"yaml":true},{"content":"This constructor creates an empty <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.","nodes":[{"pos":[0,242],"content":"This constructor creates an empty <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.","nodes":[{"content":"This constructor creates an empty <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.","pos":[0,242],"source":"This constructor creates an empty <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file."}]}],"pos":[14436,14679],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name, a password used to access the certificate, and a key storage flag.","nodes":[{"pos":[0,221],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using a certificate file name, a password used to access the certificate, and a key storage flag.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name, a password used to access the certificate, and a key storage flag."}],"pos":[17309,17531],"yaml":true},{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name, a password needed to access the certificate, and a key storage flag.  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,207],"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name, a password needed to access the certificate, and a key storage flag.","nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a certificate file name, a password needed to access the certificate, and a key storage flag.","pos":[0,207],"source":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name, a password needed to access the certificate, and a key storage flag."}]},{"pos":[215,523],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]},{"pos":[530,869],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`fileName`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[17542,18419],"yaml":true,"extradata":"MT"},{"content":"The name of a certificate file.","nodes":[{"pos":[0,31],"content":"The name of a certificate file.","nodes":[{"content":"The name of a certificate file.","pos":[0,31]}]}],"pos":[18665,18697],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[18761,18821],"yaml":true},{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"pos":[0,101],"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[0,101]}]}],"pos":[18944,19046],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[19290,19482],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name, a password, and a key storage flag.","nodes":[{"pos":[0,190],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using a certificate file name, a password, and a key storage flag.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name, a password, and a key storage flag."}],"pos":[21450,21641],"yaml":true},{"content":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,337],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`fileName`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[21652,21990],"yaml":true,"extradata":"MT"},{"content":"The name of a certificate file.","nodes":[{"pos":[0,31],"content":"The name of a certificate file.","nodes":[{"content":"The name of a certificate file.","pos":[0,31]}]}],"pos":[22258,22290],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[22369,22429],"yaml":true},{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"pos":[0,101],"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[0,101]}]}],"pos":[22552,22654],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[22898,23090],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array, a password, and a key storage flag.","nodes":[{"pos":[0,179],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using a byte array, a password, and a key storage flag.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array, a password, and a key storage flag."}],"pos":[24811,24991],"yaml":true},{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array, a password that is needed to access the certificate data, and a key storage flag. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,448],"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array, a password that is needed to access the certificate data, and a key storage flag. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).","nodes":[{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array, a password that is needed to access the certificate data, and a key storage flag. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).","pos":[0,448],"nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a byte array, a password that is needed to access the certificate data, and a key storage flag.","pos":[0,209],"source":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array, a password that is needed to access the certificate data, and a key storage flag."},{"content":"It is used with PKCS12 (PFX) files that contain the certificate's private key.","pos":[210,288]},{"content":"Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).","pos":[289,448]}]}]},{"pos":[456,764],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]},{"pos":[771,1109],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`rawData`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[25002,26119],"yaml":true,"extradata":"MT"},{"content":"A byte array containing data from an X.509 certificate.","nodes":[{"pos":[0,55],"content":"A byte array containing data from an X.509 certificate.","nodes":[{"content":"A byte array containing data from an X.509 certificate.","pos":[0,55]}]}],"pos":[26363,26419],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[26483,26543],"yaml":true},{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"pos":[0,101],"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[0,101]}]}],"pos":[26666,26768],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[27012,27204],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name and a password used to access the certificate.","nodes":[{"pos":[0,200],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using a certificate file name and a password used to access the certificate.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name and a password used to access the certificate."}],"pos":[28848,29049],"yaml":true},{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name and a password needed to access the certificate. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,374],"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name and a password needed to access the certificate. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.","nodes":[{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name and a password needed to access the certificate. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.","pos":[0,374],"nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a certificate file name and a password needed to access the certificate.","pos":[0,186],"source":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name and a password needed to access the certificate."},{"content":"It is used with PKCS12 (PFX) files that contain the certificate's private key.","pos":[187,265]},{"content":"Calling this constructor with the correct password decrypts the private key and saves it to a key container.","pos":[266,374]}]}]},{"pos":[382,690],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]},{"pos":[697,1036],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`fileName`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[29060,30104],"yaml":true,"extradata":"MT"},{"content":"The name of a certificate file.","nodes":[{"pos":[0,31],"content":"The name of a certificate file.","nodes":[{"content":"The name of a certificate file.","pos":[0,31]}]}],"pos":[30267,30299],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[30363,30423],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[30667,30859],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name and a password.","nodes":[{"pos":[0,169],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using a certificate file name and a password.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name and a password."}],"pos":[32566,32736],"yaml":true},{"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,201],"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.","nodes":[{"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.","pos":[0,201],"nodes":[{"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key.","pos":[0,92]},{"content":"Calling this constructor with the correct password decrypts the private key and saves it to a key container.","pos":[93,201]}]}]},{"pos":[209,517],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]},{"pos":[524,861],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`fileName`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[32747,33616],"yaml":true,"extradata":"MT"},{"content":"The name of a certificate file.","nodes":[{"pos":[0,31],"content":"The name of a certificate file.","nodes":[{"content":"The name of a certificate file.","pos":[0,31]}]}],"pos":[33801,33833],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[33912,33972],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[34216,34408],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using the specified serialization and stream context information.","nodes":[{"pos":[0,189],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using the specified serialization and stream context information.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using the specified serialization and stream context information."}],"pos":[36126,36316],"yaml":true},{"content":"The serialization information required to deserialize the new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref>.","nodes":[{"pos":[0,146],"content":"The serialization information required to deserialize the new <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph>.","source":"The serialization information required to deserialize the new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref>."}],"pos":[36585,36732],"yaml":true},{"content":"Contextual information about the source of the stream to be deserialized.","nodes":[{"pos":[0,73],"content":"Contextual information about the source of the stream to be deserialized.","nodes":[{"content":"Contextual information about the source of the stream to be deserialized.","pos":[0,73]}]}],"pos":[36827,36901],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array, a password, and a key storage flag.","nodes":[{"pos":[0,179],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using a byte array, a password, and a key storage flag.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array, a password, and a key storage flag."}],"pos":[38784,38964],"yaml":true},{"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,252],"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).","nodes":[{"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).","pos":[0,252],"nodes":[{"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key.","pos":[0,92]},{"content":"Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).","pos":[93,252]}]}]},{"pos":[260,568],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]},{"pos":[575,911],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`rawData`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[38975,39894],"yaml":true,"extradata":"MT"},{"content":"A byte array that contains data from an X.509 certificate.","nodes":[{"pos":[0,58],"content":"A byte array that contains data from an X.509 certificate.","nodes":[{"content":"A byte array that contains data from an X.509 certificate.","pos":[0,58]}]}],"pos":[40160,40219],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[40298,40358],"yaml":true},{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"pos":[0,101],"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[0,101]}]}],"pos":[40481,40583],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[40827,41019],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array and a password.","nodes":[{"pos":[0,158],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using a byte array and a password.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array and a password."}],"pos":[42542,42701],"yaml":true},{"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,201],"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.","nodes":[{"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.","pos":[0,201],"nodes":[{"content":"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key.","pos":[0,92]},{"content":"Calling this constructor with the correct password decrypts the private key and saves it to a key container.","pos":[93,201]}]}]},{"pos":[209,517],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]},{"pos":[524,860],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`rawData`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[42712,43580],"yaml":true,"extradata":"MT"},{"content":"A byte array that contains data from an X.509 certificate.","nodes":[{"pos":[0,58],"content":"A byte array that contains data from an X.509 certificate.","nodes":[{"content":"A byte array that contains data from an X.509 certificate.","pos":[0,58]}]}],"pos":[43763,43822],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[43901,43961],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[44205,44397],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name.","nodes":[{"pos":[0,154],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using a certificate file name.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name."}],"pos":[45791,45946],"yaml":true},{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name. It supports binary (DER) encoding or Base64 encoding.  \n  \n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,192],"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name. It supports binary (DER) encoding or Base64 encoding.","nodes":[{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name. It supports binary (DER) encoding or Base64 encoding.","pos":[0,192],"nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a certificate file name.","pos":[0,138],"source":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name."},{"content":"It supports binary (DER) encoding or Base64 encoding.","pos":[139,192]}]}]},{"pos":[199,538],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`fileName`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[45957,46500],"yaml":true,"extradata":"MT"},{"content":"The name of a certificate file.","nodes":[{"pos":[0,31],"content":"The name of a certificate file.","nodes":[{"content":"The name of a certificate file.","pos":[0,31]}]}],"pos":[46646,46678],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[46922,47114],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"></xref> object.","nodes":[{"pos":[0,223],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using an <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"></xref> object."}],"pos":[48863,49087],"yaml":true},{"content":"This method creates a new instance of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class using an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> object.","nodes":[{"pos":[0,203],"content":"This method creates a new instance of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class using an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> object.","nodes":[{"content":"This method creates a new instance of the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> class using an <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> object.","pos":[0,203],"source":"This method creates a new instance of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class using an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> object."}]}],"pos":[49098,49302],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"></xref> object.","nodes":[{"pos":[0,93],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"></xref> object."}],"pos":[49557,49651],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[49895,50087],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using an unmanaged handle.","nodes":[{"pos":[0,150],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using an unmanaged handle.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using an unmanaged handle."}],"pos":[51481,51632],"yaml":true},{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a handle for the Microsoft Cryptographic API certificate context, `PCCERT_CONTEXT`. Note that the immediate caller of this constructor requires unmanaged code permission.  \n  \n> [!IMPORTANT]\n>  The constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current `PCCERT_CONTEXT` structure from the <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A> property, but it is valid only during the lifetime of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object.","nodes":[{"pos":[0,284],"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a handle for the Microsoft Cryptographic API certificate context, `PCCERT_CONTEXT`. Note that the immediate caller of this constructor requires unmanaged code permission.","nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a handle for the Microsoft Cryptographic API certificate context, <ph id=\"ph2\">`PCCERT_CONTEXT`</ph>.","pos":[0,197],"source":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a handle for the Microsoft Cryptographic API certificate context, `PCCERT_CONTEXT`."},{"content":"Note that the immediate caller of this constructor requires unmanaged code permission.","pos":[198,284]}]},{"pos":[292,759],"content":"[!IMPORTANT]\n The constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current `PCCERT_CONTEXT` structure from the <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A> property, but it is valid only during the lifetime of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object.","leadings":["","> "],"nodes":[{"content":" The constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current `PCCERT_CONTEXT` structure from the <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A> property, but it is valid only during the lifetime of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object.","pos":[13,465],"nodes":[{"content":"The constructor creates a copy of the certificate context.","pos":[1,59]},{"content":"Do not assume that the context structure you passed to the constructor is valid; it may have been released.","pos":[60,167]},{"content":"You can get a copy of the current <ph id=\"ph1\">`PCCERT_CONTEXT`</ph> structure from the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A&gt;</ph> property, but it is valid only during the lifetime of the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object.","pos":[168,452],"source":" You can get a copy of the current `PCCERT_CONTEXT` structure from the <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A> property, but it is valid only during the lifetime of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object."}]}]}],"pos":[51643,52408],"yaml":true,"extradata":"MT"},{"content":"A pointer to a certificate context in unmanaged code. The C structure is called `PCCERT_CONTEXT`.","nodes":[{"pos":[0,97],"content":"A pointer to a certificate context in unmanaged code. The C structure is called `PCCERT_CONTEXT`.","nodes":[{"content":"A pointer to a certificate context in unmanaged code.","pos":[0,53]},{"content":"The C structure is called <ph id=\"ph1\">`PCCERT_CONTEXT`</ph>.","pos":[54,97],"source":" The C structure is called `PCCERT_CONTEXT`."}]}],"pos":[52550,52648],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[52892,53084],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using information from a byte array.","nodes":[{"pos":[0,160],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using information from a byte array.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using information from a byte array."}],"pos":[54662,54823],"yaml":true},{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using certificate information from a byte array. The byte array can be binary (DER) encoded or Base64-encoded X.509 data. The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.  \n  \n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,345],"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using certificate information from a byte array. The byte array can be binary (DER) encoded or Base64-encoded X.509 data. The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.","nodes":[{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using certificate information from a byte array. The byte array can be binary (DER) encoded or Base64-encoded X.509 data. The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.","pos":[0,345],"nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using certificate information from a byte array.","pos":[0,156],"source":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using certificate information from a byte array."},{"content":"The byte array can be binary (DER) encoded or Base64-encoded X.509 data.","pos":[157,229]},{"content":"The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.","pos":[230,345]}]}]},{"pos":[352,690],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`rawData`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[54834,55529],"yaml":true,"extradata":"MT"},{"content":"A byte array containing data from an X.509 certificate.","nodes":[{"pos":[0,55],"content":"A byte array containing data from an X.509 certificate.","nodes":[{"content":"A byte array containing data from an X.509 certificate.","pos":[0,55]}]}],"pos":[55673,55729],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[55973,56165],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array and a password.","nodes":[{"pos":[0,158],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class using a byte array and a password.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array and a password."}],"pos":[57809,57968],"yaml":true},{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array and a password that is needed to access the certificate data. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.","nodes":[{"pos":[0,376],"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array and a password that is needed to access the certificate data. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.","nodes":[{"content":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array and a password that is needed to access the certificate data. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.","pos":[0,376],"nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a byte array and a password that is needed to access the certificate data.","pos":[0,188],"source":"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array and a password that is needed to access the certificate data."},{"content":"It is used with PKCS12 (PFX) files that contain the certificate's private key.","pos":[189,267]},{"content":"Calling this constructor with the correct password decrypts the private key and saves it to a key container.","pos":[268,376]}]}]},{"pos":[384,692],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]},{"pos":[699,1037],"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id=\"ph2\">`rawData`</ph>, the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.","source":"If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."}],"pos":[57979,59024],"yaml":true,"extradata":"MT"},{"content":"A byte array containing data from an X.509 certificate.","nodes":[{"pos":[0,55],"content":"A byte array containing data from an X.509 certificate.","nodes":[{"content":"A byte array containing data from an X.509 certificate.","pos":[0,55]}]}],"pos":[59185,59241],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[59305,59365],"yaml":true},{"content":"An error with the certificate occurs. For example:  \n  \n-   The certificate file does not exist.  \n  \n-   The certificate is invalid.  \n  \n-   The certificate's password is incorrect.","nodes":[{"pos":[0,50],"content":"An error with the certificate occurs. For example:","nodes":[{"content":"An error with the certificate occurs. For example:","pos":[0,50],"nodes":[{"content":"An error with the certificate occurs.","pos":[0,37]},{"content":"For example:","pos":[38,50]}]}]},{"pos":[60,96],"content":"The certificate file does not exist.","nodes":[{"content":"The certificate file does not exist.","pos":[0,36]}]},{"pos":[106,133],"content":"The certificate is invalid.","nodes":[{"content":"The certificate is invalid.","pos":[0,27]}]},{"pos":[143,183],"content":"The certificate's password is incorrect.","nodes":[{"content":"The certificate's password is incorrect.","pos":[0,40]}]}],"pos":[59609,59801],"yaml":true},{"content":"Gets or sets a value indicating that an X.509 certificate is archived.","nodes":[{"pos":[0,70],"content":"Gets or sets a value indicating that an X.509 certificate is archived.","nodes":[{"content":"Gets or sets a value indicating that an X.509 certificate is archived.","pos":[0,70]}]}],"pos":[61290,61361],"yaml":true},{"content":"This property is set only on a certificate that is associated with a store. If the property is set and the certificate is added to a certificate store, the value is persisted. If the property is set on a certificate retrieved from a store, the value is persisted immediately.  \n  \n In an X.509 store, archived certificates are not included in the returned <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> object unless the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> property is set to `true`. No physical archival activity occurs when the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> value is set or unset.","nodes":[{"pos":[0,275],"content":"This property is set only on a certificate that is associated with a store. If the property is set and the certificate is added to a certificate store, the value is persisted. If the property is set on a certificate retrieved from a store, the value is persisted immediately.","nodes":[{"content":"This property is set only on a certificate that is associated with a store. If the property is set and the certificate is added to a certificate store, the value is persisted. If the property is set on a certificate retrieved from a store, the value is persisted immediately.","pos":[0,275],"nodes":[{"content":"This property is set only on a certificate that is associated with a store.","pos":[0,75]},{"content":"If the property is set and the certificate is added to a certificate store, the value is persisted.","pos":[76,175]},{"content":"If the property is set on a certificate retrieved from a store, the value is persisted immediately.","pos":[176,275]}]}]},{"pos":[282,713],"content":"In an X.509 store, archived certificates are not included in the returned <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> object unless the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> property is set to `true`. No physical archival activity occurs when the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> value is set or unset.","nodes":[{"content":"In an X.509 store, archived certificates are not included in the returned <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection&gt;</ph> object unless the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A&gt;</ph> property is set to <ph id=\"ph3\">`true`</ph>.","pos":[0,280],"source":"In an X.509 store, archived certificates are not included in the returned <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> object unless the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> property is set to `true`."},{"content":"No physical archival activity occurs when the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A&gt;</ph> value is set or unset.","pos":[281,431],"source":" No physical archival activity occurs when the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> value is set or unset."}]}],"pos":[61372,62090],"yaml":true,"extradata":"MT"},{"content":"`true` if the certificate is archived, `false` if the certificate is not archived.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">`true`</ph> if the certificate is archived, <ph id=\"ph2\">`false`</ph> if the certificate is not archived.","source":"`true` if the certificate is archived, `false` if the certificate is not archived."}],"pos":[62762,62847],"yaml":true},{"content":"The certificate is unreadable.","nodes":[{"pos":[0,30],"content":"The certificate is unreadable.","nodes":[{"content":"The certificate is unreadable.","pos":[0,30]}]}],"pos":[63094,63125],"yaml":true},{"content":"Gets a collection of <xref href=\"System.Security.Cryptography.X509Certificates.X509Extension\"></xref> objects.","nodes":[{"pos":[0,110],"content":"Gets a collection of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Extension\"&gt;&lt;/xref&gt;</ph> objects.","source":"Gets a collection of <xref href=\"System.Security.Cryptography.X509Certificates.X509Extension\"></xref> objects."}],"pos":[66303,66414],"yaml":true},{"content":"The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate. A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\" Common extensions include information regarding key usage (<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>), key identifiers (<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>), certificate policies, revocation information (CRL Distribution Point extension), and other uses.","nodes":[{"pos":[0,663],"content":"The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate. A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\" Common extensions include information regarding key usage (<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>), key identifiers (<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>), certificate policies, revocation information (CRL Distribution Point extension), and other uses.","nodes":[{"content":"The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate.","pos":[0,114]},{"content":"A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, \"<bpt id=\"p1\">[</bpt>Certificate and Certificate Revocation List (CRL) Profile<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=45286)</ept>.\"","pos":[115,324],"source":" A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\""},{"content":"Common extensions include information regarding key usage (<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension&gt;</ph>), key identifiers (<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension&gt;</ph>), certificate policies, revocation information (CRL Distribution Point extension), and other uses.","pos":[325,663],"source":" Common extensions include information regarding key usage (<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>), key identifiers (<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>), certificate policies, revocation information (CRL Distribution Point extension), and other uses."}]}],"pos":[66425,67089],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509ExtensionCollection\"></xref> object.","nodes":[{"pos":[0,101],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509ExtensionCollection\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509ExtensionCollection\"></xref> object."}],"pos":[67878,67980],"yaml":true},{"content":"The certificate is unreadable.","nodes":[{"pos":[0,30],"content":"The certificate is unreadable.","nodes":[{"content":"The certificate is unreadable.","pos":[0,30]}]}],"pos":[68229,68260],"yaml":true},{"content":"Gets or sets the associated alias for a certificate.","nodes":[{"pos":[0,52],"content":"Gets or sets the associated alias for a certificate.","nodes":[{"content":"Gets or sets the associated alias for a certificate.","pos":[0,52]}]}],"pos":[69773,69826],"yaml":true},{"content":"Friendly names are properties in the X.509 certificate store that can be set. They are used to enable a user to associate aliases with certificates so they can be easily identified.  \n  \n If no friendly name exists for the certificate, an empty string (\"\") is returned.","nodes":[{"pos":[0,181],"content":"Friendly names are properties in the X.509 certificate store that can be set. They are used to enable a user to associate aliases with certificates so they can be easily identified.","nodes":[{"content":"Friendly names are properties in the X.509 certificate store that can be set. They are used to enable a user to associate aliases with certificates so they can be easily identified.","pos":[0,181],"nodes":[{"content":"Friendly names are properties in the X.509 certificate store that can be set.","pos":[0,77]},{"content":"They are used to enable a user to associate aliases with certificates so they can be easily identified.","pos":[78,181]}]}]},{"pos":[188,269],"content":"If no friendly name exists for the certificate, an empty string (\"\") is returned.","nodes":[{"content":"If no friendly name exists for the certificate, an empty string (\"\") is returned.","pos":[0,81]}]}],"pos":[69837,70113],"yaml":true,"extradata":"MT"},{"content":"The certificate's friendly name.","nodes":[{"pos":[0,32],"content":"The certificate's friendly name.","nodes":[{"content":"The certificate's friendly name.","pos":[0,32]}]}],"pos":[70712,70745],"yaml":true},{"content":"The certificate is unreadable.","nodes":[{"pos":[0,30],"content":"The certificate is unreadable.","nodes":[{"content":"The certificate is unreadable.","pos":[0,30]}]}],"pos":[70996,71027],"yaml":true},{"content":"Indicates the type of certificate contained in a file.","nodes":[{"pos":[0,54],"content":"Indicates the type of certificate contained in a file.","nodes":[{"content":"Indicates the type of certificate contained in a file.","pos":[0,54]}]}],"pos":[72643,72698],"yaml":true},{"content":"This method enables you to discover the type of certificate in a file.","nodes":[{"pos":[0,70],"content":"This method enables you to discover the type of certificate in a file.","nodes":[{"content":"This method enables you to discover the type of certificate in a file.","pos":[0,70]}]}],"pos":[72709,72780],"yaml":true,"extradata":"MT"},{"content":"The name of a certificate file.","nodes":[{"pos":[0,31],"content":"The name of a certificate file.","nodes":[{"content":"The name of a certificate file.","pos":[0,31]}]}],"pos":[73085,73117],"yaml":true},{"content":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\"></xref> object.","nodes":[{"pos":[0,93],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\"></xref> object."}],"pos":[73222,73316],"yaml":true},{"content":"<code>fileName</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>fileName</code> is `null`."}],"pos":[73527,73560],"yaml":true},{"content":"Indicates the type of certificate contained in a byte array.","nodes":[{"pos":[0,60],"content":"Indicates the type of certificate contained in a byte array.","nodes":[{"content":"Indicates the type of certificate contained in a byte array.","pos":[0,60]}]}],"pos":[75216,75277],"yaml":true},{"content":"This method enables you to discover the type of certificate in a file.","nodes":[{"pos":[0,70],"content":"This method enables you to discover the type of certificate in a file.","nodes":[{"content":"This method enables you to discover the type of certificate in a file.","pos":[0,70]}]}],"pos":[75288,75359],"yaml":true,"extradata":"MT"},{"content":"A byte array containing data from an X.509 certificate.","nodes":[{"pos":[0,55],"content":"A byte array containing data from an X.509 certificate.","nodes":[{"content":"A byte array containing data from an X.509 certificate.","pos":[0,55]}]}],"pos":[76225,76281],"yaml":true},{"content":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\"></xref> object.","nodes":[{"pos":[0,93],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\"></xref> object."}],"pos":[76386,76480],"yaml":true},{"content":"<code>rawData</code> has a zero length or is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;rawData&lt;/code&gt;</ph> has a zero length or is <ph id=\"ph2\">`null`</ph>.","source":"<code>rawData</code> has a zero length or is `null`."}],"pos":[76683,76736],"yaml":true},{"content":"Gets the subject and issuer names from a certificate.","nodes":[{"pos":[0,53],"content":"Gets the subject and issuer names from a certificate.","nodes":[{"content":"Gets the subject and issuer names from a certificate.","pos":[0,53]}]}],"pos":[78575,78629],"yaml":true},{"content":"This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations. Using this method ensures that the appropriate name is returned.","nodes":[{"pos":[0,202],"content":"This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations. Using this method ensures that the appropriate name is returned.","nodes":[{"content":"This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations. Using this method ensures that the appropriate name is returned.","pos":[0,202],"nodes":[{"content":"This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations.","pos":[0,137]},{"content":"Using this method ensures that the appropriate name is returned.","pos":[138,202]}]}]}],"pos":[78640,78843],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.Cryptography.X509Certificates.X509NameType\"></xref> value for the subject.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509NameType\"&gt;&lt;/xref&gt;</ph> value for the subject.","source":"The <xref href=\"System.Security.Cryptography.X509Certificates.X509NameType\"></xref> value for the subject."}],"pos":[79772,79879],"yaml":true},{"content":"`true` to include the issuer name; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> to include the issuer name; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include the issuer name; otherwise, `false`."}],"pos":[79945,80002],"yaml":true},{"content":"The name of the certificate.","nodes":[{"pos":[0,28],"content":"The name of the certificate.","nodes":[{"content":"The name of the certificate.","pos":[0,28]}]}],"pos":[80059,80088],"yaml":true},{"content":"Gets a value that indicates whether an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object contains a private key.","nodes":[{"pos":[0,153],"content":"Gets a value that indicates whether an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> object contains a private key.","source":"Gets a value that indicates whether an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object contains a private key."}],"pos":[81752,81906],"yaml":true},{"content":"`true` if the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object contains a private key; otherwise, `false`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> object contains a private key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object contains a private key; otherwise, `false`."}],"pos":[82022,82173],"yaml":true},{"content":"The certificate context is invalid.","nodes":[{"pos":[0,35],"content":"The certificate context is invalid.","nodes":[{"content":"The certificate context is invalid.","pos":[0,35]}]}],"pos":[82425,82461],"yaml":true},{"content":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with data from a byte array.","nodes":[{"pos":[0,132],"content":"Populates an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> object with data from a byte array.","source":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with data from a byte array."}],"pos":[84005,84138],"yaml":true},{"content":"This method can be used to take a raw byte array of an X.509 certificate and populate the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with its associated values.  \n  \n Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","nodes":[{"pos":[0,194],"content":"This method can be used to take a raw byte array of an X.509 certificate and populate the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with its associated values.","nodes":[{"content":"This method can be used to take a raw byte array of an X.509 certificate and populate the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object with its associated values.","pos":[0,194],"source":"This method can be used to take a raw byte array of an X.509 certificate and populate the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with its associated values."}]},{"pos":[201,619],"content":"Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","nodes":[{"content":"Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","pos":[0,418],"nodes":[{"content":"Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate.","pos":[0,207]},{"content":"Note that a PFX/PKCS12 certificate can contain more than one certificate.","pos":[208,281]},{"content":"In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","pos":[282,418]}]}]}],"pos":[84149,84773],"yaml":true,"extradata":"MT"},{"content":"A byte array containing data from an X.509 certificate.","nodes":[{"pos":[0,55],"content":"A byte array containing data from an X.509 certificate.","nodes":[{"content":"A byte array containing data from an X.509 certificate.","pos":[0,55]}]}],"pos":[84921,84977],"yaml":true},{"content":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with information from a certificate file.","nodes":[{"pos":[0,145],"content":"Populates an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> object with information from a certificate file.","source":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with information from a certificate file."}],"pos":[86437,86583],"yaml":true},{"content":"This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with the certificate the file contains.  \n  \n This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","nodes":[{"pos":[0,246],"content":"This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with the certificate the file contains.","nodes":[{"content":"This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object with the certificate the file contains.","pos":[0,246],"source":"This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with the certificate the file contains."}]},{"pos":[253,650],"content":"This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","nodes":[{"content":"This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","pos":[0,397],"nodes":[{"content":"This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode.","pos":[0,186]},{"content":"Note that a PFX/PKCS12 certificate can contain more than one certificate.","pos":[187,260]},{"content":"In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","pos":[261,397]}]}]}],"pos":[86594,87249],"yaml":true,"extradata":"MT"},{"content":"The name of a certificate.","nodes":[{"pos":[0,26],"content":"The name of a certificate.","nodes":[{"content":"The name of a certificate.","pos":[0,26]}]}],"pos":[87399,87426],"yaml":true},{"content":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object using data from a byte array, a password, and a key storage flag.","nodes":[{"pos":[0,169],"content":"Populates an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> object using data from a byte array, a password, and a key storage flag.","source":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object using data from a byte array, a password, and a key storage flag."}],"pos":[89276,89446],"yaml":true},{"content":"You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","nodes":[{"pos":[0,342],"content":"You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","nodes":[{"content":"You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","pos":[0,342],"nodes":[{"content":"You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates.","pos":[0,131]},{"content":"Note that a PFX/PKCS12 certificate can contain more than one certificate.","pos":[132,205]},{"content":"In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","pos":[206,342]}]}]},{"pos":[350,658],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]}],"pos":[89457,90121],"yaml":true,"extradata":"MT"},{"content":"A byte array that contains data from an X.509 certificate.","nodes":[{"pos":[0,58],"content":"A byte array that contains data from an X.509 certificate.","nodes":[{"content":"A byte array that contains data from an X.509 certificate.","pos":[0,58]}]}],"pos":[90455,90514],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[90593,90653],"yaml":true},{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"pos":[0,101],"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[0,101]}]}],"pos":[90776,90878],"yaml":true},{"content":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object using data from a byte array, a password, and flags for determining how to import the private key.","nodes":[{"pos":[0,202],"content":"Populates an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> object using data from a byte array, a password, and flags for determining how to import the private key.","source":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object using data from a byte array, a password, and flags for determining how to import the private key."}],"pos":[92705,92908],"yaml":true},{"content":"This method can be used to populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a password for the certificate represented by the byte array. The <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value can be used to control where and how to import the private key.  \n  \n This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","nodes":[{"pos":[0,330],"content":"This method can be used to populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a password for the certificate represented by the byte array. The <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value can be used to control where and how to import the private key.","nodes":[{"content":"This method can be used to populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a password for the certificate represented by the byte array. The <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value can be used to control where and how to import the private key.","pos":[0,330],"nodes":[{"content":"This method can be used to populate an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a password for the certificate represented by the byte array.","pos":[0,183],"source":"This method can be used to populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a password for the certificate represented by the byte array."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags&gt;</ph> value can be used to control where and how to import the private key.","pos":[184,330],"source":" The <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value can be used to control where and how to import the private key."}]}]},{"pos":[337,703],"content":"This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","nodes":[{"content":"This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","pos":[0,366],"nodes":[{"content":"This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates.","pos":[0,155]},{"content":"Note that a PFX/PKCS12 certificate can contain more than one certificate.","pos":[156,229]},{"content":"In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.","pos":[230,366]}]}]},{"pos":[711,1019],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]}],"pos":[92919,93946],"yaml":true,"extradata":"MT"},{"content":"A byte array containing data from an X.509 certificate.","nodes":[{"pos":[0,55],"content":"A byte array containing data from an X.509 certificate.","nodes":[{"content":"A byte array containing data from an X.509 certificate.","pos":[0,55]}]}],"pos":[94741,94797],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[94861,94921],"yaml":true},{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"pos":[0,101],"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[0,101]}]}],"pos":[95044,95146],"yaml":true},{"content":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with information from a certificate file, a password, and a key storage flag.","nodes":[{"pos":[0,181],"content":"Populates an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> object with information from a certificate file, a password, and a key storage flag.","source":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with information from a certificate file, a password, and a key storage flag."}],"pos":[97036,97218],"yaml":true},{"content":"**Security Note** Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","nodes":[{"pos":[0,310],"content":"**Security Note** Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Security Note<ept id=\"p1\">**</ept> Never hard code a password within your source code.","pos":[0,69],"source":"**Security Note** Never hard code a password within your source code."},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[71,310],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}],"pos":[97229,97542],"yaml":true,"extradata":"MT"},{"content":"The name of a certificate file.","nodes":[{"pos":[0,31],"content":"The name of a certificate file.","nodes":[{"content":"The name of a certificate file.","pos":[0,31]}]}],"pos":[97878,97910],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[97989,98049],"yaml":true},{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"pos":[0,101],"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[0,101]}]}],"pos":[98172,98274],"yaml":true},{"content":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with information from a certificate file, a password, and a <xref href=\"System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\"></xref> value.","nodes":[{"pos":[0,257],"content":"Populates an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> object with information from a certificate file, a password, and a <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\"&gt;&lt;/xref&gt;</ph> value.","source":"Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with information from a certificate file, a password, and a <xref href=\"System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\"></xref> value."}],"pos":[100101,100359],"yaml":true},{"content":"This method can be used populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with information from a certificate file, a password, and an <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value.  \n  \n> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","nodes":[{"pos":[0,253],"content":"This method can be used populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with information from a certificate file, a password, and an <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value.","nodes":[{"content":"This method can be used populate an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object with information from a certificate file, a password, and an <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags&gt;</ph> value.","pos":[0,253],"source":"This method can be used populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with information from a certificate file, a password, and an <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value."}]},{"pos":[261,569],"content":"[!IMPORTANT]\n Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","leadings":["","> "],"nodes":[{"content":" Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[13,306],"nodes":[{"content":"Never hard code a password within your source code.","pos":[1,52]},{"content":"Hard-coded passwords can be retrieved from an assembly using the <bpt id=\"p1\">[</bpt>Ildasm.exe (IL Disassembler)<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.","pos":[54,293],"source":"  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."}]}]}],"pos":[100370,100945],"yaml":true,"extradata":"MT"},{"content":"The name of a certificate file.","nodes":[{"pos":[0,31],"content":"The name of a certificate file.","nodes":[{"content":"The name of a certificate file.","pos":[0,31]}]}],"pos":[101264,101296],"yaml":true},{"content":"The password required to access the X.509 certificate data.","nodes":[{"pos":[0,59],"content":"The password required to access the X.509 certificate data.","nodes":[{"content":"The password required to access the X.509 certificate data.","pos":[0,59]}]}],"pos":[101360,101420],"yaml":true},{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"pos":[0,101],"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","nodes":[{"content":"A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[0,101]}]}],"pos":[101543,101645],"yaml":true},{"content":"Gets the distinguished name of the certificate issuer.","nodes":[{"pos":[0,54],"content":"Gets the distinguished name of the certificate issuer.","nodes":[{"content":"Gets the distinguished name of the certificate issuer.","pos":[0,54]}]}],"pos":[103102,103157],"yaml":true},{"content":"This property contains the name of the certificate authority (CA) that issued the certificate. To obtain the name of a certificate, use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A> method.  \n  \n The distinguished name for the certificate is a textual representation of the certificate subject or issuer. This representation consists of name attributes (for example, \"CN=MyName, OU=MyOrgUnit, C=US\").","nodes":[{"pos":[0,232],"content":"This property contains the name of the certificate authority (CA) that issued the certificate. To obtain the name of a certificate, use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A> method.","nodes":[{"content":"This property contains the name of the certificate authority (CA) that issued the certificate. To obtain the name of a certificate, use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A> method.","pos":[0,232],"nodes":[{"content":"This property contains the name of the certificate authority (CA) that issued the certificate.","pos":[0,94]},{"content":"To obtain the name of a certificate, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A&gt;</ph> method.","pos":[95,232],"source":" To obtain the name of a certificate, use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A> method."}]}]},{"pos":[239,443],"content":"The distinguished name for the certificate is a textual representation of the certificate subject or issuer. This representation consists of name attributes (for example, \"CN=MyName, OU=MyOrgUnit, C=US\").","nodes":[{"content":"The distinguished name for the certificate is a textual representation of the certificate subject or issuer. This representation consists of name attributes (for example, \"CN=MyName, OU=MyOrgUnit, C=US\").","pos":[0,204],"nodes":[{"content":"The distinguished name for the certificate is a textual representation of the certificate subject or issuer.","pos":[0,108]},{"content":"This representation consists of name attributes (for example, \"CN=MyName, OU=MyOrgUnit, C=US\").","pos":[109,204]}]}]}],"pos":[103168,103618],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\"></xref> object that contains the name of the certificate issuer.","nodes":[{"pos":[0,148],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\"&gt;&lt;/xref&gt;</ph> object that contains the name of the certificate issuer.","source":"An <xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\"></xref> object that contains the name of the certificate issuer."}],"pos":[104330,104479],"yaml":true},{"content":"The certificate context is invalid.","nodes":[{"pos":[0,35],"content":"The certificate context is invalid.","nodes":[{"content":"The certificate context is invalid.","pos":[0,35]}]}],"pos":[104728,104764],"yaml":true},{"content":"Gets the date in local time after which a certificate is no longer valid.","nodes":[{"pos":[0,73],"content":"Gets the date in local time after which a certificate is no longer valid.","nodes":[{"content":"Gets the date in local time after which a certificate is no longer valid.","pos":[0,73]}]}],"pos":[106253,106327],"yaml":true},{"content":"This property indicates an expiration date on which the certificate becomes invalid.","nodes":[{"pos":[0,84],"content":"This property indicates an expiration date on which the certificate becomes invalid.","nodes":[{"content":"This property indicates an expiration date on which the certificate becomes invalid.","pos":[0,84]}]}],"pos":[106338,106423],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.DateTime\"></xref> object that represents the expiration date for the certificate.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> object that represents the expiration date for the certificate.","source":"A <xref href=\"System.DateTime\"></xref> object that represents the expiration date for the certificate."}],"pos":[107017,107120],"yaml":true},{"content":"The certificate is unreadable.","nodes":[{"pos":[0,30],"content":"The certificate is unreadable.","nodes":[{"content":"The certificate is unreadable.","pos":[0,30]}]}],"pos":[107367,107398],"yaml":true},{"content":"Gets the date in local time on which a certificate becomes valid.","nodes":[{"pos":[0,65],"content":"Gets the date in local time on which a certificate becomes valid.","nodes":[{"content":"Gets the date in local time on which a certificate becomes valid.","pos":[0,65]}]}],"pos":[108893,108959],"yaml":true},{"content":"This property indicates the date on which the certificate becomes valid.","nodes":[{"pos":[0,72],"content":"This property indicates the date on which the certificate becomes valid.","nodes":[{"content":"This property indicates the date on which the certificate becomes valid.","pos":[0,72]}]}],"pos":[108970,109043],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.DateTime\"></xref> object that represents the effective date of the certificate.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> object that represents the effective date of the certificate.","source":"A <xref href=\"System.DateTime\"></xref> object that represents the effective date of the certificate."}],"pos":[109638,109739],"yaml":true},{"content":"The certificate is unreadable.","nodes":[{"pos":[0,30],"content":"The certificate is unreadable.","nodes":[{"content":"The certificate is unreadable.","pos":[0,30]}]}],"pos":[109987,110018],"yaml":true},{"content":"Gets or sets the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object that represents the private key associated with a certificate.","nodes":[{"pos":[0,156],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;&lt;/xref&gt;</ph> object that represents the private key associated with a certificate.","source":"Gets or sets the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object that represents the private key associated with a certificate."}],"pos":[111519,111676],"yaml":true},{"content":"Currently this property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object. If no private key is associated with the certificate, it returns `null`.  \n  \n> [!WARNING]\n>  If you set this property to `null` or to another key without first deleting it, a private key file is left on the disk.  \n  \n To properly delete the private key associated with this property, set `PersistKeyInCsp` to `false`, and then call the <xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A> method.","nodes":[{"pos":[0,286],"content":"Currently this property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object. If no private key is associated with the certificate, it returns `null`.","nodes":[{"content":"Currently this property supports only RSA or DSA keys, so it returns either an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> or a <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> object.","pos":[0,213],"source":"Currently this property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object."},{"content":"If no private key is associated with the certificate, it returns <ph id=\"ph1\">`null`</ph>.","pos":[214,286],"source":" If no private key is associated with the certificate, it returns `null`."}]},{"pos":[294,427],"content":"[!WARNING]\n If you set this property to `null` or to another key without first deleting it, a private key file is left on the disk.","leadings":["","> "],"nodes":[{"content":"If you set this property to <ph id=\"ph1\">`null`</ph> or to another key without first deleting it, a private key file is left on the disk.","pos":[12,131],"source":" If you set this property to `null` or to another key without first deleting it, a private key file is left on the disk."}]},{"pos":[434,624],"content":"To properly delete the private key associated with this property, set <ph id=\"ph1\">`PersistKeyInCsp`</ph> to <ph id=\"ph2\">`false`</ph>, and then call the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A&gt;</ph> method.","source":"To properly delete the private key associated with this property, set `PersistKeyInCsp` to `false`, and then call the <xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A> method."}],"pos":[111687,112319],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object, which is either an RSA or DSA cryptographic service provider.","nodes":[{"pos":[0,142],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;&lt;/xref&gt;</ph> object, which is either an RSA or DSA cryptographic service provider.","source":"An <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object, which is either an RSA or DSA cryptographic service provider."}],"pos":[113071,113214],"yaml":true},{"content":"The key value is not an RSA or DSA key, or the key is unreadable.","nodes":[{"pos":[0,65],"content":"The key value is not an RSA or DSA key, or the key is unreadable.","nodes":[{"content":"The key value is not an RSA or DSA key, or the key is unreadable.","pos":[0,65]}]}],"pos":[113463,113529],"yaml":true},{"content":"The value being set for this property is `null`.","nodes":[{"pos":[0,48],"content":"The value being set for this property is <ph id=\"ph1\">`null`</ph>.","source":"The value being set for this property is `null`."}],"pos":[113631,113680],"yaml":true},{"content":"The key algorithm for this private key is not supported.","nodes":[{"pos":[0,56],"content":"The key algorithm for this private key is not supported.","nodes":[{"content":"The key algorithm for this private key is not supported.","pos":[0,56]}]}],"pos":[113782,113839],"yaml":true},{"content":"The X.509 keys do not match.","nodes":[{"pos":[0,28],"content":"The X.509 keys do not match.","nodes":[{"content":"The X.509 keys do not match.","pos":[0,28]}]}],"pos":[114025,114054],"yaml":true},{"content":"The cryptographic service provider key is `null`.","nodes":[{"pos":[0,49],"content":"The cryptographic service provider key is <ph id=\"ph1\">`null`</ph>.","source":"The cryptographic service provider key is `null`."}],"pos":[114148,114198],"yaml":true},{"content":"Gets a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\"></xref> object associated with a certificate.","nodes":[{"pos":[0,138],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\"&gt;&lt;/xref&gt;</ph> object associated with a certificate.","source":"Gets a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\"></xref> object associated with a certificate."}],"pos":[115509,115648],"yaml":true},{"content":"This property returns a <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> object, which contains the object identifier (<xref:System.Security.Cryptography.Oid>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.  \n  \n You can also obtain the key as an <xref:System.Security.Cryptography.AsymmetricAlgorithm> object by referencing the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> property. This property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object that represents the public key.","nodes":[{"pos":[0,295],"content":"This property returns a <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> object, which contains the object identifier (<xref:System.Security.Cryptography.Oid>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.","nodes":[{"content":"This property returns a <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A&gt;</ph> object, which contains the object identifier (<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.Oid&gt;</ph>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.","pos":[0,295],"source":"This property returns a <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> object, which contains the object identifier (<xref:System.Security.Cryptography.Oid>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value."}]},{"pos":[302,745],"content":"You can also obtain the key as an <xref:System.Security.Cryptography.AsymmetricAlgorithm> object by referencing the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> property. This property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object that represents the public key.","nodes":[{"content":"You can also obtain the key as an <xref:System.Security.Cryptography.AsymmetricAlgorithm> object by referencing the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> property. This property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object that represents the public key.","pos":[0,443],"nodes":[{"content":"You can also obtain the key as an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> object by referencing the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A&gt;</ph> property.","pos":[0,208],"source":"You can also obtain the key as an <xref:System.Security.Cryptography.AsymmetricAlgorithm> object by referencing the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> property."},{"content":"This property supports only RSA or DSA keys, so it returns either an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> or a <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> object that represents the public key.","pos":[209,443],"source":" This property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object that represents the public key."}]}]}],"pos":[115659,116409],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\"></xref> object.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\"></xref> object."}],"pos":[117109,117213],"yaml":true},{"content":"The key value is not an RSA or DSA key, or the key is unreadable.","nodes":[{"pos":[0,65],"content":"The key value is not an RSA or DSA key, or the key is unreadable.","nodes":[{"content":"The key value is not an RSA or DSA key, or the key is unreadable.","pos":[0,65]}]}],"pos":[117461,117527],"yaml":true},{"content":"Gets the raw data of a certificate.","nodes":[{"pos":[0,35],"content":"Gets the raw data of a certificate.","nodes":[{"content":"Gets the raw data of a certificate.","pos":[0,35]}]}],"pos":[119010,119046],"yaml":true},{"content":"The raw data of the certificate as a byte array.","nodes":[{"pos":[0,48],"content":"The raw data of the certificate as a byte array.","nodes":[{"content":"The raw data of the certificate as a byte array.","pos":[0,48]}]}],"pos":[119667,119716],"yaml":true},{"content":"Resets the state of an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object.","nodes":[{"pos":[0,114],"content":"Resets the state of an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> object.","source":"Resets the state of an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object."}],"pos":[121292,121407],"yaml":true},{"content":"This method can be used to reset the state of the certificate. It also frees any resources associated with the certificate.","nodes":[{"pos":[0,123],"content":"This method can be used to reset the state of the certificate. It also frees any resources associated with the certificate.","nodes":[{"content":"This method can be used to reset the state of the certificate. It also frees any resources associated with the certificate.","pos":[0,123],"nodes":[{"content":"This method can be used to reset the state of the certificate.","pos":[0,62]},{"content":"It also frees any resources associated with the certificate.","pos":[63,123]}]}]}],"pos":[121418,121542],"yaml":true,"extradata":"MT"},{"content":"Gets the serial number of a certificate.","nodes":[{"pos":[0,40],"content":"Gets the serial number of a certificate.","nodes":[{"content":"Gets the serial number of a certificate.","pos":[0,40]}]}],"pos":[123043,123084],"yaml":true},{"content":"The serial number of the certificate is part of the original X.509 protocol. The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).","nodes":[{"pos":[0,200],"content":"The serial number of the certificate is part of the original X.509 protocol. The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).","nodes":[{"content":"The serial number of the certificate is part of the original X.509 protocol. The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).","pos":[0,200],"nodes":[{"content":"The serial number of the certificate is part of the original X.509 protocol.","pos":[0,76]},{"content":"The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).","pos":[77,200]}]}]}],"pos":[123095,123296],"yaml":true,"extradata":"MT"},{"content":"The serial number of the certificate.","nodes":[{"pos":[0,37],"content":"The serial number of the certificate.","nodes":[{"content":"The serial number of the certificate.","pos":[0,37]}]}],"pos":[123890,123928],"yaml":true},{"content":"Gets the algorithm used to create the signature of a certificate.","nodes":[{"pos":[0,65],"content":"Gets the algorithm used to create the signature of a certificate.","nodes":[{"content":"Gets the algorithm used to create the signature of a certificate.","pos":[0,65]}]}],"pos":[125583,125649],"yaml":true},{"content":"The object identifier (<xref:System.Security.Cryptography.Oid>) identifies the type of signature algorithm used by the certificate.","nodes":[{"pos":[0,131],"content":"The object identifier (<xref:System.Security.Cryptography.Oid>) identifies the type of signature algorithm used by the certificate.","nodes":[{"content":"The object identifier (<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.Oid&gt;</ph>) identifies the type of signature algorithm used by the certificate.","pos":[0,131],"source":"The object identifier (<xref:System.Security.Cryptography.Oid>) identifies the type of signature algorithm used by the certificate."}]}],"pos":[125660,125792],"yaml":true,"extradata":"MT"},{"content":"Returns the object identifier (<xref href=\"System.Security.Cryptography.Oid\"></xref>) of the signature algorithm.","nodes":[{"pos":[0,113],"content":"Returns the object identifier (<ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.Oid\"&gt;&lt;/xref&gt;</ph>) of the signature algorithm.","source":"Returns the object identifier (<xref href=\"System.Security.Cryptography.Oid\"></xref>) of the signature algorithm."}],"pos":[126515,126629],"yaml":true},{"content":"The certificate is unreadable.","nodes":[{"pos":[0,30],"content":"The certificate is unreadable.","nodes":[{"content":"The certificate is unreadable.","pos":[0,30]}]}],"pos":[126886,126917],"yaml":true},{"content":"Gets the subject distinguished name from a certificate.","nodes":[{"pos":[0,55],"content":"Gets the subject distinguished name from a certificate.","nodes":[{"content":"Gets the subject distinguished name from a certificate.","pos":[0,55]}]}],"pos":[128424,128480],"yaml":true},{"content":"The subject distinguished name is the name of the user of the certificate. The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate. This representation consists of name attributes, for example, \"CN=MyName, OU=MyOrgUnit, C=US\".","nodes":[{"pos":[0,285],"content":"The subject distinguished name is the name of the user of the certificate. The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate. This representation consists of name attributes, for example, \"CN=MyName, OU=MyOrgUnit, C=US\".","nodes":[{"content":"The subject distinguished name is the name of the user of the certificate. The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate. This representation consists of name attributes, for example, \"CN=MyName, OU=MyOrgUnit, C=US\".","pos":[0,285],"nodes":[{"content":"The subject distinguished name is the name of the user of the certificate.","pos":[0,74]},{"content":"The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate.","pos":[75,190]},{"content":"This representation consists of name attributes, for example, \"CN=MyName, OU=MyOrgUnit, C=US\".","pos":[191,285]}]}]}],"pos":[128491,128777],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\"></xref> object that represents the name of the certificate subject.","nodes":[{"pos":[0,151],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\"&gt;&lt;/xref&gt;</ph> object that represents the name of the certificate subject.","source":"An <xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\"></xref> object that represents the name of the certificate subject."}],"pos":[129485,129637],"yaml":true},{"content":"The certificate context is invalid.","nodes":[{"pos":[0,35],"content":"The certificate context is invalid.","nodes":[{"content":"The certificate context is invalid.","pos":[0,35]}]}],"pos":[129887,129923],"yaml":true},{"content":"Gets the thumbprint of a certificate.","nodes":[{"pos":[0,37],"content":"Gets the thumbprint of a certificate.","nodes":[{"content":"Gets the thumbprint of a certificate.","pos":[0,37]}]}],"pos":[131424,131462],"yaml":true},{"content":"The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate. Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.","nodes":[{"pos":[0,251],"content":"The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate. Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.","nodes":[{"content":"The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate. Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.","pos":[0,251],"nodes":[{"content":"The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate.","pos":[0,114]},{"content":"Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.","pos":[115,251]}]}]}],"pos":[131473,131725],"yaml":true,"extradata":"MT"},{"content":"The thumbprint of the certificate.","nodes":[{"pos":[0,34],"content":"The thumbprint of the certificate.","nodes":[{"content":"The thumbprint of the certificate.","pos":[0,34]}]}],"pos":[132317,132352],"yaml":true},{"content":"Displays an X.509 certificate in text format.","nodes":[{"pos":[0,45],"content":"Displays an X.509 certificate in text format.","nodes":[{"content":"Displays an X.509 certificate in text format.","pos":[0,45]}]}],"pos":[133949,133995],"yaml":true},{"content":"As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information about the content or use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A> method to obtain information about the certificate.  \n  \n This method displays the certificate in text format.","nodes":[{"pos":[0,457],"content":"As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information about the content or use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A> method to obtain information about the certificate.","nodes":[{"content":"As with all <ph id=\"ph1\">`ToString`</ph> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content.","pos":[0,161],"source":"As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content."},{"content":"Use the properties on the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object to obtain precise information about the content or use the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A&gt;</ph> method to obtain information about the certificate.","pos":[162,457],"source":" Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information about the content or use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A> method to obtain information about the certificate."}]},{"pos":[464,516],"content":"This method displays the certificate in text format.","nodes":[{"content":"This method displays the certificate in text format.","pos":[0,52]}]}],"pos":[134006,134527],"yaml":true,"extradata":"MT"},{"content":"The certificate information.","nodes":[{"pos":[0,28],"content":"The certificate information.","nodes":[{"content":"The certificate information.","pos":[0,28]}]}],"pos":[135140,135169],"yaml":true},{"content":"Displays an X.509 certificate in text format.","nodes":[{"pos":[0,45],"content":"Displays an X.509 certificate in text format.","nodes":[{"content":"Displays an X.509 certificate in text format.","pos":[0,45]}]}],"pos":[136833,136879],"yaml":true},{"content":"As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information.  \n  \n This method displays the certificate in text format. If the `verbose` parameter is set to `true`, the text display includes the public key, private key, and extensions. If `verbose` is set to `false`, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information.","nodes":[{"pos":[0,295],"content":"As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information.","nodes":[{"content":"As with all <ph id=\"ph1\">`ToString`</ph> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content.","pos":[0,161],"source":"As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content."},{"content":"Use the properties on the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object to obtain precise information.","pos":[162,295],"source":" Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information."}]},{"pos":[302,673],"content":"This method displays the certificate in text format. If the `verbose` parameter is set to `true`, the text display includes the public key, private key, and extensions. If `verbose` is set to `false`, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information.","nodes":[{"content":"This method displays the certificate in text format.","pos":[0,52]},{"content":"If the <ph id=\"ph1\">`verbose`</ph> parameter is set to <ph id=\"ph2\">`true`</ph>, the text display includes the public key, private key, and extensions.","pos":[53,168],"source":" If the `verbose` parameter is set to `true`, the text display includes the public key, private key, and extensions."},{"content":"If <ph id=\"ph1\">`verbose`</ph> is set to <ph id=\"ph2\">`false`</ph>, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information.","pos":[169,371],"source":" If `verbose` is set to `false`, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information."}]}],"pos":[136890,137568],"yaml":true,"extradata":"MT"},{"content":"`true` to display the public key, private key, extensions, and so forth; `false` to display information that is similar to the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class, including thumbprint, serial number, subject and issuer names, and so on.","nodes":[{"pos":[0,291],"content":"<ph id=\"ph1\">`true`</ph> to display the public key, private key, extensions, and so forth; <ph id=\"ph2\">`false`</ph> to display information that is similar to the <ph id=\"ph3\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> class, including thumbprint, serial number, subject and issuer names, and so on.","source":"`true` to display the public key, private key, extensions, and so forth; `false` to display information that is similar to the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class, including thumbprint, serial number, subject and issuer names, and so on."}],"pos":[138197,138491],"yaml":true},{"content":"The certificate information.","nodes":[{"pos":[0,28],"content":"The certificate information.","nodes":[{"content":"The certificate information.","pos":[0,28]}]}],"pos":[138548,138577],"yaml":true},{"content":"Performs a X.509 chain validation using basic validation policy.","nodes":[{"pos":[0,64],"content":"Performs a X.509 chain validation using basic validation policy.","nodes":[{"content":"Performs a X.509 chain validation using basic validation policy.","pos":[0,64]}]}],"pos":[140160,140225],"yaml":true},{"content":"This method builds a simple chain for the certificate and applies the base policy to that chain. If you need more information about a failure, validate the certificate directly using the <xref:System.Security.Cryptography.X509Certificates.X509Chain> object.  \n  \n Note that the default chaining engine can be overridden using the <xref:System.Security.Cryptography.CryptoConfig> class. On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\"","nodes":[{"pos":[0,257],"content":"This method builds a simple chain for the certificate and applies the base policy to that chain. If you need more information about a failure, validate the certificate directly using the <xref:System.Security.Cryptography.X509Certificates.X509Chain> object.","nodes":[{"content":"This method builds a simple chain for the certificate and applies the base policy to that chain. If you need more information about a failure, validate the certificate directly using the <xref:System.Security.Cryptography.X509Certificates.X509Chain> object.","pos":[0,257],"nodes":[{"content":"This method builds a simple chain for the certificate and applies the base policy to that chain.","pos":[0,96]},{"content":"If you need more information about a failure, validate the certificate directly using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Chain&gt;</ph> object.","pos":[97,257],"source":" If you need more information about a failure, validate the certificate directly using the <xref:System.Security.Cryptography.X509Certificates.X509Chain> object."}]}]},{"pos":[264,599],"content":"Note that the default chaining engine can be overridden using the <xref:System.Security.Cryptography.CryptoConfig> class. On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\"","nodes":[{"content":"Note that the default chaining engine can be overridden using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> class.","pos":[0,121],"source":"Note that the default chaining engine can be overridden using the <xref:System.Security.Cryptography.CryptoConfig> class."},{"content":"On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, \"<bpt id=\"p1\">[</bpt>Certificate and Certificate Revocation List (CRL) Profile<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=45286)</ept>.\"","pos":[122,335],"source":" On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\""}]}],"pos":[140236,140842],"yaml":true,"extradata":"MT"},{"content":"`true` if the validation succeeds; `false` if the validation fails.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">`true`</ph> if the validation succeeds; <ph id=\"ph2\">`false`</ph> if the validation fails.","source":"`true` if the validation succeeds; `false` if the validation fails."}],"pos":[141610,141680],"yaml":true},{"content":"The certificate is unreadable.","nodes":[{"pos":[0,30],"content":"The certificate is unreadable.","nodes":[{"content":"The certificate is unreadable.","pos":[0,30]}]}],"pos":[141925,141956],"yaml":true},{"content":"Gets the X.509 format version of a certificate.","nodes":[{"pos":[0,47],"content":"Gets the X.509 format version of a certificate.","nodes":[{"content":"Gets the X.509 format version of a certificate.","pos":[0,47]}]}],"pos":[143295,143343],"yaml":true},{"content":"There are several versions of X.509 certificates. This property identifies which format the certificate uses. For example, \"3\" is returned for a version 3 certificate.","nodes":[{"pos":[0,167],"content":"There are several versions of X.509 certificates. This property identifies which format the certificate uses. For example, \"3\" is returned for a version 3 certificate.","nodes":[{"content":"There are several versions of X.509 certificates. This property identifies which format the certificate uses. For example, \"3\" is returned for a version 3 certificate.","pos":[0,167],"nodes":[{"content":"There are several versions of X.509 certificates.","pos":[0,49]},{"content":"This property identifies which format the certificate uses.","pos":[50,109]},{"content":"For example, \"3\" is returned for a version 3 certificate.","pos":[110,167]}]}]}],"pos":[143354,143522],"yaml":true,"extradata":"MT"},{"content":"The certificate format.","nodes":[{"pos":[0,23],"content":"The certificate format.","nodes":[{"content":"The certificate format.","pos":[0,23]}]}],"pos":[144107,144131],"yaml":true},{"content":"The certificate is unreadable.","nodes":[{"pos":[0,30],"content":"The certificate is unreadable.","nodes":[{"content":"The certificate is unreadable.","pos":[0,30]}]}],"pos":[144377,144408],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2\n  id: X509Certificate2\n  children:\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Reset\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Verify\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Version\n  langs:\n  - csharp\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Represents an X.509 certificate.\n  remarks: \"The X.509 structure originated in the International Organization for Standardization (ISO) working groups. This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth). Although the ISO specifications are most informative on the structure itself, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group. The most informative of these specifications is RFC 3280, \\\"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\\\"  \\n  \\n> [!IMPORTANT]\\n>  Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], this type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n>   \\n>  For apps that target the [!INCLUDE[net_v452](~/includes/net-v452-md.md)] and earlier versions, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class does not implement the <xref:System.IDisposable> interface and therefore does not have a `Dispose` method.\"\n  example:\n  - \"The following example demonstrates how to use an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to encrypt and decrypt a file.  \\n  \\n [!code-csharp[X509Certificate2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509certificate2/cs/program.cs#1)]\\n [!code-vb[X509Certificate2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509certificate2/vb/program.vb#1)]  \\n  \\n The following example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: 'public class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.X509Certificates.X509Certificate\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile(System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.Security.SecureString)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.FormatDate(System.DateTime)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetName\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  extensionMethods:\n  - System.Security.Cryptography.X509Certificates.DSACertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.DSA)\n  - System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.ECDsa)\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.Security.Cryptography.X509Certificates.RSACertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.RSA)\n  - System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2()\n  nameWithType: X509Certificate2.X509Certificate2()\n  fullName: X509Certificate2.X509Certificate2()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class.\n  remarks: This constructor creates an empty <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.\n  example:\n  - \"The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: public X509Certificate2 ();\n    parameters: []\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: '#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(String, String, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.X509Certificate2(String, String, X509KeyStorageFlags)\n  fullName: X509Certificate2.X509Certificate2(String, String, X509KeyStorageFlags)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name, a password used to access the certificate, and a key storage flag.\n  remarks: \"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name, a password needed to access the certificate, and a key storage flag.  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \\n  \\n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.\"\n  syntax:\n    content: public X509Certificate2 (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of a certificate file.\n    - id: password\n      type: System.String\n      description: The password required to access the X.509 certificate data.\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: A bitwise combination of the enumeration values that control where and how to import the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: '#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(String, SecureString, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.X509Certificate2(String, SecureString, X509KeyStorageFlags)\n  fullName: X509Certificate2.X509Certificate2(String, SecureString, X509KeyStorageFlags)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name, a password, and a key storage flag.\n  remarks: If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.\n  syntax:\n    content: public X509Certificate2 (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of a certificate file.\n    - id: password\n      type: System.Security.SecureString\n      description: The password required to access the X.509 certificate data.\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: A bitwise combination of the enumeration values that control where and how to import the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: '#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(Byte[], String, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], String, X509KeyStorageFlags)\n  fullName: X509Certificate2.X509Certificate2(Byte[], String, X509KeyStorageFlags)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array, a password, and a key storage flag.\n  remarks: \"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array, a password that is needed to access the certificate data, and a key storage flag. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \\n  \\n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.\"\n  syntax:\n    content: public X509Certificate2 (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: A byte array containing data from an X.509 certificate.\n    - id: password\n      type: System.String\n      description: The password required to access the X.509 certificate data.\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: A bitwise combination of the enumeration values that control where and how to import the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(String, String)\n  nameWithType: X509Certificate2.X509Certificate2(String, String)\n  fullName: X509Certificate2.X509Certificate2(String, String)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name and a password used to access the certificate.\n  remarks: \"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name and a password needed to access the certificate. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \\n  \\n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.\"\n  syntax:\n    content: public X509Certificate2 (string fileName, string password);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of a certificate file.\n    - id: password\n      type: System.String\n      description: The password required to access the X.509 certificate data.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)\n  id: '#ctor(System.String,System.Security.SecureString)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(String, SecureString)\n  nameWithType: X509Certificate2.X509Certificate2(String, SecureString)\n  fullName: X509Certificate2.X509Certificate2(String, SecureString)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name and a password.\n  remarks: \"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \\n  \\n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.\"\n  syntax:\n    content: public X509Certificate2 (string fileName, System.Security.SecureString password);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of a certificate file.\n    - id: password\n      type: System.Security.SecureString\n      description: The password required to access the X.509 certificate data.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(SerializationInfo, StreamingContext)\n  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo, StreamingContext)\n  fullName: X509Certificate2.X509Certificate2(SerializationInfo, StreamingContext)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using the specified serialization and stream context information.\n  syntax:\n    content: protected X509Certificate2 (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The serialization information required to deserialize the new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref>.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Contextual information about the source of the stream to be deserialized.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: '#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(Byte[], SecureString, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], SecureString, X509KeyStorageFlags)\n  fullName: X509Certificate2.X509Certificate2(Byte[], SecureString, X509KeyStorageFlags)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array, a password, and a key storage flag.\n  remarks: \"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \\n  \\n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.\"\n  syntax:\n    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: A byte array that contains data from an X.509 certificate.\n    - id: password\n      type: System.Security.SecureString\n      description: The password required to access the X.509 certificate data.\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: A bitwise combination of the enumeration values that control where and how to import the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)\n  id: '#ctor(System.Byte[],System.Security.SecureString)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(Byte[], SecureString)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], SecureString)\n  fullName: X509Certificate2.X509Certificate2(Byte[], SecureString)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array and a password.\n  remarks: \"This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \\n  \\n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.\"\n  syntax:\n    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password);\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: A byte array that contains data from an X.509 certificate.\n    - id: password\n      type: System.Security.SecureString\n      description: The password required to access the X.509 certificate data.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(String)\n  nameWithType: X509Certificate2.X509Certificate2(String)\n  fullName: X509Certificate2.X509Certificate2(String)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a certificate file name.\n  remarks: \"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name. It supports binary (DER) encoding or Base64 encoding.  \\n  \\n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.\"\n  syntax:\n    content: public X509Certificate2 (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of a certificate file.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(X509Certificate)\n  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)\n  fullName: X509Certificate2.X509Certificate2(X509Certificate)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"></xref> object.\n  remarks: This method creates a new instance of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class using an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> object.\n  syntax:\n    content: public X509Certificate2 (System.Security.Cryptography.X509Certificates.X509Certificate certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: An <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\"></xref> object.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(IntPtr)\n  nameWithType: X509Certificate2.X509Certificate2(IntPtr)\n  fullName: X509Certificate2.X509Certificate2(IntPtr)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using an unmanaged handle.\n  remarks: \"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a handle for the Microsoft Cryptographic API certificate context, `PCCERT_CONTEXT`. Note that the immediate caller of this constructor requires unmanaged code permission.  \\n  \\n> [!IMPORTANT]\\n>  The constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current `PCCERT_CONTEXT` structure from the <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A> property, but it is valid only during the lifetime of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object.\"\n  syntax:\n    content: public X509Certificate2 (IntPtr handle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: A pointer to a certificate context in unmanaged code. The C structure is called `PCCERT_CONTEXT`.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(Byte[])\n  nameWithType: X509Certificate2.X509Certificate2(Byte[])\n  fullName: X509Certificate2.X509Certificate2(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using information from a byte array.\n  remarks: \"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using certificate information from a byte array. The byte array can be binary (DER) encoded or Base64-encoded X.509 data. The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.  \\n  \\n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.\"\n  syntax:\n    content: public X509Certificate2 (byte[] rawData);\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: A byte array containing data from an X.509 certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)\n  id: '#ctor(System.Byte[],System.String)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: X509Certificate2(Byte[], String)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], String)\n  fullName: X509Certificate2.X509Certificate2(Byte[], String)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class using a byte array and a password.\n  remarks: \"This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array and a password that is needed to access the certificate data. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \\n  \\n If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.\"\n  syntax:\n    content: public X509Certificate2 (byte[] rawData, string password);\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: A byte array containing data from an X.509 certificate.\n    - id: password\n      type: System.String\n      description: The password required to access the X.509 certificate data.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An error with the certificate occurs. For example:  \\n  \\n-   The certificate file does not exist.  \\n  \\n-   The certificate is invalid.  \\n  \\n-   The certificate's password is incorrect.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\n  id: Archived\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Archived\n  nameWithType: X509Certificate2.Archived\n  fullName: X509Certificate2.Archived\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets or sets a value indicating that an X.509 certificate is archived.\n  remarks: \"This property is set only on a certificate that is associated with a store. If the property is set and the certificate is added to a certificate store, the value is persisted. If the property is set on a certificate retrieved from a store, the value is persisted immediately.  \\n  \\n In an X.509 store, archived certificates are not included in the returned <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> object unless the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> property is set to `true`. No physical archival activity occurs when the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> value is set or unset.\"\n  example:\n  - \"The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: public bool Archived { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the certificate is archived, `false` if the certificate is not archived.'\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate is unreadable.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  id: Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Export(X509ContentType, String)\n  nameWithType: X509Certificate2.Export(X509ContentType, String)\n  fullName: X509Certificate2.Export(X509ContentType, String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: >-\n      [System.MonoTODO(\"X509ContentType.SerializedCert is not supported\")]\n\n      public override byte[] Export (System.Security.Cryptography.X509Certificates.X509ContentType contentType, string password);\n    parameters:\n    - id: contentType\n      type: System.Security.Cryptography.X509Certificates.X509ContentType\n      description: ''\n    - id: password\n      type: System.String\n      description: ''\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Export*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\n  id: Extensions\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Extensions\n  nameWithType: X509Certificate2.Extensions\n  fullName: X509Certificate2.Extensions\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets a collection of <xref href=\"System.Security.Cryptography.X509Certificates.X509Extension\"></xref> objects.\n  remarks: The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate. A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, \"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\" Common extensions include information regarding key usage (<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>), key identifiers (<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>), certificate policies, revocation information (CRL Distribution Point extension), and other uses.\n  example:\n  - \"The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection\n      description: An <xref href=\"System.Security.Cryptography.X509Certificates.X509ExtensionCollection\"></xref> object.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate is unreadable.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\n  id: FriendlyName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: FriendlyName\n  nameWithType: X509Certificate2.FriendlyName\n  fullName: X509Certificate2.FriendlyName\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets or sets the associated alias for a certificate.\n  remarks: \"Friendly names are properties in the X.509 certificate store that can be set. They are used to enable a user to associate aliases with certificates so they can be easily identified.  \\n  \\n If no friendly name exists for the certificate, an empty string (\\\"\\\") is returned.\"\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public string FriendlyName { get; set; }\n    return:\n      type: System.String\n      description: The certificate's friendly name.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate is unreadable.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)\n  id: GetCertContentType(System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: GetCertContentType(String)\n  nameWithType: X509Certificate2.GetCertContentType(String)\n  fullName: X509Certificate2.GetCertContentType(String)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Indicates the type of certificate contained in a file.\n  remarks: This method enables you to discover the type of certificate in a file.\n  syntax:\n    content: >-\n      [System.MonoTODO(\"Detection limited to Cert, Pfx, Pkcs12 and Unknown\")]\n\n      public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of a certificate file.\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509ContentType\n      description: An <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\"></xref> object.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>fileName</code> is `null`.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])\n  id: GetCertContentType(System.Byte[])\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: GetCertContentType(Byte[])\n  nameWithType: X509Certificate2.GetCertContentType(Byte[])\n  fullName: X509Certificate2.GetCertContentType(Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Indicates the type of certificate contained in a byte array.\n  remarks: This method enables you to discover the type of certificate in a file.\n  example:\n  - \"The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO(\"Detection limited to Cert, Pfx, Pkcs12, Pkcs7 and Unknown\")]\n\n      public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (byte[] rawData);\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: A byte array containing data from an X.509 certificate.\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509ContentType\n      description: An <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\"></xref> object.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>rawData</code> has a zero length or is `null`.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\n  id: GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: GetNameInfo(X509NameType, Boolean)\n  nameWithType: X509Certificate2.GetNameInfo(X509NameType, Boolean)\n  fullName: X509Certificate2.GetNameInfo(X509NameType, Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the subject and issuer names from a certificate.\n  remarks: This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations. Using this method ensures that the appropriate name is returned.\n  example:\n  - \"The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO(\"always return String.Empty for UpnName, DnsFromAlternativeName and UrlName\")]\n\n      public string GetNameInfo (System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer);\n    parameters:\n    - id: nameType\n      type: System.Security.Cryptography.X509Certificates.X509NameType\n      description: The <xref href=\"System.Security.Cryptography.X509Certificates.X509NameType\"></xref> value for the subject.\n    - id: forIssuer\n      type: System.Boolean\n      description: '`true` to include the issuer name; otherwise, `false`.'\n    return:\n      type: System.String\n      description: The name of the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\n  id: HasPrivateKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: HasPrivateKey\n  nameWithType: X509Certificate2.HasPrivateKey\n  fullName: X509Certificate2.HasPrivateKey\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets a value that indicates whether an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object contains a private key.\n  syntax:\n    content: public bool HasPrivateKey { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object contains a private key; otherwise, `false`.'\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate context is invalid.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])\n  id: Import(System.Byte[])\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Import(Byte[])\n  nameWithType: X509Certificate2.Import(Byte[])\n  fullName: X509Certificate2.Import(Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with data from a byte array.\n  remarks: \"This method can be used to take a raw byte array of an X.509 certificate and populate the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with its associated values.  \\n  \\n Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.\"\n  syntax:\n    content: public override void Import (byte[] rawData);\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: A byte array containing data from an X.509 certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)\n  id: Import(System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Import(String)\n  nameWithType: X509Certificate2.Import(String)\n  fullName: X509Certificate2.Import(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with information from a certificate file.\n  remarks: \"This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with the certificate the file contains.  \\n  \\n This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.\"\n  syntax:\n    content: public override void Import (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of a certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Import(Byte[], SecureString, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.Import(Byte[], SecureString, X509KeyStorageFlags)\n  fullName: X509Certificate2.Import(Byte[], SecureString, X509KeyStorageFlags)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object using data from a byte array, a password, and a key storage flag.\n  remarks: \"You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.\"\n  syntax:\n    content: >-\n      [System.MonoTODO(\"SecureString is incomplete\")]\n\n      public override void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: A byte array that contains data from an X.509 certificate.\n    - id: password\n      type: System.Security.SecureString\n      description: The password required to access the X.509 certificate data.\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: A bitwise combination of the enumeration values that control where and how to import the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Import(Byte[], String, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.Import(Byte[], String, X509KeyStorageFlags)\n  fullName: X509Certificate2.Import(Byte[], String, X509KeyStorageFlags)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object using data from a byte array, a password, and flags for determining how to import the private key.\n  remarks: \"This method can be used to populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a password for the certificate represented by the byte array. The <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value can be used to control where and how to import the private key.  \\n  \\n This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.\"\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO(\"missing KeyStorageFlags support\")]\n\n      public override void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: A byte array containing data from an X.509 certificate.\n    - id: password\n      type: System.String\n      description: The password required to access the X.509 certificate data.\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: A bitwise combination of the enumeration values that control where and how to import the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Import(String, SecureString, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.Import(String, SecureString, X509KeyStorageFlags)\n  fullName: X509Certificate2.Import(String, SecureString, X509KeyStorageFlags)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with information from a certificate file, a password, and a key storage flag.\n  remarks: '**Security Note** Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.'\n  syntax:\n    content: >-\n      [System.MonoTODO(\"SecureString is incomplete\")]\n\n      public override void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of a certificate file.\n    - id: password\n      type: System.Security.SecureString\n      description: The password required to access the X.509 certificate data.\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: A bitwise combination of the enumeration values that control where and how to import the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Import(String, String, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.Import(String, String, X509KeyStorageFlags)\n  fullName: X509Certificate2.Import(String, String, X509KeyStorageFlags)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Populates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object with information from a certificate file, a password, and a <xref href=\"System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\"></xref> value.\n  remarks: \"This method can be used populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with information from a certificate file, a password, and an <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value.  \\n  \\n> [!IMPORTANT]\\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.\"\n  syntax:\n    content: >-\n      [System.MonoTODO(\"missing KeyStorageFlags support\")]\n\n      public override void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of a certificate file.\n    - id: password\n      type: System.String\n      description: The password required to access the X.509 certificate data.\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: A bitwise combination of the enumeration values that control where and how to import the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\n  id: IssuerName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: IssuerName\n  nameWithType: X509Certificate2.IssuerName\n  fullName: X509Certificate2.IssuerName\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the distinguished name of the certificate issuer.\n  remarks: \"This property contains the name of the certificate authority (CA) that issued the certificate. To obtain the name of a certificate, use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A> method.  \\n  \\n The distinguished name for the certificate is a textual representation of the certificate subject or issuer. This representation consists of name attributes (for example, \\\"CN=MyName, OU=MyOrgUnit, C=US\\\").\"\n  example:\n  - \"The following code example creates a command-line executable file that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName\n      description: An <xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\"></xref> object that contains the name of the certificate issuer.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate context is invalid.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\n  id: NotAfter\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: NotAfter\n  nameWithType: X509Certificate2.NotAfter\n  fullName: X509Certificate2.NotAfter\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the date in local time after which a certificate is no longer valid.\n  remarks: This property indicates an expiration date on which the certificate becomes invalid.\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public DateTime NotAfter { get; }\n    return:\n      type: System.DateTime\n      description: A <xref href=\"System.DateTime\"></xref> object that represents the expiration date for the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate is unreadable.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\n  id: NotBefore\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: NotBefore\n  nameWithType: X509Certificate2.NotBefore\n  fullName: X509Certificate2.NotBefore\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the date in local time on which a certificate becomes valid.\n  remarks: This property indicates the date on which the certificate becomes valid.\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public DateTime NotBefore { get; }\n    return:\n      type: System.DateTime\n      description: A <xref href=\"System.DateTime\"></xref> object that represents the effective date of the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate is unreadable.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey\n  id: PrivateKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: PrivateKey\n  nameWithType: X509Certificate2.PrivateKey\n  fullName: X509Certificate2.PrivateKey\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets or sets the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object that represents the private key associated with a certificate.\n  remarks: \"Currently this property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object. If no private key is associated with the certificate, it returns `null`.  \\n  \\n> [!WARNING]\\n>  If you set this property to `null` or to another key without first deleting it, a private key file is left on the disk.  \\n  \\n To properly delete the private key associated with this property, set `PersistKeyInCsp` to `false`, and then call the <xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A> method.\"\n  example:\n  - \"The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }\n    return:\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: An <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object, which is either an RSA or DSA cryptographic service provider.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key value is not an RSA or DSA key, or the key is unreadable.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The value being set for this property is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The key algorithm for this private key is not supported.\n  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException\n    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException\n    description: The X.509 keys do not match.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The cryptographic service provider key is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\n  id: PublicKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: PublicKey\n  nameWithType: X509Certificate2.PublicKey\n  fullName: X509Certificate2.PublicKey\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\"></xref> object associated with a certificate.\n  remarks: \"This property returns a <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> object, which contains the object identifier (<xref:System.Security.Cryptography.Oid>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.  \\n  \\n You can also obtain the key as an <xref:System.Security.Cryptography.AsymmetricAlgorithm> object by referencing the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> property. This property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object that represents the public key.\"\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.PublicKey\n      description: A <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\"></xref> object.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key value is not an RSA or DSA key, or the key is unreadable.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\n  id: RawData\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: RawData\n  nameWithType: X509Certificate2.RawData\n  fullName: X509Certificate2.RawData\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the raw data of a certificate.\n  remarks: ''\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: public byte[] RawData { get; }\n    return:\n      type: System.Byte[]\n      description: The raw data of the certificate as a byte array.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.Reset\n  id: Reset\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: X509Certificate2.Reset()\n  fullName: X509Certificate2.Reset()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Resets the state of an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> object.\n  remarks: This method can be used to reset the state of the certificate. It also frees any resources associated with the certificate.\n  syntax:\n    content: public override void Reset ();\n    parameters: []\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\n  id: SerialNumber\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: SerialNumber\n  nameWithType: X509Certificate2.SerialNumber\n  fullName: X509Certificate2.SerialNumber\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the serial number of a certificate.\n  remarks: The serial number of the certificate is part of the original X.509 protocol. The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public string SerialNumber { get; }\n    return:\n      type: System.String\n      description: The serial number of the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: X509Certificate2.SignatureAlgorithm\n  fullName: X509Certificate2.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the algorithm used to create the signature of a certificate.\n  remarks: The object identifier (<xref:System.Security.Cryptography.Oid>) identifies the type of signature algorithm used by the certificate.\n  example:\n  - \"The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: public System.Security.Cryptography.Oid SignatureAlgorithm { get; }\n    return:\n      type: System.Security.Cryptography.Oid\n      description: Returns the object identifier (<xref href=\"System.Security.Cryptography.Oid\"></xref>) of the signature algorithm.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate is unreadable.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\n  id: SubjectName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: SubjectName\n  nameWithType: X509Certificate2.SubjectName\n  fullName: X509Certificate2.SubjectName\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the subject distinguished name from a certificate.\n  remarks: The subject distinguished name is the name of the user of the certificate. The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate. This representation consists of name attributes, for example, \"CN=MyName, OU=MyOrgUnit, C=US\".\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName\n      description: An <xref href=\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\"></xref> object that represents the name of the certificate subject.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate context is invalid.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\n  id: Thumbprint\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Thumbprint\n  nameWithType: X509Certificate2.Thumbprint\n  fullName: X509Certificate2.Thumbprint\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the thumbprint of a certificate.\n  remarks: The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate. Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public string Thumbprint { get; }\n    return:\n      type: System.String\n      description: The thumbprint of the certificate.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString\n  id: ToString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: X509Certificate2.ToString()\n  fullName: X509Certificate2.ToString()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Displays an X.509 certificate in text format.\n  remarks: \"As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information about the content or use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A> method to obtain information about the certificate.  \\n  \\n This method displays the certificate in text format.\"\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The certificate information.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)\n  id: ToString(System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: ToString(Boolean)\n  nameWithType: X509Certificate2.ToString(Boolean)\n  fullName: X509Certificate2.ToString(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Displays an X.509 certificate in text format.\n  remarks: \"As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information.  \\n  \\n This method displays the certificate in text format. If the `verbose` parameter is set to `true`, the text display includes the public key, private key, and extensions. If `verbose` is set to `false`, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information.\"\n  example:\n  - \"The following code example creates a command line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public override string ToString (bool verbose);\n    parameters:\n    - id: verbose\n      type: System.Boolean\n      description: '`true` to display the public key, private key, extensions, and so forth; `false` to display information that is similar to the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> class, including thumbprint, serial number, subject and issuer names, and so on.'\n    return:\n      type: System.String\n      description: The certificate information.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.Verify\n  id: Verify\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Verify()\n  nameWithType: X509Certificate2.Verify()\n  fullName: X509Certificate2.Verify()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Performs a X.509 chain validation using basic validation policy.\n  remarks: \"This method builds a simple chain for the certificate and applies the base policy to that chain. If you need more information about a failure, validate the certificate directly using the <xref:System.Security.Cryptography.X509Certificates.X509Chain> object.  \\n  \\n Note that the default chaining engine can be overridden using the <xref:System.Security.Cryptography.CryptoConfig> class. On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, \\\"[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).\\\"\"\n  example:\n  - \"The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \\n  \\n [!code-cpp[CertSelect#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]\\n [!code-csharp[CertSelect#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]\\n [!code-vb[CertSelect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO(\"by default this depends on the incomplete X509Chain\")]\n\n      public bool Verify ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the validation succeeds; `false` if the validation fails.'\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate is unreadable.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Version\n  id: Version\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  name: Version\n  nameWithType: X509Certificate2.Version\n  fullName: X509Certificate2.Version\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the X.509 format version of a certificate.\n  remarks: There are several versions of X.509 certificates. This property identifies which format the certificate uses. For example, \"3\" is returned for a version 3 certificate.\n  example:\n  - \"The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \\n  \\n [!code-cpp[CertInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]\\n [!code-csharp[CertInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]\\n [!code-vb[CertInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]\"\n  syntax:\n    content: public int Version { get; }\n    return:\n      type: System.Int32\n      description: The certificate format.\n  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The certificate is unreadable.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate\n  nameWithType: X509Certificate\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicUnexpectedOperationException\n  nameWithType: CryptographicUnexpectedOperationException\n  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2()\n  nameWithType: X509Certificate2.X509Certificate2()\n  fullName: X509Certificate2.X509Certificate2()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(String, String, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.X509Certificate2(String, String, X509KeyStorageFlags)\n  fullName: X509Certificate2.X509Certificate2(String, String, X509KeyStorageFlags)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509KeyStorageFlags\n  nameWithType: X509KeyStorageFlags\n  fullName: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(String, SecureString, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.X509Certificate2(String, SecureString, X509KeyStorageFlags)\n  fullName: X509Certificate2.X509Certificate2(String, SecureString, X509KeyStorageFlags)\n- uid: System.Security.SecureString\n  parent: System.Security\n  isExternal: false\n  name: SecureString\n  nameWithType: SecureString\n  fullName: System.Security.SecureString\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(Byte[], String, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], String, X509KeyStorageFlags)\n  fullName: X509Certificate2.X509Certificate2(Byte[], String, X509KeyStorageFlags)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(String, String)\n  nameWithType: X509Certificate2.X509Certificate2(String, String)\n  fullName: X509Certificate2.X509Certificate2(String, String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(String, SecureString)\n  nameWithType: X509Certificate2.X509Certificate2(String, SecureString)\n  fullName: X509Certificate2.X509Certificate2(String, SecureString)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(SerializationInfo, StreamingContext)\n  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo, StreamingContext)\n  fullName: X509Certificate2.X509Certificate2(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(Byte[], SecureString, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], SecureString, X509KeyStorageFlags)\n  fullName: X509Certificate2.X509Certificate2(Byte[], SecureString, X509KeyStorageFlags)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(Byte[], SecureString)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], SecureString)\n  fullName: X509Certificate2.X509Certificate2(Byte[], SecureString)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(String)\n  nameWithType: X509Certificate2.X509Certificate2(String)\n  fullName: X509Certificate2.X509Certificate2(String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(X509Certificate)\n  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)\n  fullName: X509Certificate2.X509Certificate2(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(IntPtr)\n  nameWithType: X509Certificate2.X509Certificate2(IntPtr)\n  fullName: X509Certificate2.X509Certificate2(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(Byte[])\n  nameWithType: X509Certificate2.X509Certificate2(Byte[])\n  fullName: X509Certificate2.X509Certificate2(Byte[])\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2(Byte[], String)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], String)\n  fullName: X509Certificate2.X509Certificate2(Byte[], String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Archived\n  nameWithType: X509Certificate2.Archived\n  fullName: X509Certificate2.Archived\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Export(X509ContentType, String)\n  nameWithType: X509Certificate2.Export(X509ContentType, String)\n  fullName: X509Certificate2.Export(X509ContentType, String)\n- uid: System.Security.Cryptography.X509Certificates.X509ContentType\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509ContentType\n  nameWithType: X509ContentType\n  fullName: System.Security.Cryptography.X509Certificates.X509ContentType\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Extensions\n  nameWithType: X509Certificate2.Extensions\n  fullName: X509Certificate2.Extensions\n- uid: System.Security.Cryptography.X509Certificates.X509ExtensionCollection\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509ExtensionCollection\n  nameWithType: X509ExtensionCollection\n  fullName: System.Security.Cryptography.X509Certificates.X509ExtensionCollection\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: FriendlyName\n  nameWithType: X509Certificate2.FriendlyName\n  fullName: X509Certificate2.FriendlyName\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: GetCertContentType(String)\n  nameWithType: X509Certificate2.GetCertContentType(String)\n  fullName: X509Certificate2.GetCertContentType(String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: GetCertContentType(Byte[])\n  nameWithType: X509Certificate2.GetCertContentType(Byte[])\n  fullName: X509Certificate2.GetCertContentType(Byte[])\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: GetNameInfo(X509NameType, Boolean)\n  nameWithType: X509Certificate2.GetNameInfo(X509NameType, Boolean)\n  fullName: X509Certificate2.GetNameInfo(X509NameType, Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509NameType\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509NameType\n  nameWithType: X509NameType\n  fullName: System.Security.Cryptography.X509Certificates.X509NameType\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: HasPrivateKey\n  nameWithType: X509Certificate2.HasPrivateKey\n  fullName: X509Certificate2.HasPrivateKey\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Import(Byte[])\n  nameWithType: X509Certificate2.Import(Byte[])\n  fullName: X509Certificate2.Import(Byte[])\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Import(String)\n  nameWithType: X509Certificate2.Import(String)\n  fullName: X509Certificate2.Import(String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Import(Byte[], SecureString, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.Import(Byte[], SecureString, X509KeyStorageFlags)\n  fullName: X509Certificate2.Import(Byte[], SecureString, X509KeyStorageFlags)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Import(Byte[], String, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.Import(Byte[], String, X509KeyStorageFlags)\n  fullName: X509Certificate2.Import(Byte[], String, X509KeyStorageFlags)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Import(String, SecureString, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.Import(String, SecureString, X509KeyStorageFlags)\n  fullName: X509Certificate2.Import(String, SecureString, X509KeyStorageFlags)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Import(String, String, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.Import(String, String, X509KeyStorageFlags)\n  fullName: X509Certificate2.Import(String, String, X509KeyStorageFlags)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: IssuerName\n  nameWithType: X509Certificate2.IssuerName\n  fullName: X509Certificate2.IssuerName\n- uid: System.Security.Cryptography.X509Certificates.X500DistinguishedName\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X500DistinguishedName\n  nameWithType: X500DistinguishedName\n  fullName: System.Security.Cryptography.X509Certificates.X500DistinguishedName\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: NotAfter\n  nameWithType: X509Certificate2.NotAfter\n  fullName: X509Certificate2.NotAfter\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: NotBefore\n  nameWithType: X509Certificate2.NotBefore\n  fullName: X509Certificate2.NotBefore\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: PrivateKey\n  nameWithType: X509Certificate2.PrivateKey\n  fullName: X509Certificate2.PrivateKey\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: PublicKey\n  nameWithType: X509Certificate2.PublicKey\n  fullName: X509Certificate2.PublicKey\n- uid: System.Security.Cryptography.X509Certificates.PublicKey\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: PublicKey\n  nameWithType: PublicKey\n  fullName: System.Security.Cryptography.X509Certificates.PublicKey\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: RawData\n  nameWithType: X509Certificate2.RawData\n  fullName: X509Certificate2.RawData\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Reset()\n  nameWithType: X509Certificate2.Reset()\n  fullName: X509Certificate2.Reset()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: SerialNumber\n  nameWithType: X509Certificate2.SerialNumber\n  fullName: X509Certificate2.SerialNumber\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: X509Certificate2.SignatureAlgorithm\n  fullName: X509Certificate2.SignatureAlgorithm\n- uid: System.Security.Cryptography.Oid\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Oid\n  nameWithType: Oid\n  fullName: System.Security.Cryptography.Oid\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: SubjectName\n  nameWithType: X509Certificate2.SubjectName\n  fullName: X509Certificate2.SubjectName\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Thumbprint\n  nameWithType: X509Certificate2.Thumbprint\n  fullName: X509Certificate2.Thumbprint\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: ToString()\n  nameWithType: X509Certificate2.ToString()\n  fullName: X509Certificate2.ToString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: ToString(Boolean)\n  nameWithType: X509Certificate2.ToString(Boolean)\n  fullName: X509Certificate2.ToString(Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Verify()\n  nameWithType: X509Certificate2.Verify()\n  fullName: X509Certificate2.Verify()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Version\n  nameWithType: X509Certificate2.Version\n  fullName: X509Certificate2.Version\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: X509Certificate2\n  nameWithType: X509Certificate2.X509Certificate2\n  fullName: X509Certificate2.X509Certificate2\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Archived\n  nameWithType: X509Certificate2.Archived\n  fullName: X509Certificate2.Archived\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Export*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Export\n  nameWithType: X509Certificate2.Export\n  fullName: X509Certificate2.Export\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Extensions\n  nameWithType: X509Certificate2.Extensions\n  fullName: X509Certificate2.Extensions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: FriendlyName\n  nameWithType: X509Certificate2.FriendlyName\n  fullName: X509Certificate2.FriendlyName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: GetCertContentType\n  nameWithType: X509Certificate2.GetCertContentType\n  fullName: X509Certificate2.GetCertContentType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: GetNameInfo\n  nameWithType: X509Certificate2.GetNameInfo\n  fullName: X509Certificate2.GetNameInfo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: HasPrivateKey\n  nameWithType: X509Certificate2.HasPrivateKey\n  fullName: X509Certificate2.HasPrivateKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Import\n  nameWithType: X509Certificate2.Import\n  fullName: X509Certificate2.Import\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: IssuerName\n  nameWithType: X509Certificate2.IssuerName\n  fullName: X509Certificate2.IssuerName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: NotAfter\n  nameWithType: X509Certificate2.NotAfter\n  fullName: X509Certificate2.NotAfter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: NotBefore\n  nameWithType: X509Certificate2.NotBefore\n  fullName: X509Certificate2.NotBefore\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: PrivateKey\n  nameWithType: X509Certificate2.PrivateKey\n  fullName: X509Certificate2.PrivateKey\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: PublicKey\n  nameWithType: X509Certificate2.PublicKey\n  fullName: X509Certificate2.PublicKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: RawData\n  nameWithType: X509Certificate2.RawData\n  fullName: X509Certificate2.RawData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Reset\n  nameWithType: X509Certificate2.Reset\n  fullName: X509Certificate2.Reset\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: SerialNumber\n  nameWithType: X509Certificate2.SerialNumber\n  fullName: X509Certificate2.SerialNumber\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: X509Certificate2.SignatureAlgorithm\n  fullName: X509Certificate2.SignatureAlgorithm\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: SubjectName\n  nameWithType: X509Certificate2.SubjectName\n  fullName: X509Certificate2.SubjectName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Thumbprint\n  nameWithType: X509Certificate2.Thumbprint\n  fullName: X509Certificate2.Thumbprint\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: ToString\n  nameWithType: X509Certificate2.ToString\n  fullName: X509Certificate2.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Verify\n  nameWithType: X509Certificate2.Verify\n  fullName: X509Certificate2.Verify\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  isExternal: false\n  name: Version\n  nameWithType: X509Certificate2.Version\n  fullName: X509Certificate2.Version\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: X509Certificate.Equals(Object)\n  fullName: X509Certificate.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: X509Certificate.GetHashCode()\n  fullName: X509Certificate.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: CreateFromCertFile(String)\n  nameWithType: X509Certificate.CreateFromCertFile(String)\n  fullName: X509Certificate.CreateFromCertFile(String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile(System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: CreateFromSignedFile(String)\n  nameWithType: X509Certificate.CreateFromSignedFile(String)\n  fullName: X509Certificate.CreateFromSignedFile(String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: X509Certificate.Dispose(Boolean)\n  fullName: X509Certificate.Dispose(Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Dispose()\n  nameWithType: X509Certificate.Dispose()\n  fullName: X509Certificate.Dispose()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Equals(X509Certificate)\n  nameWithType: X509Certificate.Equals(X509Certificate)\n  fullName: X509Certificate.Equals(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Export(X509ContentType)\n  nameWithType: X509Certificate.Export(X509ContentType)\n  fullName: X509Certificate.Export(X509ContentType)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.Security.SecureString)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Export(X509ContentType, SecureString)\n  nameWithType: X509Certificate.Export(X509ContentType, SecureString)\n  fullName: X509Certificate.Export(X509ContentType, SecureString)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.FormatDate(System.DateTime)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: FormatDate(DateTime)\n  nameWithType: X509Certificate.FormatDate(DateTime)\n  fullName: X509Certificate.FormatDate(DateTime)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetCertHash()\n  nameWithType: X509Certificate.GetCertHash()\n  fullName: X509Certificate.GetCertHash()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetCertHashString()\n  nameWithType: X509Certificate.GetCertHashString()\n  fullName: X509Certificate.GetCertHashString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetEffectiveDateString()\n  nameWithType: X509Certificate.GetEffectiveDateString()\n  fullName: X509Certificate.GetEffectiveDateString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetExpirationDateString()\n  nameWithType: X509Certificate.GetExpirationDateString()\n  fullName: X509Certificate.GetExpirationDateString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetFormat()\n  nameWithType: X509Certificate.GetFormat()\n  fullName: X509Certificate.GetFormat()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetIssuerName()\n  nameWithType: X509Certificate.GetIssuerName()\n  fullName: X509Certificate.GetIssuerName()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetKeyAlgorithm()\n  nameWithType: X509Certificate.GetKeyAlgorithm()\n  fullName: X509Certificate.GetKeyAlgorithm()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetKeyAlgorithmParameters()\n  nameWithType: X509Certificate.GetKeyAlgorithmParameters()\n  fullName: X509Certificate.GetKeyAlgorithmParameters()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetKeyAlgorithmParametersString()\n  nameWithType: X509Certificate.GetKeyAlgorithmParametersString()\n  fullName: X509Certificate.GetKeyAlgorithmParametersString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetName()\n  nameWithType: X509Certificate.GetName()\n  fullName: X509Certificate.GetName()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetPublicKey()\n  nameWithType: X509Certificate.GetPublicKey()\n  fullName: X509Certificate.GetPublicKey()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetPublicKeyString()\n  nameWithType: X509Certificate.GetPublicKeyString()\n  fullName: X509Certificate.GetPublicKeyString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetRawCertData()\n  nameWithType: X509Certificate.GetRawCertData()\n  fullName: X509Certificate.GetRawCertData()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetRawCertDataString()\n  nameWithType: X509Certificate.GetRawCertDataString()\n  fullName: X509Certificate.GetRawCertDataString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetSerialNumber()\n  nameWithType: X509Certificate.GetSerialNumber()\n  fullName: X509Certificate.GetSerialNumber()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetSerialNumberString()\n  nameWithType: X509Certificate.GetSerialNumberString()\n  fullName: X509Certificate.GetSerialNumberString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Handle\n  nameWithType: X509Certificate.Handle\n  fullName: X509Certificate.Handle\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Issuer\n  nameWithType: X509Certificate.Issuer\n  fullName: X509Certificate.Issuer\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Subject\n  nameWithType: X509Certificate.Subject\n  fullName: X509Certificate.Subject\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: X509Certificate.IDeserializationCallback.OnDeserialization(Object)\n  fullName: X509Certificate.IDeserializationCallback.OnDeserialization(Object)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: X509Certificate.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: X509Certificate.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Security.Cryptography.X509Certificates.DSACertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.DSA)\n  parent: System.Security.Cryptography.X509Certificates.DSACertificateExtensions\n  isExternal: false\n  name: CopyWithPrivateKey(X509Certificate2, DSA)\n  nameWithType: DSACertificateExtensions.CopyWithPrivateKey(X509Certificate2, DSA)\n  fullName: DSACertificateExtensions.CopyWithPrivateKey(X509Certificate2, DSA)\n- uid: System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.DSACertificateExtensions\n  isExternal: false\n  name: GetDSAPrivateKey(X509Certificate2)\n  nameWithType: DSACertificateExtensions.GetDSAPrivateKey(X509Certificate2)\n  fullName: DSACertificateExtensions.GetDSAPrivateKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.DSACertificateExtensions\n  isExternal: false\n  name: GetDSAPublicKey(X509Certificate2)\n  nameWithType: DSACertificateExtensions.GetDSAPublicKey(X509Certificate2)\n  fullName: DSACertificateExtensions.GetDSAPublicKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.ECDsa)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: CopyWithPrivateKey(X509Certificate2, ECDsa)\n  nameWithType: ECDsaCertificateExtensions.CopyWithPrivateKey(X509Certificate2, ECDsa)\n  fullName: ECDsaCertificateExtensions.CopyWithPrivateKey(X509Certificate2, ECDsa)\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPrivateKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  fullName: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPublicKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  fullName: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.RSA)\n  parent: System.Security.Cryptography.X509Certificates.RSACertificateExtensions\n  isExternal: false\n  name: CopyWithPrivateKey(X509Certificate2, RSA)\n  nameWithType: RSACertificateExtensions.CopyWithPrivateKey(X509Certificate2, RSA)\n  fullName: RSACertificateExtensions.CopyWithPrivateKey(X509Certificate2, RSA)\n- uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.RSACertificateExtensions\n  isExternal: false\n  name: GetRSAPrivateKey(X509Certificate2)\n  nameWithType: RSACertificateExtensions.GetRSAPrivateKey(X509Certificate2)\n  fullName: RSACertificateExtensions.GetRSAPrivateKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.RSACertificateExtensions\n  isExternal: false\n  name: GetRSAPublicKey(X509Certificate2)\n  nameWithType: RSACertificateExtensions.GetRSAPublicKey(X509Certificate2)\n  fullName: RSACertificateExtensions.GetRSAPublicKey(X509Certificate2)\n"}