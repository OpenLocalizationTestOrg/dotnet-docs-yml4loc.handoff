{"nodes":[{"content":"Converts a sequence of encoded bytes into a set of characters.","nodes":[{"pos":[0,62],"content":"Converts a sequence of encoded bytes into a set of characters.","nodes":[{"content":"Converts a sequence of encoded bytes into a set of characters.","pos":[0,62]}]}],"pos":[1369,1432],"yaml":true},{"content":"To obtain an instance of an implementation of the <xref:System.Text.Decoder> class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of an <xref:System.Text.Encoding> implementation.  \n  \n The <xref:System.Text.Decoder.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Decoder.GetChars%2A> method performs the actual decoding. There are several versions of both of these methods available in the <xref:System.Text.Decoder> class. For more information, see <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>. A <xref:System.Text.Decoder> object maintains state information between successive calls to `GetChars` or <xref:System.Text.Decoder.Convert%2A> methods so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.  \n  \n> [!NOTE]\n>  When the application is done with a stream of data, it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Decoder.Reset%2A> to clear the internal state of the `Decoder` object.  \n  \n## Version Considerations  \n A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.","nodes":[{"pos":[0,213],"content":"To obtain an instance of an implementation of the <xref:System.Text.Decoder> class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of an <xref:System.Text.Encoding> implementation.","nodes":[{"content":"To obtain an instance of an implementation of the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> class, the application should use the <ph id=\"ph2\">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method of an <ph id=\"ph3\">&lt;xref:System.Text.Encoding&gt;</ph> implementation.","pos":[0,213],"source":"To obtain an instance of an implementation of the <xref:System.Text.Decoder> class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of an <xref:System.Text.Encoding> implementation."}]},{"pos":[220,1228],"content":"The <xref:System.Text.Decoder.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Decoder.GetChars%2A> method performs the actual decoding. There are several versions of both of these methods available in the <xref:System.Text.Decoder> class. For more information, see <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>. A <xref:System.Text.Decoder> object maintains state information between successive calls to `GetChars` or <xref:System.Text.Decoder.Convert%2A> methods so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> method performs the actual decoding.","pos":[0,208],"source":"The <xref:System.Text.Decoder.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Decoder.GetChars%2A> method performs the actual decoding."},{"content":"There are several versions of both of these methods available in the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> class.","pos":[209,311],"source":" There are several versions of both of these methods available in the <xref:System.Text.Decoder> class."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName&gt;</ph>.","pos":[312,403],"source":" For more information, see <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> object maintains state information between successive calls to <ph id=\"ph2\">`GetChars`</ph> or <ph id=\"ph3\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> methods so it can correctly decode byte sequences that span blocks.","pos":[404,615],"source":" A <xref:System.Text.Decoder> object maintains state information between successive calls to `GetChars` or <xref:System.Text.Decoder.Convert%2A> methods so it can correctly decode byte sequences that span blocks."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.","pos":[616,762],"source":" The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation."},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.","pos":[763,1008],"source":" Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream."}]},{"pos":[1236,1598],"content":"[!NOTE]\n When the application is done with a stream of data, it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Decoder.Reset%2A> to clear the internal state of the `Decoder` object.","leadings":["","> "],"nodes":[{"content":" When the application is done with a stream of data, it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Decoder.Reset%2A> to clear the internal state of the `Decoder` object.","pos":[8,360],"nodes":[{"content":"When the application is done with a stream of data, it should make sure that the state information is flushed by setting the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> in the appropriate method call.","pos":[1,185],"source":" When the application is done with a stream of data, it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call."},{"content":"If an exception occurs or if the application switches streams, it should call <ph id=\"ph1\">&lt;xref:System.Text.Decoder.Reset%2A&gt;</ph> to clear the internal state of the <ph id=\"ph2\">`Decoder`</ph> object.","pos":[186,352],"source":" If an exception occurs or if the application switches streams, it should call <xref:System.Text.Decoder.Reset%2A> to clear the internal state of the `Decoder` object."}]}]},{"pos":[1607,1629],"content":"Version Considerations","linkify":"Version Considerations","nodes":[{"content":"Version Considerations","pos":[0,22]}]},{"pos":[1633,1899],"content":"A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.","nodes":[{"content":"A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.","pos":[0,266],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> object can be serialized during a conversion operation.","pos":[0,114],"source":"A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation."},{"content":"The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.","pos":[115,266]}]}]}],"pos":[1443,3353],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.Decoder\"></xref> class.","nodes":[{"pos":[0,81],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.Decoder\"></xref> class."}],"pos":[5981,6063],"yaml":true},{"content":"To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of a <xref:System.Text.Encoding> implementation.","nodes":[{"pos":[0,186],"content":"To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of a <xref:System.Text.Encoding> implementation.","nodes":[{"content":"To obtain an instance of an implementation of this class, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method of a <ph id=\"ph2\">&lt;xref:System.Text.Encoding&gt;</ph> implementation.","pos":[0,186],"source":"To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of a <xref:System.Text.Encoding> implementation."}]}],"pos":[6074,6261],"yaml":true,"extradata":"MT"},{"content":"Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.","nodes":[{"pos":[0,104],"content":"Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.","nodes":[{"content":"Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.","pos":[0,104]}]}],"pos":[8825,8930],"yaml":true},{"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \n  \n The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.  \n  \n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.  \n  \n The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer.","nodes":[{"pos":[0,549],"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.","nodes":[{"content":"Remember that the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>.","pos":[0,119],"source":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>."},{"content":"When the application is done with a stream of data, it should set the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> to make sure that the state information is flushed.","pos":[120,269],"source":" When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed."},{"content":"With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.","pos":[270,383]},{"content":"Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.","pos":[384,549]}]},{"pos":[556,1091],"content":"The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","nodes":[{"content":"The <ph id=\"ph1\">`Convert`</ph> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream.","pos":[0,134],"source":"The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream."},{"content":"It stores the output of the decoding operation in a fixed-size buffer.","pos":[135,205]},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.","pos":[206,432],"source":" <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written."},{"content":"Also see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName&gt;</ph> topic for more comments.","pos":[433,535],"source":" Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments."}]},{"pos":[1098,1702],"content":"The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.","nodes":[{"content":"The <ph id=\"ph1\">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.","pos":[0,130],"source":"The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer."},{"content":"This parameter is set to <ph id=\"ph1\">`false`</ph> if the number of bytes specified by the <ph id=\"ph2\">`byteCount`</ph> parameter cannot be converted without exceeding the number of characters specified by the <ph id=\"ph3\">`charCount`</ph> parameter.","pos":[131,328],"source":" This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter."},{"content":"In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id=\"ph1\">`bytes`</ph> parameter by the number of bytes specified by the <ph id=\"ph2\">`bytesUsed`</ph> parameter, then call the <ph id=\"ph3\">`Convert`</ph> method again to process the remaining input.","pos":[329,604],"source":" In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input."}]},{"pos":[1709,1962],"content":"The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer.","nodes":[{"content":"The <ph id=\"ph1\">`completed`</ph> parameter can also be set to <ph id=\"ph2\">`false`</ph>, even though the <ph id=\"ph3\">`bytesUsed`</ph> and <ph id=\"ph4\">`byteCount`</ph> parameters are equal.","pos":[0,119],"source":"The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal."},{"content":"This situation occurs if there is still data in the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> object that has not been stored in the <ph id=\"ph2\">`bytes`</ph> buffer.","pos":[120,253],"source":" This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer."}]}],"pos":[8941,10912],"yaml":true,"extradata":"MT"},{"content":"The address of a buffer that contains the byte sequences to convert.","nodes":[{"pos":[0,68],"content":"The address of a buffer that contains the byte sequences to convert.","nodes":[{"content":"The address of a buffer that contains the byte sequences to convert.","pos":[0,68]}]}],"pos":[11312,11381],"yaml":true},{"content":"The number of bytes in <code>bytes</code> to convert.","nodes":[{"pos":[0,53],"content":"The number of bytes in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of bytes in <code>bytes</code> to convert."}],"pos":[11445,11499],"yaml":true},{"content":"The address of a buffer to store the converted characters.","nodes":[{"pos":[0,58],"content":"The address of a buffer to store the converted characters.","nodes":[{"content":"The address of a buffer to store the converted characters.","pos":[0,58]}]}],"pos":[11559,11618],"yaml":true},{"content":"The maximum number of characters in <code>chars</code> to use in the conversion.","nodes":[{"pos":[0,80],"content":"The maximum number of characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use in the conversion.","source":"The maximum number of characters in <code>chars</code> to use in the conversion."}],"pos":[11682,11763],"yaml":true},{"content":"`true` to indicate no further data is to be converted; otherwise, `false`.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">`true`</ph> to indicate no further data is to be converted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to indicate no further data is to be converted; otherwise, `false`."}],"pos":[11825,11902],"yaml":true},{"content":"When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.","nodes":[{"pos":[0,132],"content":"When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.","pos":[0,132],"nodes":[{"content":"When this method returns, contains the number of bytes that were produced by the conversion.","pos":[0,92]},{"content":"This parameter is passed uninitialized.","pos":[93,132]}]}]}],"pos":[11966,12099],"yaml":true},{"content":"When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"pos":[0,157],"content":"When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the number of characters from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> that were used in the conversion.","pos":[0,117],"source":"When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion."},{"content":"This parameter is passed uninitialized.","pos":[118,157]}]}],"pos":[12163,12321],"yaml":true},{"content":"When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.","nodes":[{"pos":[0,175],"content":"When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains <ph id=\"ph1\">`true`</ph> if all the characters specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">byteCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> were converted; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,135],"source":"When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`."},{"content":"This parameter is passed uninitialized.","pos":[136,175]}]}],"pos":[12387,12563],"yaml":true},{"content":"<code>chars</code> or <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph> (<ph id=\"ph4\">`Nothing`</ph>).","source":"<code>chars</code> or <code>bytes</code> is `null` (`Nothing`)."}],"pos":[12720,12784],"yaml":true},{"content":"<code>charCount</code> or <code>byteCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> or <code>byteCount</code> is less than zero."}],"pos":[12898,12966],"yaml":true},{"content":"The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Decoder.GetCharCount*\"></xref> method.","nodes":[{"pos":[0,211],"content":"The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Decoder.GetCharCount*\"></xref> method.","nodes":[{"content":"The output buffer is too small to contain any of the converted input.","pos":[0,69]},{"content":"The output buffer should be greater than or equal to the size indicated by the <ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.GetCharCount*\"&gt;&lt;/xref&gt;</ph> method.","pos":[70,211],"source":" The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Decoder.GetCharCount*\"></xref> method."}]}],"pos":[13060,13272],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[13390,13679],"yaml":true},{"content":"Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.","nodes":[{"pos":[0,107],"content":"Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.","nodes":[{"content":"Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.","pos":[0,107]}]}],"pos":[15749,15857],"yaml":true},{"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \n  \n The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.  \n  \n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.  \n  \n The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer.","nodes":[{"pos":[0,549],"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.","nodes":[{"content":"Remember that the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>.","pos":[0,119],"source":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>."},{"content":"When the application is done with a stream of data, it should set the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> to make sure that the state information is flushed.","pos":[120,269],"source":" When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed."},{"content":"With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.","pos":[270,383]},{"content":"Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.","pos":[384,549]}]},{"pos":[556,1091],"content":"The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","nodes":[{"content":"The <ph id=\"ph1\">`Convert`</ph> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream.","pos":[0,134],"source":"The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream."},{"content":"It stores the output of the decoding operation in a fixed-size buffer.","pos":[135,205]},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.","pos":[206,432],"source":" <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written."},{"content":"Also see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName&gt;</ph> topic for more comments.","pos":[433,535],"source":" Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments."}]},{"pos":[1098,1702],"content":"The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.","nodes":[{"content":"The <ph id=\"ph1\">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.","pos":[0,130],"source":"The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer."},{"content":"This parameter is set to <ph id=\"ph1\">`false`</ph> if the number of bytes specified by the <ph id=\"ph2\">`byteCount`</ph> parameter cannot be converted without exceeding the number of characters specified by the <ph id=\"ph3\">`charCount`</ph> parameter.","pos":[131,328],"source":" This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter."},{"content":"In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id=\"ph1\">`bytes`</ph> parameter by the number of bytes specified by the <ph id=\"ph2\">`bytesUsed`</ph> parameter, then call the <ph id=\"ph3\">`Convert`</ph> method again to process the remaining input.","pos":[329,604],"source":" In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input."}]},{"pos":[1709,1962],"content":"The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer.","nodes":[{"content":"The <ph id=\"ph1\">`completed`</ph> parameter can also be set to <ph id=\"ph2\">`false`</ph>, even though the <ph id=\"ph3\">`bytesUsed`</ph> and <ph id=\"ph4\">`byteCount`</ph> parameters are equal.","pos":[0,119],"source":"The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal."},{"content":"This situation occurs if there is still data in the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> object that has not been stored in the <ph id=\"ph2\">`bytes`</ph> buffer.","pos":[120,253],"source":" This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer."}]}],"pos":[15868,17839],"yaml":true,"extradata":"MT"},{"content":"A byte array to convert.","nodes":[{"pos":[0,24],"content":"A byte array to convert.","nodes":[{"content":"A byte array to convert.","pos":[0,24]}]}],"pos":[18747,18772],"yaml":true},{"content":"The first element of <code>bytes</code> to convert.","nodes":[{"pos":[0,51],"content":"The first element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The first element of <code>bytes</code> to convert."}],"pos":[18836,18888],"yaml":true},{"content":"The number of elements of <code>bytes</code> to convert.","nodes":[{"pos":[0,56],"content":"The number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of elements of <code>bytes</code> to convert."}],"pos":[18952,19009],"yaml":true},{"content":"An array to store the converted characters.","nodes":[{"pos":[0,43],"content":"An array to store the converted characters.","nodes":[{"content":"An array to store the converted characters.","pos":[0,43]}]}],"pos":[19070,19114],"yaml":true},{"content":"The first element of <code>chars</code> in which data is stored.","nodes":[{"pos":[0,64],"content":"The first element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which data is stored.","source":"The first element of <code>chars</code> in which data is stored."}],"pos":[19178,19243],"yaml":true},{"content":"The maximum number of elements of <code>chars</code> to use in the conversion.","nodes":[{"pos":[0,78],"content":"The maximum number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use in the conversion.","source":"The maximum number of elements of <code>chars</code> to use in the conversion."}],"pos":[19307,19386],"yaml":true},{"content":"`true` to indicate that no further data is to be converted; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> to indicate that no further data is to be converted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to indicate that no further data is to be converted; otherwise, `false`."}],"pos":[19448,19530],"yaml":true},{"content":"When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"pos":[0,128],"content":"When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.","pos":[0,128],"nodes":[{"content":"When this method returns, contains the number of bytes that were used in the conversion.","pos":[0,88]},{"content":"This parameter is passed uninitialized.","pos":[89,128]}]}]}],"pos":[19594,19723],"yaml":true},{"content":"When this method returns, contains the number of characters from <code>chars</code> that were produced by the conversion. This parameter is passed uninitialized.","nodes":[{"pos":[0,161],"content":"When this method returns, contains the number of characters from <code>chars</code> that were produced by the conversion. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the number of characters from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> that were produced by the conversion.","pos":[0,121],"source":"When this method returns, contains the number of characters from <code>chars</code> that were produced by the conversion."},{"content":"This parameter is passed uninitialized.","pos":[122,161]}]}],"pos":[19787,19949],"yaml":true},{"content":"When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.","nodes":[{"pos":[0,175],"content":"When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains <ph id=\"ph1\">`true`</ph> if all the characters specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">byteCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> were converted; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,135],"source":"When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`."},{"content":"This parameter is passed uninitialized.","pos":[136,175]}]}],"pos":[20015,20191],"yaml":true},{"content":"<code>chars</code> or <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph> (<ph id=\"ph4\">`Nothing`</ph>).","source":"<code>chars</code> or <code>bytes</code> is `null` (`Nothing`)."}],"pos":[20348,20412],"yaml":true},{"content":"<code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero.  \n  \n -or-  \n  \n The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>.  \n  \n -or-  \n  \n The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;byteIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,228],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> - </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">charIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">charCount</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>."},{"pos":[235,239],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[246,340],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> - </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">byteIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">byteCount</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>."}],"pos":[20526,20877],"yaml":true},{"content":"The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Decoder.GetCharCount*\"></xref> method.","nodes":[{"pos":[0,211],"content":"The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Decoder.GetCharCount*\"></xref> method.","nodes":[{"content":"The output buffer is too small to contain any of the converted input.","pos":[0,69]},{"content":"The output buffer should be greater than or equal to the size indicated by the <ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.GetCharCount*\"&gt;&lt;/xref&gt;</ph> method.","pos":[70,211],"source":" The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Decoder.GetCharCount*\"></xref> method."}]}],"pos":[20971,21183],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[21301,21590],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Text.DecoderFallback\"></xref> object for the current <xref href=\"System.Text.Decoder\"></xref> object.","nodes":[{"pos":[0,135],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Text.DecoderFallback\"&gt;&lt;/xref&gt;</ph> object for the current <ph id=\"ph2\">&lt;xref href=\"System.Text.Decoder\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets or sets a <xref href=\"System.Text.DecoderFallback\"></xref> object for the current <xref href=\"System.Text.Decoder\"></xref> object."}],"pos":[23049,23185],"yaml":true},{"content":"The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.","nodes":[{"pos":[0,155],"content":"The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallback&gt;</ph> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.","pos":[0,155],"source":"The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character."}]}],"pos":[23196,23352],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.DecoderFallback\"></xref> object.","nodes":[{"pos":[0,58],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.DecoderFallback\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.Text.DecoderFallback\"></xref> object."}],"pos":[23571,23630],"yaml":true},{"content":"The value in a set operation is `null` (`Nothing`).","nodes":[{"pos":[0,51],"content":"The value in a set operation is <ph id=\"ph1\">`null`</ph> (<ph id=\"ph2\">`Nothing`</ph>).","source":"The value in a set operation is `null` (`Nothing`)."}],"pos":[23788,23840],"yaml":true},{"content":"A new value cannot be assigned in a set operation because the current <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object contains data that has not been decoded yet.","nodes":[{"pos":[0,176],"content":"A new value cannot be assigned in a set operation because the current <ph id=\"ph1\">&lt;xref href=\"System.Text.DecoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> object contains data that has not been decoded yet.","source":"A new value cannot be assigned in a set operation because the current <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object contains data that has not been decoded yet."}],"pos":[23934,24111],"yaml":true},{"content":"Gets the <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object associated with the current <xref href=\"System.Text.Decoder\"></xref> object.","nodes":[{"pos":[0,147],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Text.DecoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> object associated with the current <ph id=\"ph2\">&lt;xref href=\"System.Text.Decoder\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object associated with the current <xref href=\"System.Text.Decoder\"></xref> object."}],"pos":[25486,25634],"yaml":true},{"content":"The <xref:System.Text.DecoderFallbackBuffer> object represents data used by the <xref:System.Text.DecoderFallback> object. The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.","nodes":[{"pos":[0,278],"content":"The <xref:System.Text.DecoderFallbackBuffer> object represents data used by the <xref:System.Text.DecoderFallback> object. The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.","nodes":[{"content":"The <xref:System.Text.DecoderFallbackBuffer> object represents data used by the <xref:System.Text.DecoderFallback> object. The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.","pos":[0,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> object represents data used by the <ph id=\"ph2\">&lt;xref:System.Text.DecoderFallback&gt;</ph> object.","pos":[0,122],"source":"The <xref:System.Text.DecoderFallbackBuffer> object represents data used by the <xref:System.Text.DecoderFallback> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallback&gt;</ph> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.","pos":[123,278],"source":" The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character."}]}]}],"pos":[25645,25924],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object.","nodes":[{"pos":[0,64],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.DecoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object."}],"pos":[26156,26221],"yaml":true},{"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.","nodes":[{"pos":[0,248],"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.","nodes":[{"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.","pos":[0,248],"nodes":[{"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","pos":[0,152]},{"content":"A parameter indicates whether to clear the internal state of the decoder after the calculation.","pos":[153,248]}]}]}],"pos":[27817,28066],"yaml":true},{"content":"This method does not affect the state of the decoder.  \n  \n To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.","nodes":[{"pos":[0,53],"content":"This method does not affect the state of the decoder.","nodes":[{"content":"This method does not affect the state of the decoder.","pos":[0,53]}]},{"pos":[60,252],"content":"To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.","nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> requires to store the resulting characters, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.","pos":[0,192],"source":"To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>."}]},{"pos":[259,645],"content":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetChars`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.","pos":[0,183],"source":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetCharCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.","pos":[184,386],"source":" The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation."}]}],"pos":[28077,28729],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first byte to decode.","nodes":[{"pos":[0,38],"content":"A pointer to the first byte to decode.","nodes":[{"content":"A pointer to the first byte to decode.","pos":[0,38]}]}],"pos":[29043,29082],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[29142,29173],"yaml":true},{"content":"`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`."}],"pos":[29235,29342],"yaml":true},{"content":"The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.","nodes":[{"pos":[0,115],"content":"The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.","nodes":[{"content":"The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.","pos":[0,115]}]}],"pos":[29398,29514],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing` in Visual Basic .NET).","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph> in Visual Basic .NET).","source":"<code>bytes</code> is `null` (`Nothing` in Visual Basic .NET)."}],"pos":[29676,29739],"yaml":true},{"content":"<code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[29853,29891],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[30009,30298],"yaml":true},{"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","nodes":[{"pos":[0,143],"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","nodes":[{"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","pos":[0,143]}]}],"pos":[31755,31899],"yaml":true},{"content":"This method does not affect the state of the decoder.  \n  \n To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.","nodes":[{"pos":[0,53],"content":"This method does not affect the state of the decoder.","nodes":[{"content":"This method does not affect the state of the decoder.","pos":[0,53]}]},{"pos":[60,252],"content":"To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.","nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> requires to store the resulting characters, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.","pos":[0,192],"source":"To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>."}]},{"pos":[259,645],"content":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetChars`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.","pos":[0,183],"source":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetCharCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.","pos":[184,386],"source":" The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation."}]}],"pos":[31910,32562],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[33534,33593],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[33653,33692],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[33752,33783],"yaml":true},{"content":"The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.","nodes":[{"pos":[0,115],"content":"The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.","nodes":[{"content":"The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.","pos":[0,115]}]}],"pos":[33839,33955],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[34117,34159],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."}],"pos":[34273,34449],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[34567,34856],"yaml":true},{"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.","nodes":[{"pos":[0,239],"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.","nodes":[{"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.","pos":[0,239],"nodes":[{"content":"When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","pos":[0,143]},{"content":"A parameter indicates whether to clear the internal state of the decoder after the calculation.","pos":[144,239]}]}]}],"pos":[36523,36763],"yaml":true},{"content":"This method does not affect the state of the decoder.  \n  \n To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.","nodes":[{"pos":[0,53],"content":"This method does not affect the state of the decoder.","nodes":[{"content":"This method does not affect the state of the decoder.","pos":[0,53]}]},{"pos":[60,252],"content":"To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.","nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> requires to store the resulting characters, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.","pos":[0,192],"source":"To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>."}]},{"pos":[259,645],"content":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetChars`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.","pos":[0,183],"source":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetCharCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.","pos":[184,386],"source":" The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation."}]}],"pos":[36774,37426],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[37675,37734],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[37794,37833],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[37893,37924],"yaml":true},{"content":"`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`."}],"pos":[37986,38093],"yaml":true},{"content":"The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.","nodes":[{"pos":[0,115],"content":"The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.","nodes":[{"content":"The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.","pos":[0,115]}]}],"pos":[38149,38265],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[38427,38469],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."}],"pos":[38583,38759],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[38877,39166],"yaml":true},{"content":"When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.","nodes":[{"pos":[0,320],"content":"When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.","nodes":[{"content":"When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.","pos":[0,320],"nodes":[{"content":"When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer.","pos":[0,225]},{"content":"A parameter indicates whether to clear the internal state of the decoder after the conversion.","pos":[226,320]}]}]}],"pos":[40913,41234],"yaml":true},{"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  \n  \n To calculate the exact buffer size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","nodes":[{"pos":[0,384],"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.","nodes":[{"content":"Remember that the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>.","pos":[0,120],"source":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>."},{"content":"When the application is done with a stream of data, it should set the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> to make sure that the state information is flushed.","pos":[121,270],"source":" When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed."},{"content":"With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.","pos":[271,384]}]},{"pos":[391,556],"content":"To calculate the exact buffer size that <ph id=\"ph1\">`GetChars`</ph> requires to store the resulting characters, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.","source":"To calculate the exact buffer size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>."},{"pos":[563,949],"content":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetChars`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.","pos":[0,183],"source":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetCharCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.","pos":[184,386],"source":" The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation."}]},{"pos":[956,1418],"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","pos":[0,462],"nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <ph id=\"ph1\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> method.","pos":[0,132],"source":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.","pos":[133,359],"source":" <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written."},{"content":"Also see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName&gt;</ph> topic for more comments.","pos":[360,462],"source":" Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments."}]}]}],"pos":[41245,42672],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first byte to decode.","nodes":[{"pos":[0,38],"content":"A pointer to the first byte to decode.","nodes":[{"content":"A pointer to the first byte to decode.","pos":[0,38]}]}],"pos":[43014,43053],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[43117,43148],"yaml":true},{"content":"A pointer to the location at which to start writing the resulting set of characters.","nodes":[{"pos":[0,84],"content":"A pointer to the location at which to start writing the resulting set of characters.","nodes":[{"content":"A pointer to the location at which to start writing the resulting set of characters.","pos":[0,84]}]}],"pos":[43208,43293],"yaml":true},{"content":"The maximum number of characters to write.","nodes":[{"pos":[0,42],"content":"The maximum number of characters to write.","nodes":[{"content":"The maximum number of characters to write.","pos":[0,42]}]}],"pos":[43357,43400],"yaml":true},{"content":"`true` to clear the internal state of the decoder after the conversion; otherwise, `false`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">`true`</ph> to clear the internal state of the decoder after the conversion; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to clear the internal state of the decoder after the conversion; otherwise, `false`."}],"pos":[43462,43556],"yaml":true},{"content":"The actual number of characters written at the location indicated by the <code>chars</code> parameter.","nodes":[{"pos":[0,102],"content":"The actual number of characters written at the location indicated by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The actual number of characters written at the location indicated by the <code>chars</code> parameter."}],"pos":[43612,43715],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."}],"pos":[43873,43980],"yaml":true},{"content":"<code>byteCount</code> or <code>charCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.","source":"<code>byteCount</code> or <code>charCount</code> is less than zero."}],"pos":[44094,44162],"yaml":true},{"content":"<code>charCount</code> is less than the resulting number of characters.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than the resulting number of characters.","source":"<code>charCount</code> is less than the resulting number of characters."}],"pos":[44256,44328],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[44446,44735],"yaml":true},{"content":"When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.","nodes":[{"pos":[0,166],"content":"When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.","nodes":[{"content":"When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.","pos":[0,166]}]}],"pos":[46294,46461],"yaml":true},{"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  \n  \n To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","nodes":[{"pos":[0,384],"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.","nodes":[{"content":"Remember that the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>.","pos":[0,120],"source":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>."},{"content":"When the application is done with a stream of data, it should set the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> to make sure that the state information is flushed.","pos":[121,270],"source":" When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed."},{"content":"With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.","pos":[271,384]}]},{"pos":[391,555],"content":"To calculate the exact array size that <ph id=\"ph1\">`GetChars`</ph> requires to store the resulting characters, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.","source":"To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>."},{"pos":[562,948],"content":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetChars`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.","pos":[0,183],"source":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetCharCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.","pos":[184,386],"source":" The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation."}]},{"pos":[955,1417],"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","pos":[0,462],"nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <ph id=\"ph1\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> method.","pos":[0,132],"source":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.","pos":[133,359],"source":" <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written."},{"content":"Also see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName&gt;</ph> topic for more comments.","pos":[360,462],"source":" Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments."}]}]}],"pos":[46472,47898],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[49135,49194],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[49258,49297],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[49361,49392],"yaml":true},{"content":"The character array to contain the resulting set of characters.","nodes":[{"pos":[0,63],"content":"The character array to contain the resulting set of characters.","nodes":[{"content":"The character array to contain the resulting set of characters.","pos":[0,63]}]}],"pos":[49453,49517],"yaml":true},{"content":"The index at which to start writing the resulting set of characters.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting set of characters.","nodes":[{"content":"The index at which to start writing the resulting set of characters.","pos":[0,68]}]}],"pos":[49581,49650],"yaml":true},{"content":"The actual number of characters written into <code>chars</code>.","nodes":[{"pos":[0,64],"content":"The actual number of characters written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of characters written into <code>chars</code>."}],"pos":[49706,49771],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."}],"pos":[49929,50036],"yaml":true},{"content":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;byteindex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> is not a valid index in <code>chars</code>."}],"pos":[50150,50456],"yaml":true},{"content":"<code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;charIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting characters.","source":"<code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters."}],"pos":[50550,50692],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[50810,51099],"yaml":true},{"content":"When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.","nodes":[{"pos":[0,261],"content":"When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.","nodes":[{"content":"When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.","pos":[0,261],"nodes":[{"content":"When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.","pos":[0,166]},{"content":"A parameter indicates whether to clear the internal state of the decoder after the conversion.","pos":[167,261]}]}]}],"pos":[52868,53130],"yaml":true},{"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  \n  \n To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \n  \n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","nodes":[{"pos":[0,384],"content":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.","nodes":[{"content":"Remember that the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>.","pos":[0,120],"source":"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>."},{"content":"When the application is done with a stream of data, it should set the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> to make sure that the state information is flushed.","pos":[121,270],"source":" When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed."},{"content":"With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.","pos":[271,384]}]},{"pos":[391,555],"content":"To calculate the exact array size that <ph id=\"ph1\">`GetChars`</ph> requires to store the resulting characters, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.","source":"To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>."},{"pos":[562,948],"content":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetChars`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.","pos":[0,183],"source":"If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetCharCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.","pos":[184,386],"source":" The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation."}]},{"pos":[955,1417],"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.","pos":[0,462],"nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <ph id=\"ph1\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> method.","pos":[0,132],"source":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.","pos":[133,359],"source":" <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written."},{"content":"Also see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName&gt;</ph> topic for more comments.","pos":[360,462],"source":" Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments."}]}]}],"pos":[53141,54567],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[54782,54841],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[54905,54944],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[55008,55039],"yaml":true},{"content":"The character array to contain the resulting set of characters.","nodes":[{"pos":[0,63],"content":"The character array to contain the resulting set of characters.","nodes":[{"content":"The character array to contain the resulting set of characters.","pos":[0,63]}]}],"pos":[55100,55164],"yaml":true},{"content":"The index at which to start writing the resulting set of characters.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting set of characters.","nodes":[{"content":"The index at which to start writing the resulting set of characters.","pos":[0,68]}]}],"pos":[55228,55297],"yaml":true},{"content":"`true` to clear the internal state of the decoder after the conversion; otherwise, `false`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">`true`</ph> to clear the internal state of the decoder after the conversion; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to clear the internal state of the decoder after the conversion; otherwise, `false`."}],"pos":[55359,55453],"yaml":true},{"content":"The actual number of characters written into the <code>chars</code> parameter.","nodes":[{"pos":[0,78],"content":"The actual number of characters written into the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The actual number of characters written into the <code>chars</code> parameter."}],"pos":[55509,55588],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."}],"pos":[55746,55853],"yaml":true},{"content":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;byteindex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> is not a valid index in <code>chars</code>."}],"pos":[55967,56273],"yaml":true},{"content":"<code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;charIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting characters.","source":"<code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters."}],"pos":[56367,56509],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Decoder.Fallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[56627,56916],"yaml":true},{"content":"When overridden in a derived class, sets the decoder back to its initial state.","nodes":[{"pos":[0,79],"content":"When overridden in a derived class, sets the decoder back to its initial state.","nodes":[{"content":"When overridden in a derived class, sets the decoder back to its initial state.","pos":[0,79]}]}],"pos":[58286,58366],"yaml":true},{"content":"This method clears the internal state of the <xref:System.Text.Decoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Decoder.GetChars%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing bytes at the end of the previous data block.  \n  \n Your application should call the <xref:System.Text.Decoder.Reset%2A> method if it wants to reuse the same decoder even after an exception is thrown by <xref:System.Text.Decoder.GetChars%2A>, <xref:System.Text.Decoder.Convert%2A>, or <xref:System.Text.Decoder.GetCharCount%2A>, or if the decoder switches streams and begins to decode another stream.","nodes":[{"pos":[0,298],"content":"This method clears the internal state of the <xref:System.Text.Decoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Decoder.GetChars%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing bytes at the end of the previous data block.","nodes":[{"content":"This method clears the internal state of the <xref:System.Text.Decoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Decoder.GetChars%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing bytes at the end of the previous data block.","pos":[0,298],"nodes":[{"content":"This method clears the internal state of the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> object.","pos":[0,79],"source":"This method clears the internal state of the <xref:System.Text.Decoder> object."},{"content":"The method clears any state information preserved from a previous call to <ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, including trailing bytes at the end of the previous data block.","pos":[80,298],"source":" The method clears any state information preserved from a previous call to <xref:System.Text.Decoder.GetChars%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing bytes at the end of the previous data block."}]}]},{"pos":[305,653],"content":"Your application should call the <xref:System.Text.Decoder.Reset%2A> method if it wants to reuse the same decoder even after an exception is thrown by <xref:System.Text.Decoder.GetChars%2A>, <xref:System.Text.Decoder.Convert%2A>, or <xref:System.Text.Decoder.GetCharCount%2A>, or if the decoder switches streams and begins to decode another stream.","nodes":[{"content":"Your application should call the <ph id=\"ph1\">&lt;xref:System.Text.Decoder.Reset%2A&gt;</ph> method if it wants to reuse the same decoder even after an exception is thrown by <ph id=\"ph2\">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>, or if the decoder switches streams and begins to decode another stream.","pos":[0,348],"source":"Your application should call the <xref:System.Text.Decoder.Reset%2A> method if it wants to reuse the same decoder even after an exception is thrown by <xref:System.Text.Decoder.GetChars%2A>, <xref:System.Text.Decoder.Convert%2A>, or <xref:System.Text.Decoder.GetCharCount%2A>, or if the decoder switches streams and begins to decode another stream."}]}],"pos":[58377,59035],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.Decoder\n  commentId: T:System.Text.Decoder\n  id: Decoder\n  children:\n  - System.Text.Decoder.#ctor\n  - System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Decoder.Fallback\n  - System.Text.Decoder.FallbackBuffer\n  - System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)\n  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  - System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\n  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  - System.Text.Decoder.Reset\n  langs:\n  - csharp\n  name: Decoder\n  nameWithType: Decoder\n  fullName: System.Text.Decoder\n  type: Class\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Converts a sequence of encoded bytes into a set of characters.\n  remarks: \"To obtain an instance of an implementation of the <xref:System.Text.Decoder> class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of an <xref:System.Text.Encoding> implementation.  \\n  \\n The <xref:System.Text.Decoder.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Decoder.GetChars%2A> method performs the actual decoding. There are several versions of both of these methods available in the <xref:System.Text.Decoder> class. For more information, see <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>. A <xref:System.Text.Decoder> object maintains state information between successive calls to `GetChars` or <xref:System.Text.Decoder.Convert%2A> methods so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.  \\n  \\n> [!NOTE]\\n>  When the application is done with a stream of data, it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Decoder.Reset%2A> to clear the internal state of the `Decoder` object.  \\n  \\n## Version Considerations  \\n A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.\"\n  example:\n  - \"The following example demonstrates the use of a <xref:System.Text.Decoder> to convert two different byte arrays into a character array. One of the character's bytes spans the arrays. This is similar to what a <xref:System.IO.StreamReader> object does internally when reading a stream.  \\n  \\n [!code-cpp[Classic Decoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Decoder Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Decoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Decoder Example/CS/source.cs#1)]\\n [!code-vb[Classic Decoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Decoder Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Decoder\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.#ctor\n  commentId: M:System.Text.Decoder.#ctor\n  id: '#ctor'\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Decoder()\n  nameWithType: Decoder.Decoder()\n  fullName: Decoder.Decoder()\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.Decoder\"></xref> class.\n  remarks: To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of a <xref:System.Text.Encoding> implementation.\n  example:\n  - \"The following example demonstrates two techniques for initializing a new <xref:System.Text.Decoder> instance.  \\n  \\n [!code-cpp[System.Text.Decoder.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/CPP/ctor.cpp#1)]\\n [!code-csharp[System.Text.Decoder.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/CS/ctor.cs#1)]\\n [!code-vb[System.Text.Decoder.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/VB/ctor.vb#1)]\"\n  syntax:\n    content: protected Decoder ();\n    parameters: []\n  overload: System.Text.Decoder.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  commentId: M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)\n  nameWithType: Decoder.Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)\n  fullName: Decoder.Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.\n  remarks: \"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \\n  \\n The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.  \\n  \\n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.  \\n  \\n The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public virtual void Convert (byte* bytes, int byteCount, char* chars, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: The address of a buffer that contains the byte sequences to convert.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes in <code>bytes</code> to convert.\n    - id: chars\n      type: System.Char*\n      description: The address of a buffer to store the converted characters.\n    - id: charCount\n      type: System.Int32\n      description: The maximum number of characters in <code>chars</code> to use in the conversion.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to indicate no further data is to be converted; otherwise, `false`.'\n    - id: bytesUsed\n      type: System.Int32\n      description: When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.\n    - id: charsUsed\n      type: System.Int32\n      description: When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.\n    - id: completed\n      type: System.Boolean\n      description: When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.\n  overload: System.Text.Decoder.Convert*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> or <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>charCount</code> or <code>byteCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Decoder.GetCharCount*\"></xref> method.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Decoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  commentId: M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  nameWithType: Decoder.Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  fullName: Decoder.Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.\n  remarks: \"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \\n  \\n The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.  \\n  \\n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.  \\n  \\n The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer.\"\n  example:\n  - \"The following code example uses the <xref:System.Text.Encoder.Convert%2A> method to convert a file of UTF-16 characters to UTF-8. It then uses the <xref:System.Text.Decoder.Convert%2A> method to convert the UTF-8 characters back to UTF-16 characters.  \\n  \\n [!code-csharp[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/cs/edCvt.cs#1)]\\n [!code-vb[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/vb/edCvt.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual void Convert (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: A byte array to convert.\n    - id: byteIndex\n      type: System.Int32\n      description: The first element of <code>bytes</code> to convert.\n    - id: byteCount\n      type: System.Int32\n      description: The number of elements of <code>bytes</code> to convert.\n    - id: chars\n      type: System.Char[]\n      description: An array to store the converted characters.\n    - id: charIndex\n      type: System.Int32\n      description: The first element of <code>chars</code> in which data is stored.\n    - id: charCount\n      type: System.Int32\n      description: The maximum number of elements of <code>chars</code> to use in the conversion.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to indicate that no further data is to be converted; otherwise, `false`.'\n    - id: bytesUsed\n      type: System.Int32\n      description: When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.\n    - id: charsUsed\n      type: System.Int32\n      description: When this method returns, contains the number of characters from <code>chars</code> that were produced by the conversion. This parameter is passed uninitialized.\n    - id: completed\n      type: System.Boolean\n      description: When this method returns, contains `true` if all the characters specified by <code>byteCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.\n  overload: System.Text.Decoder.Convert*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> or <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>.  \\n  \\n -or-  \\n  \\n The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Decoder.GetCharCount*\"></xref> method.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Decoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.Fallback\n  commentId: P:System.Text.Decoder.Fallback\n  id: Fallback\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Fallback\n  nameWithType: Decoder.Fallback\n  fullName: Decoder.Fallback\n  type: Property\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Gets or sets a <xref href=\"System.Text.DecoderFallback\"></xref> object for the current <xref href=\"System.Text.Decoder\"></xref> object.\n  remarks: The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Text.DecoderFallback Fallback { get; set; }\n    return:\n      type: System.Text.DecoderFallback\n      description: A <xref href=\"System.Text.DecoderFallback\"></xref> object.\n  overload: System.Text.Decoder.Fallback*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The value in a set operation is `null` (`Nothing`).\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A new value cannot be assigned in a set operation because the current <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object contains data that has not been decoded yet.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.FallbackBuffer\n  commentId: P:System.Text.Decoder.FallbackBuffer\n  id: FallbackBuffer\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: FallbackBuffer\n  nameWithType: Decoder.FallbackBuffer\n  fullName: Decoder.FallbackBuffer\n  type: Property\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Gets the <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object associated with the current <xref href=\"System.Text.Decoder\"></xref> object.\n  remarks: The <xref:System.Text.DecoderFallbackBuffer> object represents data used by the <xref:System.Text.DecoderFallback> object. The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Text.DecoderFallbackBuffer FallbackBuffer { get; }\n    return:\n      type: System.Text.DecoderFallbackBuffer\n      description: A <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object.\n  overload: System.Text.Decoder.FallbackBuffer*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)\n  commentId: M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)\n  id: GetCharCount(System.Byte*,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetCharCount(Byte*, Int32, Boolean)\n  nameWithType: Decoder.GetCharCount(Byte*, Int32, Boolean)\n  fullName: Decoder.GetCharCount(Byte*, Int32, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.\n  remarks: \"This method does not affect the state of the decoder.  \\n  \\n To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \\n  \\n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public virtual int GetCharCount (byte* bytes, int count, bool flush);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.\n  overload: System.Text.Decoder.GetCharCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null` (`Nothing` in Visual Basic .NET).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> is less than zero.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Decoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetCharCount(Byte[], Int32, Int32)\n  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32)\n  fullName: Decoder.GetCharCount(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.\n  remarks: \"This method does not affect the state of the decoder.  \\n  \\n To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \\n  \\n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.Decoder.GetCharCount%2A> method to calculate the number of characters required to decode the specified range of bytes in the array.  \\n  \\n [!code-cpp[System.Text.Decoder.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]\\n [!code-csharp[System.Text.Decoder.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]\\n [!code-vb[System.Text.Decoder.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]\"\n  syntax:\n    content: public abstract int GetCharCount (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: index\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.\n  overload: System.Text.Decoder.GetCharCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Decoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetCharCount(Byte[], Int32, Int32, Boolean)\n  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32, Boolean)\n  fullName: Decoder.GetCharCount(Byte[], Int32, Int32, Boolean)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.\n  remarks: \"This method does not affect the state of the decoder.  \\n  \\n To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \\n  \\n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual int GetCharCount (byte[] bytes, int index, int count, bool flush);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: index\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.\n  overload: System.Text.Decoder.GetCharCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Decoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\n  commentId: M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetChars(Byte*, Int32, Char*, Int32, Boolean)\n  nameWithType: Decoder.GetChars(Byte*, Int32, Char*, Int32, Boolean)\n  fullName: Decoder.GetChars(Byte*, Int32, Char*, Int32, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.\n  remarks: \"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  \\n  \\n To calculate the exact buffer size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \\n  \\n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.  \\n  \\n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount, bool flush);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: chars\n      type: System.Char*\n      description: A pointer to the location at which to start writing the resulting set of characters.\n    - id: charCount\n      type: System.Int32\n      description: The maximum number of characters to write.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to clear the internal state of the decoder after the conversion; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: The actual number of characters written at the location indicated by the <code>chars</code> parameter.\n  overload: System.Text.Decoder.GetChars*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>bytes</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>chars</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>byteCount</code> or <code>charCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>charCount</code> is less than the resulting number of characters.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Decoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.\n  remarks: \"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  \\n  \\n To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \\n  \\n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.  \\n  \\n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.\"\n  example:\n  - \"The following example demonstrates how to decode a range of elements from a byte array and store them in a Unicode character array. The <xref:System.Text.Decoder.GetCharCount%2A> method is used to calculate the number of characters needed to store the decoded elements in the array `bytes`. The <xref:System.Text.Decoder.GetChars%2A> method decodes the specified elements in the byte array and stores them in the new character array.  \\n  \\n [!code-cpp[System.Text.Decoder.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]\\n [!code-csharp[System.Text.Decoder.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]\\n [!code-vb[System.Text.Decoder.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]\"\n  syntax:\n    content: public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: byteIndex\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: chars\n      type: System.Char[]\n      description: The character array to contain the resulting set of characters.\n    - id: charIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting set of characters.\n    return:\n      type: System.Int32\n      description: The actual number of characters written into <code>chars</code>.\n  overload: System.Text.Decoder.GetChars*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>bytes</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>chars</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> is not a valid index in <code>chars</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Decoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)\n  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)\n  fullName: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.\n  remarks: \"Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  \\n  \\n To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.  \\n  \\n If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.  \\n  \\n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method. <xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.\"\n  syntax:\n    content: public virtual int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: byteIndex\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: chars\n      type: System.Char[]\n      description: The character array to contain the resulting set of characters.\n    - id: charIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting set of characters.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to clear the internal state of the decoder after the conversion; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: The actual number of characters written into the <code>chars</code> parameter.\n  overload: System.Text.Decoder.GetChars*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>bytes</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>chars</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> is not a valid index in <code>chars</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Decoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Decoder.Reset\n  commentId: M:System.Text.Decoder.Reset\n  id: Reset\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: Decoder.Reset()\n  fullName: Decoder.Reset()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, sets the decoder back to its initial state.\n  remarks: \"This method clears the internal state of the <xref:System.Text.Decoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Decoder.GetChars%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing bytes at the end of the previous data block.  \\n  \\n Your application should call the <xref:System.Text.Decoder.Reset%2A> method if it wants to reuse the same decoder even after an exception is thrown by <xref:System.Text.Decoder.GetChars%2A>, <xref:System.Text.Decoder.Convert%2A>, or <xref:System.Text.Decoder.GetCharCount%2A>, or if the decoder switches streams and begins to decode another stream.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual void Reset ();\n    parameters: []\n  overload: System.Text.Decoder.Reset*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Text.DecoderFallbackException\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n- uid: System.Text.Decoder.#ctor\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Decoder()\n  nameWithType: Decoder.Decoder()\n  fullName: Decoder.Decoder()\n- uid: System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)\n  nameWithType: Decoder.Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)\n  fullName: Decoder.Convert(Byte*, Int32, Char*, Int32, Boolean, Int32, Int32, Boolean)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte*\n  parent: System\n  isExternal: false\n  name: Byte*\n  nameWithType: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char*\n  parent: System\n  isExternal: false\n  name: Char*\n  nameWithType: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  nameWithType: Decoder.Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  fullName: Decoder.Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.Decoder.Fallback\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Fallback\n  nameWithType: Decoder.Fallback\n  fullName: Decoder.Fallback\n- uid: System.Text.DecoderFallback\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallback\n  nameWithType: DecoderFallback\n  fullName: System.Text.DecoderFallback\n- uid: System.Text.Decoder.FallbackBuffer\n  parent: System.Text.Decoder\n  isExternal: false\n  name: FallbackBuffer\n  nameWithType: Decoder.FallbackBuffer\n  fullName: Decoder.FallbackBuffer\n- uid: System.Text.DecoderFallbackBuffer\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallbackBuffer\n  nameWithType: DecoderFallbackBuffer\n  fullName: System.Text.DecoderFallbackBuffer\n- uid: System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetCharCount(Byte*, Int32, Boolean)\n  nameWithType: Decoder.GetCharCount(Byte*, Int32, Boolean)\n  fullName: Decoder.GetCharCount(Byte*, Int32, Boolean)\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetCharCount(Byte[], Int32, Int32)\n  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32)\n  fullName: Decoder.GetCharCount(Byte[], Int32, Int32)\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetCharCount(Byte[], Int32, Int32, Boolean)\n  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32, Boolean)\n  fullName: Decoder.GetCharCount(Byte[], Int32, Int32, Boolean)\n- uid: System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetChars(Byte*, Int32, Char*, Int32, Boolean)\n  nameWithType: Decoder.GetChars(Byte*, Int32, Char*, Int32, Boolean)\n  fullName: Decoder.GetChars(Byte*, Int32, Char*, Int32, Boolean)\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32)\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)\n  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)\n  fullName: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)\n- uid: System.Text.Decoder.Reset\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Reset()\n  nameWithType: Decoder.Reset()\n  fullName: Decoder.Reset()\n- uid: System.Text.Decoder.#ctor*\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Decoder\n  nameWithType: Decoder.Decoder\n  fullName: Decoder.Decoder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n- uid: System.Text.Decoder.Convert*\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Convert\n  nameWithType: Decoder.Convert\n  fullName: Decoder.Convert\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n- uid: System.Text.Decoder.Fallback*\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Fallback\n  nameWithType: Decoder.Fallback\n  fullName: Decoder.Fallback\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n- uid: System.Text.Decoder.FallbackBuffer*\n  parent: System.Text.Decoder\n  isExternal: false\n  name: FallbackBuffer\n  nameWithType: Decoder.FallbackBuffer\n  fullName: Decoder.FallbackBuffer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n- uid: System.Text.Decoder.GetCharCount*\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetCharCount\n  nameWithType: Decoder.GetCharCount\n  fullName: Decoder.GetCharCount\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n- uid: System.Text.Decoder.GetChars*\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetChars\n  nameWithType: Decoder.GetChars\n  fullName: Decoder.GetChars\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n- uid: System.Text.Decoder.Reset*\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Reset\n  nameWithType: Decoder.Reset\n  fullName: Decoder.Reset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Decoder.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}