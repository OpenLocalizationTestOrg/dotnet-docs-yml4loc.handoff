{"nodes":[{"content":"Manipulates arrays of primitive types.","nodes":[{"pos":[0,38],"content":"Manipulates arrays of primitive types.","nodes":[{"content":"Manipulates arrays of primitive types.","pos":[0,38]}]}],"pos":[723,762],"yaml":true},{"content":"<xref:System.Buffer> only affects arrays of primitive types; this class does not apply to objects. Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.  \n  \n <xref:System.Buffer> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array. This class provides better performance for manipulating primitive types than similar methods in the <xref:System.Array?displayProperty=fullName> class.  \n  \n <xref:System.Buffer> is applicable to the following primitive types: <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Single>, and <xref:System.Double>.","nodes":[{"pos":[0,231],"content":"<xref:System.Buffer> only affects arrays of primitive types; this class does not apply to objects. Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.","nodes":[{"content":"<xref:System.Buffer> only affects arrays of primitive types; this class does not apply to objects. Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.","pos":[0,231],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Buffer&gt;</ph> only affects arrays of primitive types; this class does not apply to objects.","pos":[0,98],"source":"<xref:System.Buffer> only affects arrays of primitive types; this class does not apply to objects."},{"content":"Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.","pos":[99,231]}]}]},{"pos":[238,597],"content":"<xref:System.Buffer> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array. This class provides better performance for manipulating primitive types than similar methods in the <xref:System.Array?displayProperty=fullName> class.","nodes":[{"content":"<xref:System.Buffer> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array. This class provides better performance for manipulating primitive types than similar methods in the <xref:System.Array?displayProperty=fullName> class.","pos":[0,359],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Buffer&gt;</ph> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array.","pos":[0,207],"source":"<xref:System.Buffer> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array."},{"content":"This class provides better performance for manipulating primitive types than similar methods in the <ph id=\"ph1\">&lt;xref:System.Array?displayProperty=fullName&gt;</ph> class.","pos":[208,359],"source":" This class provides better performance for manipulating primitive types than similar methods in the <xref:System.Array?displayProperty=fullName> class."}]}]},{"pos":[604,978],"content":"<xref:System.Buffer> is applicable to the following primitive types: <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Single>, and <xref:System.Double>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Buffer&gt;</ph> is applicable to the following primitive types: <ph id=\"ph2\">&lt;xref:System.Boolean&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Char&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph10\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph11\">&lt;xref:System.UInt64&gt;</ph>, <ph id=\"ph12\">&lt;xref:System.IntPtr&gt;</ph>, <ph id=\"ph13\">&lt;xref:System.UIntPtr&gt;</ph>, <ph id=\"ph14\">&lt;xref:System.Single&gt;</ph>, and <ph id=\"ph15\">&lt;xref:System.Double&gt;</ph>.","pos":[0,374],"source":"<xref:System.Buffer> is applicable to the following primitive types: <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Single>, and <xref:System.Double>."}]}],"pos":[773,1758],"yaml":true,"extradata":"MT"},{"content":"Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.","nodes":[{"pos":[0,142],"content":"Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.","nodes":[{"content":"Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.","pos":[0,142]}]}],"pos":[4469,4612],"yaml":true},{"content":"This method copies `count` bytes from `src`, beginning at `srcOffset`, to `dst`, beginning at `dstOffset`. Both `srcOffset` and `dstOffset` are zero-based; that is, the first byte in each buffer is at position 0, not position 1.  \n  \n The <xref:System.Buffer.BlockCopy%2A> method accesses the bytes in the `src` parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds. For example, if in the programming language of your application you declare an <xref:System.Int32> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <xref:System.Buffer.BlockCopy%2A> method, the first array element the method will access is the second element of the array, which is at index -49. Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.  \n  \n As its name suggests, the <xref:System.Buffer.BlockCopy%2A> method copies a block of bytes as a whole, rather than copying one byte at a time. Therefore, if `src` and `dst` reference the same array, and the range from `srcOffset` + `count` -1 overlaps the range from `dstOffset` + `count` - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination. In the following example, the values of bytes 0-16 in an array named `arr` are copied to bytes 12-28. Despite the overlapping range, the values of the source bytes are successfully copied.  \n  \n [!code-cpp[System.Buffer.BlockCopy#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#3)]\n [!code-csharp[System.Buffer.BlockCopy#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#3)]\n [!code-vb[System.Buffer.BlockCopy#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#3)]  \n  \n In the following example, the values of bytes 12-28 in an array named `arr` are copied to bytes 0-16. Again, despite the overlapping range, the values of the source bytes are successfully copied.  \n  \n [!code-cpp[System.Buffer.BlockCopy#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#4)]\n [!code-csharp[System.Buffer.BlockCopy#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#4)]\n [!code-vb[System.Buffer.BlockCopy#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#4)]","nodes":[{"pos":[0,228],"content":"This method copies `count` bytes from `src`, beginning at `srcOffset`, to `dst`, beginning at `dstOffset`. Both `srcOffset` and `dstOffset` are zero-based; that is, the first byte in each buffer is at position 0, not position 1.","nodes":[{"content":"This method copies <ph id=\"ph1\">`count`</ph> bytes from <ph id=\"ph2\">`src`</ph>, beginning at <ph id=\"ph3\">`srcOffset`</ph>, to <ph id=\"ph4\">`dst`</ph>, beginning at <ph id=\"ph5\">`dstOffset`</ph>.","pos":[0,106],"source":"This method copies `count` bytes from `src`, beginning at `srcOffset`, to `dst`, beginning at `dstOffset`."},{"content":"Both <ph id=\"ph1\">`srcOffset`</ph> and <ph id=\"ph2\">`dstOffset`</ph> are zero-based; that is, the first byte in each buffer is at position 0, not position 1.","pos":[107,228],"source":" Both `srcOffset` and `dstOffset` are zero-based; that is, the first byte in each buffer is at position 0, not position 1."}]},{"pos":[235,912],"content":"The <xref:System.Buffer.BlockCopy%2A> method accesses the bytes in the `src` parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds. For example, if in the programming language of your application you declare an <xref:System.Int32> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <xref:System.Buffer.BlockCopy%2A> method, the first array element the method will access is the second element of the array, which is at index -49. Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method accesses the bytes in the <ph id=\"ph2\">`src`</ph> parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds.","pos":[0,195],"source":"The <xref:System.Buffer.BlockCopy%2A> method accesses the bytes in the `src` parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds."},{"content":"For example, if in the programming language of your application you declare an <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <ph id=\"ph2\">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method, the first array element the method will access is the second element of the array, which is at index -49.","pos":[196,536],"source":" For example, if in the programming language of your application you declare an <xref:System.Int32> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <xref:System.Buffer.BlockCopy%2A> method, the first array element the method will access is the second element of the array, which is at index -49."},{"content":"Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.","pos":[537,677]}]},{"pos":[919,1500],"content":"As its name suggests, the <xref:System.Buffer.BlockCopy%2A> method copies a block of bytes as a whole, rather than copying one byte at a time. Therefore, if `src` and `dst` reference the same array, and the range from `srcOffset` + `count` -1 overlaps the range from `dstOffset` + `count` - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination. In the following example, the values of bytes 0-16 in an array named `arr` are copied to bytes 12-28. Despite the overlapping range, the values of the source bytes are successfully copied.","nodes":[{"content":"As its name suggests, the <ph id=\"ph1\">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method copies a block of bytes as a whole, rather than copying one byte at a time.","pos":[0,142],"source":"As its name suggests, the <xref:System.Buffer.BlockCopy%2A> method copies a block of bytes as a whole, rather than copying one byte at a time."},{"content":"Therefore, if <ph id=\"ph1\">`src`</ph> and <ph id=\"ph2\">`dst`</ph> reference the same array, and the range from <ph id=\"ph3\">`srcOffset`</ph><ph id=\"ph4\"> + </ph><ph id=\"ph5\">`count`</ph> -1 overlaps the range from <ph id=\"ph6\">`dstOffset`</ph><ph id=\"ph7\"> + </ph><ph id=\"ph8\">`count`</ph> - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination.","pos":[143,392],"source":" Therefore, if `src` and `dst` reference the same array, and the range from `srcOffset` + `count` -1 overlaps the range from `dstOffset` + `count` - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination."},{"content":"In the following example, the values of bytes 0-16 in an array named <ph id=\"ph1\">`arr`</ph> are copied to bytes 12-28.","pos":[393,494],"source":" In the following example, the values of bytes 0-16 in an array named `arr` are copied to bytes 12-28."},{"content":"Despite the overlapping range, the values of the source bytes are successfully copied.","pos":[495,581]}]},{"pos":[1507,1904],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Buffer.BlockCopy#3<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Buffer.BlockCopy#3<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#3)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Buffer.BlockCopy#3<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#3)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Buffer.BlockCopy#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#3)]\n [!code-csharp[System.Buffer.BlockCopy#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#3)]\n [!code-vb[System.Buffer.BlockCopy#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#3)]"},{"pos":[1911,2106],"content":"In the following example, the values of bytes 12-28 in an array named `arr` are copied to bytes 0-16. Again, despite the overlapping range, the values of the source bytes are successfully copied.","nodes":[{"content":"In the following example, the values of bytes 12-28 in an array named <ph id=\"ph1\">`arr`</ph> are copied to bytes 0-16.","pos":[0,101],"source":"In the following example, the values of bytes 12-28 in an array named `arr` are copied to bytes 0-16."},{"content":"Again, despite the overlapping range, the values of the source bytes are successfully copied.","pos":[102,195]}]},{"pos":[2113,2510],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Buffer.BlockCopy#4<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Buffer.BlockCopy#4<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#4)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Buffer.BlockCopy#4<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#4)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Buffer.BlockCopy#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#4)]\n [!code-csharp[System.Buffer.BlockCopy#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#4)]\n [!code-vb[System.Buffer.BlockCopy#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#4)]"}],"pos":[4623,7150],"yaml":true,"extradata":"MT"},{"content":"The source buffer.","nodes":[{"pos":[0,18],"content":"The source buffer.","nodes":[{"content":"The source buffer.","pos":[0,18]}]}],"pos":[8281,8300],"yaml":true},{"content":"The zero-based byte offset into <code>src</code>.","nodes":[{"pos":[0,49],"content":"The zero-based byte offset into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">src</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The zero-based byte offset into <code>src</code>."}],"pos":[8364,8414],"yaml":true},{"content":"The destination buffer.","nodes":[{"pos":[0,23],"content":"The destination buffer.","nodes":[{"content":"The destination buffer.","pos":[0,23]}]}],"pos":[8472,8496],"yaml":true},{"content":"The zero-based byte offset into <code>dst</code>.","nodes":[{"pos":[0,49],"content":"The zero-based byte offset into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dst</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The zero-based byte offset into <code>dst</code>."}],"pos":[8560,8610],"yaml":true},{"content":"The number of bytes to copy.","nodes":[{"pos":[0,28],"content":"The number of bytes to copy.","nodes":[{"content":"The number of bytes to copy.","pos":[0,28]}]}],"pos":[8670,8699],"yaml":true},{"content":"<code>src</code> or <code>dst</code> is `null`.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;src&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;dst&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>src</code> or <code>dst</code> is `null`."}],"pos":[8852,8900],"yaml":true},{"content":"<code>src</code> or <code>dst</code> is not an array of primitives.  \n  \n -or-  \n  \n The number of bytes in <code>src</code> is less than <code>srcOffset</code> plus <code>count</code>.  \n  \n -or-  \n  \n The number of bytes in <code>dst</code> is less than <code>dstOffset</code> plus <code>count</code>.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;src&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;dst&lt;/code&gt;</ph> is not an array of primitives.","source":"<code>src</code> or <code>dst</code> is not an array of primitives."},{"pos":[74,78],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[85,185],"content":"The number of bytes in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">src</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">srcOffset</ph><ept id=\"p2\">&lt;/code&gt;</ept> plus <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The number of bytes in <code>src</code> is less than <code>srcOffset</code> plus <code>count</code>."},{"pos":[192,196],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[203,303],"content":"The number of bytes in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dst</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">dstOffset</ph><ept id=\"p2\">&lt;/code&gt;</ept> plus <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The number of bytes in <code>dst</code> is less than <code>dstOffset</code> plus <code>count</code>."}],"pos":[8994,9308],"yaml":true},{"content":"<code>srcOffset</code>, <code>dstOffset</code>, or <code>count</code> is less than 0.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">&lt;code&gt;srcOffset&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;dstOffset&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>srcOffset</code>, <code>dstOffset</code>, or <code>count</code> is less than 0."}],"pos":[9422,9508],"yaml":true},{"content":"Returns the number of bytes in the specified array.","nodes":[{"pos":[0,51],"content":"Returns the number of bytes in the specified array.","nodes":[{"content":"Returns the number of bytes in the specified array.","pos":[0,51]}]}],"pos":[10949,11001],"yaml":true},{"content":"An array.","nodes":[{"pos":[0,9],"content":"An array.","nodes":[{"content":"An array.","pos":[0,9]}]}],"pos":[11682,11692],"yaml":true},{"content":"The number of bytes in the array.","nodes":[{"pos":[0,33],"content":"The number of bytes in the array.","nodes":[{"content":"The number of bytes in the array.","pos":[0,33]}]}],"pos":[11748,11782],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[11936,11966],"yaml":true},{"content":"<code>array</code> is not a primitive.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is not a primitive.","source":"<code>array</code> is not a primitive."}],"pos":[12060,12099],"yaml":true},{"content":"<code>array</code> is larger than 2 gigabytes (GB).","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is larger than 2 gigabytes (GB).","source":"<code>array</code> is larger than 2 gigabytes (GB)."}],"pos":[12193,12245],"yaml":true},{"content":"Retrieves the byte at a specified location in a specified array.","nodes":[{"pos":[0,64],"content":"Retrieves the byte at a specified location in a specified array.","nodes":[{"content":"Retrieves the byte at a specified location in a specified array.","pos":[0,64]}]}],"pos":[13728,13793],"yaml":true},{"content":"The `GetByte` method gets a particular byte out of the array. The array must be an array of primitives.","nodes":[{"pos":[0,103],"content":"The `GetByte` method gets a particular byte out of the array. The array must be an array of primitives.","nodes":[{"content":"The <ph id=\"ph1\">`GetByte`</ph> method gets a particular byte out of the array.","pos":[0,61],"source":"The `GetByte` method gets a particular byte out of the array."},{"content":"The array must be an array of primitives.","pos":[62,103]}]}],"pos":[13804,13908],"yaml":true,"extradata":"MT"},{"content":"An array.","nodes":[{"pos":[0,9],"content":"An array.","nodes":[{"content":"An array.","pos":[0,9]}]}],"pos":[14575,14585],"yaml":true},{"content":"A location in the array.","nodes":[{"pos":[0,24],"content":"A location in the array.","nodes":[{"content":"A location in the array.","pos":[0,24]}]}],"pos":[14645,14670],"yaml":true},{"content":"Returns the <code>index</code> byte in the array.","nodes":[{"pos":[0,49],"content":"Returns the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> byte in the array.","source":"Returns the <code>index</code> byte in the array."}],"pos":[14725,14775],"yaml":true},{"content":"<code>array</code> is not a primitive.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is not a primitive.","source":"<code>array</code> is not a primitive."}],"pos":[14918,14957],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[15059,15089],"yaml":true},{"content":"<code>index</code> is negative or greater than the length of <code>array</code>.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is negative or greater than the length of <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>index</code> is negative or greater than the length of <code>array</code>."}],"pos":[15203,15284],"yaml":true},{"content":"<code>array</code> is larger than 2 gigabytes (GB).","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is larger than 2 gigabytes (GB).","source":"<code>array</code> is larger than 2 gigabytes (GB)."}],"pos":[15378,15430],"yaml":true},{"content":"Copies a number of bytes specified as a long integer value from one address in memory to another.  \n  \n This API is not CLS-compliant.","nodes":[{"pos":[0,97],"content":"Copies a number of bytes specified as a long integer value from one address in memory to another.","nodes":[{"content":"Copies a number of bytes specified as a long integer value from one address in memory to another.","pos":[0,97]}]},{"pos":[104,134],"content":"This API is not CLS-compliant.","nodes":[{"content":"This API is not CLS-compliant.","pos":[0,30]}]}],"pos":[17051,17190],"yaml":true},{"content":"This method copies `sourceBytesToCopy` bytes from the address specified by `source` to the address specified by `destination`. If the buffers overlap and the difference between `destination` minus `source` is less than `sourceBytesToCopy`, the source block is copied to the destination block in reverse order.","nodes":[{"pos":[0,309],"content":"This method copies `sourceBytesToCopy` bytes from the address specified by `source` to the address specified by `destination`. If the buffers overlap and the difference between `destination` minus `source` is less than `sourceBytesToCopy`, the source block is copied to the destination block in reverse order.","nodes":[{"content":"This method copies <ph id=\"ph1\">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id=\"ph2\">`source`</ph> to the address specified by <ph id=\"ph3\">`destination`</ph>.","pos":[0,126],"source":"This method copies `sourceBytesToCopy` bytes from the address specified by `source` to the address specified by `destination`."},{"content":"If the buffers overlap and the difference between <ph id=\"ph1\">`destination`</ph> minus <ph id=\"ph2\">`source`</ph> is less than <ph id=\"ph3\">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.","pos":[127,309],"source":" If the buffers overlap and the difference between `destination` minus `source` is less than `sourceBytesToCopy`, the source block is copied to the destination block in reverse order."}]}],"pos":[17201,17511],"yaml":true,"extradata":"MT"},{"content":"The address of the bytes to copy.","nodes":[{"pos":[0,33],"content":"The address of the bytes to copy.","nodes":[{"content":"The address of the bytes to copy.","pos":[0,33]}]}],"pos":[17774,17808],"yaml":true},{"content":"The target address.","nodes":[{"pos":[0,19],"content":"The target address.","nodes":[{"content":"The target address.","pos":[0,19]}]}],"pos":[17874,17894],"yaml":true},{"content":"The number of bytes available in the destination memory block.","nodes":[{"pos":[0,62],"content":"The number of bytes available in the destination memory block.","nodes":[{"content":"The number of bytes available in the destination memory block.","pos":[0,62]}]}],"pos":[17971,18034],"yaml":true},{"content":"The number of bytes to copy.","nodes":[{"pos":[0,28],"content":"The number of bytes to copy.","nodes":[{"content":"The number of bytes to copy.","pos":[0,28]}]}],"pos":[18106,18135],"yaml":true},{"content":"<code>sourceBytesToCopy</code> is greater than <code>destinationSizeInBytes</code>.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;sourceBytesToCopy&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;destinationSizeInBytes&lt;/code&gt;</ph>.","source":"<code>sourceBytesToCopy</code> is greater than <code>destinationSizeInBytes</code>."}],"pos":[18301,18385],"yaml":true},{"content":"Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.  \n  \n This API is not CLS-compliant.","nodes":[{"pos":[0,107],"content":"Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.","nodes":[{"content":"Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.","pos":[0,107]}]},{"pos":[114,144],"content":"This API is not CLS-compliant.","nodes":[{"content":"This API is not CLS-compliant.","pos":[0,30]}]}],"pos":[19817,19966],"yaml":true},{"content":"This method copies `sourceBytesToCopy` bytes from the address specified by `source` to the address specified by `destination`. If the buffers overlap and the difference between `destination` minus `source` is less than `sourceBytesToCopy`, the source block is copied to the destination block in reverse order.","nodes":[{"pos":[0,309],"content":"This method copies `sourceBytesToCopy` bytes from the address specified by `source` to the address specified by `destination`. If the buffers overlap and the difference between `destination` minus `source` is less than `sourceBytesToCopy`, the source block is copied to the destination block in reverse order.","nodes":[{"content":"This method copies <ph id=\"ph1\">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id=\"ph2\">`source`</ph> to the address specified by <ph id=\"ph3\">`destination`</ph>.","pos":[0,126],"source":"This method copies `sourceBytesToCopy` bytes from the address specified by `source` to the address specified by `destination`."},{"content":"If the buffers overlap and the difference between <ph id=\"ph1\">`destination`</ph> minus <ph id=\"ph2\">`source`</ph> is less than <ph id=\"ph3\">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.","pos":[127,309],"source":" If the buffers overlap and the difference between `destination` minus `source` is less than `sourceBytesToCopy`, the source block is copied to the destination block in reverse order."}]}],"pos":[19977,20287],"yaml":true,"extradata":"MT"},{"content":"The address of the bytes to copy.","nodes":[{"pos":[0,33],"content":"The address of the bytes to copy.","nodes":[{"content":"The address of the bytes to copy.","pos":[0,33]}]}],"pos":[20552,20586],"yaml":true},{"content":"The target address.","nodes":[{"pos":[0,19],"content":"The target address.","nodes":[{"content":"The target address.","pos":[0,19]}]}],"pos":[20652,20672],"yaml":true},{"content":"The number of bytes available in the destination memory block.","nodes":[{"pos":[0,62],"content":"The number of bytes available in the destination memory block.","nodes":[{"content":"The number of bytes available in the destination memory block.","pos":[0,62]}]}],"pos":[20750,20813],"yaml":true},{"content":"The number of bytes to copy.","nodes":[{"pos":[0,28],"content":"The number of bytes to copy.","nodes":[{"content":"The number of bytes to copy.","pos":[0,28]}]}],"pos":[20886,20915],"yaml":true},{"content":"<code>sourceBytesToCopy</code> is greater than <code>destinationSizeInBytes</code>.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;sourceBytesToCopy&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;destinationSizeInBytes&lt;/code&gt;</ph>.","source":"<code>sourceBytesToCopy</code> is greater than <code>destinationSizeInBytes</code>."}],"pos":[21081,21165],"yaml":true},{"content":"Assigns a specified value to a byte at a particular location in a specified array.","nodes":[{"pos":[0,82],"content":"Assigns a specified value to a byte at a particular location in a specified array.","nodes":[{"content":"Assigns a specified value to a byte at a particular location in a specified array.","pos":[0,82]}]}],"pos":[22501,22584],"yaml":true},{"content":"`array` must be an array of primitives.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">`array`</ph> must be an array of primitives.","source":"`array` must be an array of primitives."}],"pos":[22595,22637],"yaml":true,"extradata":"MT"},{"content":"An array.","nodes":[{"pos":[0,9],"content":"An array.","nodes":[{"content":"An array.","pos":[0,9]}]}],"pos":[23316,23326],"yaml":true},{"content":"A location in the array.","nodes":[{"pos":[0,24],"content":"A location in the array.","nodes":[{"content":"A location in the array.","pos":[0,24]}]}],"pos":[23386,23411],"yaml":true},{"content":"A value to assign.","nodes":[{"pos":[0,18],"content":"A value to assign.","nodes":[{"content":"A value to assign.","pos":[0,18]}]}],"pos":[23470,23489],"yaml":true},{"content":"<code>array</code> is not a primitive.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is not a primitive.","source":"<code>array</code> is not a primitive."}],"pos":[23632,23671],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[23773,23803],"yaml":true},{"content":"<code>index</code> is negative or greater than the length of <code>array</code>.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is negative or greater than the length of <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>index</code> is negative or greater than the length of <code>array</code>."}],"pos":[23917,23998],"yaml":true},{"content":"<code>array</code> is larger than 2 gigabytes (GB).","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is larger than 2 gigabytes (GB).","source":"<code>array</code> is larger than 2 gigabytes (GB)."}],"pos":[24092,24144],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Buffer\n  commentId: T:System.Buffer\n  id: Buffer\n  children:\n  - System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  - System.Buffer.ByteLength(System.Array)\n  - System.Buffer.GetByte(System.Array,System.Int32)\n  - System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)\n  - System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)\n  - System.Buffer.SetByte(System.Array,System.Int32,System.Byte)\n  langs:\n  - csharp\n  name: Buffer\n  nameWithType: Buffer\n  fullName: System.Buffer\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Manipulates arrays of primitive types.\n  remarks: \"<xref:System.Buffer> only affects arrays of primitive types; this class does not apply to objects. Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.  \\n  \\n <xref:System.Buffer> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array. This class provides better performance for manipulating primitive types than similar methods in the <xref:System.Array?displayProperty=fullName> class.  \\n  \\n <xref:System.Buffer> is applicable to the following primitive types: <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Single>, and <xref:System.Double>.\"\n  example:\n  - \"The following code example illustrates the use of several `Buffer` class methods.  \\n  \\n [!code-cpp[System.Buffer.BlockCopy#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/buffer.cpp#1)]\\n [!code-csharp[System.Buffer.BlockCopy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/buffer.cs#1)]\\n [!code-vb[System.Buffer.BlockCopy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/buffer.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static class Buffer\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  commentId: M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  id: BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  parent: System.Buffer\n  langs:\n  - csharp\n  name: BlockCopy(Array, Int32, Array, Int32, Int32)\n  nameWithType: Buffer.BlockCopy(Array, Int32, Array, Int32, Int32)\n  fullName: Buffer.BlockCopy(Array, Int32, Array, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.\n  remarks: \"This method copies `count` bytes from `src`, beginning at `srcOffset`, to `dst`, beginning at `dstOffset`. Both `srcOffset` and `dstOffset` are zero-based; that is, the first byte in each buffer is at position 0, not position 1.  \\n  \\n The <xref:System.Buffer.BlockCopy%2A> method accesses the bytes in the `src` parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds. For example, if in the programming language of your application you declare an <xref:System.Int32> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <xref:System.Buffer.BlockCopy%2A> method, the first array element the method will access is the second element of the array, which is at index -49. Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.  \\n  \\n As its name suggests, the <xref:System.Buffer.BlockCopy%2A> method copies a block of bytes as a whole, rather than copying one byte at a time. Therefore, if `src` and `dst` reference the same array, and the range from `srcOffset` + `count` -1 overlaps the range from `dstOffset` + `count` - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination. In the following example, the values of bytes 0-16 in an array named `arr` are copied to bytes 12-28. Despite the overlapping range, the values of the source bytes are successfully copied.  \\n  \\n [!code-cpp[System.Buffer.BlockCopy#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#3)]\\n [!code-csharp[System.Buffer.BlockCopy#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#3)]\\n [!code-vb[System.Buffer.BlockCopy#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#3)]  \\n  \\n In the following example, the values of bytes 12-28 in an array named `arr` are copied to bytes 0-16. Again, despite the overlapping range, the values of the source bytes are successfully copied.  \\n  \\n [!code-cpp[System.Buffer.BlockCopy#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#4)]\\n [!code-csharp[System.Buffer.BlockCopy#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#4)]\\n [!code-vb[System.Buffer.BlockCopy#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#4)]\"\n  example:\n  - \"The following example copies regions of arrays by using the <xref:System.Buffer.BlockCopy%2A> method. For each <xref:System.Buffer.BlockCopy%2A> operation, it lists the source and destination arrays as both an array of values and as a sequence of bytes. The example illustrates the importance of considering a system's endianness when working with the <xref:System.Buffer.BlockCopy%2A> method: Because Windows systems are little-endian, the lower-order bytes of a primitive data type's value precede the higher-order bytes.  \\n  \\n [!code-cpp[System.Buffer.BlockCopy#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/bcopy.cpp#2)]\\n [!code-csharp[System.Buffer.BlockCopy#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/bcopy.cs#2)]\\n [!code-vb[System.Buffer.BlockCopy#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/bcopy.vb#2)]\"\n  syntax:\n    content: public static void BlockCopy (Array src, int srcOffset, Array dst, int dstOffset, int count);\n    parameters:\n    - id: src\n      type: System.Array\n      description: The source buffer.\n    - id: srcOffset\n      type: System.Int32\n      description: The zero-based byte offset into <code>src</code>.\n    - id: dst\n      type: System.Array\n      description: The destination buffer.\n    - id: dstOffset\n      type: System.Int32\n      description: The zero-based byte offset into <code>dst</code>.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to copy.\n  overload: System.Buffer.BlockCopy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>src</code> or <code>dst</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>src</code> or <code>dst</code> is not an array of primitives.  \\n  \\n -or-  \\n  \\n The number of bytes in <code>src</code> is less than <code>srcOffset</code> plus <code>count</code>.  \\n  \\n -or-  \\n  \\n The number of bytes in <code>dst</code> is less than <code>dstOffset</code> plus <code>count</code>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>srcOffset</code>, <code>dstOffset</code>, or <code>count</code> is less than 0.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Buffer.ByteLength(System.Array)\n  commentId: M:System.Buffer.ByteLength(System.Array)\n  id: ByteLength(System.Array)\n  parent: System.Buffer\n  langs:\n  - csharp\n  name: ByteLength(Array)\n  nameWithType: Buffer.ByteLength(Array)\n  fullName: Buffer.ByteLength(Array)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the number of bytes in the specified array.\n  remarks: ''\n  example:\n  - \"The following code example illustrates the use of the `ByteLength` method to return the number of bytes in an array.  \\n  \\n [!code-cpp[System.Buffer.Bytes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.Bytes/CPP/bytelength.cpp#1)]\\n [!code-csharp[System.Buffer.Bytes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.Bytes/CS/bytelength.cs#1)]\\n [!code-vb[System.Buffer.Bytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.Bytes/VB/bytelength.vb#1)]\"\n  syntax:\n    content: public static int ByteLength (Array array);\n    parameters:\n    - id: array\n      type: System.Array\n      description: An array.\n    return:\n      type: System.Int32\n      description: The number of bytes in the array.\n  overload: System.Buffer.ByteLength*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>array</code> is not a primitive.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>array</code> is larger than 2 gigabytes (GB).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Buffer.GetByte(System.Array,System.Int32)\n  commentId: M:System.Buffer.GetByte(System.Array,System.Int32)\n  id: GetByte(System.Array,System.Int32)\n  parent: System.Buffer\n  langs:\n  - csharp\n  name: GetByte(Array, Int32)\n  nameWithType: Buffer.GetByte(Array, Int32)\n  fullName: Buffer.GetByte(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Retrieves the byte at a specified location in a specified array.\n  remarks: The `GetByte` method gets a particular byte out of the array. The array must be an array of primitives.\n  example:\n  - \"The following code example displays the byte values at specified locations within arrays using the `GetByte` method.  \\n  \\n [!code-cpp[System.Buffer.Bytes#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.Bytes/CPP/getbyte.cpp#3)]\\n [!code-csharp[System.Buffer.Bytes#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.Bytes/CS/getbyte.cs#3)]\\n [!code-vb[System.Buffer.Bytes#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.Bytes/VB/getbyte.vb#3)]\"\n  syntax:\n    content: public static byte GetByte (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: An array.\n    - id: index\n      type: System.Int32\n      description: A location in the array.\n    return:\n      type: System.Byte\n      description: Returns the <code>index</code> byte in the array.\n  overload: System.Buffer.GetByte*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>array</code> is not a primitive.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is negative or greater than the length of <code>array</code>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>array</code> is larger than 2 gigabytes (GB).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)\n  commentId: M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)\n  id: MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)\n  parent: System.Buffer\n  langs:\n  - csharp\n  name: MemoryCopy(Void*, Void*, Int64, Int64)\n  nameWithType: Buffer.MemoryCopy(Void*, Void*, Int64, Int64)\n  fullName: Buffer.MemoryCopy(Void*, Void*, Int64, Int64)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: \"Copies a number of bytes specified as a long integer value from one address in memory to another.  \\n  \\n This API is not CLS-compliant.\"\n  remarks: This method copies `sourceBytesToCopy` bytes from the address specified by `source` to the address specified by `destination`. If the buffers overlap and the difference between `destination` minus `source` is less than `sourceBytesToCopy`, the source block is copied to the destination block in reverse order.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static void MemoryCopy (void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);\n    parameters:\n    - id: source\n      type: System.Void*\n      description: The address of the bytes to copy.\n    - id: destination\n      type: System.Void*\n      description: The target address.\n    - id: destinationSizeInBytes\n      type: System.Int64\n      description: The number of bytes available in the destination memory block.\n    - id: sourceBytesToCopy\n      type: System.Int64\n      description: The number of bytes to copy.\n  overload: System.Buffer.MemoryCopy*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>sourceBytesToCopy</code> is greater than <code>destinationSizeInBytes</code>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)\n  commentId: M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)\n  id: MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)\n  parent: System.Buffer\n  langs:\n  - csharp\n  name: MemoryCopy(Void*, Void*, UInt64, UInt64)\n  nameWithType: Buffer.MemoryCopy(Void*, Void*, UInt64, UInt64)\n  fullName: Buffer.MemoryCopy(Void*, Void*, UInt64, UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: \"Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.  \\n  \\n This API is not CLS-compliant.\"\n  remarks: This method copies `sourceBytesToCopy` bytes from the address specified by `source` to the address specified by `destination`. If the buffers overlap and the difference between `destination` minus `source` is less than `sourceBytesToCopy`, the source block is copied to the destination block in reverse order.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static void MemoryCopy (void* source, void* destination, ulong destinationSizeInBytes, ulong sourceBytesToCopy);\n    parameters:\n    - id: source\n      type: System.Void*\n      description: The address of the bytes to copy.\n    - id: destination\n      type: System.Void*\n      description: The target address.\n    - id: destinationSizeInBytes\n      type: System.UInt64\n      description: The number of bytes available in the destination memory block.\n    - id: sourceBytesToCopy\n      type: System.UInt64\n      description: The number of bytes to copy.\n  overload: System.Buffer.MemoryCopy*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>sourceBytesToCopy</code> is greater than <code>destinationSizeInBytes</code>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Buffer.SetByte(System.Array,System.Int32,System.Byte)\n  commentId: M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)\n  id: SetByte(System.Array,System.Int32,System.Byte)\n  parent: System.Buffer\n  langs:\n  - csharp\n  name: SetByte(Array, Int32, Byte)\n  nameWithType: Buffer.SetByte(Array, Int32, Byte)\n  fullName: Buffer.SetByte(Array, Int32, Byte)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Assigns a specified value to a byte at a particular location in a specified array.\n  remarks: '`array` must be an array of primitives.'\n  example:\n  - \"The following code example assigns values to bytes at particular locations within arrays using the `SetByte` method.  \\n  \\n [!code-cpp[System.Buffer.Bytes#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.Bytes/CPP/setbyte.cpp#2)]\\n [!code-csharp[System.Buffer.Bytes#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.Bytes/CS/setbyte.cs#2)]\\n [!code-vb[System.Buffer.Bytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.Bytes/VB/setbyte.vb#2)]\"\n  syntax:\n    content: public static void SetByte (Array array, int index, byte value);\n    parameters:\n    - id: array\n      type: System.Array\n      description: An array.\n    - id: index\n      type: System.Int32\n      description: A location in the array.\n    - id: value\n      type: System.Byte\n      description: A value to assign.\n  overload: System.Buffer.SetByte*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>array</code> is not a primitive.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is negative or greater than the length of <code>array</code>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>array</code> is larger than 2 gigabytes (GB).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  parent: System.Buffer\n  isExternal: false\n  name: BlockCopy(Array, Int32, Array, Int32, Int32)\n  nameWithType: Buffer.BlockCopy(Array, Int32, Array, Int32, Int32)\n  fullName: Buffer.BlockCopy(Array, Int32, Array, Int32, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Buffer.ByteLength(System.Array)\n  parent: System.Buffer\n  isExternal: false\n  name: ByteLength(Array)\n  nameWithType: Buffer.ByteLength(Array)\n  fullName: Buffer.ByteLength(Array)\n- uid: System.Buffer.GetByte(System.Array,System.Int32)\n  parent: System.Buffer\n  isExternal: false\n  name: GetByte(Array, Int32)\n  nameWithType: Buffer.GetByte(Array, Int32)\n  fullName: Buffer.GetByte(Array, Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)\n  parent: System.Buffer\n  isExternal: false\n  name: MemoryCopy(Void*, Void*, Int64, Int64)\n  nameWithType: Buffer.MemoryCopy(Void*, Void*, Int64, Int64)\n  fullName: Buffer.MemoryCopy(Void*, Void*, Int64, Int64)\n- uid: System.Void\n  name: Void\n  nameWithType: Void\n  fullName: System.Void\n- uid: System.Void*\n  parent: System\n  isExternal: false\n  name: Void*\n  nameWithType: Void*\n  fullName: System.Void*\n  spec.csharp:\n  - uid: System.Void\n    name: Void\n    nameWithType: Void\n    fullName: System.Void\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)\n  parent: System.Buffer\n  isExternal: false\n  name: MemoryCopy(Void*, Void*, UInt64, UInt64)\n  nameWithType: Buffer.MemoryCopy(Void*, Void*, UInt64, UInt64)\n  fullName: Buffer.MemoryCopy(Void*, Void*, UInt64, UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.Buffer.SetByte(System.Array,System.Int32,System.Byte)\n  parent: System.Buffer\n  isExternal: false\n  name: SetByte(Array, Int32, Byte)\n  nameWithType: Buffer.SetByte(Array, Int32, Byte)\n  fullName: Buffer.SetByte(Array, Int32, Byte)\n- uid: System.Buffer.BlockCopy*\n  parent: System.Buffer\n  isExternal: false\n  name: BlockCopy\n  nameWithType: Buffer.BlockCopy\n  fullName: Buffer.BlockCopy\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n- uid: System.Buffer.ByteLength*\n  parent: System.Buffer\n  isExternal: false\n  name: ByteLength\n  nameWithType: Buffer.ByteLength\n  fullName: Buffer.ByteLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n- uid: System.Buffer.GetByte*\n  parent: System.Buffer\n  isExternal: false\n  name: GetByte\n  nameWithType: Buffer.GetByte\n  fullName: Buffer.GetByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n- uid: System.Buffer.MemoryCopy*\n  parent: System.Buffer\n  isExternal: false\n  name: MemoryCopy\n  nameWithType: Buffer.MemoryCopy\n  fullName: Buffer.MemoryCopy\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n- uid: System.Buffer.SetByte*\n  parent: System.Buffer\n  isExternal: false\n  name: SetByte\n  nameWithType: Buffer.SetByte\n  fullName: Buffer.SetByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Buffer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}