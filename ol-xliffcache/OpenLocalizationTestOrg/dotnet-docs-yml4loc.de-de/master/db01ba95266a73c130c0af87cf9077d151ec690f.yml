### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DSACng
  commentId: T:System.Security.Cryptography.DSACng
  id: DSACng
  children:
  - System.Security.Cryptography.DSACng.#ctor
  - System.Security.Cryptography.DSACng.#ctor(System.Int32)
  - System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])
  - System.Security.Cryptography.DSACng.Dispose(System.Boolean)
  - System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)
  - System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSACng.Key
  - System.Security.Cryptography.DSACng.KeyExchangeAlgorithm
  - System.Security.Cryptography.DSACng.LegalKeySizes
  - System.Security.Cryptography.DSACng.SignatureAlgorithm
  - System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: DSACng
  nameWithType: DSACng
  fullName: System.Security.Cryptography.DSACng
  type: Class
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Provides a Cryptography Next Generation (CNG) implementation of the Digital Signature Algorithm (DSA).
  syntax:
    content: 'public sealed class DSACng : System.Security.Cryptography.DSA'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.DSA
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.DSA.Create
  - System.Security.Cryptography.DSA.Create(System.Int32)
  - System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSA.Create(System.String)
  - System.Security.Cryptography.DSA.FromXmlString(System.String)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.#ctor
  commentId: M:System.Security.Cryptography.DSACng.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: DSACng()
  nameWithType: DSACng.DSACng()
  fullName: DSACng.DSACng()
  type: Constructor
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.DSACng"></xref> class with a random 2,048-bit key pair.
  syntax:
    content: public DSACng ();
    parameters: []
  overload: System.Security.Cryptography.DSACng.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.#ctor(System.Int32)
  commentId: M:System.Security.Cryptography.DSACng.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: DSACng(Int32)
  nameWithType: DSACng.DSACng(Int32)
  fullName: DSACng.DSACng(Int32)
  type: Constructor
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.DSACng"></xref> class with a randomly generated key of the specified size.
  remarks: Valid key sizes range from 512 to 3,072 bits, in increments of 64. We recommend that a minimum size of 2,048 bits be used for all keys.
  syntax:
    content: public DSACng (int keySize);
    parameters:
    - id: keySize
      type: System.Int32
      description: The size of the key to generate in bits.
  overload: System.Security.Cryptography.DSACng.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>keySize</code> is not valid.
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)
  commentId: M:System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)
  id: '#ctor(System.Security.Cryptography.CngKey)'
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: DSACng(CngKey)
  nameWithType: DSACng.DSACng(CngKey)
  fullName: DSACng.DSACng(CngKey)
  type: Constructor
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.DSACng"></xref> class with the specified key.
  remarks: "The <xref:System.Security.Cryptography.CngKey.AlgorithmGroup%2A?displayProperty=fullName> of `key` must be <xref:System.Security.Cryptography.CngAlgorithmGroup.Dsa%2A?displayProperty=fullName>.  \n  \n This constructor creates a copy of the key. Even if `key` is disposed, the copy of this key object in DSA remains alive."
  syntax:
    content: public DSACng (System.Security.Cryptography.CngKey key);
    parameters:
    - id: key
      type: System.Security.Cryptography.CngKey
      description: The key to use for DSA operations.
  overload: System.Security.Cryptography.DSACng.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>key</code> is not a valid DSA key.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])
  commentId: M:System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])
  id: CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: CreateSignature(Byte[])
  nameWithType: DSACng.CreateSignature(Byte[])
  fullName: DSACng.CreateSignature(Byte[])
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Creates the digital signature for the specified data.
  syntax:
    content: public override byte[] CreateSignature (byte[] rgbHash);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: The data to be signed.
    return:
      type: System.Byte[]
      description: The digital signature for the specified data.
  overload: System.Security.Cryptography.DSACng.CreateSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rgbHash</code> is `null`.
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: <code>rgbHash</code> is shorter in length than the Q value of the DSA key .
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.DSACng.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DSACng.Dispose(Boolean)
  fullName: DSACng.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: System.Security.Cryptography.DSACng.Dispose*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: DSACng.ExportParameters(Boolean)
  fullName: DSACng.ExportParameters(Boolean)
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Exports the DSA algorithm parameters.
  syntax:
    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.DSAParameters
      description: The DSA algorithm parameters.
  overload: System.Security.Cryptography.DSACng.ExportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: DSA key is not a valid public or private key.
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: HashData(Stream, HashAlgorithmName)
  nameWithType: DSACng.HashData(Stream, HashAlgorithmName)
  fullName: DSACng.HashData(Stream, HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: ''
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: ''
    return:
      type: System.Byte[]
      description: ''
  overload: System.Security.Cryptography.DSACng.HashData*
  exceptions: []
  version:
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: DSACng.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: DSACng.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: ''
    return:
      type: System.Byte[]
      description: ''
  overload: System.Security.Cryptography.DSACng.HashData*
  exceptions: []
  version:
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)
  commentId: M:System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)
  id: ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: ImportParameters(DSAParameters)
  nameWithType: DSACng.ImportParameters(DSAParameters)
  fullName: DSACng.ImportParameters(DSAParameters)
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Replaces the existing key that the current instance is working with by creating a new <xref href="System.Security.Cryptography.CngKey"></xref> for the parameters structure.
  syntax:
    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.DSAParameters
      description: The DSA parameters.
  overload: System.Security.Cryptography.DSACng.ImportParameters*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified DSA parameters are not valid.
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.Key
  commentId: P:System.Security.Cryptography.DSACng.Key
  id: Key
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: Key
  nameWithType: DSACng.Key
  fullName: DSACng.Key
  type: Property
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Gets the key that will be used by the <xref href="System.Security.Cryptography.DSACng"></xref> object for any cryptographic operation that it performs.
  remarks: "The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object. Therefore, you should ensure that the key object is no longer used in these cases.  \n  \n This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used. However, it will point to the same CNG key."
  syntax:
    content: >-
      [get: System.Security.SecuritySafeCritical]

      public System.Security.Cryptography.CngKey Key { get; }
    return:
      type: System.Security.Cryptography.CngKey
      description: The key used by the <xref href="System.Security.Cryptography.DSACng"></xref> object to perform cryptographic operations.
  overload: System.Security.Cryptography.DSACng.Key*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecuritySafeCritical'
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm
  commentId: P:System.Security.Cryptography.DSACng.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: DSACng.KeyExchangeAlgorithm
  fullName: DSACng.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Gets the name of the key exchange algorithm.
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: Always `null`.
  overload: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.LegalKeySizes
  commentId: P:System.Security.Cryptography.DSACng.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: DSACng.LegalKeySizes
  fullName: DSACng.LegalKeySizes
  type: Property
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Gets the key sizes, in bits, that are supported by the DSA algorithm.
  syntax:
    content: public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: An array that contains the key sizes supported by the algorithm.
  overload: System.Security.Cryptography.DSACng.LegalKeySizes*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.SignatureAlgorithm
  commentId: P:System.Security.Cryptography.DSACng.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: DSACng.SignatureAlgorithm
  fullName: DSACng.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Gets the name of the signature algorithm.
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: The string "DSA".
  overload: System.Security.Cryptography.DSACng.SignatureAlgorithm*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACng
  langs:
  - csharp
  name: VerifySignature(Byte[], Byte[])
  nameWithType: DSACng.VerifySignature(Byte[], Byte[])
  fullName: DSACng.VerifySignature(Byte[], Byte[])
  type: Method
  assemblies:
  - System.Core
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: Verifies if the specified digital signature matches the specified data.
  syntax:
    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: The signed data.
    - id: rgbSignature
      type: System.Byte[]
      description: The digital signature to be verified.
    return:
      type: System.Boolean
      description: '`true` if <code>rgbSignature</code> matches the signature computed using the specified data; otherwise, `false`.'
  overload: System.Security.Cryptography.DSACng.VerifySignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>rgbSignature</code> parameter is `null`."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: <code>rgbHash</code> is shorter in length than the Q value of the DSA key .
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.Cryptography.DSA
  parent: System.Security.Cryptography
  isExternal: false
  name: DSA
  nameWithType: DSA
  fullName: System.Security.Cryptography.DSA
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.PlatformNotSupportedException
  parent: System
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Security.Cryptography.DSACng.#ctor
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: DSACng()
  nameWithType: DSACng.DSACng()
  fullName: DSACng.DSACng()
- uid: System.Security.Cryptography.DSACng.#ctor(System.Int32)
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: DSACng(Int32)
  nameWithType: DSACng.DSACng(Int32)
  fullName: DSACng.DSACng(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: DSACng(CngKey)
  nameWithType: DSACng.DSACng(CngKey)
  fullName: DSACng.DSACng(CngKey)
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: CreateSignature(Byte[])
  nameWithType: DSACng.CreateSignature(Byte[])
  fullName: DSACng.CreateSignature(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSACng.Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DSACng.Dispose(Boolean)
  fullName: DSACng.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: DSACng.ExportParameters(Boolean)
  fullName: DSACng.ExportParameters(Boolean)
- uid: System.Security.Cryptography.DSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: DSAParameters
  nameWithType: DSAParameters
  fullName: System.Security.Cryptography.DSAParameters
- uid: System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: HashData(Stream, HashAlgorithmName)
  nameWithType: DSACng.HashData(Stream, HashAlgorithmName)
  fullName: DSACng.HashData(Stream, HashAlgorithmName)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: DSACng.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: DSACng.HashData(Byte[], Int32, Int32, HashAlgorithmName)
- uid: System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: ImportParameters(DSAParameters)
  nameWithType: DSACng.ImportParameters(DSAParameters)
  fullName: DSACng.ImportParameters(DSAParameters)
- uid: System.Security.Cryptography.DSACng.Key
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: Key
  nameWithType: DSACng.Key
  fullName: DSACng.Key
- uid: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACng.KeyExchangeAlgorithm
  fullName: DSACng.KeyExchangeAlgorithm
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DSACng.LegalKeySizes
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: LegalKeySizes
  nameWithType: DSACng.LegalKeySizes
  fullName: DSACng.LegalKeySizes
- uid: System.Security.Cryptography.KeySizes
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes[]
  nameWithType: KeySizes[]
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSACng.SignatureAlgorithm
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACng.SignatureAlgorithm
  fullName: DSACng.SignatureAlgorithm
- uid: System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: VerifySignature(Byte[], Byte[])
  nameWithType: DSACng.VerifySignature(Byte[], Byte[])
  fullName: DSACng.VerifySignature(Byte[], Byte[])
- uid: System.Security.Cryptography.DSACng.#ctor*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: DSACng
  nameWithType: DSACng.DSACng
  fullName: DSACng.DSACng
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.CreateSignature*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: CreateSignature
  nameWithType: DSACng.CreateSignature
  fullName: DSACng.CreateSignature
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.Dispose*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: Dispose
  nameWithType: DSACng.Dispose
  fullName: DSACng.Dispose
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.ExportParameters*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: ExportParameters
  nameWithType: DSACng.ExportParameters
  fullName: DSACng.ExportParameters
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.HashData*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: HashData
  nameWithType: DSACng.HashData
  fullName: DSACng.HashData
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.ImportParameters*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: ImportParameters
  nameWithType: DSACng.ImportParameters
  fullName: DSACng.ImportParameters
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.Key*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: Key
  nameWithType: DSACng.Key
  fullName: DSACng.Key
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACng.KeyExchangeAlgorithm
  fullName: DSACng.KeyExchangeAlgorithm
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.LegalKeySizes*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: LegalKeySizes
  nameWithType: DSACng.LegalKeySizes
  fullName: DSACng.LegalKeySizes
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.SignatureAlgorithm*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACng.SignatureAlgorithm
  fullName: DSACng.SignatureAlgorithm
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Security.Cryptography.DSACng.VerifySignature*
  parent: System.Security.Cryptography.DSACng
  isExternal: false
  name: VerifySignature
  nameWithType: DSACng.VerifySignature
  fullName: DSACng.VerifySignature
  monikers:
  - netcore-2.0
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: AsymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.DSA.Create
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create()
  nameWithType: DSA.Create()
  fullName: DSA.Create()
- uid: System.Security.Cryptography.DSA.Create(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create(String)
  nameWithType: DSA.Create(String)
  fullName: DSA.Create(String)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: AsymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: FromXmlString(String)
  nameWithType: DSA.FromXmlString(String)
  fullName: DSA.FromXmlString(String)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: AsymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: AsymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: DSA.ToXmlString(Boolean)
  fullName: DSA.ToXmlString(Boolean)
- uid: System.Security.Cryptography.DSA.Create(System.Int32)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create(Int32)
  nameWithType: DSA.Create(Int32)
  fullName: DSA.Create(Int32)
- uid: System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create(DSAParameters)
  nameWithType: DSA.Create(DSAParameters)
  fullName: DSA.Create(DSAParameters)
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Byte[], HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[], HashAlgorithmName)
  fullName: DSA.SignData(Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Stream, HashAlgorithmName)
  nameWithType: DSA.SignData(Stream, HashAlgorithmName)
  fullName: DSA.SignData(Stream, HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  fullName: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Byte[], Byte[], HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)
  fullName: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Stream, Byte[], HashAlgorithmName)
  nameWithType: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)
  fullName: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)
