<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">007fcde8606559097a2bdc3f43d72726f08ced05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Caching.ObjectCache.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2babdd188cdeff2268974fc94a97b42a3f653d2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e5845db52788fc6800c61cbc2d8a4ad55e204bb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an object cache and provides the base methods and properties for accessing the object cache.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> type is the primary type for the in-memory object cache.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To develop a custom cache implementation, you derive from the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class is new as of the <ph id="ph2">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The built-in <ph id="ph1">&lt;xref:System.Runtime.Caching.MemoryCache&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.MemoryCache&gt;</ph> class is the only concrete object cache implementation in the <ph id="ph2">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> that derives from the <ph id="ph3">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Called from constructors in derived classes in order to initialize the <ph id="ph1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, tries to insert a cache entry into the cache as a <ph id="ph1">&lt;xref href="System.Runtime.Caching.CacheItem"&gt;&lt;/xref&gt;</ph> instance, and adds details about how the entry should be evicted.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</ph> method overloads are virtual (not abstract) on the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class, because the <ph id="ph3">&lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</ph> method internally calls <ph id="ph4">&lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This reduces the number of method overloads that a cache implementer has to provide.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a cache implementation does not require any special behavior for the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</ph> method, it can just implement the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt;</ph> method overloads.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The object to add.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An object that contains eviction details for the cache entry.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This object provides more options for eviction than a simple absolute expiration.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if insertion succeeded, or <ph id="ph2">`false`</ph> if there is an already an entry in the cache that has the same key as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">item</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, inserts a cache entry into the cache without overwriting any existing cache entry.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</ph> method overloads are virtual (not abstract) on the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class, because the <ph id="ph3">&lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</ph> method internally calls <ph id="ph4">&lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This reduces the number of method overloads that a cache implementer has to provide.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a cache implementation does not require any special behavior for the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</ph> method, it can just implement the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt;</ph> method overloads.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The object to insert.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The fixed date and time at which the cache entry will expire.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This parameter is required when the <ph id="ph1">&lt;xref href="System.Runtime.Caching.ObjectCache.Add*"&gt;&lt;/xref&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry can be added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because regions are not implemented in <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the default value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if insertion succeeded, or <ph id="ph2">`false`</ph> if there is an already an entry in the cache that has the same key as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">key</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, inserts a cache entry into the cache, specifying information about how the entry will be evicted.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</ph> method overloads are virtual (not abstract) on the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class, because the <ph id="ph3">&lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</ph> method internally calls <ph id="ph4">&lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This reduces the number of method overloads that a cache implementer has to provide.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a cache implementation does not require any special behavior for the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</ph> method, it can just implement the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt;</ph> method overloads.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The object to insert.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An object that contains eviction details for the cache entry.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This object provides more options for eviction than a simple absolute expiration.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry can be added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the insertion try succeeds, or <ph id="ph2">`false`</ph> if there is an already an entry in the cache with the same key as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">key</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, inserts the specified <ph id="ph1">&lt;xref href="System.Runtime.Caching.CacheItem"&gt;&lt;/xref&gt;</ph> object into the cache, specifying information about how the entry will be evicted.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The object to insert.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An object that contains eviction details for the cache entry.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This object provides more options for eviction than a simple absolute expiration.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If a cache entry with the same key exists, the specified cache entry; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, inserts a cache entry into the cache, by using a key, an object for the cache entry, an absolute expiration value, and an optional region to add the cache into.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%28System.String%2CSystem.Object%2CSystem.DateTimeOffset%2CSystem.String%29&gt;</ph> method overload returns an object value, not a <ph id="ph2">&lt;xref:System.Runtime.Caching.CacheItem&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The object to insert.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The fixed date and time at which the cache entry will expire.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry can be added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If a cache entry with the same key exists, the specified cache entry's value; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, inserts a cache entry into the cache, specifying a key and a value for the cache entry, and information about how the entry will be evicted.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%28System.String%2CSystem.Object%2CSystem.Runtime.Caching.CacheItemPolicy%2CSystem.String%29&gt;</ph> method returns an object value, not a <ph id="ph2">&lt;xref:System.Runtime.Caching.CacheItem&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The object to insert.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An object that contains eviction details for the cache entry.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This object provides more options for eviction than a simple absolute expiration.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry can be added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If a cache entry with the same key exists, the specified cache entry's value; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, checks whether the cache entry already exists in the cache.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A named region in the cache where the cache can be found, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the cache contains a cache entry with the same key value as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">key</ph><ept id="p1">&lt;/code&gt;</ept>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a <ph id="ph1">&lt;xref href="System.Runtime.Caching.CacheEntryChangeMonitor"&gt;&lt;/xref&gt;</ph> object that can trigger events in response to changes to specified cache entries.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a derived <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class overrides the base <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor%2A&gt;</ph> method, the cache implementation must create a <ph id="ph3">&lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This specialized change monitor notifies callers when there are changes to the cache entries that are specified in the <ph id="ph1">`keys`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a monitored item in the <ph id="ph1">`keys`</ph> parameter is updated or removed from the cache, the change monitor created by this method triggers an event.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a cache implementation supports named cache regions, a string value can be specified as the <ph id="ph1">`regionName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the parameter defaults to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all cache implementations support cache-entry change monitors.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine whether your cache implementation supports <ph id="ph1">&lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;</ph> objects, see the documentation for the specific cache implementation.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The unique identifiers for cache entries to monitor.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A named region in the cache where the cache keys in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keys</ph><ept id="p1">&lt;/code&gt;</ept> parameter exist, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A change monitor that monitors cache entries in the cache.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a description of the features that a cache implementation provides.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A bitwise combination of flags that indicate the default capabilities of a cache implementation.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the specified cache entry from the cache as an object.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry to get.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry was added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The cache entry that is identified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the specified cache entry from the cache as a <ph id="ph1">&lt;xref href="System.Runtime.Caching.CacheItem"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload exists because some cache implementations might extend the <ph id="ph1">&lt;xref:System.Runtime.Caching.CacheItem&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29&gt;</ph> method overload will not necessarily return all the information about cached data.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.GetCacheItem%28System.String%2CSystem.String%29&gt;</ph> method overload enables custom caches to return more than just the cache value.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.GetCacheItem%28System.String%2CSystem.String%29&gt;</ph> method is like the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29&gt;</ph> method, except that the <ph id="ph3">&lt;xref:System.Runtime.Caching.ObjectCache.GetCacheItem%28System.String%2CSystem.String%29&gt;</ph> method returns return the cache entry as a <ph id="ph4">&lt;xref:System.Runtime.Caching.CacheItem&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry to get.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache was added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Because regions are not implemented in <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the default is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The cache entry that is identified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the total number of cache entries in the cache.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A named region in the cache for which the cache entry count should be computed, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The number of cache entries in the cache.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">regionName</ph><ept id="p1">&lt;/code&gt;</ept> is not <ph id="ph2">`null`</ph>, the count indicates the number of entries that are in the specified cache region.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates an enumerator that can be used to iterate through a collection of cache entries.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cache implementers can override and extend this method to provide a custom means of iterating through a collection of cache entries.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Returning an enumerator is typically a more expensive operation than returning the entire cache entry.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the explicit interface implementations that the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class has for the <ph id="ph2">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The enumerator object that provides access to the cache entries in the cache.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a set of cache entries that correspond to the specified keys.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29&gt;</ph> method overload is a performance optimization for distributed caches that support fetching multiple cache entries from the cache during a single network call.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although a caller can pass one or more keys to the method, there is no guarantee that all keys represent entries in the cache.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the returned dictionary might contain fewer items than the number of keys that were passed to the method.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A collection of unique identifiers for the cache entries to get.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry or entries were added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A dictionary of key/value pairs that represent cache entries.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Gets a set of cache entries that correspond to the specified keys.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.GetValues%2A?displayProperty=fullName&gt;</ph> method overload is like the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29&gt;</ph> method overload, but lets you pass the named region by using optional parameter syntax that is supported by managed languages such as C#.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is a virtual method because the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> class provides a default implementation that passes the <ph id="ph2">`params`</ph> array to the <ph id="ph3">&lt;xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29&gt;</ph> method overload.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry or entries were added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Because regions are not implemented in <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the default is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A collection of unique identifiers for the cache entries to get.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A dictionary of key/value pairs that represent cache entries.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets or set a reference to a managed hosting environment that is available to <ph id="ph1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;&lt;/xref&gt;</ph> implementations and that can provide host-specific services to <ph id="ph2">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;&lt;/xref&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.Host%2A&gt;</ph> property is intended for use by <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> host environments and by cache implementations that implement behavior that depends on the .NET Framework host environment.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists the set of host environment services that might be available from a managed hosting environment and that are available to <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> implementations through the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache.Host%2A&gt;</ph> property:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Service</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Lets host environments provide application domain identifiers that might be needed by a cache implementation for features such as identifying performance counters.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>Lets host environments provide a custom file-change notification system, instead of using the one provided in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Lets cache implementations report cache memory consumption to the host environment.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables host environments to centrally manage memory consumption across multiple cache implementations.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Callers of this property value require unrestricted code access security permissions.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A reference to a cache-aware managed hosting environment.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The value being assigned to the property is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the property value more than one time.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that a cache entry has no absolute expiration.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cache entry that is inserted into the cache with the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration&gt;</ph> field value set as the expiration value should never expire based on an absolute point in time.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, a cache entry with this setting can be evicted from the cache for other reasons that are determined by a particular cache implementation, such as a change-monitor event eviction caused by memory pressure.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Gets or sets the default indexer for the <ph id="ph1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of the set accessor of this property is like the <ph id="ph1">&lt;xref:System.Runtime.Caching.MemoryCache.Set%28System.String%2CSystem.Object%2CSystem.DateTimeOffset%2CSystem.String%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Internally, a cache implementation could set the absolute expiration of the specified value to the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>However this behavior is ultimately up to the cache implementation.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of get accessor is like calling the <ph id="ph1">&lt;xref:System.Collections.Specialized.NameValueCollection.Get%28System.String%29&gt;</ph> method and using <ph id="ph2">`null`</ph> for the region name.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A unique identifier for a cache entry in the cache.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A key that serves as an indexer into the cache instance.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Gets the name of a specific <ph id="ph1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some cache implementations might support multiple instances of the cache that is running in a single application.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property lets cache implementers return a name that identifies a specific cache instance.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The name of a specific cache instance.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Indicates that a cache entry has no sliding expiration time.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Expiration that is based on duration or a defined window of time is also referred to as sliding expiration.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, a cache implementation that evicts items that are based on sliding expiration will remove an item that has not been accessed in the specified window of time.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cache entry that is inserted into the cache with the <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache.NoSlidingExpiration&gt;</ph> field value set as the expiration value should never be evicted because of non-activity in a sliding time window.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, a cache item can be evicted if it has an absolute expiration, or if some other eviction event occurs, such a change monitor or memory pressure.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, removes the cache entry from the cache.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override this method in a custom cache implementation, if there is a cache entry in the cache that corresponds to <ph id="ph1">`key`</ph>, the value of the removed item should be returned.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>If nothing was removed from the cache, the method should return <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some distributed cache implementations might not support the ability to return the value that was removed from the cache.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>This might be because the cache implementation does not support returning the value of a removed cache item.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>It might also be because marshaling the object as a return value is too expensive.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such cases, cache implementations can return <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry was added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>An object that represents the value of the removed cache entry that was specified by the key, or <ph id="ph1">`null`</ph> if the specified entry was not found.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, inserts the cache entry into the cache as a <ph id="ph1">&lt;xref href="System.Runtime.Caching.CacheItem"&gt;&lt;/xref&gt;</ph> instance, specifying information about how the entry will be evicted.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the key for <ph id="ph1">`item`</ph> does not exist, <ph id="ph2">`item`</ph> is inserted as a new cache entry.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an item with a key that matches <ph id="ph1">`item`</ph> exists, the value from <ph id="ph2">`item`</ph> is used to update or overwrite the value of the existing cache entry.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The cache item to add.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>An object that contains eviction details for the cache entry.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This object provides more options for eviction than a simple absolute expiration.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, inserts a cache entry into the cache, specifying time-based expiration details.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an item that matches <ph id="ph1">`key`</ph> does not exist in the cache, <ph id="ph2">`value`</ph> and <ph id="ph3">`key`</ph> are used to insert as a new cache entry.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an item with a key that matches <ph id="ph1">`item`</ph> exists, the cache entry is updated or overwritten by using <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The object to insert.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The fixed date and time at which the cache entry will expire.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry can be added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, inserts a cache entry into the cache.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload lets you provide more eviction or expiration details than those that are available in time-based absolute expiration.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an item that matches <ph id="ph1">`key`</ph> does not exist in the cache, <ph id="ph2">`value`</ph> and <ph id="ph3">`key`</ph> are used to insert as a new cache entry.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an item with a key that matches <ph id="ph1">`item`</ph> exists, the cache entry is updated or overwritten by using <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A unique identifier for the cache entry.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The object to insert.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>An object that contains eviction details for the cache entry.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This object provides more options for eviction than a simple absolute expiration.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A named region in the cache to which the cache entry can be added, if regions are implemented.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The default value for the optional parameter is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Supports iteration over a generic collection.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when a derived <ph id="ph1">&lt;xref:System.Runtime.Caching.ObjectCache&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Developers can use this method to iterate through a generic collection of cache entries.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the default <ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> implementation that internally calls the <ph id="ph2">&lt;xref:System.Runtime.Caching.ObjectCache.GetEnumerator%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The enumerator object that provides access to the items in the cache.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>