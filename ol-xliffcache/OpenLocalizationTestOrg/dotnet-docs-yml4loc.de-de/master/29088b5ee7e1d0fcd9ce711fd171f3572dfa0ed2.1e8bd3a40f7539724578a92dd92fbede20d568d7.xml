{"nodes":[{"content":"Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.","nodes":[{"pos":[0,120],"content":"Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.","nodes":[{"content":"Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.","pos":[0,120]}]}],"pos":[3641,3762],"yaml":true},{"content":"The collection is immutable (read-only) and has no public constructor. The <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method returns a <xref:System.Text.RegularExpressions.MatchCollection> object.  \n  \n The collection contains zero or more <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects. If the match is successful, the collection is populated with one <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object for each match found in the input string. If the match is unsuccessful, the collection contains no <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects, and its <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property equals zero.  \n  \n When applying a regular expression pattern to a particular input string, the regular expression engine uses either of two techniques to build the <xref:System.Text.RegularExpressions.MatchCollection> object:  \n  \n-   Direct evaluation.  \n  \n     The <xref:System.Text.RegularExpressions.MatchCollection> object is populated all at once, with all matches resulting from a particular call to the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method. This technique is used when the collection's <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property is accessed. It typically is the more expensive method of populating the collection and entails a greater performance hit.  \n  \n-   Lazy evaluation.  \n  \n     The <xref:System.Text.RegularExpressions.MatchCollection> object is populated as needed on a match-by-match basis. It is equivalent to the regular expression engine calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method repeatedly and adding each match to the collection. This technique is used when the collection is accessed through its <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method, or when it is accessed using the `foreach` statement (in C#) or the `For Each`...`Next` statement (in Visual Basic).  \n  \n To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`â€¦`Next` in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method.","nodes":[{"pos":[0,233],"content":"The collection is immutable (read-only) and has no public constructor. The <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method returns a <xref:System.Text.RegularExpressions.MatchCollection> object.","nodes":[{"content":"The collection is immutable (read-only) and has no public constructor. The <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method returns a <xref:System.Text.RegularExpressions.MatchCollection> object.","pos":[0,233],"nodes":[{"content":"The collection is immutable (read-only) and has no public constructor.","pos":[0,70]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.","pos":[71,233],"source":" The <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method returns a <xref:System.Text.RegularExpressions.MatchCollection> object."}]}]},{"pos":[240,765],"content":"The collection contains zero or more <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects. If the match is successful, the collection is populated with one <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object for each match found in the input string. If the match is unsuccessful, the collection contains no <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects, and its <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property equals zero.","nodes":[{"content":"The collection contains zero or more <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects. If the match is successful, the collection is populated with one <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object for each match found in the input string. If the match is unsuccessful, the collection contains no <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects, and its <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property equals zero.","pos":[0,525],"nodes":[{"content":"The collection contains zero or more <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=fullName&gt;</ph> objects.","pos":[0,114],"source":"The collection contains zero or more <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects."},{"content":"If the match is successful, the collection is populated with one <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=fullName&gt;</ph> object for each match found in the input string.","pos":[115,297],"source":" If the match is successful, the collection is populated with one <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object for each match found in the input string."},{"content":"If the match is unsuccessful, the collection contains no <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=fullName&gt;</ph> objects, and its <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property equals zero.","pos":[298,525],"source":" If the match is unsuccessful, the collection contains no <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects, and its <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property equals zero."}]}]},{"pos":[772,979],"content":"When applying a regular expression pattern to a particular input string, the regular expression engine uses either of two techniques to build the <xref:System.Text.RegularExpressions.MatchCollection> object:","nodes":[{"content":"When applying a regular expression pattern to a particular input string, the regular expression engine uses either of two techniques to build the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object:","pos":[0,207],"source":"When applying a regular expression pattern to a particular input string, the regular expression engine uses either of two techniques to build the <xref:System.Text.RegularExpressions.MatchCollection> object:"}]},{"pos":[989,1007],"content":"Direct evaluation.","nodes":[{"content":"Direct evaluation.","pos":[0,18]}]},{"pos":[1018,1493],"content":"The <xref:System.Text.RegularExpressions.MatchCollection> object is populated all at once, with all matches resulting from a particular call to the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method. This technique is used when the collection's <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property is accessed. It typically is the more expensive method of populating the collection and entails a greater performance hit.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.MatchCollection> object is populated all at once, with all matches resulting from a particular call to the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method. This technique is used when the collection's <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property is accessed. It typically is the more expensive method of populating the collection and entails a greater performance hit.","pos":[0,475],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is populated all at once, with all matches resulting from a particular call to the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,235],"source":"The <xref:System.Text.RegularExpressions.MatchCollection> object is populated all at once, with all matches resulting from a particular call to the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method."},{"content":"This technique is used when the collection's <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property is accessed.","pos":[236,365],"source":" This technique is used when the collection's <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property is accessed."},{"content":"It typically is the more expensive method of populating the collection and entails a greater performance hit.","pos":[366,475]}]}]},{"pos":[1503,1519],"content":"Lazy evaluation.","nodes":[{"content":"Lazy evaluation.","pos":[0,16]}]},{"pos":[1530,2106],"content":"The <xref:System.Text.RegularExpressions.MatchCollection> object is populated as needed on a match-by-match basis. It is equivalent to the regular expression engine calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method repeatedly and adding each match to the collection. This technique is used when the collection is accessed through its <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method, or when it is accessed using the `foreach` statement (in C#) or the `For Each`...`Next` statement (in Visual Basic).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is populated as needed on a match-by-match basis.","pos":[0,114],"source":"The <xref:System.Text.RegularExpressions.MatchCollection> object is populated as needed on a match-by-match basis."},{"content":"It is equivalent to the regular expression engine calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName&gt;</ph> method repeatedly and adding each match to the collection.","pos":[115,313],"source":" It is equivalent to the regular expression engine calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method repeatedly and adding each match to the collection."},{"content":"This technique is used when the collection is accessed through its <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method, or when it is accessed using the <ph id=\"ph2\">`foreach`</ph> statement (in C#) or the <ph id=\"ph3\">`For Each`</ph>...<ph id=\"ph4\">`Next`</ph> statement (in Visual Basic).","pos":[314,576],"source":" This technique is used when the collection is accessed through its <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method, or when it is accessed using the `foreach` statement (in C#) or the `For Each`...`Next` statement (in Visual Basic)."}]},{"pos":[2113,2442],"content":"To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`â€¦`Next` in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method.","nodes":[{"content":"To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as <ph id=\"ph1\">`foreach`</ph> in C# and <ph id=\"ph2\">`For Each`</ph>â€¦<ph id=\"ph3\">`Next`</ph>","pos":[0,172],"source":"To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`â€¦`Next`"},{"content":"in Visual Basic) instead of retrieving the enumerator that is returned by the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method.","pos":[173,329],"source":" in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method."}]}],"pos":[3773,6232],"yaml":true,"extradata":"MT"},{"content":"Copies all the elements of the collection to the given array starting at the given index.","nodes":[{"pos":[0,89],"content":"Copies all the elements of the collection to the given array starting at the given index.","nodes":[{"content":"Copies all the elements of the collection to the given array starting at the given index.","pos":[0,89]}]}],"pos":[9135,9225],"yaml":true},{"content":"Because the collection is copied into the array starting at the given index, the destination array must be at least as large as the entire collection.  \n  \n> [!WARNING]\n>  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead.  \n  \n Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to copy the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.","nodes":[{"pos":[0,150],"content":"Because the collection is copied into the array starting at the given index, the destination array must be at least as large as the entire collection.","nodes":[{"content":"Because the collection is copied into the array starting at the given index, the destination array must be at least as large as the entire collection.","pos":[0,150]}]},{"pos":[158,522],"content":"[!WARNING]\n This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead.","leadings":["","> "],"nodes":[{"content":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead.","pos":[11,362],"nodes":[{"content":"This member is not present in the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.","pos":[1,91],"source":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]."},{"content":"If you are developing applications that target the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[92,351],"source":" If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead."}]}]},{"pos":[529,961],"content":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to copy the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.","nodes":[{"content":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to copy the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.","pos":[0,432],"nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to copy the collection before it has been fully populated may throw a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[0,274],"source":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to copy the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.","pos":[275,432]}]}]}],"pos":[9236,10205],"yaml":true,"extradata":"MT"},{"content":"The array the collection is to be copied into.","nodes":[{"pos":[0,46],"content":"The array the collection is to be copied into.","nodes":[{"content":"The array the collection is to be copied into.","pos":[0,46]}]}],"pos":[10354,10401],"yaml":true},{"content":"The position in the array where copying is to begin.","nodes":[{"pos":[0,52],"content":"The position in the array where copying is to begin.","nodes":[{"content":"The position in the array where copying is to begin.","pos":[0,52]}]}],"pos":[10466,10519],"yaml":true},{"content":"<code>array</code> is a multi-dimensional array.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is a multi-dimensional array.","source":"<code>array</code> is a multi-dimensional array."}],"pos":[10694,10743],"yaml":true},{"content":"<code>arrayIndex</code> is outside the bounds of <code>array</code>.  \n  \n -or-  \n  \n <code>arrayIndex</code> plus <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\"></xref> is outside the bounds of <code>array</code>.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is outside the bounds of <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>arrayIndex</code> is outside the bounds of <code>array</code>."},{"pos":[75,79],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[86,233],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.MatchCollection.Count\"&gt;&lt;/xref&gt;</ph> is outside the bounds of <ph id=\"ph3\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>arrayIndex</code> plus <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\"></xref> is outside the bounds of <code>array</code>."}],"pos":[10851,11093],"yaml":true},{"content":"A time-out occurred.","nodes":[{"pos":[0,20],"content":"A time-out occurred.","nodes":[{"content":"A time-out occurred.","pos":[0,20]}]}],"pos":[11253,11274],"yaml":true},{"content":"Gets the number of matches.","nodes":[{"pos":[0,27],"content":"Gets the number of matches.","nodes":[{"content":"Gets the number of matches.","pos":[0,27]}]}],"pos":[13627,13655],"yaml":true},{"content":"Accessing individual members of the <xref:System.Text.RegularExpressions.MatchCollection> object by retrieving the value of the collection's <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property causes the regular expression engine to populate the collection using direct evaluation. ln contrast, calling the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method (or using the `foreach` statement in C# and the `For Each`...`Next` statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation. Direct evaluation can be a much more expensive method of building the collection than lazy evaluation.  \n  \n Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.","nodes":[{"pos":[0,711],"content":"Accessing individual members of the <xref:System.Text.RegularExpressions.MatchCollection> object by retrieving the value of the collection's <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property causes the regular expression engine to populate the collection using direct evaluation. ln contrast, calling the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method (or using the `foreach` statement in C# and the `For Each`...`Next` statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation. Direct evaluation can be a much more expensive method of building the collection than lazy evaluation.","nodes":[{"content":"Accessing individual members of the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object by retrieving the value of the collection's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property causes the regular expression engine to populate the collection using direct evaluation.","pos":[0,301],"source":"Accessing individual members of the <xref:System.Text.RegularExpressions.MatchCollection> object by retrieving the value of the collection's <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property causes the regular expression engine to populate the collection using direct evaluation."},{"content":"ln contrast, calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method (or using the <ph id=\"ph2\">`foreach`</ph> statement in C# and the <ph id=\"ph3\">`For Each`</ph>...<ph id=\"ph4\">`Next`</ph> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation.","pos":[302,608],"source":" ln contrast, calling the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method (or using the `foreach` statement in C# and the `For Each`...`Next` statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation."},{"content":"Direct evaluation can be a much more expensive method of building the collection than lazy evaluation.","pos":[609,711]}]},{"pos":[718,1181],"content":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.","nodes":[{"content":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.","pos":[0,463],"nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[0,305],"source":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.","pos":[306,463]}]}]}],"pos":[13666,14852],"yaml":true,"extradata":"MT"},{"content":"The number of matches.","nodes":[{"pos":[0,22],"content":"The number of matches.","nodes":[{"content":"The number of matches.","pos":[0,22]}]}],"pos":[15924,15947],"yaml":true},{"content":"A time-out occurred.","nodes":[{"pos":[0,20],"content":"A time-out occurred.","nodes":[{"content":"A time-out occurred.","pos":[0,20]}]}],"pos":[16187,16208],"yaml":true},{"content":"Provides an enumerator that iterates through the collection.","nodes":[{"pos":[0,60],"content":"Provides an enumerator that iterates through the collection.","nodes":[{"content":"Provides an enumerator that iterates through the collection.","pos":[0,60]}]}],"pos":[17758,17819],"yaml":true},{"content":"Instead of  calling the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Match> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`â€¦`Next` in Visual Basic) provided by your programming language.  \n  \n Iterating the members of the <xref:System.Text.RegularExpressions.MatchCollection> object using the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method (or the `foreach` statement in C# and the `For Each`...`Next` statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation. This is analogous to repeatedly calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method, and then adding the resulting match to the <xref:System.Text.RegularExpressions.MatchCollection> object. In contrast, the regular expression engine uses direct evaluation to populate the collection all at once when the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property is accessed. This can be a much more expensive method of building the collection than lazy evaluation.  \n  \n Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find the next match exceeds that time-out interval.","nodes":[{"pos":[0,380],"content":"Instead of  calling the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Match> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`â€¦`Next` in Visual Basic) provided by your programming language.","nodes":[{"content":"Instead of  calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method to retrieve an enumerator that lets you iterate through the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects in the collection, you should use the group iteration construct (such as <ph id=\"ph3\">`foreach`</ph> in C# and <ph id=\"ph4\">`For Each`</ph>â€¦<ph id=\"ph5\">`Next`</ph>","pos":[0,324],"source":"Instead of  calling the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Match> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`â€¦`Next`"},{"content":"in Visual Basic) provided by your programming language.","pos":[325,380]}]},{"pos":[387,1286],"content":"Iterating the members of the <xref:System.Text.RegularExpressions.MatchCollection> object using the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method (or the `foreach` statement in C# and the `For Each`...`Next` statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation. This is analogous to repeatedly calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method, and then adding the resulting match to the <xref:System.Text.RegularExpressions.MatchCollection> object. In contrast, the regular expression engine uses direct evaluation to populate the collection all at once when the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property is accessed. This can be a much more expensive method of building the collection than lazy evaluation.","nodes":[{"content":"Iterating the members of the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object using the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method (or the <ph id=\"ph3\">`foreach`</ph> statement in C# and the <ph id=\"ph4\">`For Each`</ph>...<ph id=\"ph5\">`Next`</ph> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation.","pos":[0,375],"source":"Iterating the members of the <xref:System.Text.RegularExpressions.MatchCollection> object using the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method (or the `foreach` statement in C# and the `For Each`...`Next` statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation."},{"content":"This is analogous to repeatedly calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName&gt;</ph> method, and then adding the resulting match to the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.","pos":[376,610],"source":" This is analogous to repeatedly calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method, and then adding the resulting match to the <xref:System.Text.RegularExpressions.MatchCollection> object."},{"content":"In contrast, the regular expression engine uses direct evaluation to populate the collection all at once when the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property is accessed.","pos":[611,809],"source":" In contrast, the regular expression engine uses direct evaluation to populate the collection all at once when the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property is accessed."},{"content":"This can be a much more expensive method of building the collection than lazy evaluation.","pos":[810,899]}]},{"pos":[1293,1716],"content":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find the next match exceeds that time-out interval.","nodes":[{"content":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find the next match exceeds that time-out interval.","pos":[0,423],"nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[0,265],"source":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find the next match exceeds that time-out interval.","pos":[266,423]}]}]}],"pos":[17830,19553],"yaml":true,"extradata":"MT"},{"content":"An object that contains all <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects within the <xref href=\"System.Text.RegularExpressions.MatchCollection\"></xref>.","nodes":[{"pos":[0,173],"content":"An object that contains all <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Match\"&gt;&lt;/xref&gt;</ph> objects within the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.MatchCollection\"&gt;&lt;/xref&gt;</ph>.","source":"An object that contains all <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects within the <xref href=\"System.Text.RegularExpressions.MatchCollection\"></xref>."}],"pos":[19725,19899],"yaml":true},{"content":"A time-out occurred.","nodes":[{"pos":[0,20],"content":"A time-out occurred.","nodes":[{"content":"A time-out occurred.","pos":[0,20]}]}],"pos":[20147,20168],"yaml":true},{"content":"Gets a value that indicates whether the collection is read only.","nodes":[{"pos":[0,64],"content":"Gets a value that indicates whether the collection is read only.","nodes":[{"content":"Gets a value that indicates whether the collection is read only.","pos":[0,64]}]}],"pos":[21696,21761],"yaml":true},{"content":"`true` in all cases.","nodes":[{"pos":[0,20],"content":"<ph id=\"ph1\">`true`</ph> in all cases.","source":"`true` in all cases."}],"pos":[21874,21897],"yaml":true},{"content":"Gets a value indicating whether access to the collection is synchronized (thread-safe).","nodes":[{"pos":[0,87],"content":"Gets a value indicating whether access to the collection is synchronized (thread-safe).","nodes":[{"content":"Gets a value indicating whether access to the collection is synchronized (thread-safe).","pos":[0,87]}]}],"pos":[23233,23321],"yaml":true},{"content":"> [!WARNING]\n>  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead.","nodes":[{"pos":[2,374],"content":"[!WARNING]\n This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead.","leadings":["","> "],"nodes":[{"content":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead.","pos":[11,370],"nodes":[{"content":"This member is not present in the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.","pos":[1,91],"source":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]."},{"content":"If you are developing applications that target the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName&gt;</ph> property instead.","pos":[92,359],"source":" If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead."}]}]}],"pos":[23332,23719],"yaml":true,"extradata":"MT"},{"content":"`false` in all cases.","nodes":[{"pos":[0,21],"content":"<ph id=\"ph1\">`false`</ph> in all cases.","source":"`false` in all cases."}],"pos":[23836,23860],"yaml":true},{"content":"Gets an individual member of the collection.","nodes":[{"pos":[0,44],"content":"Gets an individual member of the collection.","nodes":[{"content":"Gets an individual member of the collection.","pos":[0,44]}]}],"pos":[25203,25248],"yaml":true},{"content":"In C#, the <xref:System.Text.RegularExpressions.MatchCollection.Item%2A> property is an indexer; it is not explicitly referenced in code, but instead allows the <xref:System.Text.RegularExpressions.MatchCollection> collection to be accessed as if it were an array.  \n  \n Typically, individual items in the <xref:System.Text.RegularExpressions.MatchCollection> object are accessed by their index only after the total number of items in the collection has been determined from the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property. However, accessing the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property causes the regular expression engine to use direct evaluation to build the collection all at once. This is typically more expensive than iterating the collection using the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method, the C# `foreach` statement, or the Visual Basic `For Each`...`Next` statement.  \n  \n Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a specific match exceeds that time-out interval.","nodes":[{"pos":[0,264],"content":"In C#, the <xref:System.Text.RegularExpressions.MatchCollection.Item%2A> property is an indexer; it is not explicitly referenced in code, but instead allows the <xref:System.Text.RegularExpressions.MatchCollection> collection to be accessed as if it were an array.","nodes":[{"content":"In C#, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph> property is an indexer; it is not explicitly referenced in code, but instead allows the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to be accessed as if it were an array.","pos":[0,264],"source":"In C#, the <xref:System.Text.RegularExpressions.MatchCollection.Item%2A> property is an indexer; it is not explicitly referenced in code, but instead allows the <xref:System.Text.RegularExpressions.MatchCollection> collection to be accessed as if it were an array."}]},{"pos":[271,976],"content":"Typically, individual items in the <xref:System.Text.RegularExpressions.MatchCollection> object are accessed by their index only after the total number of items in the collection has been determined from the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property. However, accessing the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property causes the regular expression engine to use direct evaluation to build the collection all at once. This is typically more expensive than iterating the collection using the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method, the C# `foreach` statement, or the Visual Basic `For Each`...`Next` statement.","nodes":[{"content":"Typically, individual items in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object are accessed by their index only after the total number of items in the collection has been determined from the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property.","pos":[0,280],"source":"Typically, individual items in the <xref:System.Text.RegularExpressions.MatchCollection> object are accessed by their index only after the total number of items in the collection has been determined from the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property."},{"content":"However, accessing the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property causes the regular expression engine to use direct evaluation to build the collection all at once.","pos":[281,474],"source":" However, accessing the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property causes the regular expression engine to use direct evaluation to build the collection all at once."},{"content":"This is typically more expensive than iterating the collection using the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method, the C# <ph id=\"ph2\">`foreach`</ph> statement, or the Visual Basic <ph id=\"ph3\">`For Each`</ph>...<ph id=\"ph4\">`Next`</ph> statement.","pos":[475,705],"source":" This is typically more expensive than iterating the collection using the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method, the C# `foreach` statement, or the Visual Basic `For Each`...`Next` statement."}]},{"pos":[983,1391],"content":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a specific match exceeds that time-out interval.","nodes":[{"content":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a specific match exceeds that time-out interval.","pos":[0,408],"nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[0,248],"source":"Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a specific match exceeds that time-out interval.","pos":[249,408]}]}]}],"pos":[25259,26657],"yaml":true,"extradata":"MT"},{"content":"Index into the <xref href=\"System.Text.RegularExpressions.Match\"></xref> collection.","nodes":[{"pos":[0,84],"content":"Index into the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Match\"&gt;&lt;/xref&gt;</ph> collection.","source":"Index into the <xref href=\"System.Text.RegularExpressions.Match\"></xref> collection."}],"pos":[27728,27813],"yaml":true},{"content":"The captured substring at position <code>i</code> in the collection.","nodes":[{"pos":[0,68],"content":"The captured substring at position <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">i</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the collection.","source":"The captured substring at position <code>i</code> in the collection."}],"pos":[27893,27962],"yaml":true},{"content":"<code>i</code> is less than 0 or greater than or equal to <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;i&lt;/code&gt;</ph> is less than 0 or greater than or equal to <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.MatchCollection.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>i</code> is less than 0 or greater than or equal to <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\"></xref>."}],"pos":[28155,28288],"yaml":true},{"content":"A time-out occurred.","nodes":[{"pos":[0,20],"content":"A time-out occurred.","nodes":[{"content":"A time-out occurred.","pos":[0,20]}]}],"pos":[28448,28469],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the collection.","nodes":[{"pos":[0,72],"content":"Gets an object that can be used to synchronize access to the collection.","nodes":[{"content":"Gets an object that can be used to synchronize access to the collection.","pos":[0,72]}]}],"pos":[29985,30058],"yaml":true},{"content":"> [!WARNING]\n>  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead.","nodes":[{"pos":[2,368],"content":"[!WARNING]\n This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead.","leadings":["","> "],"nodes":[{"content":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead.","pos":[11,364],"nodes":[{"content":"This member is not present in the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.","pos":[1,91],"source":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]."},{"content":"If you are developing applications that target the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName&gt;</ph> property instead.","pos":[92,353],"source":" If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead."}]}]}],"pos":[30069,30450],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the collection. This property always returns the object itself.","nodes":[{"pos":[0,115],"content":"An object that can be used to synchronize access to the collection. This property always returns the object itself.","nodes":[{"content":"An object that can be used to synchronize access to the collection. This property always returns the object itself.","pos":[0,115],"nodes":[{"content":"An object that can be used to synchronize access to the collection.","pos":[0,67]},{"content":"This property always returns the object itself.","pos":[68,115]}]}]}],"pos":[30562,30678],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.RegularExpressions.MatchCollection\n  commentId: T:System.Text.RegularExpressions.MatchCollection\n  id: MatchCollection\n  children:\n  - System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)\n  - System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)\n  - System.Text.RegularExpressions.MatchCollection.Count\n  - System.Text.RegularExpressions.MatchCollection.GetEnumerator\n  - System.Text.RegularExpressions.MatchCollection.IsReadOnly\n  - System.Text.RegularExpressions.MatchCollection.IsSynchronized\n  - System.Text.RegularExpressions.MatchCollection.Item(System.Int32)\n  - System.Text.RegularExpressions.MatchCollection.SyncRoot\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#IsSynchronized\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#SyncRoot\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)\n  - System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)\n  langs:\n  - csharp\n  name: MatchCollection\n  nameWithType: MatchCollection\n  fullName: System.Text.RegularExpressions.MatchCollection\n  type: Class\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.\n  remarks: \"The collection is immutable (read-only) and has no public constructor. The <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method returns a <xref:System.Text.RegularExpressions.MatchCollection> object.  \\n  \\n The collection contains zero or more <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects. If the match is successful, the collection is populated with one <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object for each match found in the input string. If the match is unsuccessful, the collection contains no <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> objects, and its <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property equals zero.  \\n  \\n When applying a regular expression pattern to a particular input string, the regular expression engine uses either of two techniques to build the <xref:System.Text.RegularExpressions.MatchCollection> object:  \\n  \\n-   Direct evaluation.  \\n  \\n     The <xref:System.Text.RegularExpressions.MatchCollection> object is populated all at once, with all matches resulting from a particular call to the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method. This technique is used when the collection's <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property is accessed. It typically is the more expensive method of populating the collection and entails a greater performance hit.  \\n  \\n-   Lazy evaluation.  \\n  \\n     The <xref:System.Text.RegularExpressions.MatchCollection> object is populated as needed on a match-by-match basis. It is equivalent to the regular expression engine calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method repeatedly and adding each match to the collection. This technique is used when the collection is accessed through its <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method, or when it is accessed using the `foreach` statement (in C#) or the `For Each`...`Next` statement (in Visual Basic).  \\n  \\n To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`â€¦`Next` in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Text.RegularExpressions.MatchCollection> class to interrogate a set of <xref:System.Text.RegularExpressions.Match> instances.  \\n  \\n [!code-cpp[Regex_Words#0](~/samples/snippets/cpp/VS_Snippets_CLR/Regex_Words/CPP/words.cpp#0)]\\n [!code-csharp[Regex_Words#0](~/samples/snippets/csharp/VS_Snippets_CLR/Regex_Words/CS/words.cs#0)]\\n [!code-vb[Regex_Words#0](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex_Words/VB/words.vb#0)]\"\n  syntax:\n    content: 'public class MatchCollection : System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: CopyTo(Array, Int32)\n  nameWithType: MatchCollection.CopyTo(Array, Int32)\n  fullName: MatchCollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Copies all the elements of the collection to the given array starting at the given index.\n  remarks: \"Because the collection is copied into the array starting at the given index, the destination array must be at least as large as the entire collection.  \\n  \\n> [!WARNING]\\n>  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead.  \\n  \\n Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to copy the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.\"\n  syntax:\n    content: public void CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The array the collection is to be copied into.\n    - id: arrayIndex\n      type: System.Int32\n      description: The position in the array where copying is to begin.\n  overload: System.Text.RegularExpressions.MatchCollection.CopyTo*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>array</code> is a multi-dimensional array.\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"<code>arrayIndex</code> is outside the bounds of <code>array</code>.  \\n  \\n -or-  \\n  \\n <code>arrayIndex</code> plus <xref href=\\\"System.Text.RegularExpressions.MatchCollection.Count\\\"></xref> is outside the bounds of <code>array</code>.\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)\n  id: CopyTo(System.Text.RegularExpressions.Match[],System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: CopyTo(Match[], Int32)\n  nameWithType: MatchCollection.CopyTo(Match[], Int32)\n  fullName: MatchCollection.CopyTo(Match[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: public void CopyTo (System.Text.RegularExpressions.Match[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Text.RegularExpressions.Match[]\n      description: ''\n    - id: arrayIndex\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.CopyTo*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.Count\n  commentId: P:System.Text.RegularExpressions.MatchCollection.Count\n  id: Count\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: MatchCollection.Count\n  fullName: MatchCollection.Count\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets the number of matches.\n  remarks: \"Accessing individual members of the <xref:System.Text.RegularExpressions.MatchCollection> object by retrieving the value of the collection's <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property causes the regular expression engine to populate the collection using direct evaluation. ln contrast, calling the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method (or using the `foreach` statement in C# and the `For Each`...`Next` statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation. Direct evaluation can be a much more expensive method of building the collection than lazy evaluation.  \\n  \\n Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.\"\n  example:\n  - \"The following example uses the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property to determine whether the call to the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method found any matches. If not, it indicates that no matches were found. Otherwise, it enumerates the matches and displays their value and the position in the input string at which they were found.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.MatchCollection.Count#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.matchcollection.count/cs/countex1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.MatchCollection.Count#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.matchcollection.count/vb/countex1.vb#1)]  \\n  \\n The regular expression pattern `\\\\d+` matches one or more decimal characters in an input string.\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of matches.\n  overload: System.Text.RegularExpressions.MatchCollection.Count*\n  exceptions:\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.MatchCollection.GetEnumerator\n  commentId: M:System.Text.RegularExpressions.MatchCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: MatchCollection.GetEnumerator()\n  fullName: MatchCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Provides an enumerator that iterates through the collection.\n  remarks: \"Instead of  calling the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Match> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`â€¦`Next` in Visual Basic) provided by your programming language.  \\n  \\n Iterating the members of the <xref:System.Text.RegularExpressions.MatchCollection> object using the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method (or the `foreach` statement in C# and the `For Each`...`Next` statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation. This is analogous to repeatedly calling the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method, and then adding the resulting match to the <xref:System.Text.RegularExpressions.MatchCollection> object. In contrast, the regular expression engine uses direct evaluation to populate the collection all at once when the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property is accessed. This can be a much more expensive method of building the collection than lazy evaluation.  \\n  \\n Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find the next match exceeds that time-out interval.\"\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An object that contains all <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects within the <xref href=\"System.Text.RegularExpressions.MatchCollection\"></xref>.\n  overload: System.Text.RegularExpressions.MatchCollection.GetEnumerator*\n  exceptions:\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.MatchCollection.IsReadOnly\n  commentId: P:System.Text.RegularExpressions.MatchCollection.IsReadOnly\n  id: IsReadOnly\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: MatchCollection.IsReadOnly\n  fullName: MatchCollection.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Gets a value that indicates whether the collection is read only.\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` in all cases.'\n  overload: System.Text.RegularExpressions.MatchCollection.IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.MatchCollection.IsSynchronized\n  commentId: P:System.Text.RegularExpressions.MatchCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: MatchCollection.IsSynchronized\n  fullName: MatchCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Gets a value indicating whether access to the collection is synchronized (thread-safe).\n  remarks: >-\n    > [!WARNING]\n\n    >  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead.\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`false` in all cases.'\n  overload: System.Text.RegularExpressions.MatchCollection.IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.MatchCollection.Item(System.Int32)\n  commentId: P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: MatchCollection.Item(Int32)\n  fullName: MatchCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets an individual member of the collection.\n  remarks: \"In C#, the <xref:System.Text.RegularExpressions.MatchCollection.Item%2A> property is an indexer; it is not explicitly referenced in code, but instead allows the <xref:System.Text.RegularExpressions.MatchCollection> collection to be accessed as if it were an array.  \\n  \\n Typically, individual items in the <xref:System.Text.RegularExpressions.MatchCollection> object are accessed by their index only after the total number of items in the collection has been determined from the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property. However, accessing the <xref:System.Text.RegularExpressions.MatchCollection.Count%2A> property causes the regular expression engine to use direct evaluation to build the collection all at once. This is typically more expensive than iterating the collection using the <xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A> method, the C# `foreach` statement, or the Visual Basic `For Each`...`Next` statement.  \\n  \\n Because the <xref:System.Text.RegularExpressions.MatchCollection> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a specific match exceeds that time-out interval.\"\n  example:\n  - \"The following example parses the first sentence of Nathaniel Hawthorne's *House of the Seven Gables* and returns a <xref:System.Text.RegularExpressions.MatchCollection> object that contains all words that begin with either an uppercase or lowercase \\\"h\\\". The <xref:System.Text.RegularExpressions.MatchCollection.Item%2A> property is then used to retrieve each word and display it to the console.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.MatchCollection.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.MatchCollection.Item/cs/RegEx_24804.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.MatchCollection.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.MatchCollection.Item/vb/RegEx_24804.vb#1)]  \\n  \\n The example produces the following output:  \\n  \\n```  \\nHalf  \\nhouse  \\nhuge  \\n```\"\n  syntax:\n    content: public virtual System.Text.RegularExpressions.Match this[int i] { get; }\n    parameters:\n    - id: i\n      type: System.Int32\n      description: Index into the <xref href=\"System.Text.RegularExpressions.Match\"></xref> collection.\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: The captured substring at position <code>i</code> in the collection.\n  overload: System.Text.RegularExpressions.MatchCollection.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>i</code> is less than 0 or greater than or equal to <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\"></xref>.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.MatchCollection.SyncRoot\n  commentId: P:System.Text.RegularExpressions.MatchCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: MatchCollection.SyncRoot\n  fullName: MatchCollection.SyncRoot\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Gets an object that can be used to synchronize access to the collection.\n  remarks: >-\n    > [!WARNING]\n\n    >  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead.\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the collection. This property always returns the object itself.\n  overload: System.Text.RegularExpressions.MatchCollection.SyncRoot*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Match>#Add(System.Text.RegularExpressions.Match)\n  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: ICollection<Match>.Add(Match)\n  nameWithType: MatchCollection.ICollection<Match>.Add(Match)\n  fullName: MatchCollection.ICollection<Match>.Add(Match)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void ICollection<Match>.Add (System.Text.RegularExpressions.Match item);\n    parameters:\n    - id: item\n      type: System.Text.RegularExpressions.Match\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Match>#Clear\n  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: ICollection<Match>.Clear()\n  nameWithType: MatchCollection.ICollection<Match>.Clear()\n  fullName: MatchCollection.ICollection<Match>.Clear()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void ICollection<Match>.Clear ();\n    parameters: []\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Match>#Contains(System.Text.RegularExpressions.Match)\n  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: ICollection<Match>.Contains(Match)\n  nameWithType: MatchCollection.ICollection<Match>.Contains(Match)\n  fullName: MatchCollection.ICollection<Match>.Contains(Match)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool ICollection<Match>.Contains (System.Text.RegularExpressions.Match item);\n    parameters:\n    - id: item\n      type: System.Text.RegularExpressions.Match\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Match>#Remove(System.Text.RegularExpressions.Match)\n  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: ICollection<Match>.Remove(Match)\n  nameWithType: MatchCollection.ICollection<Match>.Remove(Match)\n  fullName: MatchCollection.ICollection<Match>.Remove(Match)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool ICollection<Match>.Remove (System.Text.RegularExpressions.Match item);\n    parameters:\n    - id: item\n      type: System.Text.RegularExpressions.Match\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable<System#Text#RegularExpressions#Match>#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IEnumerable<Match>.GetEnumerator()\n  nameWithType: MatchCollection.IEnumerable<Match>.GetEnumerator()\n  fullName: MatchCollection.IEnumerable<Match>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: System.Collections.Generic.IEnumerator<System.Text.RegularExpressions.Match> IEnumerable<Match>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Text.RegularExpressions.Match}\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Match>#IndexOf(System.Text.RegularExpressions.Match)\n  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList<Match>.IndexOf(Match)\n  nameWithType: MatchCollection.IList<Match>.IndexOf(Match)\n  fullName: MatchCollection.IList<Match>.IndexOf(Match)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: int IList<Match>.IndexOf (System.Text.RegularExpressions.Match item);\n    parameters:\n    - id: item\n      type: System.Text.RegularExpressions.Match\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Match>#Insert(System.Int32,System.Text.RegularExpressions.Match)\n  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList<Match>.Insert(Int32, Match)\n  nameWithType: MatchCollection.IList<Match>.Insert(Int32, Match)\n  fullName: MatchCollection.IList<Match>.Insert(Int32, Match)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList<Match>.Insert (int index, System.Text.RegularExpressions.Match item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: item\n      type: System.Text.RegularExpressions.Match\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)\n  commentId: P:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Match>#Item(System.Int32)\n  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList<Match>.Item(Int32)\n  nameWithType: MatchCollection.IList<Match>.Item(Int32)\n  fullName: MatchCollection.IList<Match>.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: System.Text.RegularExpressions.Match System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Match>#RemoveAt(System.Int32)\n  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList<Match>.RemoveAt(Int32)\n  nameWithType: MatchCollection.IList<Match>.RemoveAt(Int32)\n  fullName: MatchCollection.IList<Match>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList<Match>.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: MatchCollection.ICollection.CopyTo(Array, Int32)\n  fullName: MatchCollection.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void ICollection.CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: ''\n    - id: arrayIndex\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: MatchCollection.ICollection.IsSynchronized\n  fullName: MatchCollection.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: MatchCollection.ICollection.SyncRoot\n  fullName: MatchCollection.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList.Add(Object)\n  nameWithType: MatchCollection.IList.Add(Object)\n  fullName: MatchCollection.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear\n  id: System#Collections#IList#Clear\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList.Clear()\n  nameWithType: MatchCollection.IList.Clear()\n  fullName: MatchCollection.IList.Clear()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList.Clear ();\n    parameters: []\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList.Contains(Object)\n  nameWithType: MatchCollection.IList.Contains(Object)\n  fullName: MatchCollection.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList.IndexOf(Object)\n  nameWithType: MatchCollection.IList.IndexOf(Object)\n  fullName: MatchCollection.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList.Insert(Int32, Object)\n  nameWithType: MatchCollection.IList.Insert(Int32, Object)\n  fullName: MatchCollection.IList.Insert(Int32, Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: value\n      type: System.Object\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize\n  commentId: P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList.IsFixedSize\n  nameWithType: MatchCollection.IList.IsFixedSize\n  fullName: MatchCollection.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList.Item(Int32)\n  nameWithType: MatchCollection.IList.Item(Int32)\n  fullName: MatchCollection.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Object\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList.Remove(Object)\n  nameWithType: MatchCollection.IList.Remove(Object)\n  fullName: MatchCollection.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)\n  commentId: M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)\n  id: System#Collections#IList#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.MatchCollection\n  langs:\n  - csharp\n  name: IList.RemoveAt(Int32)\n  nameWithType: MatchCollection.IList.RemoveAt(Int32)\n  fullName: MatchCollection.IList.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.Text.RegularExpressions.RegexMatchTimeoutException\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: RegexMatchTimeoutException\n  nameWithType: RegexMatchTimeoutException\n  fullName: System.Text.RegularExpressions.RegexMatchTimeoutException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: CopyTo(Array, Int32)\n  nameWithType: MatchCollection.CopyTo(Array, Int32)\n  fullName: MatchCollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: CopyTo(Match[], Int32)\n  nameWithType: MatchCollection.CopyTo(Match[], Int32)\n  fullName: MatchCollection.CopyTo(Match[], Int32)\n- uid: System.Text.RegularExpressions.Match\n  name: Match\n  nameWithType: Match\n  fullName: System.Text.RegularExpressions.Match\n- uid: System.Text.RegularExpressions.Match[]\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Match[]\n  nameWithType: Match[]\n  fullName: System.Text.RegularExpressions.Match[]\n  spec.csharp:\n  - uid: System.Text.RegularExpressions.Match\n    name: Match\n    nameWithType: Match\n    fullName: System.Text.RegularExpressions.Match\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.RegularExpressions.MatchCollection.Count\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: Count\n  nameWithType: MatchCollection.Count\n  fullName: MatchCollection.Count\n- uid: System.Text.RegularExpressions.MatchCollection.GetEnumerator\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: MatchCollection.GetEnumerator()\n  fullName: MatchCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Text.RegularExpressions.MatchCollection.IsReadOnly\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: MatchCollection.IsReadOnly\n  fullName: MatchCollection.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.RegularExpressions.MatchCollection.IsSynchronized\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: MatchCollection.IsSynchronized\n  fullName: MatchCollection.IsSynchronized\n- uid: System.Text.RegularExpressions.MatchCollection.Item(System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: MatchCollection.Item(Int32)\n  fullName: MatchCollection.Item(Int32)\n- uid: System.Text.RegularExpressions.MatchCollection.SyncRoot\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: MatchCollection.SyncRoot\n  fullName: MatchCollection.SyncRoot\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: ICollection<Match>.Add(Match)\n  nameWithType: MatchCollection.ICollection<Match>.Add(Match)\n  fullName: MatchCollection.ICollection<Match>.Add(Match)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: ICollection<Match>.Clear()\n  nameWithType: MatchCollection.ICollection<Match>.Clear()\n  fullName: MatchCollection.ICollection<Match>.Clear()\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: ICollection<Match>.Contains(Match)\n  nameWithType: MatchCollection.ICollection<Match>.Contains(Match)\n  fullName: MatchCollection.ICollection<Match>.Contains(Match)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: ICollection<Match>.Remove(Match)\n  nameWithType: MatchCollection.ICollection<Match>.Remove(Match)\n  fullName: MatchCollection.ICollection<Match>.Remove(Match)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IEnumerable<Match>.GetEnumerator()\n  nameWithType: MatchCollection.IEnumerable<Match>.GetEnumerator()\n  fullName: MatchCollection.IEnumerable<Match>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.IEnumerator{System.Text.RegularExpressions.Match}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<Match>\n  nameWithType: IEnumerator<Match>\n  fullName: System.Collections.Generic.IEnumerator<System.Text.RegularExpressions.Match>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Text.RegularExpressions.Match\n    name: Match\n    nameWithType: Match\n    fullName: System.Text.RegularExpressions.Match\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList<Match>.IndexOf(Match)\n  nameWithType: MatchCollection.IList<Match>.IndexOf(Match)\n  fullName: MatchCollection.IList<Match>.IndexOf(Match)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList<Match>.Insert(Int32, Match)\n  nameWithType: MatchCollection.IList<Match>.Insert(Int32, Match)\n  fullName: MatchCollection.IList<Match>.Insert(Int32, Match)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList<Match>.Item(Int32)\n  nameWithType: MatchCollection.IList<Match>.Item(Int32)\n  fullName: MatchCollection.IList<Match>.Item(Int32)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList<Match>.RemoveAt(Int32)\n  nameWithType: MatchCollection.IList<Match>.RemoveAt(Int32)\n  fullName: MatchCollection.IList<Match>.RemoveAt(Int32)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: MatchCollection.ICollection.CopyTo(Array, Int32)\n  fullName: MatchCollection.ICollection.CopyTo(Array, Int32)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: MatchCollection.ICollection.IsSynchronized\n  fullName: MatchCollection.ICollection.IsSynchronized\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: MatchCollection.ICollection.SyncRoot\n  fullName: MatchCollection.ICollection.SyncRoot\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList.Add(Object)\n  nameWithType: MatchCollection.IList.Add(Object)\n  fullName: MatchCollection.IList.Add(Object)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList.Clear()\n  nameWithType: MatchCollection.IList.Clear()\n  fullName: MatchCollection.IList.Clear()\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList.Contains(Object)\n  nameWithType: MatchCollection.IList.Contains(Object)\n  fullName: MatchCollection.IList.Contains(Object)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList.IndexOf(Object)\n  nameWithType: MatchCollection.IList.IndexOf(Object)\n  fullName: MatchCollection.IList.IndexOf(Object)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList.Insert(Int32, Object)\n  nameWithType: MatchCollection.IList.Insert(Int32, Object)\n  fullName: MatchCollection.IList.Insert(Int32, Object)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList.IsFixedSize\n  nameWithType: MatchCollection.IList.IsFixedSize\n  fullName: MatchCollection.IList.IsFixedSize\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList.Item(Int32)\n  nameWithType: MatchCollection.IList.Item(Int32)\n  fullName: MatchCollection.IList.Item(Int32)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList.Remove(Object)\n  nameWithType: MatchCollection.IList.Remove(Object)\n  fullName: MatchCollection.IList.Remove(Object)\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IList.RemoveAt(Int32)\n  nameWithType: MatchCollection.IList.RemoveAt(Int32)\n  fullName: MatchCollection.IList.RemoveAt(Int32)\n- uid: System.Text.RegularExpressions.MatchCollection.CopyTo*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: MatchCollection.CopyTo\n  fullName: MatchCollection.CopyTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.Count*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: Count\n  nameWithType: MatchCollection.Count\n  fullName: MatchCollection.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.GetEnumerator*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: MatchCollection.GetEnumerator\n  fullName: MatchCollection.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.IsReadOnly*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: MatchCollection.IsReadOnly\n  fullName: MatchCollection.IsReadOnly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.IsSynchronized*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: MatchCollection.IsSynchronized\n  fullName: MatchCollection.IsSynchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.Item*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: Item\n  nameWithType: MatchCollection.Item\n  fullName: MatchCollection.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.SyncRoot*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: MatchCollection.SyncRoot\n  fullName: MatchCollection.SyncRoot\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Add\n  nameWithType: MatchCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Add\n  fullName: MatchCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Add\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Clear\n  nameWithType: MatchCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Clear\n  fullName: MatchCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Clear\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Contains\n  nameWithType: MatchCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Contains\n  fullName: MatchCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Contains\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Remove\n  nameWithType: MatchCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Remove\n  fullName: MatchCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Remove\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>.GetEnumerator\n  nameWithType: MatchCollection.System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>.GetEnumerator\n  fullName: MatchCollection.System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>.GetEnumerator\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.IndexOf\n  nameWithType: MatchCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.IndexOf\n  fullName: MatchCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.IndexOf\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Insert\n  nameWithType: MatchCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Insert\n  fullName: MatchCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Insert\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Item\n  nameWithType: MatchCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Item\n  fullName: MatchCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Item\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.RemoveAt\n  nameWithType: MatchCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.RemoveAt\n  fullName: MatchCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.RemoveAt\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: MatchCollection.System.Collections.ICollection.CopyTo\n  fullName: MatchCollection.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: MatchCollection.System.Collections.ICollection.IsSynchronized\n  fullName: MatchCollection.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: MatchCollection.System.Collections.ICollection.SyncRoot\n  fullName: MatchCollection.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: MatchCollection.System.Collections.IList.Add\n  fullName: MatchCollection.System.Collections.IList.Add\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.IList.Clear\n  nameWithType: MatchCollection.System.Collections.IList.Clear\n  fullName: MatchCollection.System.Collections.IList.Clear\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: MatchCollection.System.Collections.IList.Contains\n  fullName: MatchCollection.System.Collections.IList.Contains\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: MatchCollection.System.Collections.IList.IndexOf\n  fullName: MatchCollection.System.Collections.IList.IndexOf\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: MatchCollection.System.Collections.IList.Insert\n  fullName: MatchCollection.System.Collections.IList.Insert\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: MatchCollection.System.Collections.IList.IsFixedSize\n  fullName: MatchCollection.System.Collections.IList.IsFixedSize\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: MatchCollection.System.Collections.IList.Item\n  fullName: MatchCollection.System.Collections.IList.Item\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: MatchCollection.System.Collections.IList.Remove\n  fullName: MatchCollection.System.Collections.IList.Remove\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt*\n  parent: System.Text.RegularExpressions.MatchCollection\n  isExternal: false\n  name: System.Collections.IList.RemoveAt\n  nameWithType: MatchCollection.System.Collections.IList.RemoveAt\n  fullName: MatchCollection.System.Collections.IList.RemoveAt\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/MatchCollection.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n"}