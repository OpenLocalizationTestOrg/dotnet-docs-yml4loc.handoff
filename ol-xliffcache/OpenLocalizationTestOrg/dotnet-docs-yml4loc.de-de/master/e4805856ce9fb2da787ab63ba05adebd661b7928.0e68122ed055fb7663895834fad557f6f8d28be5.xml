{"nodes":[{"content":"Provides data for the <xref href=\"System.Windows.Threading.Dispatcher\"></xref><xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> event.","nodes":[{"pos":[0,160],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph><ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides data for the <xref href=\"System.Windows.Threading.Dispatcher\"></xref><xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> event."}],"pos":[680,841],"yaml":true},{"content":"The <xref:System.Windows.Threading.Dispatcher.UnhandledException> event occurs when code executing by way of the <xref:System.Windows.Threading.Dispatcher> throws an exception which is not handled.  \n  \n The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.","nodes":[{"pos":[0,197],"content":"The <xref:System.Windows.Threading.Dispatcher.UnhandledException> event occurs when code executing by way of the <xref:System.Windows.Threading.Dispatcher> throws an exception which is not handled.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event occurs when code executing by way of the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> throws an exception which is not handled.","pos":[0,197],"source":"The <xref:System.Windows.Threading.Dispatcher.UnhandledException> event occurs when code executing by way of the <xref:System.Windows.Threading.Dispatcher> throws an exception which is not handled."}]},{"pos":[204,773],"content":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event provides a means to not raise the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event.","pos":[0,180],"source":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event is raised first, and If <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;</ph> on the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;</ph> is set to <ph id=\"ph4\">`false`</ph>, the <ph id=\"ph5\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event will not be raised.","pos":[182,569],"source":"  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised."}]}],"pos":[852,1630],"yaml":true,"extradata":"MT"},{"content":"Gets the exception that was raised when executing code by way of the dispatcher.","nodes":[{"pos":[0,80],"content":"Gets the exception that was raised when executing code by way of the dispatcher.","nodes":[{"content":"Gets the exception that was raised when executing code by way of the dispatcher.","pos":[0,80]}]}],"pos":[3333,3414],"yaml":true},{"content":"The exception.","nodes":[{"pos":[0,14],"content":"The exception.","nodes":[{"content":"The exception.","pos":[0,14]}]}],"pos":[3533,3548],"yaml":true},{"content":"Gets or sets whether the exception event has been handled.","nodes":[{"pos":[0,58],"content":"Gets or sets whether the exception event has been handled.","nodes":[{"content":"Gets or sets whether the exception event has been handled.","pos":[0,58]}]}],"pos":[4711,4770],"yaml":true},{"content":"`true` if the exception was handled; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the exception was handled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the exception was handled; otherwise, `false`."}],"pos":[4885,4944],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs\n  commentId: T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs\n  id: DispatcherUnhandledExceptionEventArgs\n  children:\n  - System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception\n  - System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled\n  langs:\n  - csharp\n  name: DispatcherUnhandledExceptionEventArgs\n  nameWithType: DispatcherUnhandledExceptionEventArgs\n  fullName: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs\n  type: Class\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Provides data for the <xref href=\"System.Windows.Threading.Dispatcher\"></xref><xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> event.\n  remarks: \"The <xref:System.Windows.Threading.Dispatcher.UnhandledException> event occurs when code executing by way of the <xref:System.Windows.Threading.Dispatcher> throws an exception which is not handled.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.\"\n  syntax:\n    content: 'public sealed class DispatcherUnhandledExceptionEventArgs : System.Windows.Threading.DispatcherEventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  - System.Windows.Threading.DispatcherEventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.Threading.DispatcherEventArgs.Dispatcher\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherUnhandledExceptionEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception\n  commentId: P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception\n  id: Exception\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs\n  langs:\n  - csharp\n  name: Exception\n  nameWithType: DispatcherUnhandledExceptionEventArgs.Exception\n  fullName: DispatcherUnhandledExceptionEventArgs.Exception\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the exception that was raised when executing code by way of the dispatcher.\n  syntax:\n    content: public Exception Exception { get; }\n    return:\n      type: System.Exception\n      description: The exception.\n  overload: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherUnhandledExceptionEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled\n  commentId: P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled\n  id: Handled\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs\n  langs:\n  - csharp\n  name: Handled\n  nameWithType: DispatcherUnhandledExceptionEventArgs.Handled\n  fullName: DispatcherUnhandledExceptionEventArgs.Handled\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets or sets whether the exception event has been handled.\n  syntax:\n    content: public bool Handled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the exception was handled; otherwise, `false`.'\n  overload: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherUnhandledExceptionEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\nreferences:\n- uid: System.Windows.Threading.DispatcherEventArgs\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherEventArgs\n  nameWithType: DispatcherEventArgs\n  fullName: System.Windows.Threading.DispatcherEventArgs\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: DispatcherUnhandledExceptionEventArgs.Exception\n  fullName: DispatcherUnhandledExceptionEventArgs.Exception\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: DispatcherUnhandledExceptionEventArgs.Handled\n  fullName: DispatcherUnhandledExceptionEventArgs.Handled\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception*\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: DispatcherUnhandledExceptionEventArgs.Exception\n  fullName: DispatcherUnhandledExceptionEventArgs.Exception\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherUnhandledExceptionEventArgs.xml\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: DispatcherUnhandledExceptionEventArgs.Handled\n  fullName: DispatcherUnhandledExceptionEventArgs.Handled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherUnhandledExceptionEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n- uid: System.Windows.Threading.DispatcherEventArgs.Dispatcher\n  parent: System.Windows.Threading.DispatcherEventArgs\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherEventArgs.Dispatcher\n  fullName: DispatcherEventArgs.Dispatcher\n"}