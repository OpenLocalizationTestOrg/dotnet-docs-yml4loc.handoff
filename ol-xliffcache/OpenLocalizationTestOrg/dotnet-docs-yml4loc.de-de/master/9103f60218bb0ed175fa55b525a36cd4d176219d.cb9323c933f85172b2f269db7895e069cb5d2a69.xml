{"nodes":[{"content":"Provides services for managing the queue of work items for a thread.","nodes":[{"pos":[0,68],"content":"Provides services for managing the queue of work items for a thread.","nodes":[{"content":"Provides services for managing the queue of work items for a thread.","pos":[0,68]}]}],"pos":[5158,5227],"yaml":true},{"content":"The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.  \n  \n When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.  \n  \n If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created. A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>. If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.  \n  \n If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.  For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.  In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.  \n  \n All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.  \n  \n Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.  \n  \n Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.  For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).","nodes":[{"pos":[0,113],"content":"The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> maintains a prioritized queue of work items for a specific thread.","pos":[0,113],"source":"The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread."}]},{"pos":[120,365],"content":"When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.","nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is created on a thread, it becomes the only <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that can be associated with the thread, even if the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is shut down.","pos":[0,245],"source":"When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down."}]},{"pos":[372,905],"content":"If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created. A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>. If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.","nodes":[{"content":"If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created. A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>. If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.","pos":[0,533],"nodes":[{"content":"If you attempt to get the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</ph> for the current thread and a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is not associated with the thread, a <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> will be created.","pos":[0,258],"source":"If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is also created when you create a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph>.","pos":[259,387],"source":" A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>."},{"content":"If you create a <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> on a background thread, be sure to shut down the dispatcher before exiting the thread.","pos":[388,533],"source":" If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread."}]}]},{"pos":[912,997],"content":"If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.","nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is shut down, it cannot be restarted.","pos":[0,85],"source":"If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted."}]},{"pos":[1004,2271],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.  For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.  In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> can only be accessed by the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> it is associated with.","pos":[0,220],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with."},{"content":"For example, a background thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that is associated with the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> on the <ph id=\"ph3\">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.","pos":[222,468],"source":"  For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread."},{"content":"In order for the background thread to access the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the <ph id=\"ph4\">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.","pos":[470,811],"source":"  In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[813,964],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[965,1111],"source":" <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[1113,1267],"source":"  The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[2278,2581],"content":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id=\"ph4\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.","pos":[0,303],"source":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>."}]},{"pos":[2588,2759],"content":"All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.","nodes":[{"content":"All of the methods on <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>, with the exception of <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</ph>, are free-threaded.","pos":[0,171],"source":"All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded."}]},{"pos":[2766,2861],"content":"Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.","nodes":[{"content":"Objects that derive from <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> have thread affinity.","pos":[0,95],"source":"Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity."}]},{"pos":[2868,3082],"content":"Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.  For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).","nodes":[{"content":"Objects that derive from <ph id=\"ph1\">&lt;xref:System.Windows.Freezable&gt;</ph> are free-threaded when they are frozen.","pos":[0,96],"source":"Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Freezable Objects Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/freezable-objects-overview.md)</ept>.","pos":[98,214],"source":"  For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md)."}]}],"pos":[5238,8339],"yaml":true,"extradata":"MT"},{"content":"Executes the specified delegate asynchronously with the specified arguments on the thread that the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> was created on.","nodes":[{"pos":[0,171],"content":"Executes the specified delegate asynchronously with the specified arguments on the thread that the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> was created on.","source":"Executes the specified delegate asynchronously with the specified arguments on the thread that the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> was created on."}],"pos":[12263,12435],"yaml":true},{"content":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \n  \n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \n  \n-   Removing the delegate from the event queue.  \n  \n-   Waiting for the delegate to return.  \n  \n-   Obtaining the value that the delegate returns after it is executed.  \n  \n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"pos":[0,210],"content":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:","pos":[0,210],"source":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:"}]},{"pos":[220,346],"content":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.","nodes":[{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.","pos":[0,126],"source":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue."}]},{"pos":[356,399],"content":"Removing the delegate from the event queue.","nodes":[{"content":"Removing the delegate from the event queue.","pos":[0,43]}]},{"pos":[409,444],"content":"Waiting for the delegate to return.","nodes":[{"content":"Waiting for the delegate to return.","pos":[0,35]}]},{"pos":[454,521],"content":"Obtaining the value that the delegate returns after it is executed.","nodes":[{"content":"Obtaining the value that the delegate returns after it is executed.","pos":[0,67]}]},{"pos":[528,683],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.","pos":[0,155],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called."}]},{"pos":[690,1746],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[180,358],"source":" For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[359,596],"source":" In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[597,748],"source":" This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[749,895],"source":" <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[896,1056],"source":" The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1753,2056],"content":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id=\"ph4\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.","pos":[0,303],"source":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>."}]}],"pos":[12446,14519],"yaml":true,"extradata":"MT"},{"content":"The delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,173],"content":"The delegate to a method that takes parameters specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which is pushed onto the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"The delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[14720,14894],"yaml":true},{"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"pos":[0,76],"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"content":"An array of objects to pass as arguments to the given method.","pos":[0,61]},{"content":"Can be <ph id=\"ph1\">`null`</ph>.","pos":[62,76],"source":" Can be `null`."}]}],"pos":[14956,15033],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,221],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[15121,15343],"yaml":true},{"content":"Executes the specified delegate asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,167],"content":"Executes the specified delegate asynchronously at the specified priority on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[16592,16760],"yaml":true},{"content":"If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.  \n  \n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.  \n  \n The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \n  \n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \n  \n-   Removing the delegate from the event queue.  \n  \n-   Waiting for the delegate to return.  \n  \n-   Obtaining the value that the delegate returns after it is executed.  \n  \n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"pos":[0,204],"content":"If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.","nodes":[{"content":"If multiple <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> calls are made at the same <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>, they will be executed in the order the calls were made.","pos":[0,204],"source":"If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made."}]},{"pos":[211,425],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object that can be used to interact with the delegate when the delegate is in the event queue.","pos":[0,214],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue."}]},{"pos":[432,642],"content":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:","pos":[0,210],"source":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:"}]},{"pos":[652,778],"content":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.","nodes":[{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.","pos":[0,126],"source":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue."}]},{"pos":[788,831],"content":"Removing the delegate from the event queue.","nodes":[{"content":"Removing the delegate from the event queue.","pos":[0,43]}]},{"pos":[841,876],"content":"Waiting for the delegate to return.","nodes":[{"content":"Waiting for the delegate to return.","pos":[0,35]}]},{"pos":[886,953],"content":"Obtaining the value that the delegate returns after it is executed.","nodes":[{"content":"Obtaining the value that the delegate returns after it is executed.","pos":[0,67]}]},{"pos":[960,1115],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.","pos":[0,155],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called."}]},{"pos":[1122,2183],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[181,359],"source":"  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[361,598],"source":"  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[600,751],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[753,899],"source":"  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[901,1061],"source":"  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[2190,2493],"content":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id=\"ph4\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.","pos":[0,303],"source":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>."}]}],"pos":[16771,19285],"yaml":true,"extradata":"MT"},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[21612,21777],"yaml":true},{"content":"The delegate to a method that takes no arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,144],"content":"The delegate to a method that takes no arguments, which is pushed onto the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"The delegate to a method that takes no arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[21841,21986],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,221],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[22074,22296],"yaml":true},{"content":"<code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[22473,22504],"yaml":true},{"content":"<code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority\"&gt;&lt;/xref&gt;</ph>.","source":"<code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>."}],"pos":[22650,22753],"yaml":true},{"content":"Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> was created on.","nodes":[{"pos":[0,199],"content":"Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> was created on.","source":"Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> was created on."}],"pos":[24089,24289],"yaml":true},{"content":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \n  \n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \n  \n-   Removing the delegate from the event queue.  \n  \n-   Waiting for the delegate to return.  \n  \n-   Obtaining the value that the delegate returns after it is executed.  \n  \n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"pos":[0,210],"content":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:","pos":[0,210],"source":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:"}]},{"pos":[220,346],"content":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.","nodes":[{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.","pos":[0,126],"source":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue."}]},{"pos":[356,399],"content":"Removing the delegate from the event queue.","nodes":[{"content":"Removing the delegate from the event queue.","pos":[0,43]}]},{"pos":[409,444],"content":"Waiting for the delegate to return.","nodes":[{"content":"Waiting for the delegate to return.","pos":[0,35]}]},{"pos":[454,521],"content":"Obtaining the value that the delegate returns after it is executed.","nodes":[{"content":"Obtaining the value that the delegate returns after it is executed.","pos":[0,67]}]},{"pos":[528,683],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.","pos":[0,155],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called."}]},{"pos":[690,1746],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[180,358],"source":" For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[359,596],"source":" In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[597,748],"source":" This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[749,895],"source":" <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[896,1056],"source":" The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1753,2056],"content":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id=\"ph4\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.","pos":[0,303],"source":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>."}]}],"pos":[24300,26373],"yaml":true,"extradata":"MT"},{"content":"The delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,173],"content":"The delegate to a method that takes parameters specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which is pushed onto the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"The delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[26628,26802],"yaml":true},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[26896,27061],"yaml":true},{"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"pos":[0,76],"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"content":"An array of objects to pass as arguments to the given method.","pos":[0,61]},{"content":"Can be <ph id=\"ph1\">`null`</ph>.","pos":[62,76],"source":" Can be `null`."}]}],"pos":[27123,27200],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,221],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[27288,27510],"yaml":true},{"content":"Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,199],"content":"Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[28847,29047],"yaml":true},{"content":"`Arg` can be `null` if no arguments are needed.  \n  \n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.  \n  \n The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \n  \n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \n  \n-   Removing the delegate from the event queue.  \n  \n-   Waiting for the delegate to return.  \n  \n-   Obtaining the value that the delegate returns after it is executed.  \n  \n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.  \n  \n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">`Arg`</ph> can be <ph id=\"ph2\">`null`</ph> if no arguments are needed.","source":"`Arg` can be `null` if no arguments are needed."},{"pos":[54,268],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object that can be used to interact with the delegate when the delegate is in the event queue.","pos":[0,214],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue."}]},{"pos":[275,485],"content":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:","pos":[0,210],"source":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:"}]},{"pos":[495,621],"content":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.","nodes":[{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.","pos":[0,126],"source":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue."}]},{"pos":[631,674],"content":"Removing the delegate from the event queue.","nodes":[{"content":"Removing the delegate from the event queue.","pos":[0,43]}]},{"pos":[684,719],"content":"Waiting for the delegate to return.","nodes":[{"content":"Waiting for the delegate to return.","pos":[0,35]}]},{"pos":[729,796],"content":"Obtaining the value that the delegate returns after it is executed.","nodes":[{"content":"Obtaining the value that the delegate returns after it is executed.","pos":[0,67]}]},{"pos":[803,958],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.","pos":[0,155],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called."}]},{"pos":[965,2026],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[181,359],"source":"  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[361,598],"source":"  In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[600,751],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[753,899],"source":"  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[901,1061],"source":"  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[2033,2237],"content":"If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.","nodes":[{"content":"If multiple <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> calls are made at the same <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>, they will be executed in the order the calls were made.","pos":[0,204],"source":"If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made."}]},{"pos":[2244,2547],"content":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id=\"ph4\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.","pos":[0,303],"source":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>."}]}],"pos":[29058,31628],"yaml":true,"extradata":"MT"},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[33949,34114],"yaml":true},{"content":"A delegate to a method that takes one argument, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,142],"content":"A delegate to a method that takes one argument, which is pushed onto the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes one argument, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[34178,34321],"yaml":true},{"content":"The object to pass as an argument to the specified method.","nodes":[{"pos":[0,58],"content":"The object to pass as an argument to the specified method.","nodes":[{"content":"The object to pass as an argument to the specified method.","pos":[0,58]}]}],"pos":[34380,34439],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,221],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[34527,34749],"yaml":true},{"content":"<code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[34926,34957],"yaml":true},{"content":"<code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority\"&gt;&lt;/xref&gt;</ph>.","source":"<code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>."}],"pos":[35103,35206],"yaml":true},{"content":"Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,209],"content":"Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[36608,36818],"yaml":true},{"content":"The `arg` parameter can be `null` if no arguments are needed.  \n  \n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.  \n  \n The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \n  \n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \n  \n-   Removing the delegate from the event queue.  \n  \n-   Waiting for the delegate to return.  \n  \n-   Obtaining the value that the delegate returns after it is executed.  \n  \n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.  \n  \n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">`arg`</ph> parameter can be <ph id=\"ph2\">`null`</ph> if no arguments are needed.","source":"The `arg` parameter can be `null` if no arguments are needed."},{"pos":[68,282],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object that can be used to interact with the delegate when the delegate is in the event queue.","pos":[0,214],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue."}]},{"pos":[289,499],"content":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:","pos":[0,210],"source":"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:"}]},{"pos":[509,635],"content":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.","nodes":[{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.","pos":[0,126],"source":"Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue."}]},{"pos":[645,688],"content":"Removing the delegate from the event queue.","nodes":[{"content":"Removing the delegate from the event queue.","pos":[0,43]}]},{"pos":[698,733],"content":"Waiting for the delegate to return.","nodes":[{"content":"Waiting for the delegate to return.","pos":[0,35]}]},{"pos":[743,810],"content":"Obtaining the value that the delegate returns after it is executed.","nodes":[{"content":"Obtaining the value that the delegate returns after it is executed.","pos":[0,67]}]},{"pos":[817,972],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.","pos":[0,155],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called."}]},{"pos":[979,2040],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[181,359],"source":"  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[361,598],"source":"  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[600,751],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[753,899],"source":"  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[901,1061],"source":"  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[2047,2251],"content":"If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.","nodes":[{"content":"If multiple <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> calls are made at the same <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>, they will be executed in the order the calls were made.","pos":[0,204],"source":"If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made."}]},{"pos":[2258,2561],"content":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id=\"ph4\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.","pos":[0,303],"source":"If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>."}]}],"pos":[36829,39413],"yaml":true,"extradata":"MT"},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[39767,39932],"yaml":true},{"content":"A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,148],"content":"A delegate to a method that takes multiple arguments, which is pushed onto the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[39996,40145],"yaml":true},{"content":"The object to pass as an argument to the specified method.","nodes":[{"pos":[0,58],"content":"The object to pass as an argument to the specified method.","nodes":[{"content":"The object to pass as an argument to the specified method.","pos":[0,58]}]}],"pos":[40204,40263],"yaml":true},{"content":"An array of objects to pass as arguments to the specified method.","nodes":[{"pos":[0,65],"content":"An array of objects to pass as arguments to the specified method.","nodes":[{"content":"An array of objects to pass as arguments to the specified method.","pos":[0,65]}]}],"pos":[40325,40391],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.","nodes":[{"pos":[0,272],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue."}],"pos":[40479,40752],"yaml":true},{"content":"<code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[40929,40960],"yaml":true},{"content":"<xref href=\"System.Windows.Threading.DispatcherPriority\"></xref> is not a valid priority.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority\"&gt;&lt;/xref&gt;</ph> is not a valid priority.","source":"<xref href=\"System.Windows.Threading.DispatcherPriority\"></xref> is not a valid priority."}],"pos":[41106,41196],"yaml":true},{"content":"Initiates shutdown of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> asynchronously.","nodes":[{"pos":[0,98],"content":"Initiates shutdown of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> asynchronously.","source":"Initiates shutdown of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> asynchronously."}],"pos":[42424,42523],"yaml":true},{"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.  \n  \n When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \n  \n The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.  \n  \n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \n  \n Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"pos":[0,102],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A&gt;</ph> demands unrestricted UI Permissions.","pos":[0,102],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions."}]},{"pos":[109,347],"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id=\"ph4\">`true`</ph>.","source":"When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`."},{"pos":[354,461],"content":"The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shut down completely until the event queue unwinds.","pos":[0,107],"source":"The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds."}]},{"pos":[468,692],"content":"When the Dispatcher finishes shutting down, the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id=\"ph3\">`true`</ph>.","source":"When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`."},{"pos":[699,781],"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","pos":[0,82]}]}],"pos":[42534,43326],"yaml":true,"extradata":"MT"},{"content":"The priority at which to begin shutting down the dispatcher.","nodes":[{"pos":[0,60],"content":"The priority at which to begin shutting down the dispatcher.","nodes":[{"content":"The priority at which to begin shutting down the dispatcher.","pos":[0,60]}]}],"pos":[43598,43659],"yaml":true},{"content":"Determines whether the calling thread is the thread associated with this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,130],"content":"Determines whether the calling thread is the thread associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the calling thread is the thread associated with this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[44715,44846],"yaml":true},{"content":"Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.  Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.  \n  \n <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.  \n  \n The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.","nodes":[{"pos":[0,309],"content":"Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.  Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.","nodes":[{"content":"Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.  Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.","pos":[0,309],"nodes":[{"content":"Only the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> is created on may access the object.","pos":[0,144],"source":"Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> to access the object from a different thread.","pos":[146,309],"source":"  Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread."}]}]},{"pos":[316,404],"content":"<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> can be called from any thread.","pos":[0,88],"source":"<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread."}]},{"pos":[411,816],"content":"The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.","nodes":[{"content":"The difference between <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</ph> is <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> returns a Boolean indicating whether the calling thread has access to the <ph id=\"ph4\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</ph> throws an exception.","pos":[0,405],"source":"The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception."}]}],"pos":[44857,45680],"yaml":true,"extradata":"MT"},{"content":"`true` if the calling thread is the thread associated with this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">`true`</ph> if the calling thread is the thread associated with this <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the calling thread is the thread associated with this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>; otherwise, `false`."}],"pos":[47090,47234],"yaml":true},{"content":"Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> for the thread currently executing and creates a new <xref href=\"System.Windows.Threading.Dispatcher\"></xref> if one is not already associated with the thread.","nodes":[{"pos":[0,225],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> for the thread currently executing and creates a new <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> if one is not already associated with the thread.","source":"Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> for the thread currently executing and creates a new <xref href=\"System.Windows.Threading.Dispatcher\"></xref> if one is not already associated with the thread."}],"pos":[48287,48513],"yaml":true},{"content":"If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.  This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.  <xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.","nodes":[{"pos":[0,396],"content":"If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.  This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.  <xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.","nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is not associated with the current thread, a new <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> will be created.","pos":[0,156],"source":"If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created."},{"content":"This is not the case with the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</ph> method.","pos":[158,252],"source":"  This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</ph> will return <ph id=\"ph2\">`null`</ph> if there is not a dispatcher associated with the specified thread.","pos":[254,396],"source":"  <xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread."}]}],"pos":[48524,48921],"yaml":true,"extradata":"MT"},{"content":"The dispatcher associated with the current thread.","nodes":[{"pos":[0,50],"content":"The dispatcher associated with the current thread.","nodes":[{"content":"The dispatcher associated with the current thread.","pos":[0,50]}]}],"pos":[49100,49151],"yaml":true},{"content":"Disables processing of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.","nodes":[{"pos":[0,90],"content":"Disables processing of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> queue.","source":"Disables processing of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue."}],"pos":[50197,50288],"yaml":true},{"content":"Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.  \n  \n The effects of disabling processing are as follows:  \n  \n-   [!INCLUDE[TLA2#tla_clr#initcap](~/includes/tla2sharptla-clrsharpinitcap-md.md)] locks will not pump messages internally.  \n  \n-   <xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.  \n  \n-   Message processing is not permitted.  \n  \n The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.  Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.  \n  \n <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.","nodes":[{"pos":[0,119],"content":"Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.","nodes":[{"content":"Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.","pos":[0,119]}]},{"pos":[126,177],"content":"The effects of disabling processing are as follows:","nodes":[{"content":"The effects of disabling processing are as follows:","pos":[0,51]}]},{"pos":[187,307],"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr#initcap](~/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> locks will not pump messages internally.","source":"[!INCLUDE[TLA2#tla_clr#initcap](~/includes/tla2sharptla-clrsharpinitcap-md.md)] locks will not pump messages internally."},{"pos":[317,402],"content":"<xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> objects are not allowed to be pushed.","pos":[0,85],"source":"<xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed."}]},{"pos":[412,448],"content":"Message processing is not permitted.","nodes":[{"content":"Message processing is not permitted.","pos":[0,36]}]},{"pos":[455,854],"content":"The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.  Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.","nodes":[{"content":"The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.  Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.","pos":[0,399],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;</ph> structure that <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</ph> returns when it is called can be used to re-enable dispatcher processing.","pos":[0,217],"source":"The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;</ph> structure re-enables processing.","pos":[219,399],"source":"  Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing."}]}]},{"pos":[861,1024],"content":"<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</ph> can only be called on the thread the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is associated with.","pos":[0,163],"source":"<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with."}]}],"pos":[50299,51338],"yaml":true,"extradata":"MT"},{"content":"A structure used to re-enable dispatcher processing.","nodes":[{"pos":[0,52],"content":"A structure used to re-enable dispatcher processing.","nodes":[{"content":"A structure used to re-enable dispatcher processing.","pos":[0,52]}]}],"pos":[52575,52628],"yaml":true},{"content":"Requests that all frames exit, including nested frames.","nodes":[{"pos":[0,55],"content":"Requests that all frames exit, including nested frames.","nodes":[{"content":"Requests that all frames exit, including nested frames.","pos":[0,55]}]}],"pos":[53650,53706],"yaml":true},{"content":"Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> for the specified thread.","nodes":[{"pos":[0,91],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> for the specified thread.","source":"Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> for the specified thread."}],"pos":[54995,55087],"yaml":true},{"content":"If a dispatcher is not available for the specified thread, `null` will be returned.  \n  \n <xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.   A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.","nodes":[{"pos":[0,83],"content":"If a dispatcher is not available for the specified thread, <ph id=\"ph1\">`null`</ph> will be returned.","source":"If a dispatcher is not available for the specified thread, `null` will be returned."},{"pos":[90,587],"content":"<xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.   A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.","nodes":[{"content":"<xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.   A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.","pos":[0,497],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</ph> does not create a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> on a thread that does not have a <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.","pos":[0,194],"source":"<xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>."},{"content":"A new <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is created on a thread that does not already have a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> when attempting to get the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> by using the <ph id=\"ph4\">&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</ph> property.","pos":[197,497],"source":"   A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property."}]}]}],"pos":[55098,55690],"yaml":true,"extradata":"MT"},{"content":"The thread to obtain the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> from.","nodes":[{"pos":[0,87],"content":"The thread to obtain the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> from.","source":"The thread to obtain the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> from."}],"pos":[55896,55984],"yaml":true},{"content":"The dispatcher for <code>thread</code>.","nodes":[{"pos":[0,39],"content":"The dispatcher for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">thread</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The dispatcher for <code>thread</code>."}],"pos":[56063,56103],"yaml":true},{"content":"Determines whether the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> has finished shutting down.","nodes":[{"pos":[0,107],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> has finished shutting down.","source":"Determines whether the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> has finished shutting down."}],"pos":[57150,57258],"yaml":true},{"content":"When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \n  \n The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.  \n  \n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \n  \n Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"pos":[0,238],"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id=\"ph4\">`true`</ph>.","source":"When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`."},{"pos":[245,351],"content":"The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shutdown completely until the event queue unwinds.","pos":[0,106],"source":"The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds."}]},{"pos":[358,582],"content":"When the Dispatcher finishes shutting down, the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id=\"ph3\">`true`</ph>.","source":"When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`."},{"pos":[589,671],"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","pos":[0,82]}]}],"pos":[57269,57949],"yaml":true,"extradata":"MT"},{"content":"`true` if the dispatcher has finished shutting down; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the dispatcher has finished shutting down; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the dispatcher has finished shutting down; otherwise, `false`."}],"pos":[58071,58146],"yaml":true},{"content":"Determines whether the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is shutting down.","nodes":[{"pos":[0,97],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is shutting down.","source":"Determines whether the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is shutting down."}],"pos":[59196,59294],"yaml":true},{"content":"When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \n  \n The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.  \n  \n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \n  \n Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"pos":[0,238],"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id=\"ph4\">`true`</ph>.","source":"When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`."},{"pos":[245,352],"content":"The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shut down completely until the event queue unwinds.","pos":[0,107],"source":"The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds."}]},{"pos":[359,583],"content":"When the Dispatcher finishes shutting down, the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id=\"ph3\">`true`</ph>.","source":"When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`."},{"pos":[590,672],"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","pos":[0,82]}]}],"pos":[59305,59986],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> has started shutting down; otherwise, `false`.","nodes":[{"pos":[0,117],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> has started shutting down; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> has started shutting down; otherwise, `false`."}],"pos":[60107,60227],"yaml":true},{"content":"Gets the collection of hooks that provide additional event information about the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,138],"content":"Gets the collection of hooks that provide additional event information about the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the collection of hooks that provide additional event information about the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[61176,61315],"yaml":true},{"content":"The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.","nodes":[{"pos":[0,256],"content":"The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherHooks&gt;</ph> class provides additional event information about the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>, such as when the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is inactive or when an operation has competed.","pos":[0,256],"source":"The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed."}]}],"pos":[61326,61583],"yaml":true,"extradata":"MT"},{"content":"The hooks associated with this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,88],"content":"The hooks associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The hooks associated with this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[61809,61898],"yaml":true},{"content":"Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,195],"content":"Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[63419,63615],"yaml":true},{"content":"`Arg` can be `null` if an argument is not needed.  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">`Arg`</ph> can be <ph id=\"ph2\">`null`</ph> if an argument is not needed.","source":"`Arg` can be `null` if an argument is not needed."},{"pos":[56,1117],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[181,359],"source":"  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[361,598],"source":"  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[600,751],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[753,899],"source":"  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[901,1061],"source":"  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1124,1295],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[63626,64928],"yaml":true,"extradata":"MT"},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[65257,65422],"yaml":true},{"content":"The maximum time to wait for the operation to finish.","nodes":[{"pos":[0,53],"content":"The maximum time to wait for the operation to finish.","nodes":[{"content":"The maximum time to wait for the operation to finish.","pos":[0,53]}]}],"pos":[65487,65541],"yaml":true},{"content":"A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,148],"content":"A delegate to a method that takes multiple arguments, which is pushed onto the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[65605,65754],"yaml":true},{"content":"An object to pass as an argument to the specified method.","nodes":[{"pos":[0,57],"content":"An object to pass as an argument to the specified method.","nodes":[{"content":"An object to pass as an argument to the specified method.","pos":[0,57]}]}],"pos":[65813,65871],"yaml":true},{"content":"An array of objects to pass as arguments to the specified method.","nodes":[{"pos":[0,65],"content":"An array of objects to pass as arguments to the specified method.","nodes":[{"content":"An array of objects to pass as arguments to the specified method.","pos":[0,65]}]}],"pos":[65933,65999],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[66056,66152],"yaml":true},{"content":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"&gt;&lt;/xref&gt;</ph>.","source":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>."}],"pos":[66316,66425],"yaml":true},{"content":"<code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority\"&gt;&lt;/xref&gt;</ph>.","source":"<code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>."}],"pos":[66571,66674],"yaml":true},{"content":"<code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[66776,66807],"yaml":true},{"content":"Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,194],"content":"Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[68179,68374],"yaml":true},{"content":"`Arg` can be `null` if an argument is not needed  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">`Arg`</ph> can be <ph id=\"ph2\">`null`</ph> if an argument is not needed","source":"`Arg` can be `null` if an argument is not needed"},{"pos":[55,1116],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[181,359],"source":"  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[361,598],"source":"  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[600,751],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[753,899],"source":"  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[901,1061],"source":"  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1123,1294],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[68385,69686],"yaml":true,"extradata":"MT"},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[70000,70165],"yaml":true},{"content":"The maximum time to wait for the operation to finish.","nodes":[{"pos":[0,53],"content":"The maximum time to wait for the operation to finish.","nodes":[{"content":"The maximum time to wait for the operation to finish.","pos":[0,53]}]}],"pos":[70230,70284],"yaml":true},{"content":"A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,148],"content":"A delegate to a method that takes multiple arguments, which is pushed onto the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[70348,70497],"yaml":true},{"content":"An object to pass as an argument to the given method. This can be `null` if no arguments are needed.","nodes":[{"pos":[0,100],"content":"An object to pass as an argument to the given method. This can be `null` if no arguments are needed.","nodes":[{"content":"An object to pass as an argument to the given method.","pos":[0,53]},{"content":"This can be <ph id=\"ph1\">`null`</ph> if no arguments are needed.","pos":[54,100],"source":" This can be `null` if no arguments are needed."}]}],"pos":[70556,70657],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[70714,70810],"yaml":true},{"content":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"&gt;&lt;/xref&gt;</ph>.","source":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>."}],"pos":[70974,71083],"yaml":true},{"content":"<code>priority</code> is not a valid priority.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.","source":"<code>priority</code> is not a valid priority."}],"pos":[71229,71276],"yaml":true},{"content":"<code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[71378,71409],"yaml":true},{"content":"Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,195],"content":"Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[72781,72977],"yaml":true},{"content":"`Arg` can be `null` if an argument is not needed  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">`Arg`</ph> can be <ph id=\"ph2\">`null`</ph> if an argument is not needed","source":"`Arg` can be `null` if an argument is not needed"},{"pos":[55,1116],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[181,359],"source":"  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[361,598],"source":"  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[600,751],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[753,899],"source":"  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[901,1061],"source":"  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1123,1294],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[72988,74289],"yaml":true,"extradata":"MT"},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[74600,74765],"yaml":true},{"content":"A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,148],"content":"A delegate to a method that takes multiple arguments, which is pushed onto the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[74829,74978],"yaml":true},{"content":"An object to pass as an argument to the given method.","nodes":[{"pos":[0,53],"content":"An object to pass as an argument to the given method.","nodes":[{"content":"An object to pass as an argument to the given method.","pos":[0,53]}]}],"pos":[75037,75091],"yaml":true},{"content":"An array of objects to pass as arguments to the given method.","nodes":[{"pos":[0,61],"content":"An array of objects to pass as arguments to the given method.","nodes":[{"content":"An array of objects to pass as arguments to the given method.","pos":[0,61]}]}],"pos":[75153,75215],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[75272,75368],"yaml":true},{"content":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"&gt;&lt;/xref&gt;</ph>.","source":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>."}],"pos":[75532,75641],"yaml":true},{"content":"<code>priority</code> is not a valid priority.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.","source":"<code>priority</code> is not a valid priority."}],"pos":[75787,75834],"yaml":true},{"content":"<code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[75936,75967],"yaml":true},{"content":"Executes the specified <xref href=\"System.Action\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,192],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Action\"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Action\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[77423,77616],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[77883,77928],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[78022,78205],"yaml":true},{"content":"An object that indicates whether to cancel the action.","nodes":[{"pos":[0,54],"content":"An object that indicates whether to cancel the action.","nodes":[{"content":"An object that indicates whether to cancel the action.","pos":[0,54]}]}],"pos":[78299,78354],"yaml":true},{"content":"The minimum amount of time to wait for the operation to start.","nodes":[{"pos":[0,62],"content":"The minimum amount of time to wait for the operation to start.","nodes":[{"content":"The minimum amount of time to wait for the operation to start.","pos":[0,62]}]}],"pos":[78419,78482],"yaml":true},{"content":"Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> was created.","nodes":[{"pos":[0,197],"content":"Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> was created.","source":"Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> was created."}],"pos":[79813,80011],"yaml":true},{"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,1061],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[181,359],"source":"  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[361,598],"source":"  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[600,751],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[753,899],"source":"  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[901,1061],"source":"  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1068,1239],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[80022,81266],"yaml":true,"extradata":"MT"},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[81568,81733],"yaml":true},{"content":"The maximum time to wait for the operation to finish.","nodes":[{"pos":[0,53],"content":"The maximum time to wait for the operation to finish.","nodes":[{"content":"The maximum time to wait for the operation to finish.","pos":[0,53]}]}],"pos":[81798,81852],"yaml":true},{"content":"The delegate to a method that takes no arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,144],"content":"The delegate to a method that takes no arguments, which is pushed onto the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"The delegate to a method that takes no arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[81916,82061],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[82118,82214],"yaml":true},{"content":"Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,194],"content":"Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[83581,83776],"yaml":true},{"content":"`Arg` can be `null` if an argument is not needed  \n  \n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">`Arg`</ph> can be <ph id=\"ph2\">`null`</ph> if an argument is not needed","source":"`Arg` can be `null` if an argument is not needed"},{"pos":[55,1116],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[181,359],"source":"  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[361,598],"source":"  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[600,751],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[753,899],"source":"  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[901,1061],"source":"  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1123,1294],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[83787,85088],"yaml":true,"extradata":"MT"},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[85384,85549],"yaml":true},{"content":"A delegate to a method that takes one argument, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,142],"content":"A delegate to a method that takes one argument, which is pushed onto the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes one argument, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[85613,85756],"yaml":true},{"content":"An object to pass as an argument to the given method.","nodes":[{"pos":[0,53],"content":"An object to pass as an argument to the given method.","nodes":[{"content":"An object to pass as an argument to the given method.","pos":[0,53]}]}],"pos":[85815,85869],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[85926,86022],"yaml":true},{"content":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"&gt;&lt;/xref&gt;</ph>.","source":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>."}],"pos":[86186,86295],"yaml":true},{"content":"<code>priority</code> is not a valid priority.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.","source":"<code>priority</code> is not a valid priority."}],"pos":[86441,86488],"yaml":true},{"content":"<code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[86590,86621],"yaml":true},{"content":"Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,227],"content":"Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[88005,88233],"yaml":true},{"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,1056],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[180,358],"source":" For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[359,596],"source":" In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[597,748],"source":" This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[749,895],"source":" <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[896,1056],"source":" The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1063,1234],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[88244,89483],"yaml":true,"extradata":"MT"},{"content":"A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,171],"content":"A delegate to a method that takes parameters specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which is pushed onto the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[89713,89885],"yaml":true},{"content":"The maximum amount of time to wait for the operation to complete.","nodes":[{"pos":[0,65],"content":"The maximum amount of time to wait for the operation to complete.","nodes":[{"content":"The maximum amount of time to wait for the operation to complete.","pos":[0,65]}]}],"pos":[89950,90016],"yaml":true},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[90110,90275],"yaml":true},{"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"pos":[0,76],"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"content":"An array of objects to pass as arguments to the given method.","pos":[0,61]},{"content":"Can be <ph id=\"ph1\">`null`</ph>.","pos":[62,76],"source":" Can be `null`."}]}],"pos":[90337,90414],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[90471,90567],"yaml":true},{"content":"Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,227],"content":"Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[91767,91995],"yaml":true},{"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,1056],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[180,358],"source":" For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[359,596],"source":" In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[597,748],"source":" This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[749,895],"source":" <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[896,1056],"source":" The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1063,1234],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[92006,93245],"yaml":true,"extradata":"MT"},{"content":"A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,171],"content":"A delegate to a method that takes parameters specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which is pushed onto the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[93421,93593],"yaml":true},{"content":"The maximum amount of time to wait for the operation to complete.","nodes":[{"pos":[0,65],"content":"The maximum amount of time to wait for the operation to complete.","nodes":[{"content":"The maximum amount of time to wait for the operation to complete.","pos":[0,65]}]}],"pos":[93658,93724],"yaml":true},{"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"pos":[0,76],"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"content":"An array of objects to pass as arguments to the given method.","pos":[0,61]},{"content":"Can be <ph id=\"ph1\">`null`</ph>.","pos":[62,76],"source":" Can be `null`."}]}],"pos":[93786,93863],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[93920,94016],"yaml":true},{"content":"Executes the specified <xref href=\"System.Action\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,192],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Action\"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Action\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[95402,95595],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[95844,95889],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[95983,96166],"yaml":true},{"content":"An object that indicates whether to cancel the action.","nodes":[{"pos":[0,54],"content":"An object that indicates whether to cancel the action.","nodes":[{"content":"An object that indicates whether to cancel the action.","pos":[0,54]}]}],"pos":[96260,96315],"yaml":true},{"content":"Executes the specified delegate synchronously at the specified priority on the thread on which the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,175],"content":"Executes the specified delegate synchronously at the specified priority on the thread on which the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate synchronously at the specified priority on the thread on which the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[97529,97705],"yaml":true},{"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,1061],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[181,359],"source":"  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[361,598],"source":"  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[600,751],"source":"  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[753,899],"source":"  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[901,1061],"source":"  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1068,1239],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[97716,98960],"yaml":true,"extradata":"MT"},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[99896,100061],"yaml":true},{"content":"A delegate to a method that takes no arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,142],"content":"A delegate to a method that takes no arguments, which is pushed onto the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes no arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[100125,100268],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[100325,100421],"yaml":true},{"content":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"&gt;&lt;/xref&gt;</ph>.","source":"<code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>."}],"pos":[100585,100694],"yaml":true},{"content":"<code>priority</code> is not a valid priority.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.","source":"<code>priority</code> is not a valid priority."}],"pos":[100840,100887],"yaml":true},{"content":"<code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[100989,101020],"yaml":true},{"content":"Executes the specified delegate with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,169],"content":"Executes the specified delegate with the specified arguments synchronously on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[102134,102304],"yaml":true},{"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,1056],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[180,358],"source":" For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[359,596],"source":" In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[597,748],"source":" This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[749,895],"source":" <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[896,1056],"source":" The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1063,1234],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[102315,103554],"yaml":true,"extradata":"MT"},{"content":"A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,171],"content":"A delegate to a method that takes parameters specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which is pushed onto the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[103712,103884],"yaml":true},{"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"pos":[0,76],"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"content":"An array of objects to pass as arguments to the given method.","pos":[0,61]},{"content":"Can be <ph id=\"ph1\">`null`</ph>.","pos":[62,76],"source":" Can be `null`."}]}],"pos":[103946,104023],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[104080,104176],"yaml":true},{"content":"Executes the specified <xref href=\"System.Action\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,192],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Action\"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Action\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[105400,105593],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[105788,105833],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[105927,106110],"yaml":true},{"content":"Executes the specified <xref href=\"System.Action\"></xref> synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,166],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Action\"&gt;&lt;/xref&gt;</ph> synchronously on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Action\"></xref> synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[107142,107309],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[107450,107495],"yaml":true},{"content":"Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,195],"content":"Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[108787,108983],"yaml":true},{"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \n  \n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"pos":[0,1056],"content":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.","pos":[0,179],"source":"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object."},{"content":"For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.","pos":[180,358],"source":" For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread."},{"content":"In order for the background thread to access the Content property of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.","pos":[359,596],"source":" In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread."},{"content":"This is accomplished by using either <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.","pos":[597,748],"source":" This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.","pos":[749,895],"source":" <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous."},{"content":"The operation is added to the event queue of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.","pos":[896,1056],"source":" The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>."}]},{"pos":[1063,1234],"content":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.","pos":[0,171],"source":"<xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns."}]}],"pos":[108994,110233],"yaml":true,"extradata":"MT"},{"content":"A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.","nodes":[{"pos":[0,171],"content":"A delegate to a method that takes parameters specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which is pushed onto the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue.","source":"A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue."}],"pos":[110445,110617],"yaml":true},{"content":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.","nodes":[{"pos":[0,164],"content":"The priority, relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.","source":"The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked."}],"pos":[110711,110876],"yaml":true},{"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"pos":[0,76],"content":"An array of objects to pass as arguments to the given method. Can be `null`.","nodes":[{"content":"An array of objects to pass as arguments to the given method.","pos":[0,61]},{"content":"Can be <ph id=\"ph1\">`null`</ph>.","pos":[62,76],"source":" Can be `null`."}]}],"pos":[110938,111015],"yaml":true},{"content":"The return value from the delegate being invoked or `null` if the delegate has no return value.","nodes":[{"pos":[0,95],"content":"The return value from the delegate being invoked or <ph id=\"ph1\">`null`</ph> if the delegate has no return value.","source":"The return value from the delegate being invoked or `null` if the delegate has no return value."}],"pos":[111072,111168],"yaml":true},{"content":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,166],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Func`1\"&gt;&lt;/xref&gt;</ph> synchronously on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[112266,112433],"yaml":true},{"content":"The value returned by `callback`.","nodes":[{"pos":[0,33],"content":"The value returned by <ph id=\"ph1\">`callback`</ph>.","source":"The value returned by `callback`."}],"pos":[112444,112478],"yaml":true,"extradata":"MT"},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[112638,112683],"yaml":true},{"content":"The return value type of the specified delegate.","nodes":[{"pos":[0,48],"content":"The return value type of the specified delegate.","nodes":[{"content":"The return value type of the specified delegate.","pos":[0,48]}]}],"pos":[112740,112789],"yaml":true},{"content":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,192],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Func`1\"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[114136,114329],"yaml":true},{"content":"The value returned by `callback`.","nodes":[{"pos":[0,33],"content":"The value returned by <ph id=\"ph1\">`callback`</ph>.","source":"The value returned by `callback`."}],"pos":[114340,114374],"yaml":true,"extradata":"MT"},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[114588,114633],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[114727,114910],"yaml":true},{"content":"The return value type of the specified delegate.","nodes":[{"pos":[0,48],"content":"The return value type of the specified delegate.","nodes":[{"content":"The return value type of the specified delegate.","pos":[0,48]}]}],"pos":[114967,115016],"yaml":true},{"content":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,192],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Func`1\"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[116525,116718],"yaml":true},{"content":"The value returned by `callback`.","nodes":[{"pos":[0,33],"content":"The value returned by <ph id=\"ph1\">`callback`</ph>.","source":"The value returned by `callback`."}],"pos":[116729,116763],"yaml":true,"extradata":"MT"},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[117031,117076],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[117170,117353],"yaml":true},{"content":"An object that indicates whether to cancel the operation.","nodes":[{"pos":[0,57],"content":"An object that indicates whether to cancel the operation.","nodes":[{"content":"An object that indicates whether to cancel the operation.","pos":[0,57]}]}],"pos":[117447,117505],"yaml":true},{"content":"The return value type of the specified delegate.","nodes":[{"pos":[0,48],"content":"The return value type of the specified delegate.","nodes":[{"content":"The return value type of the specified delegate.","pos":[0,48]}]}],"pos":[117562,117611],"yaml":true},{"content":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,192],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Func`1\"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[119198,119391],"yaml":true},{"content":"The value returned by `callback`.","nodes":[{"pos":[0,33],"content":"The value returned by <ph id=\"ph1\">`callback`</ph>.","source":"The value returned by `callback`."}],"pos":[119402,119436],"yaml":true,"extradata":"MT"},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[119722,119767],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[119861,120044],"yaml":true},{"content":"An object that indicates whether to cancel the operation.","nodes":[{"pos":[0,57],"content":"An object that indicates whether to cancel the operation.","nodes":[{"content":"An object that indicates whether to cancel the operation.","pos":[0,57]}]}],"pos":[120138,120196],"yaml":true},{"content":"The minimum amount of time to wait for the operation to start.","nodes":[{"pos":[0,62],"content":"The minimum amount of time to wait for the operation to start.","nodes":[{"content":"The minimum amount of time to wait for the operation to start.","pos":[0,62]}]}],"pos":[120261,120324],"yaml":true},{"content":"The return value type of the specified delegate.","nodes":[{"pos":[0,48],"content":"The return value type of the specified delegate.","nodes":[{"content":"The return value type of the specified delegate.","pos":[0,48]}]}],"pos":[120381,120430],"yaml":true},{"content":"Executes the specified <xref href=\"System.Action\"></xref> asynchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,167],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Action\"&gt;&lt;/xref&gt;</ph> asynchronously on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Action\"></xref> asynchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[121566,121734],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[121920,121965],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,235],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[122053,122289],"yaml":true},{"content":"Executes the specified <xref href=\"System.Action\"></xref> asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,193],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Action\"&gt;&lt;/xref&gt;</ph> asynchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Action\"></xref> asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[123548,123742],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[123982,124027],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[124121,124304],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,279],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[124392,124672],"yaml":true},{"content":"Executes the specified <xref href=\"System.Action\"></xref> asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,193],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Action\"&gt;&lt;/xref&gt;</ph> asynchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Action\"></xref> asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[126093,126287],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[126581,126626],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[126720,126903],"yaml":true},{"content":"An object that indicates whether to cancel the action.","nodes":[{"pos":[0,54],"content":"An object that indicates whether to cancel the action.","nodes":[{"content":"An object that indicates whether to cancel the action.","pos":[0,54]}]}],"pos":[126997,127052],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,314],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[127140,127455],"yaml":true},{"content":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,192],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Func`1\"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[128959,129152],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[129471,129516],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[129610,129793],"yaml":true},{"content":"An object that indicates whether to cancel the operation.","nodes":[{"pos":[0,57],"content":"An object that indicates whether to cancel the operation.","nodes":[{"content":"An object that indicates whether to cancel the operation.","pos":[0,57]}]}],"pos":[129887,129945],"yaml":true},{"content":"The return value type of the specified delegate.","nodes":[{"pos":[0,48],"content":"The return value type of the specified delegate.","nodes":[{"content":"The return value type of the specified delegate.","pos":[0,48]}]}],"pos":[130002,130051],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,320],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[130141,130462],"yaml":true},{"content":"Executes the specified <xref href=\"System.Func`1\"></xref> asynchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,167],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Func`1\"&gt;&lt;/xref&gt;</ph> asynchronously on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Func`1\"></xref> asynchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[131615,131783],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[131994,132039],"yaml":true},{"content":"The return value type of the specified delegate.","nodes":[{"pos":[0,48],"content":"The return value type of the specified delegate.","nodes":[{"content":"The return value type of the specified delegate.","pos":[0,48]}]}],"pos":[132096,132145],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,241],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[132235,132477],"yaml":true},{"content":"Executes the specified <xref href=\"System.Func`1\"></xref> asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,193],"content":"Executes the specified <ph id=\"ph1\">&lt;xref href=\"System.Func`1\"&gt;&lt;/xref&gt;</ph> asynchronously at the specified priority on the thread the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Executes the specified <xref href=\"System.Func`1\"></xref> asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[133783,133977],"yaml":true},{"content":"A delegate to invoke through the dispatcher.","nodes":[{"pos":[0,44],"content":"A delegate to invoke through the dispatcher.","nodes":[{"content":"A delegate to invoke through the dispatcher.","pos":[0,44]}]}],"pos":[134242,134287],"yaml":true},{"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,182],"content":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[134381,134564],"yaml":true},{"content":"The return value type of the specified delegate.","nodes":[{"pos":[0,48],"content":"The return value type of the specified delegate.","nodes":[{"content":"The return value type of the specified delegate.","pos":[0,48]}]}],"pos":[134621,134670],"yaml":true},{"content":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","nodes":[{"pos":[0,285],"content":"An object, which is returned immediately after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.","source":"An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue."}],"pos":[134760,135046],"yaml":true},{"content":"Initiates the shutdown process of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> synchronously.","nodes":[{"pos":[0,109],"content":"Initiates the shutdown process of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> synchronously.","source":"Initiates the shutdown process of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> synchronously."}],"pos":[136071,136181],"yaml":true},{"content":"<xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.  \n  \n When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \n  \n The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.  \n  \n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \n  \n Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"pos":[0,97],"content":"<xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A&gt;</ph> demands unrestricted UI Permissions.","pos":[0,97],"source":"<xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions."}]},{"pos":[104,342],"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id=\"ph4\">`true`</ph>.","source":"When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`."},{"pos":[349,456],"content":"The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shut down completely until the event queue unwinds.","pos":[0,107],"source":"The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds."}]},{"pos":[463,687],"content":"When the Dispatcher finishes shutting down, the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id=\"ph3\">`true`</ph>.","source":"When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`."},{"pos":[694,776],"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","pos":[0,82]}]}],"pos":[136192,136979],"yaml":true,"extradata":"MT"},{"content":"Enters an execute loop.","nodes":[{"pos":[0,23],"content":"Enters an execute loop.","nodes":[{"content":"Enters an execute loop.","pos":[0,23]}]}],"pos":[138313,138337],"yaml":true},{"content":"A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.  \n  \n The Dispatcher processes the work item queue in a loop.  The loop is referred to as a frame.  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.  \n  \n <xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.  At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.  \n  \n <xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.  This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.","nodes":[{"pos":[0,102],"content":"A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> represents a loop that processes pending work items.","pos":[0,102],"source":"A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items."}]},{"pos":[109,323],"content":"The Dispatcher processes the work item queue in a loop.  The loop is referred to as a frame.  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.","nodes":[{"content":"The Dispatcher processes the work item queue in a loop.  The loop is referred to as a frame.  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.","pos":[0,214],"nodes":[{"content":"The Dispatcher processes the work item queue in a loop.","pos":[0,55]},{"content":"The loop is referred to as a frame.","pos":[57,92]},{"content":"The initial loop is typically initiated by the application by calling <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</ph>.","pos":[94,214],"source":"  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>."}]}]},{"pos":[330,729],"content":"<xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.  At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.PushFrame%2A&gt;</ph> enters a loop represented by the parameter <ph id=\"ph2\">`frame`</ph>.","pos":[0,107],"source":"<xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`."},{"content":"At each iteration of the loop, the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> will check the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;</ph> property on the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> class to determine whether the loop should continue or if it should stop.","pos":[109,399],"source":"  At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop."}]},{"pos":[736,1261],"content":"<xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.  This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.","nodes":[{"content":"<xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.  This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.","pos":[0,525],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> allows for the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;</ph> property to be set explicitly and it respects the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> property on the <ph id=\"ph4\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.","pos":[0,297],"source":"<xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>."},{"content":"This means when the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, frames that use the default <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> implementation will exit, which enables all nested frames to exit.","pos":[299,525],"source":"  This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit."}]}]}],"pos":[138348,139618],"yaml":true,"extradata":"MT"},{"content":"The frame for the dispatcher to process.","nodes":[{"pos":[0,40],"content":"The frame for the dispatcher to process.","nodes":[{"content":"The frame for the dispatcher to process.","pos":[0,40]}]}],"pos":[140535,140576],"yaml":true},{"content":"<code>frame</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;frame&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>frame</code> is `null`."}],"pos":[140751,140781],"yaml":true},{"content":"<xref href=\"System.Windows.Threading.Dispatcher.HasShutdownFinished\"></xref> is `true`  \n  \n -or-  \n  \n <code>frame</code> is running on a different <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.  \n  \n -or-  \n  \n Dispatcher processing has been disabled.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.HasShutdownFinished\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`true`</ph>","source":"<xref href=\"System.Windows.Threading.Dispatcher.HasShutdownFinished\"></xref> is `true`"},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,206],"content":"<ph id=\"ph1\">&lt;code&gt;frame&lt;/code&gt;</ph> is running on a different <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"<code>frame</code> is running on a different <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."},{"pos":[213,217],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[224,264],"content":"Dispatcher processing has been disabled.","nodes":[{"content":"Dispatcher processing has been disabled.","pos":[0,40]}]}],"pos":[140891,141170],"yaml":true},{"content":"Pushes the main execution frame on the event queue of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,115],"content":"Pushes the main execution frame on the event queue of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"Pushes the main execution frame on the event queue of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[142114,142230],"yaml":true},{"content":"The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.  The loop is referred to as a frame.  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.  \n  \n The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.","nodes":[{"pos":[0,242],"content":"The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.  The loop is referred to as a frame.  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.","nodes":[{"content":"The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.  The loop is referred to as a frame.  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.","pos":[0,242],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> processes the event queue in a loop.","pos":[0,83],"source":"The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop."},{"content":"The loop is referred to as a frame.","pos":[85,120]},{"content":"The initial loop is typically initiated by the application by calling <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</ph>.","pos":[122,242],"source":"  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>."}]}]},{"pos":[249,353],"content":"The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.","nodes":[{"content":"The main execution frame will continue until the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is shutdown.","pos":[0,104],"source":"The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown."}]}],"pos":[142241,142599],"yaml":true,"extradata":"MT"},{"content":"Occurs when the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> finishes shutting down.","nodes":[{"pos":[0,96],"content":"Occurs when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> finishes shutting down.","source":"Occurs when the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> finishes shutting down."}],"pos":[143804,143901],"yaml":true},{"content":"When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \n  \n The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.  \n  \n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \n  \n Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"pos":[0,251],"content":"When the shutdown process of a <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is started, the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id=\"ph4\">`true`</ph>.","source":"When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`."},{"pos":[258,364],"content":"The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shutdown completely until the event queue unwinds.","pos":[0,106],"source":"The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds."}]},{"pos":[371,595],"content":"When the Dispatcher finishes shutting down, the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id=\"ph3\">`true`</ph>.","source":"When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`."},{"pos":[602,684],"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","pos":[0,82]}]}],"pos":[143912,144605],"yaml":true,"extradata":"MT"},{"content":"Occurs when the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> begins to shut down.","nodes":[{"pos":[0,93],"content":"Occurs when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> begins to shut down.","source":"Occurs when the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> begins to shut down."}],"pos":[145698,145792],"yaml":true},{"content":"When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \n  \n The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.  \n  \n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \n  \n Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"pos":[0,251],"content":"When the shutdown process of a <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is started, the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id=\"ph4\">`true`</ph>.","source":"When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`."},{"pos":[258,364],"content":"The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shutdown completely until the event queue unwinds.","pos":[0,106],"source":"The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds."}]},{"pos":[371,595],"content":"When the Dispatcher finishes shutting down, the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id=\"ph3\">`true`</ph>.","source":"When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`."},{"pos":[602,684],"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","nodes":[{"content":"Once the shutdown process begins, all pending work items in the queue are aborted.","pos":[0,82]}]}],"pos":[145803,146496],"yaml":true,"extradata":"MT"},{"content":"Gets the thread this <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.","nodes":[{"pos":[0,97],"content":"Gets the thread this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> is associated with.","source":"Gets the thread this <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with."}],"pos":[147537,147635],"yaml":true},{"content":"The thread.","nodes":[{"pos":[0,11],"content":"The thread.","nodes":[{"content":"The thread.","pos":[0,11]}]}],"pos":[147772,147784],"yaml":true},{"content":"Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <xref href=\"System.Windows.Threading.Dispatcher.Invoke*\"></xref> or <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref>.","nodes":[{"pos":[0,233],"content":"Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.Invoke*\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"&gt;&lt;/xref&gt;</ph>.","source":"Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <xref href=\"System.Windows.Threading.Dispatcher.Invoke*\"></xref> or <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref>."}],"pos":[148796,149030],"yaml":true},{"content":"This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.  \n  \n A handler can mark the exception as handled, which will prevent the internal exception handler from being called.  \n  \n Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur. It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.  \n  \n The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.","nodes":[{"pos":[0,222],"content":"This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.","nodes":[{"content":"This event is raised when an exception that was thrown during execution of a delegate by way of <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is uncaught.","pos":[0,222],"source":"This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught."}]},{"pos":[229,342],"content":"A handler can mark the exception as handled, which will prevent the internal exception handler from being called.","nodes":[{"content":"A handler can mark the exception as handled, which will prevent the internal exception handler from being called.","pos":[0,113]}]},{"pos":[349,576],"content":"Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur. It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.","nodes":[{"content":"Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur. It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.","pos":[0,227],"nodes":[{"content":"Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.","pos":[0,123]},{"content":"It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.","pos":[124,227]}]}]},{"pos":[583,1152],"content":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event provides a means to not raise the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event.","pos":[0,180],"source":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event is raised first, and If <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;</ph> on the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;</ph> is set to <ph id=\"ph4\">`false`</ph>, the <ph id=\"ph5\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event will not be raised.","pos":[182,569],"source":"  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised."}]}],"pos":[149041,150202],"yaml":true,"extradata":"MT"},{"content":"Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <xref href=\"System.Windows.Threading.Dispatcher.Invoke*\"></xref> or <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> when in the filter stage.","nodes":[{"pos":[0,258],"content":"Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher.Invoke*\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"&gt;&lt;/xref&gt;</ph> when in the filter stage.","source":"Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <xref href=\"System.Windows.Threading.Dispatcher.Invoke*\"></xref> or <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> when in the filter stage."}],"pos":[151450,151709],"yaml":true},{"content":"This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.  \n  \n The call stack is not unwound at this point (first-chance exception).  \n  \n Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.  It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.  \n  \n The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.","nodes":[{"pos":[0,248],"content":"This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.","nodes":[{"content":"This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> and is uncaught.","pos":[0,248],"source":"This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught."}]},{"pos":[255,324],"content":"The call stack is not unwound at this point (first-chance exception).","nodes":[{"content":"The call stack is not unwound at this point (first-chance exception).","pos":[0,69]}]},{"pos":[331,559],"content":"Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.  It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.","nodes":[{"content":"Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.  It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.","pos":[0,228],"nodes":[{"content":"Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.","pos":[0,123]},{"content":"It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.","pos":[125,228]}]}]},{"pos":[566,1135],"content":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event provides a means to not raise the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event.","pos":[0,180],"source":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event is raised first, and If <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;</ph> on the <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;</ph> is set to <ph id=\"ph4\">`false`</ph>, the <ph id=\"ph5\">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event will not be raised.","pos":[182,569],"source":"  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised."}]}],"pos":[151720,152864],"yaml":true,"extradata":"MT"},{"content":"Determines whether the specified <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref> is a valid priority.","nodes":[{"pos":[0,118],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority\"&gt;&lt;/xref&gt;</ph> is a valid priority.","source":"Determines whether the specified <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref> is a valid priority."}],"pos":[154545,154664],"yaml":true},{"content":"The priority to check.","nodes":[{"pos":[0,22],"content":"The priority to check.","nodes":[{"content":"The priority to check.","pos":[0,22]}]}],"pos":[154911,154934],"yaml":true},{"content":"A string that will be returned by the exception that occurs if the priority is invalid.","nodes":[{"pos":[0,87],"content":"A string that will be returned by the exception that occurs if the priority is invalid.","nodes":[{"content":"A string that will be returned by the exception that occurs if the priority is invalid.","pos":[0,87]}]}],"pos":[155003,155091],"yaml":true},{"content":"<code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherPriority\"&gt;&lt;/xref&gt;</ph>.","source":"<code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>."}],"pos":[155317,155420],"yaml":true},{"content":"Determines whether the calling thread has access to this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,114],"content":"Determines whether the calling thread has access to this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the calling thread has access to this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[156352,156467],"yaml":true},{"content":"Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.  \n  \n This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.  \n  \n The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.","nodes":[{"pos":[0,135],"content":"Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.","nodes":[{"content":"Only the thread the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is created on may access the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.","pos":[0,135],"source":"Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>."}]},{"pos":[142,276],"content":"This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.","nodes":[{"content":"This method is public; therefore, any thread can check to see whether it has access to the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.","pos":[0,134],"source":"This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>."}]},{"pos":[283,682],"content":"The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.","nodes":[{"content":"The difference between <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</ph> is <ph id=\"ph3\">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> returns a Boolean if the calling thread does not have access to the <ph id=\"ph4\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</ph> throws an exception.","pos":[0,399],"source":"The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception."}]}],"pos":[156478,157167],"yaml":true,"extradata":"MT"},{"content":"The calling thread does not have access to this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.","nodes":[{"pos":[0,105],"content":"The calling thread does not have access to this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph>.","source":"The calling thread does not have access to this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>."}],"pos":[159016,159122],"yaml":true},{"content":"Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","nodes":[{"pos":[0,165],"content":"Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","nodes":[{"content":"Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","pos":[0,165]}]}],"pos":[160029,160195],"yaml":true},{"content":"This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events. Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher. Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread. For example, you can use this method in a long-running loop that updates a control.  \n  \n This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>.","nodes":[{"pos":[0,482],"content":"This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events. Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher. Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread. For example, you can use this method in a long-running loop that updates a control.","nodes":[{"content":"This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.","pos":[0,156]},{"content":"Use the <ph id=\"ph1\">`await`</ph>, or <ph id=\"ph2\">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.","pos":[157,275],"source":" Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher."},{"content":"Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.","pos":[276,398]},{"content":"For example, you can use this method in a long-running loop that updates a control.","pos":[399,482]}]},{"pos":[489,726],"content":"This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>.","nodes":[{"content":"This method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;</ph> method and passing in <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;</ph>.","pos":[0,237],"source":"This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>."}]}],"pos":[160206,160937],"yaml":true,"extradata":"MT"},{"content":"An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","nodes":[{"pos":[0,157],"content":"An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","nodes":[{"content":"An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","pos":[0,157]}]}],"pos":[161152,161310],"yaml":true},{"content":"Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.  The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.","nodes":[{"pos":[0,297],"content":"Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.  The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.","nodes":[{"content":"Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.  The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.","pos":[0,297],"nodes":[{"content":"Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","pos":[0,165]},{"content":"The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.","pos":[167,297]}]}]}],"pos":[162461,162759],"yaml":true},{"content":"This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events. Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher. Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread. For example, you can use this method in a long-running loop that updates a control.","nodes":[{"pos":[0,482],"content":"This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events. Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher. Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread. For example, you can use this method in a long-running loop that updates a control.","nodes":[{"content":"This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.","pos":[0,156]},{"content":"Use the <ph id=\"ph1\">`await`</ph>, or <ph id=\"ph2\">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.","pos":[157,275],"source":" Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher."},{"content":"Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.","pos":[276,398]},{"content":"For example, you can use this method in a long-running loop that updates a control.","pos":[399,482]}]}],"pos":[162770,163253],"yaml":true,"extradata":"MT"},{"content":"The priority at which to schedule the continuation.","nodes":[{"pos":[0,51],"content":"The priority at which to schedule the continuation.","nodes":[{"content":"The priority at which to schedule the continuation.","pos":[0,51]}]}],"pos":[163515,163567],"yaml":true},{"content":"An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","nodes":[{"pos":[0,157],"content":"An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","nodes":[{"content":"An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.","pos":[0,157]}]}],"pos":[163663,163821],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Threading.Dispatcher\n  commentId: T:System.Windows.Threading.Dispatcher\n  id: Dispatcher\n  children:\n  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])\n  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  - System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)\n  - System.Windows.Threading.Dispatcher.CheckAccess\n  - System.Windows.Threading.Dispatcher.CurrentDispatcher\n  - System.Windows.Threading.Dispatcher.DisableProcessing\n  - System.Windows.Threading.Dispatcher.ExitAllFrames\n  - System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)\n  - System.Windows.Threading.Dispatcher.HasShutdownFinished\n  - System.Windows.Threading.Dispatcher.HasShutdownStarted\n  - System.Windows.Threading.Dispatcher.Hooks\n  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])\n  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)\n  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  - System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)\n  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])\n  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])\n  - System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])\n  - System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)\n  - System.Windows.Threading.Dispatcher.Invoke(System.Action)\n  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})\n  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  - System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)\n  - System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)\n  - System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  - System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  - System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})\n  - System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  - System.Windows.Threading.Dispatcher.InvokeShutdown\n  - System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)\n  - System.Windows.Threading.Dispatcher.Run\n  - System.Windows.Threading.Dispatcher.ShutdownFinished\n  - System.Windows.Threading.Dispatcher.ShutdownStarted\n  - System.Windows.Threading.Dispatcher.Thread\n  - System.Windows.Threading.Dispatcher.UnhandledException\n  - System.Windows.Threading.Dispatcher.UnhandledExceptionFilter\n  - System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)\n  - System.Windows.Threading.Dispatcher.VerifyAccess\n  - System.Windows.Threading.Dispatcher.Yield\n  - System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)\n  langs:\n  - csharp\n  name: Dispatcher\n  nameWithType: Dispatcher\n  fullName: System.Windows.Threading.Dispatcher\n  type: Class\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Provides services for managing the queue of work items for a thread.\n  remarks: \"The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.  \\n  \\n When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.  \\n  \\n If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created. A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>. If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.  \\n  \\n If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.  For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.  In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.  \\n  \\n All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.  \\n  \\n Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.  \\n  \\n Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.  For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).\"\n  example:\n  - \"The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.  For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).  \\n  \\n First, a delegate is created that accepts no arguments.  \\n  \\n [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] \\n [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   \\n  \\n Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.  This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.  \\n  \\n [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] \\n [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]\"\n  syntax:\n    content: public sealed class Dispatcher\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)\n  - System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)\n  - System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action)\n  - System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan)\n  - System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan,System.Windows.Threading.DispatcherPriority)\n  - System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])\n  commentId: M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])\n  id: BeginInvoke(System.Delegate,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: BeginInvoke(Delegate, Object[])\n  nameWithType: Dispatcher.BeginInvoke(Delegate, Object[])\n  fullName: Dispatcher.BeginInvoke(Delegate, Object[])\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate asynchronously with the specified arguments on the thread that the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> was created on.\n  remarks: \"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \\n  \\n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \\n  \\n-   Removing the delegate from the event queue.  \\n  \\n-   Waiting for the delegate to return.  \\n  \\n-   Obtaining the value that the delegate returns after it is executed.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.\"\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: The delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to pass as arguments to the given method. Can be `null`.\n    return:\n      type: System.Windows.Threading.DispatcherOperation\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.BeginInvoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  commentId: M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  id: BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: BeginInvoke(DispatcherPriority, Delegate)\n  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority, Delegate)\n  fullName: Dispatcher.BeginInvoke(DispatcherPriority, Delegate)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.  \\n  \\n The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \\n  \\n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \\n  \\n-   Removing the delegate from the event queue.  \\n  \\n-   Waiting for the delegate to return.  \\n  \\n-   Obtaining the value that the delegate returns after it is executed.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.\"\n  example:\n  - \"The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.  For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).  \\n  \\n First, a delegate is created that accepts no arguments.  \\n  \\n [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] \\n [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   \\n  \\n Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.  Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.   The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.  \\n  \\n [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] \\n [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: method\n      type: System.Delegate\n      description: The delegate to a method that takes no arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    return:\n      type: System.Windows.Threading.DispatcherOperation\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.BeginInvoke*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is `null`.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  commentId: M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  id: BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: BeginInvoke(Delegate, DispatcherPriority, Object[])\n  nameWithType: Dispatcher.BeginInvoke(Delegate, DispatcherPriority, Object[])\n  fullName: Dispatcher.BeginInvoke(Delegate, DispatcherPriority, Object[])\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> was created on.\n  remarks: \"The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \\n  \\n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \\n  \\n-   Removing the delegate from the event queue.  \\n  \\n-   Waiting for the delegate to return.  \\n  \\n-   Obtaining the value that the delegate returns after it is executed.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.\"\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: The delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to pass as arguments to the given method. Can be `null`.\n    return:\n      type: System.Windows.Threading.DispatcherOperation\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.BeginInvoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  commentId: M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  id: BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: BeginInvoke(DispatcherPriority, Delegate, Object)\n  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority, Delegate, Object)\n  fullName: Dispatcher.BeginInvoke(DispatcherPriority, Delegate, Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"`Arg` can be `null` if no arguments are needed.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.  \\n  \\n The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \\n  \\n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \\n  \\n-   Removing the delegate from the event queue.  \\n  \\n-   Waiting for the delegate to return.  \\n  \\n-   Obtaining the value that the delegate returns after it is executed.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.  \\n  \\n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.\"\n  example:\n  - \"The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.  \\n  \\n First, a delegate is created that accepts one argument, in this case a string.  \\n  \\n [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]\\n [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  \\n  \\n Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.  Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`. The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.  \\n  \\n [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]\\n [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes one argument, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: arg\n      type: System.Object\n      description: The object to pass as an argument to the specified method.\n    return:\n      type: System.Windows.Threading.DispatcherOperation\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.BeginInvoke*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is `null`.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  commentId: M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  id: BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: BeginInvoke(DispatcherPriority, Delegate, Object, Object[])\n  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority, Delegate, Object, Object[])\n  fullName: Dispatcher.BeginInvoke(DispatcherPriority, Delegate, Object, Object[])\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"The `arg` parameter can be `null` if no arguments are needed.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.  \\n  \\n The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:  \\n  \\n-   Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.  \\n  \\n-   Removing the delegate from the event queue.  \\n  \\n-   Waiting for the delegate to return.  \\n  \\n-   Obtaining the value that the delegate returns after it is executed.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.  \\n  \\n If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, object[] args);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: arg\n      type: System.Object\n      description: The object to pass as an argument to the specified method.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to pass as arguments to the specified method.\n    return:\n      type: System.Windows.Threading.DispatcherOperation\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.\n  overload: System.Windows.Threading.Dispatcher.BeginInvoke*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is `null`.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref> is not a valid priority.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)\n  commentId: M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)\n  id: BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: BeginInvokeShutdown(DispatcherPriority)\n  nameWithType: Dispatcher.BeginInvokeShutdown(DispatcherPriority)\n  fullName: Dispatcher.BeginInvokeShutdown(DispatcherPriority)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Initiates shutdown of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> asynchronously.\n  remarks: \"<xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.  \\n  \\n When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.  \\n  \\n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \\n  \\n Once the shutdown process begins, all pending work items in the queue are aborted.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority at which to begin shutting down the dispatcher.\n  overload: System.Windows.Threading.Dispatcher.BeginInvokeShutdown*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.CheckAccess\n  commentId: M:System.Windows.Threading.Dispatcher.CheckAccess\n  id: CheckAccess\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: CheckAccess()\n  nameWithType: Dispatcher.CheckAccess()\n  fullName: Dispatcher.CheckAccess()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Determines whether the calling thread is the thread associated with this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n  remarks: \"Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.  Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.  \\n  \\n The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.\"\n  example:\n  - \"The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.  The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.  The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.  \\n  \\n [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]\\n [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]\"\n  syntax:\n    content: public bool CheckAccess ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the calling thread is the thread associated with this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>; otherwise, `false`.'\n  overload: System.Windows.Threading.Dispatcher.CheckAccess*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.CurrentDispatcher\n  commentId: P:System.Windows.Threading.Dispatcher.CurrentDispatcher\n  id: CurrentDispatcher\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: CurrentDispatcher\n  nameWithType: Dispatcher.CurrentDispatcher\n  fullName: Dispatcher.CurrentDispatcher\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> for the thread currently executing and creates a new <xref href=\"System.Windows.Threading.Dispatcher\"></xref> if one is not already associated with the thread.\n  remarks: If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.  This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.  <xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.\n  syntax:\n    content: public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }\n    return:\n      type: System.Windows.Threading.Dispatcher\n      description: The dispatcher associated with the current thread.\n  overload: System.Windows.Threading.Dispatcher.CurrentDispatcher*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.DisableProcessing\n  commentId: M:System.Windows.Threading.Dispatcher.DisableProcessing\n  id: DisableProcessing\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: DisableProcessing()\n  nameWithType: Dispatcher.DisableProcessing()\n  fullName: Dispatcher.DisableProcessing()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Disables processing of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.\n  remarks: \"Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.  \\n  \\n The effects of disabling processing are as follows:  \\n  \\n-   [!INCLUDE[TLA2#tla_clr#initcap](~/includes/tla2sharptla-clrsharpinitcap-md.md)] locks will not pump messages internally.  \\n  \\n-   <xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.  \\n  \\n-   Message processing is not permitted.  \\n  \\n The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.  Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.\"\n  example:\n  - \"The following example shows how to disable dispatcher processing and re-enable dispatcher processing.  <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.  <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.  When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.  \\n  \\n [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]\\n [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]\"\n  syntax:\n    content: public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();\n    parameters: []\n    return:\n      type: System.Windows.Threading.DispatcherProcessingDisabled\n      description: A structure used to re-enable dispatcher processing.\n  overload: System.Windows.Threading.Dispatcher.DisableProcessing*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.ExitAllFrames\n  commentId: M:System.Windows.Threading.Dispatcher.ExitAllFrames\n  id: ExitAllFrames\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: ExitAllFrames()\n  nameWithType: Dispatcher.ExitAllFrames()\n  fullName: Dispatcher.ExitAllFrames()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Requests that all frames exit, including nested frames.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static void ExitAllFrames ();\n    parameters: []\n  overload: System.Windows.Threading.Dispatcher.ExitAllFrames*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)\n  commentId: M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)\n  id: FromThread(System.Threading.Thread)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: FromThread(Thread)\n  nameWithType: Dispatcher.FromThread(Thread)\n  fullName: Dispatcher.FromThread(Thread)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> for the specified thread.\n  remarks: \"If a dispatcher is not available for the specified thread, `null` will be returned.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.   A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.\"\n  syntax:\n    content: public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);\n    parameters:\n    - id: thread\n      type: System.Threading.Thread\n      description: The thread to obtain the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> from.\n    return:\n      type: System.Windows.Threading.Dispatcher\n      description: The dispatcher for <code>thread</code>.\n  overload: System.Windows.Threading.Dispatcher.FromThread*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.HasShutdownFinished\n  commentId: P:System.Windows.Threading.Dispatcher.HasShutdownFinished\n  id: HasShutdownFinished\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: HasShutdownFinished\n  nameWithType: Dispatcher.HasShutdownFinished\n  fullName: Dispatcher.HasShutdownFinished\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Determines whether the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> has finished shutting down.\n  remarks: \"When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.  \\n  \\n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \\n  \\n Once the shutdown process begins, all pending work items in the queue are aborted.\"\n  syntax:\n    content: public bool HasShutdownFinished { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the dispatcher has finished shutting down; otherwise, `false`.'\n  overload: System.Windows.Threading.Dispatcher.HasShutdownFinished*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.HasShutdownStarted\n  commentId: P:System.Windows.Threading.Dispatcher.HasShutdownStarted\n  id: HasShutdownStarted\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: HasShutdownStarted\n  nameWithType: Dispatcher.HasShutdownStarted\n  fullName: Dispatcher.HasShutdownStarted\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Determines whether the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is shutting down.\n  remarks: \"When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.  \\n  \\n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \\n  \\n Once the shutdown process begins, all pending work items in the queue are aborted.\"\n  syntax:\n    content: public bool HasShutdownStarted { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> has started shutting down; otherwise, `false`.'\n  overload: System.Windows.Threading.Dispatcher.HasShutdownStarted*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.Hooks\n  commentId: P:System.Windows.Threading.Dispatcher.Hooks\n  id: Hooks\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Hooks\n  nameWithType: Dispatcher.Hooks\n  fullName: Dispatcher.Hooks\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the collection of hooks that provide additional event information about the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n  remarks: The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public System.Windows.Threading.DispatcherHooks Hooks { get; }\n    return:\n      type: System.Windows.Threading.DispatcherHooks\n      description: The hooks associated with this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n  overload: System.Windows.Threading.Dispatcher.Hooks*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])\n  id: Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(DispatcherPriority, TimeSpan, Delegate, Object, Object[])\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate, Object, Object[])\n  fullName: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate, Object, Object[])\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"`Arg` can be `null` if an argument is not needed.  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, object[] args);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: timeout\n      type: System.TimeSpan\n      description: The maximum time to wait for the operation to finish.\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: arg\n      type: System.Object\n      description: An object to pass as an argument to the specified method.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to pass as arguments to the specified method.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is `null`.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)\n  id: Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(DispatcherPriority, TimeSpan, Delegate, Object)\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate, Object)\n  fullName: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate, Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"`Arg` can be `null` if an argument is not needed  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: timeout\n      type: System.TimeSpan\n      description: The maximum time to wait for the operation to finish.\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: arg\n      type: System.Object\n      description: An object to pass as an argument to the given method. This can be `null` if no arguments are needed.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>priority</code> is not a valid priority.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is `null`.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  id: Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(DispatcherPriority, Delegate, Object, Object[])\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, Delegate, Object, Object[])\n  fullName: Dispatcher.Invoke(DispatcherPriority, Delegate, Object, Object[])\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"`Arg` can be `null` if an argument is not needed  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, object[] args);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes multiple arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: arg\n      type: System.Object\n      description: An object to pass as an argument to the given method.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to pass as arguments to the given method.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>priority</code> is not a valid priority.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is `null`.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  id: Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(Action, DispatcherPriority, CancellationToken, TimeSpan)\n  nameWithType: Dispatcher.Invoke(Action, DispatcherPriority, CancellationToken, TimeSpan)\n  fullName: Dispatcher.Invoke(Action, DispatcherPriority, CancellationToken, TimeSpan)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Action\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);\n    parameters:\n    - id: callback\n      type: System.Action\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: An object that indicates whether to cancel the action.\n    - id: timeout\n      type: System.TimeSpan\n      description: The minimum amount of time to wait for the operation to start.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)\n  id: Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(DispatcherPriority, TimeSpan, Delegate)\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate)\n  fullName: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> was created.\n  remarks: \"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: timeout\n      type: System.TimeSpan\n      description: The maximum time to wait for the operation to finish.\n    - id: method\n      type: System.Delegate\n      description: The delegate to a method that takes no arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  id: Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(DispatcherPriority, Delegate, Object)\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, Delegate, Object)\n  fullName: Dispatcher.Invoke(DispatcherPriority, Delegate, Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"`Arg` can be `null` if an argument is not needed  \\n  \\n In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes one argument, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: arg\n      type: System.Object\n      description: An object to pass as an argument to the given method.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>priority</code> is not a valid priority.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is `null`.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])\n  id: Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(Delegate, TimeSpan, DispatcherPriority, Object[])\n  nameWithType: Dispatcher.Invoke(Delegate, TimeSpan, DispatcherPriority, Object[])\n  fullName: Dispatcher.Invoke(Delegate, TimeSpan, DispatcherPriority, Object[])\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  syntax:\n    content: public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: timeout\n      type: System.TimeSpan\n      description: The maximum amount of time to wait for the operation to complete.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to pass as arguments to the given method. Can be `null`.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])\n  id: Invoke(System.Delegate,System.TimeSpan,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(Delegate, TimeSpan, Object[])\n  nameWithType: Dispatcher.Invoke(Delegate, TimeSpan, Object[])\n  fullName: Dispatcher.Invoke(Delegate, TimeSpan, Object[])\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  syntax:\n    content: public object Invoke (Delegate method, TimeSpan timeout, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: timeout\n      type: System.TimeSpan\n      description: The maximum amount of time to wait for the operation to complete.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to pass as arguments to the given method. Can be `null`.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  id: Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(Action, DispatcherPriority, CancellationToken)\n  nameWithType: Dispatcher.Invoke(Action, DispatcherPriority, CancellationToken)\n  fullName: Dispatcher.Invoke(Action, DispatcherPriority, CancellationToken)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Action\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: callback\n      type: System.Action\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: An object that indicates whether to cancel the action.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  id: Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(DispatcherPriority, Delegate)\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, Delegate)\n  fullName: Dispatcher.Invoke(DispatcherPriority, Delegate)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate synchronously at the specified priority on the thread on which the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.  For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.  In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.  This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.  The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  example:\n  - \"The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.  \\n  \\n [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]\\n [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes no arguments, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>priority</code> is equal to <xref href=\"System.Windows.Threading.DispatcherPriority.Inactive\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>priority</code> is not a valid priority.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is `null`.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])\n  id: Invoke(System.Delegate,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(Delegate, Object[])\n  nameWithType: Dispatcher.Invoke(Delegate, Object[])\n  fullName: Dispatcher.Invoke(Delegate, Object[])\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  syntax:\n    content: public object Invoke (Delegate method, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to pass as arguments to the given method. Can be `null`.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)\n  id: Invoke(System.Action,System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(Action, DispatcherPriority)\n  nameWithType: Dispatcher.Invoke(Action, DispatcherPriority)\n  fullName: Dispatcher.Invoke(Action, DispatcherPriority)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Action\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);\n    parameters:\n    - id: callback\n      type: System.Action\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Action)\n  id: Invoke(System.Action)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(Action)\n  nameWithType: Dispatcher.Invoke(Action)\n  fullName: Dispatcher.Invoke(Action)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Action\"></xref> synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public void Invoke (Action callback);\n    parameters:\n    - id: callback\n      type: System.Action\n      description: A delegate to invoke through the dispatcher.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  id: Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke(Delegate, DispatcherPriority, Object[])\n  nameWithType: Dispatcher.Invoke(Delegate, DispatcherPriority, Object[])\n  fullName: Dispatcher.Invoke(Delegate, DispatcherPriority, Object[])\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: \"In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object. For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread. In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread. This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous. The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.\"\n  syntax:\n    content: public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: A delegate to a method that takes parameters specified in <code>args</code>, which is pushed onto the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority, relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> event queue, the specified method is invoked.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to pass as arguments to the given method. Can be `null`.\n    return:\n      type: System.Object\n      description: The return value from the delegate being invoked or `null` if the delegate has no return value.\n  overload: System.Windows.Threading.Dispatcher.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})\n  id: Invoke``1(System.Func{``0})\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke<TResult>(Func<TResult>)\n  nameWithType: Dispatcher.Invoke<TResult>(Func<TResult>)\n  fullName: Dispatcher.Invoke<TResult>(Func<TResult>)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Func`1\"></xref> synchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: The value returned by `callback`.\n  syntax:\n    content: public TResult Invoke<TResult> (Func<TResult> callback);\n    parameters:\n    - id: callback\n      type: System.Func`1\n      description: A delegate to invoke through the dispatcher.\n    typeParameters:\n    - id: TResult\n      description: The return value type of the specified delegate.\n    return:\n      type: TResult\n      description: ''\n  overload: System.Windows.Threading.Dispatcher.Invoke``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  id: Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke<TResult>(Func<TResult>, DispatcherPriority)\n  nameWithType: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority)\n  fullName: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: The value returned by `callback`.\n  syntax:\n    content: public TResult Invoke<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority);\n    parameters:\n    - id: callback\n      type: System.Func`1\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The return value type of the specified delegate.\n    return:\n      type: TResult\n      description: ''\n  overload: System.Windows.Threading.Dispatcher.Invoke``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  id: Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  nameWithType: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  fullName: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: The value returned by `callback`.\n  syntax:\n    content: public TResult Invoke<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: callback\n      type: System.Func`1\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: An object that indicates whether to cancel the operation.\n    typeParameters:\n    - id: TResult\n      description: The return value type of the specified delegate.\n    return:\n      type: TResult\n      description: ''\n  overload: System.Windows.Threading.Dispatcher.Invoke``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  commentId: M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  id: Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken, TimeSpan)\n  nameWithType: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken, TimeSpan)\n  fullName: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken, TimeSpan)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  remarks: The value returned by `callback`.\n  syntax:\n    content: public TResult Invoke<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);\n    parameters:\n    - id: callback\n      type: System.Func`1\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: An object that indicates whether to cancel the operation.\n    - id: timeout\n      type: System.TimeSpan\n      description: The minimum amount of time to wait for the operation to start.\n    typeParameters:\n    - id: TResult\n      description: The return value type of the specified delegate.\n    return:\n      type: TResult\n      description: ''\n  overload: System.Windows.Threading.Dispatcher.Invoke``1*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)\n  commentId: M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)\n  id: InvokeAsync(System.Action)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: InvokeAsync(Action)\n  nameWithType: Dispatcher.InvokeAsync(Action)\n  fullName: Dispatcher.InvokeAsync(Action)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Action\"></xref> asynchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);\n    parameters:\n    - id: callback\n      type: System.Action\n      description: A delegate to invoke through the dispatcher.\n    return:\n      type: System.Windows.Threading.DispatcherOperation\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)\n  commentId: M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)\n  id: InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: InvokeAsync(Action, DispatcherPriority)\n  nameWithType: Dispatcher.InvokeAsync(Action, DispatcherPriority)\n  fullName: Dispatcher.InvokeAsync(Action, DispatcherPriority)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Action\"></xref> asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);\n    parameters:\n    - id: callback\n      type: System.Action\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n    return:\n      type: System.Windows.Threading.DispatcherOperation\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  commentId: M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  id: InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: InvokeAsync(Action, DispatcherPriority, CancellationToken)\n  nameWithType: Dispatcher.InvokeAsync(Action, DispatcherPriority, CancellationToken)\n  fullName: Dispatcher.InvokeAsync(Action, DispatcherPriority, CancellationToken)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Action\"></xref> asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: callback\n      type: System.Action\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: An object that indicates whether to cancel the action.\n    return:\n      type: System.Windows.Threading.DispatcherOperation\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.InvokeAsync*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  commentId: M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  id: InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: InvokeAsync<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  nameWithType: Dispatcher.InvokeAsync<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  fullName: Dispatcher.InvokeAsync<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Func`1\"></xref> synchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperation<TResult> InvokeAsync<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: callback\n      type: System.Func`1\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: An object that indicates whether to cancel the operation.\n    typeParameters:\n    - id: TResult\n      description: The return value type of the specified delegate.\n    return:\n      type: System.Windows.Threading.DispatcherOperation`1\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.InvokeAsync``1*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})\n  commentId: M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})\n  id: InvokeAsync``1(System.Func{``0})\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: InvokeAsync<TResult>(Func<TResult>)\n  nameWithType: Dispatcher.InvokeAsync<TResult>(Func<TResult>)\n  fullName: Dispatcher.InvokeAsync<TResult>(Func<TResult>)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Func`1\"></xref> asynchronously on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperation<TResult> InvokeAsync<TResult> (Func<TResult> callback);\n    parameters:\n    - id: callback\n      type: System.Func`1\n      description: A delegate to invoke through the dispatcher.\n    typeParameters:\n    - id: TResult\n      description: The return value type of the specified delegate.\n    return:\n      type: System.Windows.Threading.DispatcherOperation`1\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.InvokeAsync``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  commentId: M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  id: InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: InvokeAsync<TResult>(Func<TResult>, DispatcherPriority)\n  nameWithType: Dispatcher.InvokeAsync<TResult>(Func<TResult>, DispatcherPriority)\n  fullName: Dispatcher.InvokeAsync<TResult>(Func<TResult>, DispatcherPriority)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Executes the specified <xref href=\"System.Func`1\"></xref> asynchronously at the specified priority on the thread the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperation<TResult> InvokeAsync<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority);\n    parameters:\n    - id: callback\n      type: System.Func`1\n      description: A delegate to invoke through the dispatcher.\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The return value type of the specified delegate.\n    return:\n      type: System.Windows.Threading.DispatcherOperation`1\n      description: An object, which is returned immediately after <xref href=\"System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\"></xref> is called, that can be used to interact with the delegate as it is pending execution in the event queue.\n  overload: System.Windows.Threading.Dispatcher.InvokeAsync``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.InvokeShutdown\n  commentId: M:System.Windows.Threading.Dispatcher.InvokeShutdown\n  id: InvokeShutdown\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: InvokeShutdown()\n  nameWithType: Dispatcher.InvokeShutdown()\n  fullName: Dispatcher.InvokeShutdown()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Initiates the shutdown process of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> synchronously.\n  remarks: \"<xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.  \\n  \\n When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.  \\n  \\n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \\n  \\n Once the shutdown process begins, all pending work items in the queue are aborted.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void InvokeShutdown ();\n    parameters: []\n  overload: System.Windows.Threading.Dispatcher.InvokeShutdown*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)\n  commentId: M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)\n  id: PushFrame(System.Windows.Threading.DispatcherFrame)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: PushFrame(DispatcherFrame)\n  nameWithType: Dispatcher.PushFrame(DispatcherFrame)\n  fullName: Dispatcher.PushFrame(DispatcherFrame)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Enters an execute loop.\n  remarks: \"A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.  \\n  \\n The Dispatcher processes the work item queue in a loop.  The loop is referred to as a frame.  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.  \\n  \\n <xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.  At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.  \\n  \\n <xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.  This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.\"\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.  \\n  \\n [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]\\n [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);\n    parameters:\n    - id: frame\n      type: System.Windows.Threading.DispatcherFrame\n      description: The frame for the dispatcher to process.\n  overload: System.Windows.Threading.Dispatcher.PushFrame*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>frame</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<xref href=\\\"System.Windows.Threading.Dispatcher.HasShutdownFinished\\\"></xref> is `true`  \\n  \\n -or-  \\n  \\n <code>frame</code> is running on a different <xref href=\\\"System.Windows.Threading.Dispatcher\\\"></xref>.  \\n  \\n -or-  \\n  \\n Dispatcher processing has been disabled.\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Run\n  commentId: M:System.Windows.Threading.Dispatcher.Run\n  id: Run\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Run()\n  nameWithType: Dispatcher.Run()\n  fullName: Dispatcher.Run()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Pushes the main execution frame on the event queue of the <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n  remarks: \"The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.  The loop is referred to as a frame.  The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.  \\n  \\n The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static void Run ();\n    parameters: []\n  overload: System.Windows.Threading.Dispatcher.Run*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.ShutdownFinished\n  commentId: E:System.Windows.Threading.Dispatcher.ShutdownFinished\n  id: ShutdownFinished\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: ShutdownFinished\n  nameWithType: Dispatcher.ShutdownFinished\n  fullName: Dispatcher.ShutdownFinished\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Occurs when the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> finishes shutting down.\n  remarks: \"When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.  \\n  \\n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \\n  \\n Once the shutdown process begins, all pending work items in the queue are aborted.\"\n  syntax:\n    content: public event EventHandler ShutdownFinished;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.ShutdownStarted\n  commentId: E:System.Windows.Threading.Dispatcher.ShutdownStarted\n  id: ShutdownStarted\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: ShutdownStarted\n  nameWithType: Dispatcher.ShutdownStarted\n  fullName: Dispatcher.ShutdownStarted\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Occurs when the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> begins to shut down.\n  remarks: \"When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.  \\n  \\n When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.  \\n  \\n Once the shutdown process begins, all pending work items in the queue are aborted.\"\n  syntax:\n    content: public event EventHandler ShutdownStarted;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Thread\n  commentId: P:System.Windows.Threading.Dispatcher.Thread\n  id: Thread\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Thread\n  nameWithType: Dispatcher.Thread\n  fullName: Dispatcher.Thread\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the thread this <xref href=\"System.Windows.Threading.Dispatcher\"></xref> is associated with.\n  syntax:\n    content: public System.Threading.Thread Thread { get; }\n    return:\n      type: System.Threading.Thread\n      description: The thread.\n  overload: System.Windows.Threading.Dispatcher.Thread*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.UnhandledException\n  commentId: E:System.Windows.Threading.Dispatcher.UnhandledException\n  id: UnhandledException\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: UnhandledException\n  nameWithType: Dispatcher.UnhandledException\n  fullName: Dispatcher.UnhandledException\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <xref href=\"System.Windows.Threading.Dispatcher.Invoke*\"></xref> or <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref>.\n  remarks: \"This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.  \\n  \\n A handler can mark the exception as handled, which will prevent the internal exception handler from being called.  \\n  \\n Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur. It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.\"\n  syntax:\n    content: public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;\n    return:\n      type: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter\n  commentId: E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter\n  id: UnhandledExceptionFilter\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: UnhandledExceptionFilter\n  nameWithType: Dispatcher.UnhandledExceptionFilter\n  fullName: Dispatcher.UnhandledExceptionFilter\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <xref href=\"System.Windows.Threading.Dispatcher.Invoke*\"></xref> or <xref href=\"System.Windows.Threading.Dispatcher.BeginInvoke*\"></xref> when in the filter stage.\n  remarks: \"This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.  \\n  \\n The call stack is not unwound at this point (first-chance exception).  \\n  \\n Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.  It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.\"\n  syntax:\n    content: >-\n      [add: System.Security.SecurityCritical]\n\n      [remove: System.Security.SecurityCritical]\n\n      public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;\n    return:\n      type: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: 'add: System.Security.SecurityCritical'\n  - type: 'remove: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)\n  commentId: M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)\n  id: ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: ValidatePriority(DispatcherPriority, String)\n  nameWithType: Dispatcher.ValidatePriority(DispatcherPriority, String)\n  fullName: Dispatcher.ValidatePriority(DispatcherPriority, String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Determines whether the specified <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref> is a valid priority.\n  syntax:\n    content: public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority to check.\n    - id: parameterName\n      type: System.String\n      description: A string that will be returned by the exception that occurs if the priority is invalid.\n  overload: System.Windows.Threading.Dispatcher.ValidatePriority*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>priority</code> is not a valid <xref href=\"System.Windows.Threading.DispatcherPriority\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.VerifyAccess\n  commentId: M:System.Windows.Threading.Dispatcher.VerifyAccess\n  id: VerifyAccess\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: VerifyAccess()\n  nameWithType: Dispatcher.VerifyAccess()\n  fullName: Dispatcher.VerifyAccess()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Determines whether the calling thread has access to this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n  remarks: \"Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.  \\n  \\n This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.  \\n  \\n The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.\"\n  example:\n  - \"The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.  The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  \\n  \\n If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.  \\n  \\n If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.  \\n  \\n [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]\\n [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]\"\n  syntax:\n    content: public void VerifyAccess ();\n    parameters: []\n  overload: System.Windows.Threading.Dispatcher.VerifyAccess*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The calling thread does not have access to this <xref href=\"System.Windows.Threading.Dispatcher\"></xref>.\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Yield\n  commentId: M:System.Windows.Threading.Dispatcher.Yield\n  id: Yield\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Yield()\n  nameWithType: Dispatcher.Yield()\n  fullName: Dispatcher.Yield()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.\n  remarks: \"This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events. Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher. Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread. For example, you can use this method in a long-running loop that updates a control.  \\n  \\n This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>.\"\n  syntax:\n    content: public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();\n    parameters: []\n    return:\n      type: System.Windows.Threading.DispatcherPriorityAwaitable\n      description: An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.\n  overload: System.Windows.Threading.Dispatcher.Yield*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)\n  commentId: M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)\n  id: Yield(System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  langs:\n  - csharp\n  name: Yield(DispatcherPriority)\n  nameWithType: Dispatcher.Yield(DispatcherPriority)\n  fullName: Dispatcher.Yield(DispatcherPriority)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.  The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.\n  remarks: This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events. Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher. Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread. For example, you can use this method in a long-running loop that updates a control.\n  syntax:\n    content: public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);\n    parameters:\n    - id: priority\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority at which to schedule the continuation.\n    return:\n      type: System.Windows.Threading.DispatcherPriorityAwaitable\n      description: An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.\n  overload: System.Windows.Threading.Dispatcher.Yield*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: BeginInvoke(Delegate, Object[])\n  nameWithType: Dispatcher.BeginInvoke(Delegate, Object[])\n  fullName: Dispatcher.BeginInvoke(Delegate, Object[])\n- uid: System.Windows.Threading.DispatcherOperation\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherOperation\n  nameWithType: DispatcherOperation\n  fullName: System.Windows.Threading.DispatcherOperation\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: BeginInvoke(DispatcherPriority, Delegate)\n  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority, Delegate)\n  fullName: Dispatcher.BeginInvoke(DispatcherPriority, Delegate)\n- uid: System.Windows.Threading.DispatcherPriority\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherPriority\n  nameWithType: DispatcherPriority\n  fullName: System.Windows.Threading.DispatcherPriority\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: BeginInvoke(Delegate, DispatcherPriority, Object[])\n  nameWithType: Dispatcher.BeginInvoke(Delegate, DispatcherPriority, Object[])\n  fullName: Dispatcher.BeginInvoke(Delegate, DispatcherPriority, Object[])\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: BeginInvoke(DispatcherPriority, Delegate, Object)\n  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority, Delegate, Object)\n  fullName: Dispatcher.BeginInvoke(DispatcherPriority, Delegate, Object)\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: BeginInvoke(DispatcherPriority, Delegate, Object, Object[])\n  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority, Delegate, Object, Object[])\n  fullName: Dispatcher.BeginInvoke(DispatcherPriority, Delegate, Object, Object[])\n- uid: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: BeginInvokeShutdown(DispatcherPriority)\n  nameWithType: Dispatcher.BeginInvokeShutdown(DispatcherPriority)\n  fullName: Dispatcher.BeginInvokeShutdown(DispatcherPriority)\n- uid: System.Windows.Threading.Dispatcher.CheckAccess\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: Dispatcher.CheckAccess()\n  fullName: Dispatcher.CheckAccess()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Threading.Dispatcher.CurrentDispatcher\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: CurrentDispatcher\n  nameWithType: Dispatcher.CurrentDispatcher\n  fullName: Dispatcher.CurrentDispatcher\n- uid: System.Windows.Threading.Dispatcher\n  parent: System.Windows.Threading\n  isExternal: false\n  name: Dispatcher\n  nameWithType: Dispatcher\n  fullName: System.Windows.Threading.Dispatcher\n- uid: System.Windows.Threading.Dispatcher.DisableProcessing\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: DisableProcessing()\n  nameWithType: Dispatcher.DisableProcessing()\n  fullName: Dispatcher.DisableProcessing()\n- uid: System.Windows.Threading.DispatcherProcessingDisabled\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherProcessingDisabled\n  nameWithType: DispatcherProcessingDisabled\n  fullName: System.Windows.Threading.DispatcherProcessingDisabled\n- uid: System.Windows.Threading.Dispatcher.ExitAllFrames\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: ExitAllFrames()\n  nameWithType: Dispatcher.ExitAllFrames()\n  fullName: Dispatcher.ExitAllFrames()\n- uid: System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: FromThread(Thread)\n  nameWithType: Dispatcher.FromThread(Thread)\n  fullName: Dispatcher.FromThread(Thread)\n- uid: System.Threading.Thread\n  parent: System.Threading\n  isExternal: false\n  name: Thread\n  nameWithType: Thread\n  fullName: System.Threading.Thread\n- uid: System.Windows.Threading.Dispatcher.HasShutdownFinished\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: HasShutdownFinished\n  nameWithType: Dispatcher.HasShutdownFinished\n  fullName: Dispatcher.HasShutdownFinished\n- uid: System.Windows.Threading.Dispatcher.HasShutdownStarted\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: HasShutdownStarted\n  nameWithType: Dispatcher.HasShutdownStarted\n  fullName: Dispatcher.HasShutdownStarted\n- uid: System.Windows.Threading.Dispatcher.Hooks\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Hooks\n  nameWithType: Dispatcher.Hooks\n  fullName: Dispatcher.Hooks\n- uid: System.Windows.Threading.DispatcherHooks\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherHooks\n  nameWithType: DispatcherHooks\n  fullName: System.Windows.Threading.DispatcherHooks\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(DispatcherPriority, TimeSpan, Delegate, Object, Object[])\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate, Object, Object[])\n  fullName: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate, Object, Object[])\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(DispatcherPriority, TimeSpan, Delegate, Object)\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate, Object)\n  fullName: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate, Object)\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(DispatcherPriority, Delegate, Object, Object[])\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, Delegate, Object, Object[])\n  fullName: Dispatcher.Invoke(DispatcherPriority, Delegate, Object, Object[])\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(Action, DispatcherPriority, CancellationToken, TimeSpan)\n  nameWithType: Dispatcher.Invoke(Action, DispatcherPriority, CancellationToken, TimeSpan)\n  fullName: Dispatcher.Invoke(Action, DispatcherPriority, CancellationToken, TimeSpan)\n- uid: System.Action\n  parent: System\n  isExternal: false\n  name: Action\n  nameWithType: Action\n  fullName: System.Action\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(DispatcherPriority, TimeSpan, Delegate)\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate)\n  fullName: Dispatcher.Invoke(DispatcherPriority, TimeSpan, Delegate)\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(DispatcherPriority, Delegate, Object)\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, Delegate, Object)\n  fullName: Dispatcher.Invoke(DispatcherPriority, Delegate, Object)\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(Delegate, TimeSpan, DispatcherPriority, Object[])\n  nameWithType: Dispatcher.Invoke(Delegate, TimeSpan, DispatcherPriority, Object[])\n  fullName: Dispatcher.Invoke(Delegate, TimeSpan, DispatcherPriority, Object[])\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(Delegate, TimeSpan, Object[])\n  nameWithType: Dispatcher.Invoke(Delegate, TimeSpan, Object[])\n  fullName: Dispatcher.Invoke(Delegate, TimeSpan, Object[])\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(Action, DispatcherPriority, CancellationToken)\n  nameWithType: Dispatcher.Invoke(Action, DispatcherPriority, CancellationToken)\n  fullName: Dispatcher.Invoke(Action, DispatcherPriority, CancellationToken)\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(DispatcherPriority, Delegate)\n  nameWithType: Dispatcher.Invoke(DispatcherPriority, Delegate)\n  fullName: Dispatcher.Invoke(DispatcherPriority, Delegate)\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(Delegate, Object[])\n  nameWithType: Dispatcher.Invoke(Delegate, Object[])\n  fullName: Dispatcher.Invoke(Delegate, Object[])\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(Action, DispatcherPriority)\n  nameWithType: Dispatcher.Invoke(Action, DispatcherPriority)\n  fullName: Dispatcher.Invoke(Action, DispatcherPriority)\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(Action)\n  nameWithType: Dispatcher.Invoke(Action)\n  fullName: Dispatcher.Invoke(Action)\n- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke(Delegate, DispatcherPriority, Object[])\n  nameWithType: Dispatcher.Invoke(Delegate, DispatcherPriority, Object[])\n  fullName: Dispatcher.Invoke(Delegate, DispatcherPriority, Object[])\n- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke<TResult>(Func<TResult>)\n  nameWithType: Dispatcher.Invoke<TResult>(Func<TResult>)\n  fullName: Dispatcher.Invoke<TResult>(Func<TResult>)\n- uid: TResult\n  isExternal: true\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Func`1\n  parent: System\n  isExternal: false\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke<TResult>(Func<TResult>, DispatcherPriority)\n  nameWithType: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority)\n  fullName: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority)\n- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  nameWithType: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  fullName: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken, TimeSpan)\n  nameWithType: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken, TimeSpan)\n  fullName: Dispatcher.Invoke<TResult>(Func<TResult>, DispatcherPriority, CancellationToken, TimeSpan)\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeAsync(Action)\n  nameWithType: Dispatcher.InvokeAsync(Action)\n  fullName: Dispatcher.InvokeAsync(Action)\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeAsync(Action, DispatcherPriority)\n  nameWithType: Dispatcher.InvokeAsync(Action, DispatcherPriority)\n  fullName: Dispatcher.InvokeAsync(Action, DispatcherPriority)\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeAsync(Action, DispatcherPriority, CancellationToken)\n  nameWithType: Dispatcher.InvokeAsync(Action, DispatcherPriority, CancellationToken)\n  fullName: Dispatcher.InvokeAsync(Action, DispatcherPriority, CancellationToken)\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeAsync<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  nameWithType: Dispatcher.InvokeAsync<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n  fullName: Dispatcher.InvokeAsync<TResult>(Func<TResult>, DispatcherPriority, CancellationToken)\n- uid: System.Windows.Threading.DispatcherOperation`1\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherOperation<TResult>\n  nameWithType: DispatcherOperation<TResult>\n  fullName: System.Windows.Threading.DispatcherOperation<TResult>\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeAsync<TResult>(Func<TResult>)\n  nameWithType: Dispatcher.InvokeAsync<TResult>(Func<TResult>)\n  fullName: Dispatcher.InvokeAsync<TResult>(Func<TResult>)\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeAsync<TResult>(Func<TResult>, DispatcherPriority)\n  nameWithType: Dispatcher.InvokeAsync<TResult>(Func<TResult>, DispatcherPriority)\n  fullName: Dispatcher.InvokeAsync<TResult>(Func<TResult>, DispatcherPriority)\n- uid: System.Windows.Threading.Dispatcher.InvokeShutdown\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeShutdown()\n  nameWithType: Dispatcher.InvokeShutdown()\n  fullName: Dispatcher.InvokeShutdown()\n- uid: System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: PushFrame(DispatcherFrame)\n  nameWithType: Dispatcher.PushFrame(DispatcherFrame)\n  fullName: Dispatcher.PushFrame(DispatcherFrame)\n- uid: System.Windows.Threading.DispatcherFrame\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherFrame\n  nameWithType: DispatcherFrame\n  fullName: System.Windows.Threading.DispatcherFrame\n- uid: System.Windows.Threading.Dispatcher.Run\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Run()\n  nameWithType: Dispatcher.Run()\n  fullName: Dispatcher.Run()\n- uid: System.Windows.Threading.Dispatcher.ShutdownFinished\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: ShutdownFinished\n  nameWithType: Dispatcher.ShutdownFinished\n  fullName: Dispatcher.ShutdownFinished\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Threading.Dispatcher.ShutdownStarted\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: ShutdownStarted\n  nameWithType: Dispatcher.ShutdownStarted\n  fullName: Dispatcher.ShutdownStarted\n- uid: System.Windows.Threading.Dispatcher.Thread\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Thread\n  nameWithType: Dispatcher.Thread\n  fullName: Dispatcher.Thread\n- uid: System.Windows.Threading.Dispatcher.UnhandledException\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: UnhandledException\n  nameWithType: Dispatcher.UnhandledException\n  fullName: Dispatcher.UnhandledException\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherUnhandledExceptionEventHandler\n  nameWithType: DispatcherUnhandledExceptionEventHandler\n  fullName: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler\n- uid: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: UnhandledExceptionFilter\n  nameWithType: Dispatcher.UnhandledExceptionFilter\n  fullName: Dispatcher.UnhandledExceptionFilter\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherUnhandledExceptionFilterEventHandler\n  nameWithType: DispatcherUnhandledExceptionFilterEventHandler\n  fullName: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler\n- uid: System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: ValidatePriority(DispatcherPriority, String)\n  nameWithType: Dispatcher.ValidatePriority(DispatcherPriority, String)\n  fullName: Dispatcher.ValidatePriority(DispatcherPriority, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Threading.Dispatcher.VerifyAccess\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: Dispatcher.VerifyAccess()\n  fullName: Dispatcher.VerifyAccess()\n- uid: System.Windows.Threading.Dispatcher.Yield\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Yield()\n  nameWithType: Dispatcher.Yield()\n  fullName: Dispatcher.Yield()\n- uid: System.Windows.Threading.DispatcherPriorityAwaitable\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherPriorityAwaitable\n  nameWithType: DispatcherPriorityAwaitable\n  fullName: System.Windows.Threading.DispatcherPriorityAwaitable\n- uid: System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Yield(DispatcherPriority)\n  nameWithType: Dispatcher.Yield(DispatcherPriority)\n  fullName: Dispatcher.Yield(DispatcherPriority)\n- uid: System.Windows.Threading.Dispatcher.BeginInvoke*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: BeginInvoke\n  nameWithType: Dispatcher.BeginInvoke\n  fullName: Dispatcher.BeginInvoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.Invoke*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke\n  nameWithType: Dispatcher.Invoke\n  fullName: Dispatcher.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.BeginInvokeShutdown*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: BeginInvokeShutdown\n  nameWithType: Dispatcher.BeginInvokeShutdown\n  fullName: Dispatcher.BeginInvokeShutdown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.CheckAccess*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: CheckAccess\n  nameWithType: Dispatcher.CheckAccess\n  fullName: Dispatcher.CheckAccess\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.CurrentDispatcher*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: CurrentDispatcher\n  nameWithType: Dispatcher.CurrentDispatcher\n  fullName: Dispatcher.CurrentDispatcher\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.DisableProcessing*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: DisableProcessing\n  nameWithType: Dispatcher.DisableProcessing\n  fullName: Dispatcher.DisableProcessing\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.ExitAllFrames*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: ExitAllFrames\n  nameWithType: Dispatcher.ExitAllFrames\n  fullName: Dispatcher.ExitAllFrames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.FromThread*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: FromThread\n  nameWithType: Dispatcher.FromThread\n  fullName: Dispatcher.FromThread\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.HasShutdownFinished*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: HasShutdownFinished\n  nameWithType: Dispatcher.HasShutdownFinished\n  fullName: Dispatcher.HasShutdownFinished\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.HasShutdownStarted*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: HasShutdownStarted\n  nameWithType: Dispatcher.HasShutdownStarted\n  fullName: Dispatcher.HasShutdownStarted\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.Hooks*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Hooks\n  nameWithType: Dispatcher.Hooks\n  fullName: Dispatcher.Hooks\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.Invoke``1*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Invoke<TResult>\n  nameWithType: Dispatcher.Invoke<TResult>\n  fullName: Dispatcher.Invoke<TResult>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeAsync\n  nameWithType: Dispatcher.InvokeAsync\n  fullName: Dispatcher.InvokeAsync\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeAsync<TResult>\n  nameWithType: Dispatcher.InvokeAsync<TResult>\n  fullName: Dispatcher.InvokeAsync<TResult>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.InvokeShutdown*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: InvokeShutdown\n  nameWithType: Dispatcher.InvokeShutdown\n  fullName: Dispatcher.InvokeShutdown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.PushFrame*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: PushFrame\n  nameWithType: Dispatcher.PushFrame\n  fullName: Dispatcher.PushFrame\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.Run*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Run\n  nameWithType: Dispatcher.Run\n  fullName: Dispatcher.Run\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.Thread*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Thread\n  nameWithType: Dispatcher.Thread\n  fullName: Dispatcher.Thread\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.ValidatePriority*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: ValidatePriority\n  nameWithType: Dispatcher.ValidatePriority\n  fullName: Dispatcher.ValidatePriority\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.VerifyAccess*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: VerifyAccess\n  nameWithType: Dispatcher.VerifyAccess\n  fullName: Dispatcher.VerifyAccess\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Windows.Threading.Dispatcher.Yield*\n  parent: System.Windows.Threading.Dispatcher\n  isExternal: false\n  name: Yield\n  nameWithType: Dispatcher.Yield\n  fullName: Dispatcher.Yield\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/Dispatcher.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)\n  parent: System.Windows.Threading.DispatcherExtensions\n  isExternal: false\n  name: BeginInvoke(Dispatcher, Action)\n  nameWithType: DispatcherExtensions.BeginInvoke(Dispatcher, Action)\n  fullName: DispatcherExtensions.BeginInvoke(Dispatcher, Action)\n- uid: System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.DispatcherExtensions\n  isExternal: false\n  name: BeginInvoke(Dispatcher, Action, DispatcherPriority)\n  nameWithType: DispatcherExtensions.BeginInvoke(Dispatcher, Action, DispatcherPriority)\n  fullName: DispatcherExtensions.BeginInvoke(Dispatcher, Action, DispatcherPriority)\n- uid: System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action)\n  parent: System.Windows.Threading.DispatcherExtensions\n  isExternal: false\n  name: Invoke(Dispatcher, Action)\n  nameWithType: DispatcherExtensions.Invoke(Dispatcher, Action)\n  fullName: DispatcherExtensions.Invoke(Dispatcher, Action)\n- uid: System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan)\n  parent: System.Windows.Threading.DispatcherExtensions\n  isExternal: false\n  name: Invoke(Dispatcher, Action, TimeSpan)\n  nameWithType: DispatcherExtensions.Invoke(Dispatcher, Action, TimeSpan)\n  fullName: DispatcherExtensions.Invoke(Dispatcher, Action, TimeSpan)\n- uid: System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan,System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.DispatcherExtensions\n  isExternal: false\n  name: Invoke(Dispatcher, Action, TimeSpan, DispatcherPriority)\n  nameWithType: DispatcherExtensions.Invoke(Dispatcher, Action, TimeSpan, DispatcherPriority)\n  fullName: DispatcherExtensions.Invoke(Dispatcher, Action, TimeSpan, DispatcherPriority)\n- uid: System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)\n  parent: System.Windows.Threading.DispatcherExtensions\n  isExternal: false\n  name: Invoke(Dispatcher, Action, DispatcherPriority)\n  nameWithType: DispatcherExtensions.Invoke(Dispatcher, Action, DispatcherPriority)\n  fullName: DispatcherExtensions.Invoke(Dispatcher, Action, DispatcherPriority)\n"}