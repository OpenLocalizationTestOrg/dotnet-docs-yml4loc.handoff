{"nodes":[{"content":"Provides common methods for sending data to and receiving data from a resource identified by a URI.","nodes":[{"pos":[0,99],"content":"Provides common methods for sending data to and receiving data from a resource identified by a URI.","nodes":[{"content":"Provides common methods for sending data to and receiving data from a resource identified by a URI.","pos":[0,99]}]}],"pos":[8676,8776],"yaml":true},{"content":"The <xref:System.Net.WebClient> class provides common methods for sending data to or receiving data from any local, intranet, or Internet resource identified by a URI.  \n  \n The <xref:System.Net.WebClient> class uses the <xref:System.Net.WebRequest> class to provide access to resources. <xref:System.Net.WebClient> instances can access data with any <xref:System.Net.WebRequest> descendant registered with the <xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  By default, the .NET Framework supports URIs that begin with `http:`, `https:`, ftp:, and `file:` scheme identifiers.  \n  \n The following table describes <xref:System.Net.WebClient> methods for uploading data to a resource.  \n  \n|Method|Description|  \n|------------|-----------------|  \n|<xref:System.Net.WebClient.OpenWrite%2A>|Retrieves a <xref:System.IO.Stream> used to send data to the resource.|  \n|<xref:System.Net.WebClient.OpenWriteAsync%2A>|Retrieves a <xref:System.IO.Stream> used to send data to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadData%2A>|Sends a byte array to the resource and returns a <xref:System.Byte> array containing any response.|  \n|<xref:System.Net.WebClient.UploadDataAsync%2A>|Sends a <xref:System.Byte> array to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadFile%2A>|Sends a local file to the resource and returns a <xref:System.Byte> array containing any response.|  \n|<xref:System.Net.WebClient.UploadFileAsync%2A>|Sends a local file to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadValues%2A>|Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response.|  \n|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadString%2A>|Sends a <xref:System.String> to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadStringAsync%2A>|Sends a <xref:System.String> to the resource, without blocking the calling thread.|  \n  \n The following table describes <xref:System.Net.WebClient> methods for downloading data from a resource.  \n  \n|Method|Description|  \n|------------|-----------------|  \n|<xref:System.Net.WebClient.OpenRead%2A>|Returns the data from a resource as a <xref:System.IO.Stream>.|  \n|<xref:System.Net.WebClient.OpenReadAsync%2A>|Returns the data from a resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.DownloadData%2A>|Downloads data from a resource and returns a <xref:System.Byte> array.|  \n|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.DownloadFile%2A>|Downloads data from a resource to a local file.|  \n|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Downloads data from a resource to a local file, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.DownloadString%2A>|Downloads a <xref:System.String> from a resource and returns a <xref:System.String>.|  \n|<xref:System.Net.WebClient.DownloadStringAsync%2A>|Downloads a <xref:System.String> from a resource, without blocking the calling thread.|  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n A <xref:System.Net.WebClient> instance does not send optional HTTP headers by default. If your request requires an optional header, you must add the header to the <xref:System.Net.WebClient.Headers%2A> collection. For example, to retain queries in the response, you must add a user-agent header. Also, servers may return 500 (Internal Server Error) if the user agent header is missing.  \n  \n <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is set to `true` in <xref:System.Net.WebClient> instances.","nodes":[{"pos":[0,167],"content":"The <xref:System.Net.WebClient> class provides common methods for sending data to or receiving data from any local, intranet, or Internet resource identified by a URI.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> class provides common methods for sending data to or receiving data from any local, intranet, or Internet resource identified by a URI.","pos":[0,167],"source":"The <xref:System.Net.WebClient> class provides common methods for sending data to or receiving data from any local, intranet, or Internet resource identified by a URI."}]},{"pos":[174,490],"content":"The <xref:System.Net.WebClient> class uses the <xref:System.Net.WebRequest> class to provide access to resources. <xref:System.Net.WebClient> instances can access data with any <xref:System.Net.WebRequest> descendant registered with the <xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.Net.WebClient> class uses the <xref:System.Net.WebRequest> class to provide access to resources. <xref:System.Net.WebClient> instances can access data with any <xref:System.Net.WebRequest> descendant registered with the <xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=fullName> method.","pos":[0,316],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> class uses the <ph id=\"ph2\">&lt;xref:System.Net.WebRequest&gt;</ph> class to provide access to resources.","pos":[0,113],"source":"The <xref:System.Net.WebClient> class uses the <xref:System.Net.WebRequest> class to provide access to resources."},{"content":"<ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> instances can access data with any <ph id=\"ph2\">&lt;xref:System.Net.WebRequest&gt;</ph> descendant registered with the <ph id=\"ph3\">&lt;xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=fullName&gt;</ph> method.","pos":[114,316],"source":" <xref:System.Net.WebClient> instances can access data with any <xref:System.Net.WebRequest> descendant registered with the <xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=fullName> method."}]}]},{"pos":[498,626],"content":"[!NOTE]\n By default, the .NET Framework supports URIs that begin with `http:`, `https:`, ftp:, and `file:` scheme identifiers.","leadings":["","> "],"nodes":[{"content":"By default, the .NET Framework supports URIs that begin with <ph id=\"ph1\">`http:`</ph>, <ph id=\"ph2\">`https:`</ph>, ftp:, and <ph id=\"ph3\">`file:`</ph> scheme identifiers.","pos":[9,126],"source":" By default, the .NET Framework supports URIs that begin with `http:`, `https:`, ftp:, and `file:` scheme identifiers."}]},{"pos":[633,732],"content":"The following table describes <xref:System.Net.WebClient> methods for uploading data to a resource.","nodes":[{"content":"The following table describes <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> methods for uploading data to a resource.","pos":[0,99],"source":"The following table describes <xref:System.Net.WebClient> methods for uploading data to a resource."}]},{"pos":[739,745],"content":"Method","nodes":[{"content":"Method","pos":[0,6]}]},{"pos":[746,757],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[797,837],"content":"<xref:System.Net.WebClient.OpenWrite%2A>","nodes":[]},{"pos":[838,908],"content":"Retrieves a <xref:System.IO.Stream> used to send data to the resource.","nodes":[{"content":"Retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> used to send data to the resource.","pos":[0,70],"source":"Retrieves a <xref:System.IO.Stream> used to send data to the resource."}]},{"pos":[913,958],"content":"<xref:System.Net.WebClient.OpenWriteAsync%2A>","nodes":[]},{"pos":[959,1066],"content":"Retrieves a <xref:System.IO.Stream> used to send data to the resource, without blocking the calling thread.","nodes":[{"content":"Retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> used to send data to the resource, without blocking the calling thread.","pos":[0,107],"source":"Retrieves a <xref:System.IO.Stream> used to send data to the resource, without blocking the calling thread."}]},{"pos":[1071,1112],"content":"<xref:System.Net.WebClient.UploadData%2A>","nodes":[]},{"pos":[1113,1211],"content":"Sends a byte array to the resource and returns a <xref:System.Byte> array containing any response.","nodes":[{"content":"Sends a byte array to the resource and returns a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array containing any response.","pos":[0,98],"source":"Sends a byte array to the resource and returns a <xref:System.Byte> array containing any response."}]},{"pos":[1216,1262],"content":"<xref:System.Net.WebClient.UploadDataAsync%2A>","nodes":[]},{"pos":[1263,1349],"content":"Sends a <xref:System.Byte> array to the resource, without blocking the calling thread.","nodes":[{"content":"Sends a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array to the resource, without blocking the calling thread.","pos":[0,86],"source":"Sends a <xref:System.Byte> array to the resource, without blocking the calling thread."}]},{"pos":[1354,1395],"content":"<xref:System.Net.WebClient.UploadFile%2A>","nodes":[]},{"pos":[1396,1494],"content":"Sends a local file to the resource and returns a <xref:System.Byte> array containing any response.","nodes":[{"content":"Sends a local file to the resource and returns a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array containing any response.","pos":[0,98],"source":"Sends a local file to the resource and returns a <xref:System.Byte> array containing any response."}]},{"pos":[1499,1545],"content":"<xref:System.Net.WebClient.UploadFileAsync%2A>","nodes":[]},{"pos":[1546,1618],"content":"Sends a local file to the resource, without blocking the calling thread.","nodes":[{"content":"Sends a local file to the resource, without blocking the calling thread.","pos":[0,72]}]},{"pos":[1623,1666],"content":"<xref:System.Net.WebClient.UploadValues%2A>","nodes":[]},{"pos":[1667,1812],"content":"Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response.","nodes":[{"content":"Sends a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> to the resource and returns a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph> array containing any response.","pos":[0,145],"source":"Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response."}]},{"pos":[1817,1865],"content":"<xref:System.Net.WebClient.UploadValuesAsync%2A>","nodes":[]},{"pos":[1866,2048],"content":"Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread.","nodes":[{"content":"Sends a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> to the resource and returns a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph> array containing any response, without blocking the calling thread.","pos":[0,182],"source":"Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread."}]},{"pos":[2053,2096],"content":"<xref:System.Net.WebClient.UploadString%2A>","nodes":[]},{"pos":[2097,2179],"content":"Sends a <xref:System.String> to the resource, without blocking the calling thread.","nodes":[{"content":"Sends a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> to the resource, without blocking the calling thread.","pos":[0,82],"source":"Sends a <xref:System.String> to the resource, without blocking the calling thread."}]},{"pos":[2184,2232],"content":"<xref:System.Net.WebClient.UploadStringAsync%2A>","nodes":[]},{"pos":[2233,2315],"content":"Sends a <xref:System.String> to the resource, without blocking the calling thread.","nodes":[{"content":"Sends a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> to the resource, without blocking the calling thread.","pos":[0,82],"source":"Sends a <xref:System.String> to the resource, without blocking the calling thread."}]},{"pos":[2323,2426],"content":"The following table describes <xref:System.Net.WebClient> methods for downloading data from a resource.","nodes":[{"content":"The following table describes <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> methods for downloading data from a resource.","pos":[0,103],"source":"The following table describes <xref:System.Net.WebClient> methods for downloading data from a resource."}]},{"pos":[2433,2439],"content":"Method","nodes":[{"content":"Method","pos":[0,6]}]},{"pos":[2440,2451],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2491,2530],"content":"<xref:System.Net.WebClient.OpenRead%2A>","nodes":[]},{"pos":[2531,2593],"content":"Returns the data from a resource as a <xref:System.IO.Stream>.","nodes":[{"content":"Returns the data from a resource as a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph>.","pos":[0,62],"source":"Returns the data from a resource as a <xref:System.IO.Stream>."}]},{"pos":[2598,2642],"content":"<xref:System.Net.WebClient.OpenReadAsync%2A>","nodes":[]},{"pos":[2643,2713],"content":"Returns the data from a resource, without blocking the calling thread.","nodes":[{"content":"Returns the data from a resource, without blocking the calling thread.","pos":[0,70]}]},{"pos":[2718,2761],"content":"<xref:System.Net.WebClient.DownloadData%2A>","nodes":[]},{"pos":[2762,2832],"content":"Downloads data from a resource and returns a <xref:System.Byte> array.","nodes":[{"content":"Downloads data from a resource and returns a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array.","pos":[0,70],"source":"Downloads data from a resource and returns a <xref:System.Byte> array."}]},{"pos":[2837,2885],"content":"<xref:System.Net.WebClient.DownloadDataAsync%2A>","nodes":[]},{"pos":[2886,2993],"content":"Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread.","nodes":[{"content":"Downloads data from a resource and returns a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array, without blocking the calling thread.","pos":[0,107],"source":"Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread."}]},{"pos":[2998,3041],"content":"<xref:System.Net.WebClient.DownloadFile%2A>","nodes":[]},{"pos":[3042,3089],"content":"Downloads data from a resource to a local file.","nodes":[{"content":"Downloads data from a resource to a local file.","pos":[0,47]}]},{"pos":[3094,3142],"content":"<xref:System.Net.WebClient.DownloadFileAsync%2A>","nodes":[]},{"pos":[3143,3227],"content":"Downloads data from a resource to a local file, without blocking the calling thread.","nodes":[{"content":"Downloads data from a resource to a local file, without blocking the calling thread.","pos":[0,84]}]},{"pos":[3232,3277],"content":"<xref:System.Net.WebClient.DownloadString%2A>","nodes":[]},{"pos":[3278,3362],"content":"Downloads a <xref:System.String> from a resource and returns a <xref:System.String>.","nodes":[{"content":"Downloads a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> from a resource and returns a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,84],"source":"Downloads a <xref:System.String> from a resource and returns a <xref:System.String>."}]},{"pos":[3367,3417],"content":"<xref:System.Net.WebClient.DownloadStringAsync%2A>","nodes":[]},{"pos":[3418,3504],"content":"Downloads a <xref:System.String> from a resource, without blocking the calling thread.","nodes":[{"content":"Downloads a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> from a resource, without blocking the calling thread.","pos":[0,86],"source":"Downloads a <xref:System.String> from a resource, without blocking the calling thread."}]},{"pos":[3512,3636],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[3643,4028],"content":"A <xref:System.Net.WebClient> instance does not send optional HTTP headers by default. If your request requires an optional header, you must add the header to the <xref:System.Net.WebClient.Headers%2A> collection. For example, to retain queries in the response, you must add a user-agent header. Also, servers may return 500 (Internal Server Error) if the user agent header is missing.","nodes":[{"content":"A <xref:System.Net.WebClient> instance does not send optional HTTP headers by default. If your request requires an optional header, you must add the header to the <xref:System.Net.WebClient.Headers%2A> collection. For example, to retain queries in the response, you must add a user-agent header. Also, servers may return 500 (Internal Server Error) if the user agent header is missing.","pos":[0,385],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> instance does not send optional HTTP headers by default.","pos":[0,86],"source":"A <xref:System.Net.WebClient> instance does not send optional HTTP headers by default."},{"content":"If your request requires an optional header, you must add the header to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Headers%2A&gt;</ph> collection.","pos":[87,213],"source":" If your request requires an optional header, you must add the header to the <xref:System.Net.WebClient.Headers%2A> collection."},{"content":"For example, to retain queries in the response, you must add a user-agent header.","pos":[214,295]},{"content":"Also, servers may return 500 (Internal Server Error) if the user agent header is missing.","pos":[296,385]}]}]},{"pos":[4035,4147],"content":"<ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A&gt;</ph> is set to <ph id=\"ph2\">`true`</ph> in <ph id=\"ph3\">&lt;xref:System.Net.WebClient&gt;</ph> instances.","source":"<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is set to `true` in <xref:System.Net.WebClient> instances."}],"pos":[8787,12976],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.WebClient\"></xref> class.","nodes":[{"pos":[0,82],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.WebClient\"></xref> class."}],"pos":[15803,15886],"yaml":true},{"content":"The default constructor creates a new instance of the <xref:System.Net.WebClient> class. The default HTTP method is GET. The default FTP method is RETR. The default <xref:System.Net.WebClient.Encoding%2A> is <xref:System.Text.Encoding.Default%2A>. The default value of <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is `true`.","nodes":[{"pos":[0,333],"content":"The default constructor creates a new instance of the <xref:System.Net.WebClient> class. The default HTTP method is GET. The default FTP method is RETR. The default <xref:System.Net.WebClient.Encoding%2A> is <xref:System.Text.Encoding.Default%2A>. The default value of <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is `true`.","nodes":[{"content":"The default constructor creates a new instance of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> class.","pos":[0,88],"source":"The default constructor creates a new instance of the <xref:System.Net.WebClient> class."},{"content":"The default HTTP method is GET.","pos":[89,120]},{"content":"The default FTP method is RETR.","pos":[121,152]},{"content":"The default <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph>.","pos":[153,247],"source":" The default <xref:System.Net.WebClient.Encoding%2A> is <xref:System.Text.Encoding.Default%2A>."},{"content":"The default value of <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>.","pos":[248,333],"source":" The default value of <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is `true`."}]}],"pos":[15897,16231],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a value that indicates whether to buffer the data read from the Internet resource for a <xref href=\"System.Net.WebClient\"></xref> instance.","nodes":[{"pos":[0,152],"content":"Gets or sets a value that indicates whether to buffer the data read from the Internet resource for a <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"Gets or sets a value that indicates whether to buffer the data read from the Internet resource for a <xref href=\"System.Net.WebClient\"></xref> instance."}],"pos":[18054,18207],"yaml":true},{"content":"When the <xref:System.Net.WebClient.AllowReadStreamBuffering%2A> property is `true`, the data is buffered in memory so it is ready to be read by the app.","nodes":[{"pos":[0,153],"content":"When the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.AllowReadStreamBuffering%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, the data is buffered in memory so it is ready to be read by the app.","source":"When the <xref:System.Net.WebClient.AllowReadStreamBuffering%2A> property is `true`, the data is buffered in memory so it is ready to be read by the app."}],"pos":[18218,18372],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n `true` to enable buffering of the data received from the Internet resource; `false` to disable buffering. The default is `true`.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,179],"content":"`true` to enable buffering of the data received from the Internet resource; `false` to disable buffering. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to enable buffering of the data received from the Internet resource; <ph id=\"ph2\">`false`</ph> to disable buffering.","pos":[0,105],"source":"`true` to enable buffering of the data received from the Internet resource; `false` to disable buffering."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[106,128],"source":" The default is `true`."}]}],"pos":[18655,18841],"yaml":true},{"content":"Gets or sets a value that indicates whether to buffer the data written to the Internet resource for a <xref href=\"System.Net.WebClient\"></xref> instance.","nodes":[{"pos":[0,153],"content":"Gets or sets a value that indicates whether to buffer the data written to the Internet resource for a <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"Gets or sets a value that indicates whether to buffer the data written to the Internet resource for a <xref href=\"System.Net.WebClient\"></xref> instance."}],"pos":[20018,20172],"yaml":true},{"content":"When the <xref:System.Net.WebClient.AllowWriteStreamBuffering%2A> property is `true`, the data is buffered in memory so it can be written more efficiently to the Internet resource in larger chunks.","nodes":[{"pos":[0,197],"content":"When the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.AllowWriteStreamBuffering%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, the data is buffered in memory so it can be written more efficiently to the Internet resource in larger chunks.","source":"When the <xref:System.Net.WebClient.AllowWriteStreamBuffering%2A> property is `true`, the data is buffered in memory so it can be written more efficiently to the Internet resource in larger chunks."}],"pos":[20183,20381],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n `true` to enable buffering of the data written to the Internet resource; `false` to disable buffering. The default is `true`.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,176],"content":"`true` to enable buffering of the data written to the Internet resource; `false` to disable buffering. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to enable buffering of the data written to the Internet resource; <ph id=\"ph2\">`false`</ph> to disable buffering.","pos":[0,102],"source":"`true` to enable buffering of the data written to the Internet resource; `false` to disable buffering."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[103,125],"source":" The default is `true`."}]}],"pos":[20665,20848],"yaml":true},{"content":"Gets or sets the base URI for requests made by a <xref href=\"System.Net.WebClient\"></xref>.","nodes":[{"pos":[0,91],"content":"Gets or sets the base URI for requests made by a <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the base URI for requests made by a <xref href=\"System.Net.WebClient\"></xref>."}],"pos":[21958,22050],"yaml":true},{"content":"The <xref:System.Net.WebClient.BaseAddress%2A> property contains a base URI that is combined with a relative address. When you call a method that uploads or downloads data, the <xref:System.Net.WebClient> object combines this base URI with the relative address you specify in the method call. If you specify an absolute URI, <xref:System.Net.WebClient> does not use the <xref:System.Net.WebClient.BaseAddress%2A> property value.  \n  \n To remove a previously set value, set this property to `null` or an empty string (\"\").","nodes":[{"pos":[0,428],"content":"The <xref:System.Net.WebClient.BaseAddress%2A> property contains a base URI that is combined with a relative address. When you call a method that uploads or downloads data, the <xref:System.Net.WebClient> object combines this base URI with the relative address you specify in the method call. If you specify an absolute URI, <xref:System.Net.WebClient> does not use the <xref:System.Net.WebClient.BaseAddress%2A> property value.","nodes":[{"content":"The <xref:System.Net.WebClient.BaseAddress%2A> property contains a base URI that is combined with a relative address. When you call a method that uploads or downloads data, the <xref:System.Net.WebClient> object combines this base URI with the relative address you specify in the method call. If you specify an absolute URI, <xref:System.Net.WebClient> does not use the <xref:System.Net.WebClient.BaseAddress%2A> property value.","pos":[0,428],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property contains a base URI that is combined with a relative address.","pos":[0,117],"source":"The <xref:System.Net.WebClient.BaseAddress%2A> property contains a base URI that is combined with a relative address."},{"content":"When you call a method that uploads or downloads data, the <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> object combines this base URI with the relative address you specify in the method call.","pos":[118,292],"source":" When you call a method that uploads or downloads data, the <xref:System.Net.WebClient> object combines this base URI with the relative address you specify in the method call."},{"content":"If you specify an absolute URI, <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> does not use the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property value.","pos":[293,428],"source":" If you specify an absolute URI, <xref:System.Net.WebClient> does not use the <xref:System.Net.WebClient.BaseAddress%2A> property value."}]}]},{"pos":[435,521],"content":"To remove a previously set value, set this property to <ph id=\"ph1\">`null`</ph> or an empty string (\"\").","source":"To remove a previously set value, set this property to `null` or an empty string (\"\")."}],"pos":[22061,22589],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> containing the base URI for requests made by a <xref href=\"System.Net.WebClient\"></xref> or <xref href=\"System.String.Empty\"></xref> if no base address has been specified.","nodes":[{"pos":[0,208],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the base URI for requests made by a <ph id=\"ph2\">&lt;xref href=\"System.Net.WebClient\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if no base address has been specified.","source":"A <xref href=\"System.String\"></xref> containing the base URI for requests made by a <xref href=\"System.Net.WebClient\"></xref> or <xref href=\"System.String.Empty\"></xref> if no base address has been specified."}],"pos":[23559,23768],"yaml":true},{"content":"<xref href=\"System.Net.WebClient.BaseAddress\"></xref> is set to an invalid URI. The inner exception may contain information that will help you locate the error.","nodes":[{"pos":[0,160],"content":"<xref href=\"System.Net.WebClient.BaseAddress\"></xref> is set to an invalid URI. The inner exception may contain information that will help you locate the error.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> is set to an invalid URI.","pos":[0,79],"source":"<xref href=\"System.Net.WebClient.BaseAddress\"></xref> is set to an invalid URI."},{"content":"The inner exception may contain information that will help you locate the error.","pos":[80,160]}]}],"pos":[23922,24083],"yaml":true},{"content":"Gets or sets the application's cache policy for any resources obtained by this WebClient instance using <xref href=\"System.Net.WebRequest\"></xref> objects.","nodes":[{"pos":[0,155],"content":"Gets or sets the application's cache policy for any resources obtained by this WebClient instance using <ph id=\"ph1\">&lt;xref href=\"System.Net.WebRequest\"&gt;&lt;/xref&gt;</ph> objects.","source":"Gets or sets the application's cache policy for any resources obtained by this WebClient instance using <xref href=\"System.Net.WebRequest\"></xref> objects."}],"pos":[25107,25263],"yaml":true},{"content":"A <xref href=\"System.Net.Cache.RequestCachePolicy\"></xref> object that represents the application's caching requirements.","nodes":[{"pos":[0,121],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.Cache.RequestCachePolicy\"&gt;&lt;/xref&gt;</ph> object that represents the application's caching requirements.","source":"A <xref href=\"System.Net.Cache.RequestCachePolicy\"></xref> object that represents the application's caching requirements."}],"pos":[25434,25556],"yaml":true},{"content":"Cancels a pending asynchronous operation.","nodes":[{"pos":[0,41],"content":"Cancels a pending asynchronous operation.","nodes":[{"content":"Cancels a pending asynchronous operation.","pos":[0,41]}]}],"pos":[26647,26689],"yaml":true},{"content":"If an operation is pending, this method calls <xref:System.Net.WebRequest.Abort%2A> on the underlying <xref:System.Net.WebRequest>.  \n  \n When you call <xref:System.Net.WebClient.CancelAsync%2A>, your application still receives the completion event associated with the operation. For example, when you call <xref:System.Net.WebClient.CancelAsync%2A> to cancel a <xref:System.Net.WebClient.DownloadStringAsync%2A> operation, if you have specified an event handler for the <xref:System.Net.WebClient.DownloadStringCompleted> event, your event handler receives notification that the operation has ended. To learn whether the operation completed successfully, check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property on the base class of <xref:System.Net.DownloadDataCompletedEventArgs> in the event data object passed to the event handler.  \n  \n If no asynchronous operation is in progress, this method does nothing.","nodes":[{"pos":[0,131],"content":"If an operation is pending, this method calls <xref:System.Net.WebRequest.Abort%2A> on the underlying <xref:System.Net.WebRequest>.","nodes":[{"content":"If an operation is pending, this method calls <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.Abort%2A&gt;</ph> on the underlying <ph id=\"ph2\">&lt;xref:System.Net.WebRequest&gt;</ph>.","pos":[0,131],"source":"If an operation is pending, this method calls <xref:System.Net.WebRequest.Abort%2A> on the underlying <xref:System.Net.WebRequest>."}]},{"pos":[138,864],"content":"When you call <xref:System.Net.WebClient.CancelAsync%2A>, your application still receives the completion event associated with the operation. For example, when you call <xref:System.Net.WebClient.CancelAsync%2A> to cancel a <xref:System.Net.WebClient.DownloadStringAsync%2A> operation, if you have specified an event handler for the <xref:System.Net.WebClient.DownloadStringCompleted> event, your event handler receives notification that the operation has ended. To learn whether the operation completed successfully, check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property on the base class of <xref:System.Net.DownloadDataCompletedEventArgs> in the event data object passed to the event handler.","nodes":[{"content":"When you call <xref:System.Net.WebClient.CancelAsync%2A>, your application still receives the completion event associated with the operation. For example, when you call <xref:System.Net.WebClient.CancelAsync%2A> to cancel a <xref:System.Net.WebClient.DownloadStringAsync%2A> operation, if you have specified an event handler for the <xref:System.Net.WebClient.DownloadStringCompleted> event, your event handler receives notification that the operation has ended. To learn whether the operation completed successfully, check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property on the base class of <xref:System.Net.DownloadDataCompletedEventArgs> in the event data object passed to the event handler.","pos":[0,726],"nodes":[{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph>, your application still receives the completion event associated with the operation.","pos":[0,141],"source":"When you call <xref:System.Net.WebClient.CancelAsync%2A>, your application still receives the completion event associated with the operation."},{"content":"For example, when you call <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> to cancel a <ph id=\"ph2\">&lt;xref:System.Net.WebClient.DownloadStringAsync%2A&gt;</ph> operation, if you have specified an event handler for the <ph id=\"ph3\">&lt;xref:System.Net.WebClient.DownloadStringCompleted&gt;</ph> event, your event handler receives notification that the operation has ended.","pos":[142,462],"source":" For example, when you call <xref:System.Net.WebClient.CancelAsync%2A> to cancel a <xref:System.Net.WebClient.DownloadStringAsync%2A> operation, if you have specified an event handler for the <xref:System.Net.WebClient.DownloadStringCompleted> event, your event handler receives notification that the operation has ended."},{"content":"To learn whether the operation completed successfully, check the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property on the base class of <ph id=\"ph2\">&lt;xref:System.Net.DownloadDataCompletedEventArgs&gt;</ph> in the event data object passed to the event handler.","pos":[463,726],"source":" To learn whether the operation completed successfully, check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property on the base class of <xref:System.Net.DownloadDataCompletedEventArgs> in the event data object passed to the event handler."}]}]},{"pos":[871,941],"content":"If no asynchronous operation is in progress, this method does nothing.","nodes":[{"content":"If no asynchronous operation is in progress, this method does nothing.","pos":[0,70]}]}],"pos":[26700,27648],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the network credentials that are sent to the host and used to authenticate the request.","nodes":[{"pos":[0,100],"content":"Gets or sets the network credentials that are sent to the host and used to authenticate the request.","nodes":[{"content":"Gets or sets the network credentials that are sent to the host and used to authenticate the request.","pos":[0,100]}]}],"pos":[28805,28906],"yaml":true},{"content":"The <xref:System.Net.WebClient.Credentials%2A> property contains the authentication credentials used to access a resource on a host. In most client-side scenarios, you should use the <xref:System.Net.CredentialCache.DefaultCredentials%2A>, which are the credentials of the currently logged on user. To do this, set the <xref:System.Net.WebClient.UseDefaultCredentials%2A> property to `true` instead of setting this property.  \n  \n If the <xref:System.Net.WebClient> class is being used in a middle tier application, such as an ASP.NET application, the <xref:System.Net.CredentialCache.DefaultCredentials%2A> belong to the account running the ASP page (the server-side credentials). Typically, you would set this property to the credentials of the client on whose behalf the request is made.","nodes":[{"pos":[0,424],"content":"The <xref:System.Net.WebClient.Credentials%2A> property contains the authentication credentials used to access a resource on a host. In most client-side scenarios, you should use the <xref:System.Net.CredentialCache.DefaultCredentials%2A>, which are the credentials of the currently logged on user. To do this, set the <xref:System.Net.WebClient.UseDefaultCredentials%2A> property to `true` instead of setting this property.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Credentials%2A&gt;</ph> property contains the authentication credentials used to access a resource on a host.","pos":[0,132],"source":"The <xref:System.Net.WebClient.Credentials%2A> property contains the authentication credentials used to access a resource on a host."},{"content":"In most client-side scenarios, you should use the <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>, which are the credentials of the currently logged on user.","pos":[133,298],"source":" In most client-side scenarios, you should use the <xref:System.Net.CredentialCache.DefaultCredentials%2A>, which are the credentials of the currently logged on user."},{"content":"To do this, set the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UseDefaultCredentials%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph> instead of setting this property.","pos":[299,424],"source":" To do this, set the <xref:System.Net.WebClient.UseDefaultCredentials%2A> property to `true` instead of setting this property."}]},{"pos":[431,790],"content":"If the <xref:System.Net.WebClient> class is being used in a middle tier application, such as an ASP.NET application, the <xref:System.Net.CredentialCache.DefaultCredentials%2A> belong to the account running the ASP page (the server-side credentials). Typically, you would set this property to the credentials of the client on whose behalf the request is made.","nodes":[{"content":"If the <xref:System.Net.WebClient> class is being used in a middle tier application, such as an ASP.NET application, the <xref:System.Net.CredentialCache.DefaultCredentials%2A> belong to the account running the ASP page (the server-side credentials). Typically, you would set this property to the credentials of the client on whose behalf the request is made.","pos":[0,359],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> class is being used in a middle tier application, such as an ASP.NET application, the <ph id=\"ph2\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph> belong to the account running the ASP page (the server-side credentials).","pos":[0,250],"source":"If the <xref:System.Net.WebClient> class is being used in a middle tier application, such as an ASP.NET application, the <xref:System.Net.CredentialCache.DefaultCredentials%2A> belong to the account running the ASP page (the server-side credentials)."},{"content":"Typically, you would set this property to the credentials of the client on whose behalf the request is made.","pos":[251,359]}]}]}],"pos":[28917,29712],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.ICredentials\"></xref> containing the authentication credentials for the request. The default is `null`.","nodes":[{"pos":[0,129],"content":"An <xref href=\"System.Net.ICredentials\"></xref> containing the authentication credentials for the request. The default is `null`.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.ICredentials\"&gt;&lt;/xref&gt;</ph> containing the authentication credentials for the request.","pos":[0,106],"source":"An <xref href=\"System.Net.ICredentials\"></xref> containing the authentication credentials for the request."},{"content":"The default is <ph id=\"ph1\">`null`</ph>.","pos":[107,129],"source":" The default is `null`."}]}],"pos":[30382,30512],"yaml":true},{"content":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified.","nodes":[{"pos":[0,90],"content":"Downloads the resource as a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array from the URI specified.","source":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified."}],"pos":[31672,31763],"yaml":true},{"content":"The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,339],"content":"The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadData%2A&gt;</ph> method downloads the resource with the URI specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,128],"source":"The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter."},{"content":"This method blocks while downloading the resource.","pos":[129,179]},{"content":"To download a resource and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadDataAsync%2A&gt;</ph> methods.","pos":[180,339],"source":" To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods."}]},{"pos":[346,738],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[745,853],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[861,1086],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[31774,32872],"yaml":true,"extradata":"MT"},{"content":"The URI from which to download data.","nodes":[{"pos":[0,36],"content":"The URI from which to download data.","nodes":[{"content":"The URI from which to download data.","pos":[0,36]}]}],"pos":[33634,33671],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"pos":[0,76],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the downloaded resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the downloaded resource."}],"pos":[33728,33805],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[33968,34014],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading data.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,177],"content":"An error occurred while downloading data.","nodes":[{"content":"An error occurred while downloading data.","pos":[0,41]}]}],"pos":[34106,34292],"yaml":true},{"content":"The method has been called simultaneously on multiple threads.","nodes":[{"pos":[0,62],"content":"The method has been called simultaneously on multiple threads.","nodes":[{"content":"The method has been called simultaneously on multiple threads.","pos":[0,62]}]}],"pos":[34394,34457],"yaml":true},{"content":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified.","nodes":[{"pos":[0,90],"content":"Downloads the resource as a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array from the URI specified.","source":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified."}],"pos":[35536,35627],"yaml":true},{"content":"The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,339],"content":"The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadData%2A&gt;</ph> method downloads the resource with the URI specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,128],"source":"The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter."},{"content":"This method blocks while downloading the resource.","pos":[129,179]},{"content":"To download a resource and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadDataAsync%2A&gt;</ph> methods.","pos":[180,339],"source":" To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods."}]},{"pos":[346,738],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[745,853],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[860,1083],"content":"**Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This member outputs trace information when you enable network tracing in your application.","pos":[0,99],"source":"**Note** This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[100,223],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}],"pos":[35638,36732],"yaml":true,"extradata":"MT"},{"content":"The URI represented by the <xref href=\"System.Uri\"></xref> object, from which to download data.","nodes":[{"pos":[0,95],"content":"The URI represented by the <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph> object, from which to download data.","source":"The URI represented by the <xref href=\"System.Uri\"></xref> object, from which to download data."}],"pos":[36873,36969],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"pos":[0,76],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the downloaded resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the downloaded resource."}],"pos":[37026,37103],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[37266,37312],"yaml":true},{"content":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation.","nodes":[{"pos":[0,119],"content":"Downloads the resource as a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array from the URI specified as an asynchronous operation.","source":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation."}],"pos":[38421,38541],"yaml":true},{"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,257],"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in <ph id=\"ph1\">`address`</ph>.","pos":[0,141],"source":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`."},{"content":"The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[142,257]}]},{"pos":[264,757],"content":"This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.","nodes":[{"content":"This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.","pos":[0,493],"nodes":[{"content":"This method does not block the calling thread while downloading the resource.","pos":[0,77]},{"content":"To download a resource and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadData%2A&gt;</ph> methods.","pos":[78,219],"source":" To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods."},{"content":"When the download completes, the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadDataCompleted&gt;</ph> event is raised.","pos":[220,319],"source":" When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised."},{"content":"Your application must handle this event to receive notification.","pos":[320,384]},{"content":"The downloaded data is available in the <ph id=\"ph1\">&lt;xref:System.Net.DownloadDataCompletedEventArgs.Result%2A&gt;</ph> property.","pos":[385,493],"source":" The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property."}]}]},{"pos":[764,888],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[895,1003],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1010,1402],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1410,1635],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[38552,40203],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Uri\"></xref> containing the URI to download.","nodes":[{"pos":[0,65],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph> containing the URI to download.","source":"A <xref href=\"System.Uri\"></xref> containing the URI to download."}],"pos":[40347,40413],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[40581,40627],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[40719,40913],"yaml":true},{"content":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation.","nodes":[{"pos":[0,119],"content":"Downloads the resource as a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array from the URI specified as an asynchronous operation.","source":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation."}],"pos":[42088,42208],"yaml":true},{"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,257],"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in <ph id=\"ph1\">`address`</ph>.","pos":[0,141],"source":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`."},{"content":"The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[142,257]}]},{"pos":[264,757],"content":"This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.","nodes":[{"content":"This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.","pos":[0,493],"nodes":[{"content":"This method does not block the calling thread while downloading the resource.","pos":[0,77]},{"content":"To download a resource and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadData%2A&gt;</ph> methods.","pos":[78,219],"source":" To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods."},{"content":"When the download completes, the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadDataCompleted&gt;</ph> event is raised.","pos":[220,319],"source":" When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised."},{"content":"Your application must handle this event to receive notification.","pos":[320,384]},{"content":"The downloaded data is available in the <ph id=\"ph1\">&lt;xref:System.Net.DownloadDataCompletedEventArgs.Result%2A&gt;</ph> property.","pos":[385,493],"source":" The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property."}]}]},{"pos":[764,888],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[895,1003],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1010,1402],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1410,1635],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[42219,43870],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Uri\"></xref> containing the URI to download.","nodes":[{"pos":[0,65],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph> containing the URI to download.","source":"A <xref href=\"System.Uri\"></xref> containing the URI to download."}],"pos":[44032,44098],"yaml":true},{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"pos":[0,101],"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,101]}]}],"pos":[44163,44265],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[44433,44479],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[44571,44765],"yaml":true},{"content":"Occurs when an asynchronous data download operation completes.","nodes":[{"pos":[0,62],"content":"Occurs when an asynchronous data download operation completes.","nodes":[{"content":"Occurs when an asynchronous data download operation completes.","pos":[0,62]}]}],"pos":[45846,45909],"yaml":true},{"content":"This event is raised each time an asynchronous data download operation completes. Asynchronous data downloads are started by calling the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.  \n  \n The <xref:System.Net.DownloadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadDataCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,194],"content":"This event is raised each time an asynchronous data download operation completes. Asynchronous data downloads are started by calling the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous data download operation completes. Asynchronous data downloads are started by calling the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.","pos":[0,194],"nodes":[{"content":"This event is raised each time an asynchronous data download operation completes.","pos":[0,81]},{"content":"Asynchronous data downloads are started by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadDataAsync%2A&gt;</ph> methods.","pos":[82,194],"source":" Asynchronous data downloads are started by calling the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods."}]}]},{"pos":[201,391],"content":"The <xref:System.Net.DownloadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadDataCompletedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.DownloadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadDataCompletedEventArgs> class provides the event handler with event data.","pos":[0,190],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.DownloadDataCompletedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,87],"source":"The <xref:System.Net.DownloadDataCompletedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.DownloadDataCompletedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[88,190],"source":" The <xref:System.Net.DownloadDataCompletedEventArgs> class provides the event handler with event data."}]}]},{"pos":[398,540],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[45920,46467],"yaml":true,"extradata":"MT"},{"content":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation using a task object.","nodes":[{"pos":[0,139],"content":"Downloads the resource as a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array from the URI specified as an asynchronous operation using a task object.","source":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation using a task object."}],"pos":[48312,48452],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  \n  \n This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n The following code example requests data from a server and displays the data returned. It assumes that `remoteUri` contains a valid URI for the requested data.","nodes":[{"pos":[0,148],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.","pos":[0,148],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the data resource has been downloaded.","pos":[31,148],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded."}]}]},{"pos":[155,426],"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the <ph id=\"ph1\">`address`</ph> parameter.","pos":[0,155],"source":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter."},{"content":"The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[156,271]}]},{"pos":[433,825],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[832,940],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[948,1173],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]},{"pos":[1180,1339],"content":"The following code example requests data from a server and displays the data returned. It assumes that `remoteUri` contains a valid URI for the requested data.","nodes":[{"content":"The following code example requests data from a server and displays the data returned.","pos":[0,86]},{"content":"It assumes that <ph id=\"ph1\">`remoteUri`</ph> contains a valid URI for the requested data.","pos":[87,159],"source":" It assumes that `remoteUri` contains a valid URI for the requested data."}]}],"pos":[48463,49818],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to download.","nodes":[{"pos":[0,36],"content":"The URI of the resource to download.","nodes":[{"content":"The URI of the resource to download.","pos":[0,36]}]}],"pos":[50070,50107],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,297],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the downloaded resource.","pos":[57,231],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource."}]}],"pos":[50193,50501],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[50673,50719],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[50811,51005],"yaml":true},{"content":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation using a task object.","nodes":[{"pos":[0,139],"content":"Downloads the resource as a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array from the URI specified as an asynchronous operation using a task object.","source":"Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation using a task object."}],"pos":[52213,52353],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  \n  \n This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,148],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.","pos":[0,148],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the data resource has been downloaded.","pos":[31,148],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded."}]}]},{"pos":[155,426],"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the <ph id=\"ph1\">`address`</ph> parameter.","pos":[0,155],"source":"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter."},{"content":"The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[156,271]}]},{"pos":[433,825],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[832,940],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[947,1170],"content":"**Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This member outputs trace information when you enable network tracing in your application.","pos":[0,99],"source":"**Note** This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[100,223],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}],"pos":[52364,53547],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to download.","nodes":[{"pos":[0,36],"content":"The URI of the resource to download.","nodes":[{"content":"The URI of the resource to download.","pos":[0,36]}]}],"pos":[53793,53830],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,297],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the downloaded resource.","pos":[57,231],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource."}]}],"pos":[53916,54224],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[54396,54442],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[54534,54728],"yaml":true},{"content":"Downloads the resource with the specified URI to a local file.","nodes":[{"pos":[0,62],"content":"Downloads the resource with the specified URI to a local file.","nodes":[{"content":"Downloads the resource with the specified URI to a local file.","pos":[0,62]}]}],"pos":[55948,56011],"yaml":true},{"content":"The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file.","nodes":[{"pos":[0,350],"content":"The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFile%2A&gt;</ph> method downloads to a local file data from the URI specified by in the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,139],"source":"The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter."},{"content":"This method blocks while downloading the resource.","pos":[140,190]},{"content":"To download a resource and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFileAsync%2A&gt;</ph> methods.","pos":[191,350],"source":" To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods."}]},{"pos":[357,749],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[756,864],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[872,1097],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]},{"pos":[1104,1304],"content":"When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file.","nodes":[{"content":"When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file.","pos":[0,200]}]}],"pos":[56022,57340],"yaml":true,"extradata":"MT"},{"content":"The URI specified as a <xref href=\"System.String\"></xref>, from which to download data.","nodes":[{"pos":[0,87],"content":"The URI specified as a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>, from which to download data.","source":"The URI specified as a <xref href=\"System.String\"></xref>, from which to download data."}],"pos":[57496,57584],"yaml":true},{"content":"The name of the local file that is to receive the data.","nodes":[{"pos":[0,55],"content":"The name of the local file that is to receive the data.","nodes":[{"content":"The name of the local file that is to receive the data.","pos":[0,55]}]}],"pos":[57648,57704],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[57867,57983],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>filename</code> is `null` or <xref href=\"System.String.Empty\"></xref>.  \n  \n -or-  \n  \n The file does not exist.  \n  \n -or-  \n  \n An error occurred while downloading data.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,212],"content":"<ph id=\"ph1\">&lt;code&gt;filename&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>filename</code> is `null` or <xref href=\"System.String.Empty\"></xref>."},{"pos":[219,223],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[230,254],"content":"The file does not exist.","nodes":[{"content":"The file does not exist.","pos":[0,24]}]},{"pos":[261,265],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[272,313],"content":"An error occurred while downloading data.","nodes":[{"content":"An error occurred while downloading data.","pos":[0,41]}]}],"pos":[58075,58407],"yaml":true},{"content":"The method has been called simultaneously on multiple threads.","nodes":[{"pos":[0,62],"content":"The method has been called simultaneously on multiple threads.","nodes":[{"content":"The method has been called simultaneously on multiple threads.","pos":[0,62]}]}],"pos":[58509,58572],"yaml":true},{"content":"Downloads the resource with the specified URI to a local file.","nodes":[{"pos":[0,62],"content":"Downloads the resource with the specified URI to a local file.","nodes":[{"content":"Downloads the resource with the specified URI to a local file.","pos":[0,62]}]}],"pos":[59735,59798],"yaml":true},{"content":"The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file.","nodes":[{"pos":[0,350],"content":"The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFile%2A&gt;</ph> method downloads to a local file data from the URI specified by in the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,139],"source":"The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter."},{"content":"This method blocks while downloading the resource.","pos":[140,190]},{"content":"To download a resource and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFileAsync%2A&gt;</ph> methods.","pos":[191,350],"source":" To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods."}]},{"pos":[357,749],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[756,864],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[872,1097],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]},{"pos":[1104,1304],"content":"When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file.","nodes":[{"content":"When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file.","pos":[0,200]}]}],"pos":[59809,61127],"yaml":true,"extradata":"MT"},{"content":"The URI from which to download data.","nodes":[{"pos":[0,36],"content":"The URI from which to download data.","nodes":[{"content":"The URI from which to download data.","pos":[0,36]}]}],"pos":[61841,61878],"yaml":true},{"content":"The name of the local file that is to receive the data.","nodes":[{"pos":[0,55],"content":"The name of the local file that is to receive the data.","nodes":[{"content":"The name of the local file that is to receive the data.","pos":[0,55]}]}],"pos":[61942,61998],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[62161,62207],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>filename</code> is `null` or <xref href=\"System.String.Empty\"></xref>.  \n  \n -or-  \n  \n The file does not exist.  \n  \n -or- An error occurred while downloading data.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,212],"content":"<ph id=\"ph1\">&lt;code&gt;filename&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>filename</code> is `null` or <xref href=\"System.String.Empty\"></xref>."},{"pos":[219,223],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[230,254],"content":"The file does not exist.","nodes":[{"content":"The file does not exist.","pos":[0,24]}]},{"pos":[261,307],"content":"-or- An error occurred while downloading data.","nodes":[{"content":"-or- An error occurred while downloading data.","pos":[0,46]}]}],"pos":[62299,62623],"yaml":true},{"content":"The method has been called simultaneously on multiple threads.","nodes":[{"pos":[0,62],"content":"The method has been called simultaneously on multiple threads.","nodes":[{"content":"The method has been called simultaneously on multiple threads.","pos":[0,62]}]}],"pos":[62725,62788],"yaml":true},{"content":"Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.","nodes":[{"pos":[0,111],"content":"Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.","nodes":[{"content":"Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.","pos":[0,111],"nodes":[{"content":"Downloads, to a local file, the resource with the specified URI.","pos":[0,64]},{"content":"This method does not block the calling thread.","pos":[65,111]}]}]}],"pos":[63963,64075],"yaml":true},{"content":"This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event.  \n  \n This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","nodes":[{"pos":[0,444],"content":"This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event.","nodes":[{"content":"This method downloads the resource at the URI specified by in the <ph id=\"ph1\">`address`</ph> parameter.","pos":[0,86],"source":"This method downloads the resource at the URI specified by in the `address` parameter."},{"content":"When the download completes successfully, the downloaded file is named <ph id=\"ph1\">`fileName`</ph> on the local computer.","pos":[87,191],"source":" When the download completes successfully, the downloaded file is named `fileName` on the local computer."},{"content":"The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[192,307]},{"content":"To receive notification when the file is available, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFileCompleted&gt;</ph> event.","pos":[308,444],"source":" To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event."}]},{"pos":[451,657],"content":"This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.","pos":[0,206],"nodes":[{"content":"This method does not block the calling thread while the resource is being downloaded.","pos":[0,85]},{"content":"To block while waiting for the download to complete, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFile%2A&gt;</ph> methods.","pos":[86,206],"source":" To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods."}]}]},{"pos":[664,788],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[795,1187],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not specify an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1194,1302],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1310,1535],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]},{"pos":[1542,1705],"content":"When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","nodes":[{"content":"When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","pos":[0,163]}]}],"pos":[64086,65809],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to download.","nodes":[{"pos":[0,36],"content":"The URI of the resource to download.","nodes":[{"content":"The URI of the resource to download.","pos":[0,36]}]}],"pos":[65970,66007],"yaml":true},{"content":"The name of the file to be placed on the local computer.","nodes":[{"pos":[0,56],"content":"The name of the file to be placed on the local computer.","nodes":[{"content":"The name of the file to be placed on the local computer.","pos":[0,56]}]}],"pos":[66071,66128],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[66296,66412],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[66504,66698],"yaml":true},{"content":"The local file specified by <code>fileName</code> is in use by another thread.","nodes":[{"pos":[0,78],"content":"The local file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is in use by another thread.","source":"The local file specified by <code>fileName</code> is in use by another thread."}],"pos":[66808,66887],"yaml":true},{"content":"Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.","nodes":[{"pos":[0,111],"content":"Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.","nodes":[{"content":"Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.","pos":[0,111],"nodes":[{"content":"Downloads, to a local file, the resource with the specified URI.","pos":[0,64]},{"content":"This method does not block the calling thread.","pos":[65,111]}]}]}],"pos":[68128,68240],"yaml":true},{"content":"This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event.  \n  \n This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","nodes":[{"pos":[0,444],"content":"This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event.","nodes":[{"content":"This method downloads the resource at the URI specified by in the <ph id=\"ph1\">`address`</ph> parameter.","pos":[0,86],"source":"This method downloads the resource at the URI specified by in the `address` parameter."},{"content":"When the download completes successfully, the downloaded file is named <ph id=\"ph1\">`fileName`</ph> on the local computer.","pos":[87,191],"source":" When the download completes successfully, the downloaded file is named `fileName` on the local computer."},{"content":"The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[192,307]},{"content":"To receive notification when the file is available, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFileCompleted&gt;</ph> event.","pos":[308,444],"source":" To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event."}]},{"pos":[451,657],"content":"This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.","pos":[0,206],"nodes":[{"content":"This method does not block the calling thread while the resource is being downloaded.","pos":[0,85]},{"content":"To block while waiting for the download to complete, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFile%2A&gt;</ph> methods.","pos":[86,206],"source":" To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods."}]}]},{"pos":[664,788],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[795,1187],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not specify an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1194,1302],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1310,1535],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]},{"pos":[1542,1705],"content":"When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","nodes":[{"content":"When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","pos":[0,163]}]}],"pos":[68251,69974],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to download.","nodes":[{"pos":[0,36],"content":"The URI of the resource to download.","nodes":[{"content":"The URI of the resource to download.","pos":[0,36]}]}],"pos":[70153,70190],"yaml":true},{"content":"The name of the file to be placed on the local computer.","nodes":[{"pos":[0,56],"content":"The name of the file to be placed on the local computer.","nodes":[{"content":"The name of the file to be placed on the local computer.","pos":[0,56]}]}],"pos":[70254,70311],"yaml":true},{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"pos":[0,101],"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,101]}]}],"pos":[70376,70478],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[70646,70762],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[70854,71048],"yaml":true},{"content":"The local file specified by <code>fileName</code> is in use by another thread.","nodes":[{"pos":[0,78],"content":"The local file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is in use by another thread.","source":"The local file specified by <code>fileName</code> is in use by another thread."}],"pos":[71158,71237],"yaml":true},{"content":"Occurs when an asynchronous file download operation completes.","nodes":[{"pos":[0,62],"content":"Occurs when an asynchronous file download operation completes.","nodes":[{"content":"Occurs when an asynchronous file download operation completes.","pos":[0,62]}]}],"pos":[72318,72381],"yaml":true},{"content":"This event is raised each time an asynchronous file download operation completes. Asynchronous file downloads are started by calling the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.  \n  \n The <xref:System.ComponentModel.AsyncCompletedEventHandler> is the delegate for this event. The <xref:System.ComponentModel.AsyncCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,194],"content":"This event is raised each time an asynchronous file download operation completes. Asynchronous file downloads are started by calling the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous file download operation completes. Asynchronous file downloads are started by calling the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.","pos":[0,194],"nodes":[{"content":"This event is raised each time an asynchronous file download operation completes.","pos":[0,81]},{"content":"Asynchronous file downloads are started by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFileAsync%2A&gt;</ph> methods.","pos":[82,194],"source":" Asynchronous file downloads are started by calling the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods."}]}]},{"pos":[201,399],"content":"The <xref:System.ComponentModel.AsyncCompletedEventHandler> is the delegate for this event. The <xref:System.ComponentModel.AsyncCompletedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.ComponentModel.AsyncCompletedEventHandler> is the delegate for this event. The <xref:System.ComponentModel.AsyncCompletedEventArgs> class provides the event handler with event data.","pos":[0,198],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,91],"source":"The <xref:System.ComponentModel.AsyncCompletedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[92,198],"source":" The <xref:System.ComponentModel.AsyncCompletedEventArgs> class provides the event handler with event data."}]}]},{"pos":[406,548],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[72392,72947],"yaml":true,"extradata":"MT"},{"content":"Downloads the specified resource to a local file as an asynchronous operation using a task object.","nodes":[{"pos":[0,98],"content":"Downloads the specified resource to a local file as an asynchronous operation using a task object.","nodes":[{"content":"Downloads the specified resource to a local file as an asynchronous operation using a task object.","pos":[0,98]}]}],"pos":[74866,74965],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.  \n  \n This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","nodes":[{"pos":[0,144],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.","pos":[0,144],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after the data resource has been downloaded.","pos":[31,144],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded."}]}]},{"pos":[151,458],"content":"This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method downloads the resource at the URI specified by in the <ph id=\"ph1\">`address`</ph> parameter.","pos":[0,86],"source":"This method downloads the resource at the URI specified by in the `address` parameter."},{"content":"When the download completes successfully, the downloaded file is named <ph id=\"ph1\">`fileName`</ph> on the local computer.","pos":[87,191],"source":" When the download completes successfully, the downloaded file is named `fileName` on the local computer."},{"content":"The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[192,307]}]},{"pos":[465,589],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[596,988],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not specify an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[995,1103],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1111,1336],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]},{"pos":[1343,1506],"content":"When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","nodes":[{"content":"When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","pos":[0,163]}]}],"pos":[74976,76500],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to download.","nodes":[{"pos":[0,36],"content":"The URI of the resource to download.","nodes":[{"content":"The URI of the resource to download.","pos":[0,36]}]}],"pos":[76761,76798],"yaml":true},{"content":"The name of the file to be placed on the local computer.","nodes":[{"pos":[0,56],"content":"The name of the file to be placed on the local computer.","nodes":[{"content":"The name of the file to be placed on the local computer.","pos":[0,56]}]}],"pos":[76862,76919],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>.  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,57],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>."},{"pos":[64,120],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[76990,77117],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[77289,77405],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[77497,77691],"yaml":true},{"content":"The local file specified by <code>fileName</code> is in use by another thread.","nodes":[{"pos":[0,78],"content":"The local file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is in use by another thread.","source":"The local file specified by <code>fileName</code> is in use by another thread."}],"pos":[77801,77880],"yaml":true},{"content":"Downloads the specified resource to a local file as an asynchronous operation using a task object.","nodes":[{"pos":[0,98],"content":"Downloads the specified resource to a local file as an asynchronous operation using a task object.","nodes":[{"content":"Downloads the specified resource to a local file as an asynchronous operation using a task object.","pos":[0,98]}]}],"pos":[79154,79253],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.  \n  \n This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","nodes":[{"pos":[0,144],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.","pos":[0,144],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after the data resource has been downloaded.","pos":[31,144],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded."}]}]},{"pos":[151,458],"content":"This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method downloads the resource at the URI specified by in the <ph id=\"ph1\">`address`</ph> parameter.","pos":[0,86],"source":"This method downloads the resource at the URI specified by in the `address` parameter."},{"content":"When the download completes successfully, the downloaded file is named <ph id=\"ph1\">`fileName`</ph> on the local computer.","pos":[87,191],"source":" When the download completes successfully, the downloaded file is named `fileName` on the local computer."},{"content":"The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[192,307]}]},{"pos":[465,589],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[596,988],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not specify an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[995,1103],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1111,1336],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]},{"pos":[1343,1506],"content":"When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","nodes":[{"content":"When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.","pos":[0,163]}]}],"pos":[79264,80788],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to download.","nodes":[{"pos":[0,36],"content":"The URI of the resource to download.","nodes":[{"content":"The URI of the resource to download.","pos":[0,36]}]}],"pos":[81043,81080],"yaml":true},{"content":"The name of the file to be placed on the local computer.","nodes":[{"pos":[0,56],"content":"The name of the file to be placed on the local computer.","nodes":[{"content":"The name of the file to be placed on the local computer.","pos":[0,56]}]}],"pos":[81144,81201],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>.  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,57],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>."},{"pos":[64,120],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[81272,81399],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[81571,81687],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[81779,81973],"yaml":true},{"content":"The local file specified by <code>fileName</code> is in use by another thread.","nodes":[{"pos":[0,78],"content":"The local file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is in use by another thread.","source":"The local file specified by <code>fileName</code> is in use by another thread."}],"pos":[82083,82162],"yaml":true},{"content":"Occurs when an asynchronous download operation successfully transfers some or all of the data.","nodes":[{"pos":[0,94],"content":"Occurs when an asynchronous download operation successfully transfers some or all of the data.","nodes":[{"content":"Occurs when an asynchronous download operation successfully transfers some or all of the data.","pos":[0,94]}]}],"pos":[83330,83425],"yaml":true},{"content":"This event is raised each time an asynchronous download makes progress. This event is raised when downloads are started using any of the following methods.  \n  \n|Method|Description|  \n|------------|-----------------|  \n|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Downloads data from a resource to a local file, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.OpenReadAsync%2A>|Returns the data from a resource, without blocking the calling thread.|  \n  \n The <xref:System.Net.DownloadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadProgressChangedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  \n  \n> [!NOTE]\n>  A passive FTP file transfer will always show a progress percentage of zero, since the server did not send the file size. To show progress, you can change the FTP connection to active by overriding the <xref:System.Net.WebClient.GetWebRequest%2A> virtual method:  \n  \n```  \ninternal class MyWebClient:WebClient{  \n        protected override WebRequest GetWebRequest(Uri address) {  \n            FtpWebRequest req = (FtpWebRequest)base.GetWebRequest(address);  \n            req.UsePassive = false;  \n            return req;  \n        }  \n    }  \n```","nodes":[{"pos":[0,155],"content":"This event is raised each time an asynchronous download makes progress. This event is raised when downloads are started using any of the following methods.","nodes":[{"content":"This event is raised each time an asynchronous download makes progress. This event is raised when downloads are started using any of the following methods.","pos":[0,155],"nodes":[{"content":"This event is raised each time an asynchronous download makes progress.","pos":[0,71]},{"content":"This event is raised when downloads are started using any of the following methods.","pos":[72,155]}]}]},{"pos":[162,168],"content":"Method","nodes":[{"content":"Method","pos":[0,6]}]},{"pos":[169,180],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[220,268],"content":"<xref:System.Net.WebClient.DownloadDataAsync%2A>","nodes":[]},{"pos":[269,376],"content":"Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread.","nodes":[{"content":"Downloads data from a resource and returns a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array, without blocking the calling thread.","pos":[0,107],"source":"Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread."}]},{"pos":[381,429],"content":"<xref:System.Net.WebClient.DownloadFileAsync%2A>","nodes":[]},{"pos":[430,514],"content":"Downloads data from a resource to a local file, without blocking the calling thread.","nodes":[{"content":"Downloads data from a resource to a local file, without blocking the calling thread.","pos":[0,84]}]},{"pos":[519,563],"content":"<xref:System.Net.WebClient.OpenReadAsync%2A>","nodes":[]},{"pos":[564,634],"content":"Returns the data from a resource, without blocking the calling thread.","nodes":[{"content":"Returns the data from a resource, without blocking the calling thread.","pos":[0,70]}]},{"pos":[642,836],"content":"The <xref:System.Net.DownloadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadProgressChangedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.DownloadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadProgressChangedEventArgs> class provides the event handler with event data.","pos":[0,194],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.DownloadProgressChangedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,89],"source":"The <xref:System.Net.DownloadProgressChangedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.DownloadProgressChangedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[90,194],"source":" The <xref:System.Net.DownloadProgressChangedEventArgs> class provides the event handler with event data."}]}]},{"pos":[843,985],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."},{"pos":[993,1265],"content":"[!NOTE]\n A passive FTP file transfer will always show a progress percentage of zero, since the server did not send the file size. To show progress, you can change the FTP connection to active by overriding the <xref:System.Net.WebClient.GetWebRequest%2A> virtual method:","leadings":["","> "],"nodes":[{"content":" A passive FTP file transfer will always show a progress percentage of zero, since the server did not send the file size. To show progress, you can change the FTP connection to active by overriding the <xref:System.Net.WebClient.GetWebRequest%2A> virtual method:","pos":[8,270],"nodes":[{"content":"A passive FTP file transfer will always show a progress percentage of zero, since the server did not send the file size.","pos":[1,121]},{"content":"To show progress, you can change the FTP connection to active by overriding the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.GetWebRequest%2A&gt;</ph> virtual method:","pos":[122,262],"source":" To show progress, you can change the FTP connection to active by overriding the <xref:System.Net.WebClient.GetWebRequest%2A> virtual method:"}]}]}],"pos":[83436,85013],"yaml":true,"extradata":"MT"},{"content":"Downloads the requested resource as a <xref href=\"System.String\"></xref>. The resource to download is specified as a <xref href=\"System.String\"></xref> containing the URI.","nodes":[{"pos":[0,171],"content":"Downloads the requested resource as a <xref href=\"System.String\"></xref>. The resource to download is specified as a <xref href=\"System.String\"></xref> containing the URI.","nodes":[{"content":"Downloads the requested resource as a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","pos":[0,73],"source":"Downloads the requested resource as a <xref href=\"System.String\"></xref>."},{"content":"The resource to download is specified as a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the URI.","pos":[74,171],"source":" The resource to download is specified as a <xref href=\"System.String\"></xref> containing the URI."}]}],"pos":[87294,87466],"yaml":true},{"content":"This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,437],"content":"This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.","nodes":[{"content":"This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.","pos":[0,437],"nodes":[{"content":"This method retrieves the specified resource.","pos":[0,45]},{"content":"After it downloads the resource, the method uses the encoding specified in the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property to convert the resource to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[46,224],"source":" After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>."},{"content":"This method blocks while downloading the resource.","pos":[225,275]},{"content":"To download a resource and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadStringAsync%2A&gt;</ph> methods.","pos":[276,437],"source":" To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods."}]}]},{"pos":[444,836],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[843,951],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[959,1184],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[87477,88673],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> containing the URI to download.","nodes":[{"pos":[0,68],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the URI to download.","source":"A <xref href=\"System.String\"></xref> containing the URI to download."}],"pos":[89284,89353],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the requested resource.","nodes":[{"pos":[0,71],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the requested resource.","source":"A <xref href=\"System.String\"></xref> containing the requested resource."}],"pos":[89410,89482],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[89647,89693],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[89785,89979],"yaml":true},{"content":"The method has been called simultaneously on multiple threads.","nodes":[{"pos":[0,62],"content":"The method has been called simultaneously on multiple threads.","nodes":[{"content":"The method has been called simultaneously on multiple threads.","pos":[0,62]}]}],"pos":[90081,90144],"yaml":true},{"content":"Downloads the requested resource as a <xref href=\"System.String\"></xref>. The resource to download is specified as a <xref href=\"System.Uri\"></xref>.","nodes":[{"pos":[0,149],"content":"Downloads the requested resource as a <xref href=\"System.String\"></xref>. The resource to download is specified as a <xref href=\"System.Uri\"></xref>.","nodes":[{"content":"Downloads the requested resource as a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","pos":[0,73],"source":"Downloads the requested resource as a <xref href=\"System.String\"></xref>."},{"content":"The resource to download is specified as a <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph>.","pos":[74,149],"source":" The resource to download is specified as a <xref href=\"System.Uri\"></xref>."}]}],"pos":[91235,91385],"yaml":true},{"content":"This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,437],"content":"This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.","nodes":[{"content":"This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.","pos":[0,437],"nodes":[{"content":"This method retrieves the specified resource.","pos":[0,45]},{"content":"After it downloads the resource, the method uses the encoding specified in the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property to convert the resource to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[46,224],"source":" After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>."},{"content":"This method blocks while downloading the resource.","pos":[225,275]},{"content":"To download a resource and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadStringAsync%2A&gt;</ph> methods.","pos":[276,437],"source":" To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods."}]}]},{"pos":[444,836],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[843,951],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[959,1184],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[91396,92592],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Uri\"></xref> object containing the URI to download.","nodes":[{"pos":[0,72],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph> object containing the URI to download.","source":"A <xref href=\"System.Uri\"></xref> object containing the URI to download."}],"pos":[92735,92808],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the requested resource.","nodes":[{"pos":[0,71],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the requested resource.","source":"A <xref href=\"System.String\"></xref> containing the requested resource."}],"pos":[92865,92937],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[93102,93148],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[93240,93434],"yaml":true},{"content":"The method has been called simultaneously on multiple threads.","nodes":[{"pos":[0,62],"content":"The method has been called simultaneously on multiple threads.","nodes":[{"content":"The method has been called simultaneously on multiple threads.","pos":[0,62]}]}],"pos":[93536,93599],"yaml":true},{"content":"Downloads the resource specified as a <xref href=\"System.Uri\"></xref>. This method does not block the calling thread.","nodes":[{"pos":[0,117],"content":"Downloads the resource specified as a <xref href=\"System.Uri\"></xref>. This method does not block the calling thread.","nodes":[{"content":"Downloads the resource specified as a <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph>.","pos":[0,70],"source":"Downloads the resource specified as a <xref href=\"System.Uri\"></xref>."},{"content":"This method does not block the calling thread.","pos":[71,117]}]}],"pos":[94720,94838],"yaml":true},{"content":"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,119],"content":"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,119]}]},{"pos":[126,798],"content":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.","nodes":[{"content":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.","pos":[0,672],"nodes":[{"content":"After downloading the resource, this method uses the encoding specified in the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property to convert the resource to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,178],"source":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>."},{"content":"This method does not block the calling thread while downloading the resource.","pos":[179,256]},{"content":"To download a resource and block while waiting for the server's response, use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadString%2A&gt;</ph> method.","pos":[257,392],"source":" To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method."},{"content":"When the download completes, the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadStringCompleted&gt;</ph> event is raised.","pos":[393,494],"source":" When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised."},{"content":"Your application must handle this event to receive notification.","pos":[495,559]},{"content":"The downloaded string is available in the <ph id=\"ph1\">&lt;xref:System.Net.DownloadStringCompletedEventArgs.Result%2A&gt;</ph> property.","pos":[560,672],"source":" The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property."}]}]},{"pos":[805,929],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[936,1328],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1335,1443],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1451,1676],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[94849,96541],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Uri\"></xref> containing the URI to download.","nodes":[{"pos":[0,65],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph> containing the URI to download.","source":"A <xref href=\"System.Uri\"></xref> containing the URI to download."}],"pos":[96687,96753],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[96923,96969],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[97061,97255],"yaml":true},{"content":"Downloads the specified string to the specified resource. This method does not block the calling thread.","nodes":[{"pos":[0,104],"content":"Downloads the specified string to the specified resource. This method does not block the calling thread.","nodes":[{"content":"Downloads the specified string to the specified resource. This method does not block the calling thread.","pos":[0,104],"nodes":[{"content":"Downloads the specified string to the specified resource.","pos":[0,57]},{"content":"This method does not block the calling thread.","pos":[58,104]}]}]}],"pos":[98442,98547],"yaml":true},{"content":"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,119],"content":"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,119]}]},{"pos":[126,798],"content":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.","nodes":[{"content":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.","pos":[0,672],"nodes":[{"content":"After downloading the resource, this method uses the encoding specified in the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property to convert the resource to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,178],"source":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>."},{"content":"This method does not block the calling thread while downloading the resource.","pos":[179,256]},{"content":"To download a resource and block while waiting for the server's response, use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadString%2A&gt;</ph> method.","pos":[257,392],"source":" To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method."},{"content":"When the download completes, the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadStringCompleted&gt;</ph> event is raised.","pos":[393,494],"source":" When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised."},{"content":"Your application must handle this event to receive notification.","pos":[495,559]},{"content":"The downloaded string is available in the <ph id=\"ph1\">&lt;xref:System.Net.DownloadStringCompletedEventArgs.Result%2A&gt;</ph> property.","pos":[560,672],"source":" The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property."}]}]},{"pos":[805,929],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[936,1328],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1335,1443],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1451,1676],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[98558,100250],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Uri\"></xref> containing the URI to download.","nodes":[{"pos":[0,65],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph> containing the URI to download.","source":"A <xref href=\"System.Uri\"></xref> containing the URI to download."}],"pos":[100414,100480],"yaml":true},{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"pos":[0,101],"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,101]}]}],"pos":[100545,100647],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[100817,100863],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[100955,101149],"yaml":true},{"content":"Occurs when an asynchronous resource-download operation completes.","nodes":[{"pos":[0,66],"content":"Occurs when an asynchronous resource-download operation completes.","nodes":[{"content":"Occurs when an asynchronous resource-download operation completes.","pos":[0,66]}]}],"pos":[102242,102309],"yaml":true},{"content":"This event is raised each time an asynchronous operation to download a resource as a string completes. These operations are started by calling the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.  \n  \n The <xref:System.Net.DownloadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadStringCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,206],"content":"This event is raised each time an asynchronous operation to download a resource as a string completes. These operations are started by calling the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous operation to download a resource as a string completes. These operations are started by calling the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.","pos":[0,206],"nodes":[{"content":"This event is raised each time an asynchronous operation to download a resource as a string completes.","pos":[0,102]},{"content":"These operations are started by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadStringAsync%2A&gt;</ph> methods.","pos":[103,206],"source":" These operations are started by calling the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods."}]}]},{"pos":[213,407],"content":"The <xref:System.Net.DownloadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadStringCompletedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.DownloadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadStringCompletedEventArgs> class provides the event handler with event data.","pos":[0,194],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.DownloadStringCompletedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,89],"source":"The <xref:System.Net.DownloadStringCompletedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.DownloadStringCompletedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[90,194],"source":" The <xref:System.Net.DownloadStringCompletedEventArgs> class provides the event handler with event data."}]}]},{"pos":[414,556],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[102320,102883],"yaml":true,"extradata":"MT"},{"content":"Downloads the resource as a <xref href=\"System.String\"></xref> from the URI specified as an asynchronous operation using a task object.","nodes":[{"pos":[0,135],"content":"Downloads the resource as a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> from the URI specified as an asynchronous operation using a task object.","source":"Downloads the resource as a <xref href=\"System.String\"></xref> from the URI specified as an asynchronous operation using a task object."}],"pos":[104746,104882],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,269],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,269],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the data resource has been downloaded.","pos":[31,148],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded."},{"content":"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[150,269]}]}]},{"pos":[276,532],"content":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.","nodes":[{"content":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.","pos":[0,256],"nodes":[{"content":"After downloading the resource, this method uses the encoding specified in the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property to convert the resource to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,178],"source":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>."},{"content":"This method does not block the calling thread while downloading the resource.","pos":[179,256]}]}]},{"pos":[539,663],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[670,1062],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1069,1177],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1184,1398],"content":"This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[0,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[91,214],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}],"pos":[104893,106306],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to download.","nodes":[{"pos":[0,36],"content":"The URI of the resource to download.","nodes":[{"content":"The URI of the resource to download.","pos":[0,36]}]}],"pos":[106560,106597],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,297],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the downloaded resource.","pos":[57,231],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource."}]}],"pos":[106683,106991],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[107165,107211],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[107303,107497],"yaml":true},{"content":"Downloads the resource as a <xref href=\"System.String\"></xref> from the URI specified as an asynchronous operation using a task object.","nodes":[{"pos":[0,135],"content":"Downloads the resource as a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> from the URI specified as an asynchronous operation using a task object.","source":"Downloads the resource as a <xref href=\"System.String\"></xref> from the URI specified as an asynchronous operation using a task object."}],"pos":[108717,108853],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded. The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,268],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded. The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded. The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,268],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the data resource has been downloaded.","pos":[31,148],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded."},{"content":"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[149,268]}]}]},{"pos":[275,531],"content":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.","nodes":[{"content":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.","pos":[0,256],"nodes":[{"content":"After downloading the resource, this method uses the encoding specified in the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property to convert the resource to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,178],"source":"After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>."},{"content":"This method does not block the calling thread while downloading the resource.","pos":[179,256]}]}]},{"pos":[538,662],"content":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method to cancel asynchronous operations that have not completed.","pos":[0,124],"source":"You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed."}]},{"pos":[669,1061],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1068,1176],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1183,1397],"content":"This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[0,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[91,214],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}],"pos":[108864,110276],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to download.","nodes":[{"pos":[0,36],"content":"The URI of the resource to download.","nodes":[{"content":"The URI of the resource to download.","pos":[0,36]}]}],"pos":[110524,110561],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,297],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the downloaded resource.","pos":[57,231],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource."}]}],"pos":[110647,110955],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[111129,111175],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,185],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]}],"pos":[111267,111461],"yaml":true},{"content":"Gets and sets the <xref href=\"System.Text.Encoding\"></xref> used to upload and download strings.","nodes":[{"pos":[0,96],"content":"Gets and sets the <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding\"&gt;&lt;/xref&gt;</ph> used to upload and download strings.","source":"Gets and sets the <xref href=\"System.Text.Encoding\"></xref> used to upload and download strings."}],"pos":[112542,112639],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadString%2A> and <xref:System.Net.WebClient.UploadStringAsync%2A> methods use this property to convert the specified string to a <xref:System.Byte> array before uploading the string. For additional information, see the <xref:System.Text.Encoding.GetBytes%2A> method.  \n  \n When a string is downloaded using the <xref:System.Net.WebClient.DownloadString%2A> or <xref:System.Net.WebClient.DownloadStringAsync%2A> methods, <xref:System.Net.WebClient> uses the <xref:System.Text.Encoding> returned by this to convert the downloaded <xref:System.Byte> array into a string. For additional information, see the <xref:System.Text.Encoding.GetString%2A> method.","nodes":[{"pos":[0,301],"content":"The <xref:System.Net.WebClient.UploadString%2A> and <xref:System.Net.WebClient.UploadStringAsync%2A> methods use this property to convert the specified string to a <xref:System.Byte> array before uploading the string. For additional information, see the <xref:System.Text.Encoding.GetBytes%2A> method.","nodes":[{"content":"The <xref:System.Net.WebClient.UploadString%2A> and <xref:System.Net.WebClient.UploadStringAsync%2A> methods use this property to convert the specified string to a <xref:System.Byte> array before uploading the string. For additional information, see the <xref:System.Text.Encoding.GetBytes%2A> method.","pos":[0,301],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadString%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.WebClient.UploadStringAsync%2A&gt;</ph> methods use this property to convert the specified string to a <ph id=\"ph3\">&lt;xref:System.Byte&gt;</ph> array before uploading the string.","pos":[0,217],"source":"The <xref:System.Net.WebClient.UploadString%2A> and <xref:System.Net.WebClient.UploadStringAsync%2A> methods use this property to convert the specified string to a <xref:System.Byte> array before uploading the string."},{"content":"For additional information, see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method.","pos":[218,301],"source":" For additional information, see the <xref:System.Text.Encoding.GetBytes%2A> method."}]}]},{"pos":[308,687],"content":"When a string is downloaded using the <xref:System.Net.WebClient.DownloadString%2A> or <xref:System.Net.WebClient.DownloadStringAsync%2A> methods, <xref:System.Net.WebClient> uses the <xref:System.Text.Encoding> returned by this to convert the downloaded <xref:System.Byte> array into a string. For additional information, see the <xref:System.Text.Encoding.GetString%2A> method.","nodes":[{"content":"When a string is downloaded using the <xref:System.Net.WebClient.DownloadString%2A> or <xref:System.Net.WebClient.DownloadStringAsync%2A> methods, <xref:System.Net.WebClient> uses the <xref:System.Text.Encoding> returned by this to convert the downloaded <xref:System.Byte> array into a string. For additional information, see the <xref:System.Text.Encoding.GetString%2A> method.","pos":[0,379],"nodes":[{"content":"When a string is downloaded using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadString%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.WebClient.DownloadStringAsync%2A&gt;</ph> methods, <ph id=\"ph3\">&lt;xref:System.Net.WebClient&gt;</ph> uses the <ph id=\"ph4\">&lt;xref:System.Text.Encoding&gt;</ph> returned by this to convert the downloaded <ph id=\"ph5\">&lt;xref:System.Byte&gt;</ph> array into a string.","pos":[0,294],"source":"When a string is downloaded using the <xref:System.Net.WebClient.DownloadString%2A> or <xref:System.Net.WebClient.DownloadStringAsync%2A> methods, <xref:System.Net.WebClient> uses the <xref:System.Text.Encoding> returned by this to convert the downloaded <xref:System.Byte> array into a string."},{"content":"For additional information, see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method.","pos":[295,379],"source":" For additional information, see the <xref:System.Text.Encoding.GetString%2A> method."}]}]}],"pos":[112650,113342],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.Encoding\"></xref> that is used to encode strings. The default value of this property is the encoding returned by <xref href=\"System.Text.Encoding.Default\"></xref>.","nodes":[{"pos":[0,189],"content":"A <xref href=\"System.Text.Encoding\"></xref> that is used to encode strings. The default value of this property is the encoding returned by <xref href=\"System.Text.Encoding.Default\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding\"&gt;&lt;/xref&gt;</ph> that is used to encode strings.","pos":[0,75],"source":"A <xref href=\"System.Text.Encoding\"></xref> that is used to encode strings."},{"content":"The default value of this property is the encoding returned by <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.Default\"&gt;&lt;/xref&gt;</ph>.","pos":[76,189],"source":" The default value of this property is the encoding returned by <xref href=\"System.Text.Encoding.Default\"></xref>."}]}],"pos":[113951,114141],"yaml":true},{"content":"Returns a <xref href=\"System.Net.WebRequest\"></xref> object for the specified resource.","nodes":[{"pos":[0,87],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Net.WebRequest\"&gt;&lt;/xref&gt;</ph> object for the specified resource.","source":"Returns a <xref href=\"System.Net.WebRequest\"></xref> object for the specified resource."}],"pos":[115286,115374],"yaml":true},{"content":"This method copies the existing <xref:System.Net.WebClient.Headers%2A>, <xref:System.Net.WebClient.Credentials%2A>, and method to the newly created <xref:System.Net.WebRequest> object.  \n  \n This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebRequest> object. Derived classes should call the base class implementation of <xref:System.Net.WebClient.GetWebRequest%2A> to ensure the method works as expected.","nodes":[{"pos":[0,184],"content":"This method copies the existing <xref:System.Net.WebClient.Headers%2A>, <xref:System.Net.WebClient.Credentials%2A>, and method to the newly created <xref:System.Net.WebRequest> object.","nodes":[{"content":"This method copies the existing <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Headers%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Credentials%2A&gt;</ph>, and method to the newly created <ph id=\"ph3\">&lt;xref:System.Net.WebRequest&gt;</ph> object.","pos":[0,184],"source":"This method copies the existing <xref:System.Net.WebClient.Headers%2A>, <xref:System.Net.WebClient.Credentials%2A>, and method to the newly created <xref:System.Net.WebRequest> object."}]},{"pos":[191,521],"content":"This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebRequest> object. Derived classes should call the base class implementation of <xref:System.Net.WebClient.GetWebRequest%2A> to ensure the method works as expected.","nodes":[{"content":"This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebRequest> object. Derived classes should call the base class implementation of <xref:System.Net.WebClient.GetWebRequest%2A> to ensure the method works as expected.","pos":[0,330],"nodes":[{"content":"This method can be called only by classes that inherit from <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph>.","pos":[0,88],"source":"This method can be called only by classes that inherit from <xref:System.Net.WebClient>."},{"content":"It is provided to give inheritors access to the underlying <ph id=\"ph1\">&lt;xref:System.Net.WebRequest&gt;</ph> object.","pos":[89,184],"source":" It is provided to give inheritors access to the underlying <xref:System.Net.WebRequest> object."},{"content":"Derived classes should call the base class implementation of <ph id=\"ph1\">&lt;xref:System.Net.WebClient.GetWebRequest%2A&gt;</ph> to ensure the method works as expected.","pos":[185,330],"source":" Derived classes should call the base class implementation of <xref:System.Net.WebClient.GetWebRequest%2A> to ensure the method works as expected."}]}]}],"pos":[115385,115911],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Uri\"></xref> that identifies the resource to request.","nodes":[{"pos":[0,74],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph> that identifies the resource to request.","source":"A <xref href=\"System.Uri\"></xref> that identifies the resource to request."}],"pos":[116492,116567],"yaml":true},{"content":"A new <xref href=\"System.Net.WebRequest\"></xref> object for the specified resource.","nodes":[{"pos":[0,83],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Net.WebRequest\"&gt;&lt;/xref&gt;</ph> object for the specified resource.","source":"A new <xref href=\"System.Net.WebRequest\"></xref> object for the specified resource."}],"pos":[116632,116716],"yaml":true},{"content":"Returns the <xref href=\"System.Net.WebResponse\"></xref> for the specified <xref href=\"System.Net.WebRequest\"></xref>.","nodes":[{"pos":[0,117],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebResponse\"&gt;&lt;/xref&gt;</ph> for the specified <ph id=\"ph2\">&lt;xref href=\"System.Net.WebRequest\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the <xref href=\"System.Net.WebResponse\"></xref> for the specified <xref href=\"System.Net.WebRequest\"></xref>."}],"pos":[117926,118044],"yaml":true},{"content":"The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.GetResponse%2A> method on the specified <xref:System.Net.WebRequest> object.  \n  \n This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object.","nodes":[{"pos":[0,166],"content":"The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.GetResponse%2A> method on the specified <xref:System.Net.WebRequest> object.","nodes":[{"content":"The object returned by this method is obtained by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.GetResponse%2A&gt;</ph> method on the specified <ph id=\"ph2\">&lt;xref:System.Net.WebRequest&gt;</ph> object.","pos":[0,166],"source":"The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.GetResponse%2A> method on the specified <xref:System.Net.WebRequest> object."}]},{"pos":[173,358],"content":"This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object.","nodes":[{"content":"This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object.","pos":[0,185],"nodes":[{"content":"This method can be called only by classes that inherit from <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph>.","pos":[0,88],"source":"This method can be called only by classes that inherit from <xref:System.Net.WebClient>."},{"content":"It is provided to give inheritors access to the underlying <ph id=\"ph1\">&lt;xref:System.Net.WebResponse&gt;</ph> object.","pos":[89,185],"source":" It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object."}]}]}],"pos":[118055,118418],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.WebRequest\"></xref> that is used to obtain the response.","nodes":[{"pos":[0,81],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.WebRequest\"&gt;&lt;/xref&gt;</ph> that is used to obtain the response.","source":"A <xref href=\"System.Net.WebRequest\"></xref> that is used to obtain the response."}],"pos":[119030,119112],"yaml":true},{"content":"A <xref href=\"System.Net.WebResponse\"></xref> containing the response for the specified <xref href=\"System.Net.WebRequest\"></xref>.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.WebResponse\"&gt;&lt;/xref&gt;</ph> containing the response for the specified <ph id=\"ph2\">&lt;xref href=\"System.Net.WebRequest\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Net.WebResponse\"></xref> containing the response for the specified <xref href=\"System.Net.WebRequest\"></xref>."}],"pos":[119178,119310],"yaml":true},{"content":"Returns the <xref href=\"System.Net.WebResponse\"></xref> for the specified <xref href=\"System.Net.WebRequest\"></xref> using the specified <xref href=\"System.IAsyncResult\"></xref>.","nodes":[{"pos":[0,178],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebResponse\"&gt;&lt;/xref&gt;</ph> for the specified <ph id=\"ph2\">&lt;xref href=\"System.Net.WebRequest\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph3\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the <xref href=\"System.Net.WebResponse\"></xref> for the specified <xref href=\"System.Net.WebRequest\"></xref> using the specified <xref href=\"System.IAsyncResult\"></xref>."}],"pos":[120623,120802],"yaml":true},{"content":"The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.EndGetResponse%2A> method on the specified <xref:System.Net.WebRequest> object.  \n  \n This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object.","nodes":[{"pos":[0,169],"content":"The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.EndGetResponse%2A> method on the specified <xref:System.Net.WebRequest> object.","nodes":[{"content":"The object returned by this method is obtained by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.EndGetResponse%2A&gt;</ph> method on the specified <ph id=\"ph2\">&lt;xref:System.Net.WebRequest&gt;</ph> object.","pos":[0,169],"source":"The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.EndGetResponse%2A> method on the specified <xref:System.Net.WebRequest> object."}]},{"pos":[176,361],"content":"This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object.","nodes":[{"content":"This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object.","pos":[0,185],"nodes":[{"content":"This method can be called only by classes that inherit from <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph>.","pos":[0,88],"source":"This method can be called only by classes that inherit from <xref:System.Net.WebClient>."},{"content":"It is provided to give inheritors access to the underlying <ph id=\"ph1\">&lt;xref:System.Net.WebResponse&gt;</ph> object.","pos":[89,185],"source":" It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object."}]}]}],"pos":[120813,121179],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.WebRequest\"></xref> that is used to obtain the response.","nodes":[{"pos":[0,81],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.WebRequest\"&gt;&lt;/xref&gt;</ph> that is used to obtain the response.","source":"A <xref href=\"System.Net.WebRequest\"></xref> that is used to obtain the response."}],"pos":[121812,121894],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object obtained from a previous call to <xref href=\"System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\"></xref> .","nodes":[{"pos":[0,181],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object obtained from a previous call to <ph id=\"ph2\">&lt;xref href=\"System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> .","source":"An <xref href=\"System.IAsyncResult\"></xref> object obtained from a previous call to <xref href=\"System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\"></xref> ."}],"pos":[121962,122144],"yaml":true},{"content":"A <xref href=\"System.Net.WebResponse\"></xref> containing the response for the specified <xref href=\"System.Net.WebRequest\"></xref>.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.WebResponse\"&gt;&lt;/xref&gt;</ph> containing the response for the specified <ph id=\"ph2\">&lt;xref href=\"System.Net.WebRequest\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Net.WebResponse\"></xref> containing the response for the specified <xref href=\"System.Net.WebRequest\"></xref>."}],"pos":[122210,122342],"yaml":true},{"content":"Gets or sets a collection of header name/value pairs associated with the request.","nodes":[{"pos":[0,81],"content":"Gets or sets a collection of header name/value pairs associated with the request.","nodes":[{"content":"Gets or sets a collection of header name/value pairs associated with the request.","pos":[0,81]}]}],"pos":[123408,123490],"yaml":true},{"content":"The <xref:System.Net.WebClient.Headers%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing protocol headers that the <xref:System.Net.WebClient> sends with the request.  \n  \n Some common headers are considered restricted and are protected by the system and cannot be set or changed in a <xref:System.Net.WebHeaderCollection> object. Any attempt to set one of these restricted headers in the <xref:System.Net.WebHeaderCollection> object associated with a <xref:System.Net.WebClient> object will throw an exception later when attempting to send the <xref:System.Net.WebClient> request.  \n  \n Restricted headers protected by the system include, but are not limited to the following:  \n  \n-   Date  \n  \n-   Host  \n  \n In addition, some other headers are also restricted when using a <xref:System.Net.WebClient> object. These restricted headers include, but are not limited to the following:  \n  \n-   Accept  \n  \n-   Connection  \n  \n-   Content-Length  \n  \n-   Expect (when the value is set to \"100-continue\"  \n  \n-   If-Modified-Since  \n  \n-   Range  \n  \n-   Transfer-Encoding  \n  \n The <xref:System.Net.HttpWebRequest> class has properties for setting some of the above headers. If it is important for an application to set these headers, then the <xref:System.Net.HttpWebRequest> class should be used instead of the <xref:System.Net.WebRequest> class.  \n  \n You should not assume that the header values will remain unchanged, because Web servers and caches may change or add headers to a Web request.","nodes":[{"pos":[0,198],"content":"The <xref:System.Net.WebClient.Headers%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing protocol headers that the <xref:System.Net.WebClient> sends with the request.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Headers%2A&gt;</ph> property contains a <ph id=\"ph2\">&lt;xref:System.Net.WebHeaderCollection&gt;</ph> instance containing protocol headers that the <ph id=\"ph3\">&lt;xref:System.Net.WebClient&gt;</ph> sends with the request.","pos":[0,198],"source":"The <xref:System.Net.WebClient.Headers%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing protocol headers that the <xref:System.Net.WebClient> sends with the request."}]},{"pos":[205,613],"content":"Some common headers are considered restricted and are protected by the system and cannot be set or changed in a <xref:System.Net.WebHeaderCollection> object. Any attempt to set one of these restricted headers in the <xref:System.Net.WebHeaderCollection> object associated with a <xref:System.Net.WebClient> object will throw an exception later when attempting to send the <xref:System.Net.WebClient> request.","nodes":[{"content":"Some common headers are considered restricted and are protected by the system and cannot be set or changed in a <xref:System.Net.WebHeaderCollection> object. Any attempt to set one of these restricted headers in the <xref:System.Net.WebHeaderCollection> object associated with a <xref:System.Net.WebClient> object will throw an exception later when attempting to send the <xref:System.Net.WebClient> request.","pos":[0,408],"nodes":[{"content":"Some common headers are considered restricted and are protected by the system and cannot be set or changed in a <ph id=\"ph1\">&lt;xref:System.Net.WebHeaderCollection&gt;</ph> object.","pos":[0,157],"source":"Some common headers are considered restricted and are protected by the system and cannot be set or changed in a <xref:System.Net.WebHeaderCollection> object."},{"content":"Any attempt to set one of these restricted headers in the <ph id=\"ph1\">&lt;xref:System.Net.WebHeaderCollection&gt;</ph> object associated with a <ph id=\"ph2\">&lt;xref:System.Net.WebClient&gt;</ph> object will throw an exception later when attempting to send the <ph id=\"ph3\">&lt;xref:System.Net.WebClient&gt;</ph> request.","pos":[158,408],"source":" Any attempt to set one of these restricted headers in the <xref:System.Net.WebHeaderCollection> object associated with a <xref:System.Net.WebClient> object will throw an exception later when attempting to send the <xref:System.Net.WebClient> request."}]}]},{"pos":[620,709],"content":"Restricted headers protected by the system include, but are not limited to the following:","nodes":[{"content":"Restricted headers protected by the system include, but are not limited to the following:","pos":[0,89]}]},{"pos":[719,723],"content":"Date","nodes":[{"content":"Date","pos":[0,4]}]},{"pos":[733,737],"content":"Host","nodes":[{"content":"Host","pos":[0,4]}]},{"pos":[744,916],"content":"In addition, some other headers are also restricted when using a <xref:System.Net.WebClient> object. These restricted headers include, but are not limited to the following:","nodes":[{"content":"In addition, some other headers are also restricted when using a <xref:System.Net.WebClient> object. These restricted headers include, but are not limited to the following:","pos":[0,172],"nodes":[{"content":"In addition, some other headers are also restricted when using a <ph id=\"ph1\">&lt;xref:System.Net.WebClient&gt;</ph> object.","pos":[0,100],"source":"In addition, some other headers are also restricted when using a <xref:System.Net.WebClient> object."},{"content":"These restricted headers include, but are not limited to the following:","pos":[101,172]}]}]},{"pos":[926,932],"content":"Accept","nodes":[{"content":"Accept","pos":[0,6]}]},{"pos":[942,952],"content":"Connection","nodes":[{"content":"Connection","pos":[0,10]}]},{"pos":[962,976],"content":"Content-Length","nodes":[{"content":"Content-Length","pos":[0,14]}]},{"pos":[986,1033],"content":"Expect (when the value is set to \"100-continue\"","nodes":[{"content":"Expect (when the value is set to \"100-continue\"","pos":[0,47]}]},{"pos":[1043,1060],"content":"If-Modified-Since","nodes":[{"content":"If-Modified-Since","pos":[0,17]}]},{"pos":[1070,1075],"content":"Range","nodes":[{"content":"Range","pos":[0,5]}]},{"pos":[1085,1102],"content":"Transfer-Encoding","nodes":[{"content":"Transfer-Encoding","pos":[0,17]}]},{"pos":[1109,1379],"content":"The <xref:System.Net.HttpWebRequest> class has properties for setting some of the above headers. If it is important for an application to set these headers, then the <xref:System.Net.HttpWebRequest> class should be used instead of the <xref:System.Net.WebRequest> class.","nodes":[{"content":"The <xref:System.Net.HttpWebRequest> class has properties for setting some of the above headers. If it is important for an application to set these headers, then the <xref:System.Net.HttpWebRequest> class should be used instead of the <xref:System.Net.WebRequest> class.","pos":[0,270],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest&gt;</ph> class has properties for setting some of the above headers.","pos":[0,96],"source":"The <xref:System.Net.HttpWebRequest> class has properties for setting some of the above headers."},{"content":"If it is important for an application to set these headers, then the <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest&gt;</ph> class should be used instead of the <ph id=\"ph2\">&lt;xref:System.Net.WebRequest&gt;</ph> class.","pos":[97,270],"source":" If it is important for an application to set these headers, then the <xref:System.Net.HttpWebRequest> class should be used instead of the <xref:System.Net.WebRequest> class."}]}]},{"pos":[1386,1528],"content":"You should not assume that the header values will remain unchanged, because Web servers and caches may change or add headers to a Web request.","nodes":[{"content":"You should not assume that the header values will remain unchanged, because Web servers and caches may change or add headers to a Web request.","pos":[0,142]}]}],"pos":[123501,125062],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.WebHeaderCollection\"></xref> containing header name/value pairs associated with this request.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.WebHeaderCollection\"&gt;&lt;/xref&gt;</ph> containing header name/value pairs associated with this request.","source":"A <xref href=\"System.Net.WebHeaderCollection\"></xref> containing header name/value pairs associated with this request."}],"pos":[125953,126072],"yaml":true},{"content":"Gets whether a Web request is in progress.","nodes":[{"pos":[0,42],"content":"Gets whether a Web request is in progress.","nodes":[{"content":"Gets whether a Web request is in progress.","pos":[0,42]}]}],"pos":[127125,127168],"yaml":true},{"content":"`true` if the Web request is still in progress; otherwise `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the Web request is still in progress; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the Web request is still in progress; otherwise `false`."}],"pos":[127277,127346],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.DownloadDataCompleted\"></xref> event.","nodes":[{"pos":[0,81],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.DownloadDataCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.DownloadDataCompleted\"></xref> event."}],"pos":[128723,128805],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadDataCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)  \n  \n The <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,162],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadDataCompleted> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadDataCompleted&gt;</ph> event occurs.","pos":[0,162],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadDataCompleted> event occurs."}]},{"pos":[169,351],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>","pos":[63,182],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)"}]},{"pos":[358,576],"content":"The <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,218],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnDownloadDataCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,143],"source":"The <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[144,218]}]}]}],"pos":[128816,129399],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.DownloadDataCompletedEventArgs\"></xref> object that contains event data.","nodes":[{"pos":[0,97],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.DownloadDataCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> object that contains event data.","source":"A <xref href=\"System.Net.DownloadDataCompletedEventArgs\"></xref> object that contains event data."}],"pos":[130030,130128],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.DownloadFileCompleted\"></xref> event.","nodes":[{"pos":[0,81],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.DownloadFileCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.DownloadFileCompleted\"></xref> event."}],"pos":[131513,131595],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadFileCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,162],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadFileCompleted> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadFileCompleted&gt;</ph> event occurs.","pos":[0,162],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadFileCompleted> event occurs."}]},{"pos":[169,352],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[359,577],"content":"The <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,218],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnDownloadFileCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,143],"source":"The <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[144,218]}]}]}],"pos":[131606,132190],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,99],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"An <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"></xref> object containing event data."}],"pos":[132829,132929],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.DownloadProgressChanged\"></xref> event.","nodes":[{"pos":[0,83],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.DownloadProgressChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.DownloadProgressChanged\"></xref> event."}],"pos":[134347,134431],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadProgressChanged> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,164],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadProgressChanged> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadProgressChanged&gt;</ph> event occurs.","pos":[0,164],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadProgressChanged> event occurs."}]},{"pos":[171,354],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[361,581],"content":"The <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,220],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnDownloadProgressChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,145],"source":"The <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[146,220]}]}]}],"pos":[134442,135030],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.DownloadProgressChangedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.DownloadProgressChangedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"A <xref href=\"System.Net.DownloadProgressChangedEventArgs\"></xref> object containing event data."}],"pos":[135671,135768],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.DownloadStringCompleted\"></xref> event.","nodes":[{"pos":[0,83],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.DownloadStringCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.DownloadStringCompleted\"></xref> event."}],"pos":[137188,137272],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadStringCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,164],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadStringCompleted> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.DownloadStringCompleted&gt;</ph> event occurs.","pos":[0,164],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadStringCompleted> event occurs."}]},{"pos":[171,354],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[361,581],"content":"The <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,220],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnDownloadStringCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,145],"source":"The <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[146,220]}]}]}],"pos":[137283,137871],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.DownloadStringCompletedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.DownloadStringCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"A <xref href=\"System.Net.DownloadStringCompletedEventArgs\"></xref> object containing event data."}],"pos":[138508,138605],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.OpenReadCompleted\"></xref> event.","nodes":[{"pos":[0,77],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.OpenReadCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.OpenReadCompleted\"></xref> event."}],"pos":[139953,140031],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenReadCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnOpenReadCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,158],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenReadCompleted> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenReadCompleted&gt;</ph> event occurs.","pos":[0,158],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenReadCompleted> event occurs."}]},{"pos":[165,348],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[355,569],"content":"The <xref:System.Net.WebClient.OnOpenReadCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnOpenReadCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,214],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnOpenReadCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,139],"source":"The <xref:System.Net.WebClient.OnOpenReadCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[140,214]}]}]}],"pos":[140042,140618],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.OpenReadCompletedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,90],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.OpenReadCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"A <xref href=\"System.Net.OpenReadCompletedEventArgs\"></xref> object containing event data."}],"pos":[141237,141328],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.OpenWriteCompleted\"></xref> event.","nodes":[{"pos":[0,78],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.OpenWriteCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.OpenWriteCompleted\"></xref> event."}],"pos":[142682,142761],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenWriteCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,159],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenWriteCompleted> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteCompleted&gt;</ph> event occurs.","pos":[0,159],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenWriteCompleted> event occurs."}]},{"pos":[166,349],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[356,571],"content":"The <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,215],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnOpenWriteCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,140],"source":"The <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[141,215]}]}]}],"pos":[142772,143350],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.OpenWriteCompletedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,91],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.OpenWriteCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"A <xref href=\"System.Net.OpenWriteCompletedEventArgs\"></xref> object containing event data."}],"pos":[143972,144064],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.UploadDataCompleted\"></xref> event.","nodes":[{"pos":[0,79],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.UploadDataCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.UploadDataCompleted\"></xref> event."}],"pos":[145431,145511],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadDataCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,160],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadDataCompleted> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadDataCompleted&gt;</ph> event occurs.","pos":[0,160],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadDataCompleted> event occurs."}]},{"pos":[167,350],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[357,573],"content":"The <xref:System.Net.WebClient.OnUploadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnUploadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,216],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnUploadDataCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,141],"source":"The <xref:System.Net.WebClient.OnUploadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[142,216]}]}]}],"pos":[145522,146102],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.UploadDataCompletedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.UploadDataCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"A <xref href=\"System.Net.UploadDataCompletedEventArgs\"></xref> object containing event data."}],"pos":[146727,146820],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.UploadFileCompleted\"></xref> event.","nodes":[{"pos":[0,79],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.UploadFileCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.UploadFileCompleted\"></xref> event."}],"pos":[148188,148268],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadFileCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,160],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadFileCompleted> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFileCompleted&gt;</ph> event occurs.","pos":[0,160],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadFileCompleted> event occurs."}]},{"pos":[167,350],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[357,573],"content":"The <xref:System.Net.WebClient.OnUploadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnUploadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,216],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnUploadFileCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,141],"source":"The <xref:System.Net.WebClient.OnUploadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[142,216]}]}]}],"pos":[148279,148859],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.UploadFileCompletedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,93],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.UploadFileCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"An <xref href=\"System.Net.UploadFileCompletedEventArgs\"></xref> object containing event data."}],"pos":[149488,149582],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.UploadProgressChanged\"></xref> event.","nodes":[{"pos":[0,81],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.UploadProgressChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.UploadProgressChanged\"></xref> event."}],"pos":[150974,151056],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadProgressChanged> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,162],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadProgressChanged> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadProgressChanged&gt;</ph> event occurs.","pos":[0,162],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadProgressChanged> event occurs."}]},{"pos":[169,352],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[359,577],"content":"The <xref:System.Net.WebClient.OnUploadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnUploadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,218],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnUploadProgressChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,143],"source":"The <xref:System.Net.WebClient.OnUploadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[144,218]}]}]}],"pos":[151067,151651],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.UploadProgressChangedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,95],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.UploadProgressChangedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"An <xref href=\"System.Net.UploadProgressChangedEventArgs\"></xref> object containing event data."}],"pos":[152286,152382],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.UploadStringCompleted\"></xref> event.","nodes":[{"pos":[0,81],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.UploadStringCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.UploadStringCompleted\"></xref> event."}],"pos":[153776,153858],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadStringCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,162],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadStringCompleted> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringCompleted&gt;</ph> event occurs.","pos":[0,162],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadStringCompleted> event occurs."}]},{"pos":[169,352],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[359,577],"content":"The <xref:System.Net.WebClient.OnUploadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnUploadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,218],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnUploadStringCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,143],"source":"The <xref:System.Net.WebClient.OnUploadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[144,218]}]}]}],"pos":[153869,154453],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.UploadStringCompletedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,95],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.UploadStringCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"An <xref href=\"System.Net.UploadStringCompletedEventArgs\"></xref> object containing event data."}],"pos":[155088,155184],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.UploadValuesCompleted\"></xref> event.","nodes":[{"pos":[0,81],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.UploadValuesCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.UploadValuesCompleted\"></xref> event."}],"pos":[156578,156660],"yaml":true},{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadValuesCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,162],"content":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadValuesCompleted> event occurs.","nodes":[{"content":"Classes that inherit from this class can override this method to perform additional tasks when the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesCompleted&gt;</ph> event occurs.","pos":[0,162],"source":"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadValuesCompleted> event occurs."}]},{"pos":[169,352],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[359,577],"content":"The <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,218],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OnUploadValuesCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,143],"source":"The <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[144,218]}]}]}],"pos":[156671,157255],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.UploadValuesCompletedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,94],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.UploadValuesCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"A <xref href=\"System.Net.UploadValuesCompletedEventArgs\"></xref> object containing event data."}],"pos":[157890,157985],"yaml":true},{"content":"Raises the <xref href=\"System.Net.WebClient.WriteStreamClosed\"></xref> event.","nodes":[{"pos":[0,77],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.WriteStreamClosed\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Net.WebClient.WriteStreamClosed\"></xref> event."}],"pos":[159315,159393],"yaml":true},{"content":"A <xref href=\"System.Net.WriteStreamClosedEventArgs\"></xref> object containing event data.","nodes":[{"pos":[0,90],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.WriteStreamClosedEventArgs\"&gt;&lt;/xref&gt;</ph> object containing event data.","source":"A <xref href=\"System.Net.WriteStreamClosedEventArgs\"></xref> object containing event data."}],"pos":[159750,159841],"yaml":true},{"content":"Opens a readable stream for the data downloaded from a resource with the URI specified as a <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,127],"content":"Opens a readable stream for the data downloaded from a resource with the URI specified as a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Opens a readable stream for the data downloaded from a resource with the URI specified as a <xref href=\"System.String\"></xref>."}],"pos":[160994,161122],"yaml":true},{"content":"The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,339],"content":"The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenRead%2A&gt;</ph> method creates a <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> instance used to read the contents of the resource specified by the <ph id=\"ph3\">`address`</ph> parameter.","pos":[0,173],"source":"The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter."},{"content":"This method blocks while opening the stream.","pos":[174,218]},{"content":"To continue executing while waiting for the stream, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenReadAsync%2A&gt;</ph> methods.","pos":[219,339],"source":" To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods."}]},{"pos":[346,729],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not <ph id=\"ph2\">`null`</ph>, it is appended to <ph id=\"ph3\">`address`</ph>.","pos":[281,383],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`."}]},{"pos":[736,844],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[852,1023],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,169],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[1031,1256],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[161133,162404],"yaml":true,"extradata":"MT"},{"content":"The URI specified as a <xref href=\"System.String\"></xref> from which to download data.","nodes":[{"pos":[0,86],"content":"The URI specified as a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> from which to download data.","source":"The URI specified as a <xref href=\"System.String\"></xref> from which to download data."}],"pos":[163225,163312],"yaml":true},{"content":"A <xref href=\"System.IO.Stream\"></xref> used to read data from a resource.","nodes":[{"pos":[0,74],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to read data from a resource.","source":"A <xref href=\"System.IO.Stream\"></xref> used to read data from a resource."}],"pos":[163372,163447],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[163606,163652],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading data.","nodes":[{"pos":[0,115],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, <code>address</code> is invalid."},{"pos":[122,126],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[133,174],"content":"An error occurred while downloading data.","nodes":[{"content":"An error occurred while downloading data.","pos":[0,41]}]}],"pos":[163744,163927],"yaml":true},{"content":"Opens a readable stream for the data downloaded from a resource with the URI specified as a <xref href=\"System.Uri\"></xref>","nodes":[{"pos":[0,123],"content":"Opens a readable stream for the data downloaded from a resource with the URI specified as a <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph>","source":"Opens a readable stream for the data downloaded from a resource with the URI specified as a <xref href=\"System.Uri\"></xref>"}],"pos":[164982,165106],"yaml":true},{"content":"The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,339],"content":"The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenRead%2A&gt;</ph> method creates a <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> instance used to read the contents of the resource specified by the <ph id=\"ph3\">`address`</ph> parameter.","pos":[0,173],"source":"The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter."},{"content":"This method blocks while opening the stream.","pos":[174,218]},{"content":"To continue executing while waiting for the stream, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenReadAsync%2A&gt;</ph> methods.","pos":[219,339],"source":" To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods."}]},{"pos":[346,729],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not <ph id=\"ph2\">`null`</ph>, it is appended to <ph id=\"ph3\">`address`</ph>.","pos":[281,383],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`."}]},{"pos":[736,844],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[852,1023],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,169],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[1030,1253],"content":"**Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This member outputs trace information when you enable network tracing in your application.","pos":[0,99],"source":"**Note** This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[100,223],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}],"pos":[165117,166384],"yaml":true,"extradata":"MT"},{"content":"The URI specified as a <xref href=\"System.Uri\"></xref> from which to download data.","nodes":[{"pos":[0,83],"content":"The URI specified as a <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph> from which to download data.","source":"The URI specified as a <xref href=\"System.Uri\"></xref> from which to download data."}],"pos":[166531,166615],"yaml":true},{"content":"A <xref href=\"System.IO.Stream\"></xref> used to read data from a resource.","nodes":[{"pos":[0,74],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to read data from a resource.","source":"A <xref href=\"System.IO.Stream\"></xref> used to read data from a resource."}],"pos":[166675,166750],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[166909,166955],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading data.","nodes":[{"pos":[0,115],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, <code>address</code> is invalid."},{"pos":[122,126],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[133,174],"content":"An error occurred while downloading data.","nodes":[{"content":"An error occurred while downloading data.","pos":[0,41]}]}],"pos":[167047,167230],"yaml":true},{"content":"Opens a readable stream containing the specified resource. This method does not block the calling thread.","nodes":[{"pos":[0,105],"content":"Opens a readable stream containing the specified resource. This method does not block the calling thread.","nodes":[{"content":"Opens a readable stream containing the specified resource. This method does not block the calling thread.","pos":[0,105],"nodes":[{"content":"Opens a readable stream containing the specified resource.","pos":[0,58]},{"content":"This method does not block the calling thread.","pos":[59,105]}]}]}],"pos":[168315,168421],"yaml":true},{"content":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenReadAsync%2A> method.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,358],"content":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event.","nodes":[{"content":"This method retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> instance used to access the resource specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,122],"source":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter."},{"content":"The stream is obtained using thread resources that are automatically allocated from the thread pool.","pos":[123,223]},{"content":"To receive notification when the stream is available, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenReadCompleted&gt;</ph> event.","pos":[224,358],"source":" To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event."}]},{"pos":[366,545],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when you are finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,177],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[552,726],"content":"This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenReadAsync%2A> method.","nodes":[{"content":"This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenReadAsync%2A> method.","pos":[0,174],"nodes":[{"content":"This method does not block the calling thread while the stream is opening.","pos":[0,74]},{"content":"To block while waiting for the stream, use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenReadAsync%2A&gt;</ph> method.","pos":[75,174],"source":" To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenReadAsync%2A> method."}]}]},{"pos":[733,857],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[864,1251],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not specify an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested resource.","pos":[0,284],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not <ph id=\"ph2\">`null`</ph>, it is appended to <ph id=\"ph3\">`address`</ph>.","pos":[285,387],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`."}]},{"pos":[1258,1366],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1374,1599],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[168432,170050],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to retrieve.","nodes":[{"pos":[0,36],"content":"The URI of the resource to retrieve.","nodes":[{"content":"The URI of the resource to retrieve.","pos":[0,36]}]}],"pos":[170190,170227],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[170391,170437],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,105],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and address is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,172],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,233],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[170529,170775],"yaml":true},{"content":"Opens a readable stream containing the specified resource. This method does not block the calling thread.","nodes":[{"pos":[0,105],"content":"Opens a readable stream containing the specified resource. This method does not block the calling thread.","nodes":[{"content":"Opens a readable stream containing the specified resource. This method does not block the calling thread.","pos":[0,105],"nodes":[{"content":"Opens a readable stream containing the specified resource.","pos":[0,58]},{"content":"This method does not block the calling thread.","pos":[59,105]}]}]}],"pos":[171926,172032],"yaml":true},{"content":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenRead%2A> method.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,358],"content":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event.","nodes":[{"content":"This method retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> instance used to access the resource specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,122],"source":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter."},{"content":"The stream is obtained using thread resources that are automatically allocated from the thread pool.","pos":[123,223]},{"content":"To receive notification when the stream is available, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenReadCompleted&gt;</ph> event.","pos":[224,358],"source":" To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event."}]},{"pos":[366,545],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when you are finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,177],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[552,721],"content":"This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenRead%2A> method.","nodes":[{"content":"This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenRead%2A> method.","pos":[0,169],"nodes":[{"content":"This method does not block the calling thread while the stream is opening.","pos":[0,74]},{"content":"To block while waiting for the stream, use the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenRead%2A&gt;</ph> method.","pos":[75,169],"source":" To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenRead%2A> method."}]}]},{"pos":[728,852],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[859,1246],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not specify an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested resource.","pos":[0,284],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not <ph id=\"ph2\">`null`</ph>, it is appended to <ph id=\"ph3\">`address`</ph>.","pos":[285,387],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`."}]},{"pos":[1253,1361],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1369,1594],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[172043,173656],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to retrieve.","nodes":[{"pos":[0,36],"content":"The URI of the resource to retrieve.","nodes":[{"content":"The URI of the resource to retrieve.","pos":[0,36]}]}],"pos":[173814,173851],"yaml":true},{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"pos":[0,101],"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,101]}]}],"pos":[173916,174018],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[174182,174228],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,105],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and address is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,172],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,233],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[174320,174566],"yaml":true},{"content":"Occurs when an asynchronous operation to open a stream containing a resource completes.","nodes":[{"pos":[0,87],"content":"Occurs when an asynchronous operation to open a stream containing a resource completes.","nodes":[{"content":"Occurs when an asynchronous operation to open a stream containing a resource completes.","pos":[0,87]}]}],"pos":[175623,175711],"yaml":true},{"content":"This event is raised each time an asynchronous operation to open a stream containing a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.  \n  \n The <xref:System.Net.OpenReadCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenReadCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,204],"content":"This event is raised each time an asynchronous operation to open a stream containing a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous operation to open a stream containing a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.","pos":[0,204],"nodes":[{"content":"This event is raised each time an asynchronous operation to open a stream containing a resource completes.","pos":[0,106]},{"content":"These operations are started by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenReadAsync%2A&gt;</ph> methods.","pos":[107,204],"source":" These operations are started by calling the <xref:System.Net.WebClient.OpenReadAsync%2A> methods."}]}]},{"pos":[211,393],"content":"The <xref:System.Net.OpenReadCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenReadCompletedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.OpenReadCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenReadCompletedEventArgs> class provides the event handler with event data.","pos":[0,182],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.OpenReadCompletedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,83],"source":"The <xref:System.Net.OpenReadCompletedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.OpenReadCompletedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[84,182],"source":" The <xref:System.Net.OpenReadCompletedEventArgs> class provides the event handler with event data."}]}]},{"pos":[400,542],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[175722,176271],"yaml":true,"extradata":"MT"},{"content":"Opens a readable stream containing the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,107],"content":"Opens a readable stream containing the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Opens a readable stream containing the specified resource as an asynchronous operation using a task object.","pos":[0,107]}]}],"pos":[178080,178188],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,244],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","pos":[0,244],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a readable stream to the data resource has been opened.","pos":[31,169],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened."},{"content":"This method does not block the calling thread while the stream is opening.","pos":[170,244]}]}]},{"pos":[251,474],"content":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> instance used to access the resource specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,122],"source":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter."},{"content":"The stream is obtained using thread resources that are automatically allocated from the thread pool.","pos":[123,223]}]},{"pos":[482,661],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when you are finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,177],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[668,792],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[799,1186],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not specify an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested resource.","pos":[0,284],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not <ph id=\"ph2\">`null`</ph>, it is appended to <ph id=\"ph3\">`address`</ph>.","pos":[285,387],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`."}]},{"pos":[1193,1301],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1309,1534],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[178199,179752],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to retrieve.","nodes":[{"pos":[0,36],"content":"The URI of the resource to retrieve.","nodes":[{"content":"The URI of the resource to retrieve.","pos":[0,36]}]}],"pos":[180010,180047],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to read data from a resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,295],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to read data from a resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to read data from a resource.","pos":[57,229],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to read data from a resource."}]}],"pos":[180136,180442],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[180610,180656],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,105],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and address is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,172],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,233],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[180748,180994],"yaml":true},{"content":"Opens a readable stream containing the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,107],"content":"Opens a readable stream containing the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Opens a readable stream containing the specified resource as an asynchronous operation using a task object.","pos":[0,107]}]}],"pos":[182178,182286],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,244],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","pos":[0,244],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a readable stream to the data resource has been opened.","pos":[31,169],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened."},{"content":"This method does not block the calling thread while the stream is opening.","pos":[170,244]}]}]},{"pos":[251,474],"content":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> instance used to access the resource specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,122],"source":"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter."},{"content":"The stream is obtained using thread resources that are automatically allocated from the thread pool.","pos":[123,223]}]},{"pos":[482,661],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when you are finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,177],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[668,792],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[799,1186],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not specify an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested resource.","pos":[0,284],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not <ph id=\"ph2\">`null`</ph>, it is appended to <ph id=\"ph3\">`address`</ph>.","pos":[285,387],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`."}]},{"pos":[1193,1301],"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","nodes":[{"content":"This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.","pos":[0,108],"nodes":[{"content":"This method uses the RETR command to download an FTP resource.","pos":[0,62]},{"content":"For an HTTP resource, the GET method is used.","pos":[63,108]}]}]},{"pos":[1309,1534],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[182297,183850],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to retrieve.","nodes":[{"pos":[0,36],"content":"The URI of the resource to retrieve.","nodes":[{"content":"The URI of the resource to retrieve.","pos":[0,36]}]}],"pos":[184102,184139],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to read data from a resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,295],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to read data from a resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to read data from a resource.","pos":[57,229],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to read data from a resource."}]}],"pos":[184228,184534],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[184702,184748],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,105],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and address is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,172],"content":"An error occurred while downloading the resource.","nodes":[{"content":"An error occurred while downloading the resource.","pos":[0,49]}]},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,233],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[184840,185086],"yaml":true},{"content":"Opens a stream for writing data to the specified resource.","nodes":[{"pos":[0,58],"content":"Opens a stream for writing data to the specified resource.","nodes":[{"content":"Opens a stream for writing data to the specified resource.","pos":[0,58]}]}],"pos":[186240,186299],"yaml":true},{"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,285],"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.","nodes":[{"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.","pos":[0,285],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWrite%2A&gt;</ph> method returns a writable stream that is used to send data to a resource.","pos":[0,118],"source":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource."},{"content":"This method blocks while opening the stream.","pos":[119,163]},{"content":"To continue executing while waiting for the stream, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteAsync%2A&gt;</ph> methods.","pos":[164,285],"source":" To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods."}]}]},{"pos":[292,684],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[691,798],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[806,1031],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[186310,187353],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[188220,188265],"yaml":true},{"content":"A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"pos":[0,75],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to write data to the resource.","source":"A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."}],"pos":[188325,188401],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[188561,188607],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,180],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[188699,188888],"yaml":true},{"content":"Opens a stream for writing data to the specified resource.","nodes":[{"pos":[0,58],"content":"Opens a stream for writing data to the specified resource.","nodes":[{"content":"Opens a stream for writing data to the specified resource.","pos":[0,58]}]}],"pos":[189949,190008],"yaml":true},{"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,285],"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.","nodes":[{"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.","pos":[0,285],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWrite%2A&gt;</ph> method returns a writable stream that is used to send data to a resource.","pos":[0,118],"source":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource."},{"content":"This method blocks while opening the stream.","pos":[119,163]},{"content":"To continue executing while waiting for the stream, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteAsync%2A&gt;</ph> methods.","pos":[164,285],"source":" To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods."}]}]},{"pos":[292,684],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[691,798],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[806,1031],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[190019,191062],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[191210,191255],"yaml":true},{"content":"A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"pos":[0,75],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to write data to the resource.","source":"A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."}],"pos":[191315,191391],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[191551,191597],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,180],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[191689,191878],"yaml":true},{"content":"Opens a stream for writing data to the specified resource, using the specified method.","nodes":[{"pos":[0,86],"content":"Opens a stream for writing data to the specified resource, using the specified method.","nodes":[{"content":"Opens a stream for writing data to the specified resource, using the specified method.","pos":[0,86]}]}],"pos":[193023,193110],"yaml":true},{"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. The underlying request is made with the method specified in the `method` parameter. The data is sent to the server when you close the stream. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute address, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,427],"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. The underlying request is made with the method specified in the `method` parameter. The data is sent to the server when you close the stream. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWrite%2A&gt;</ph> method returns a writable stream that is used to send data to a resource.","pos":[0,118],"source":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource."},{"content":"The underlying request is made with the method specified in the <ph id=\"ph1\">`method`</ph> parameter.","pos":[119,202],"source":" The underlying request is made with the method specified in the `method` parameter."},{"content":"The data is sent to the server when you close the stream.","pos":[203,260]},{"content":"This method blocks while opening the stream.","pos":[261,305]},{"content":"To continue executing while waiting for the stream, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteAsync%2A&gt;</ph> methods.","pos":[306,427],"source":" To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods."}]},{"pos":[434,711],"content":"If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,137],"source":"If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[138,277],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[718,1114],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute address, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not specify an absolute address, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,284],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute address, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[285,396],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1122,1347],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[193121,194480],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[195354,195399],"yaml":true},{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,105],"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,105],"nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[50,105]}]}]}],"pos":[195461,195567],"yaml":true},{"content":"A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"pos":[0,75],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to write data to the resource.","source":"A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."}],"pos":[195627,195703],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[195863,195909],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,180],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[196001,196190],"yaml":true},{"content":"Opens a stream for writing data to the specified resource, by using the specified method.","nodes":[{"pos":[0,89],"content":"Opens a stream for writing data to the specified resource, by using the specified method.","nodes":[{"content":"Opens a stream for writing data to the specified resource, by using the specified method.","pos":[0,89]}]}],"pos":[197317,197407],"yaml":true},{"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,285],"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.","nodes":[{"content":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.","pos":[0,285],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWrite%2A&gt;</ph> method returns a writable stream that is used to send data to a resource.","pos":[0,118],"source":"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource."},{"content":"This method blocks while opening the stream.","pos":[119,163]},{"content":"To continue executing while waiting for the stream, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteAsync%2A&gt;</ph> methods.","pos":[164,285],"source":" To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods."}]}]},{"pos":[292,684],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[692,917],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[197418,198345],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[198508,198553],"yaml":true},{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,105],"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,105],"nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[50,105]}]}]}],"pos":[198615,198721],"yaml":true},{"content":"A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"pos":[0,75],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to write data to the resource.","source":"A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."}],"pos":[198781,198857],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[199017,199063],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,180],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[199155,199344],"yaml":true},{"content":"Opens a stream for writing data to the specified resource, using the specified method. This method does not block the calling thread.","nodes":[{"pos":[0,133],"content":"Opens a stream for writing data to the specified resource, using the specified method. This method does not block the calling thread.","nodes":[{"content":"Opens a stream for writing data to the specified resource, using the specified method. This method does not block the calling thread.","pos":[0,133],"nodes":[{"content":"Opens a stream for writing data to the specified resource, using the specified method.","pos":[0,86]},{"content":"This method does not block the calling thread.","pos":[87,133]}]}]}],"pos":[200567,200701],"yaml":true},{"content":"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. The contents of the stream are sent to the server when you close the stream.  \n  \n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,410],"content":"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. The contents of the stream are sent to the server when you close the stream.","nodes":[{"content":"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. The contents of the stream are sent to the server when you close the stream.","pos":[0,410],"nodes":[{"content":"This method retrieves a writable stream that is used to send data to a resource.","pos":[0,80]},{"content":"The stream is retrieved asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[81,197]},{"content":"To receive notification when the stream is available, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteCompleted&gt;</ph> event.","pos":[198,333],"source":" To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event."},{"content":"The contents of the stream are sent to the server when you close the stream.","pos":[334,410]}]}]},{"pos":[417,694],"content":"If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,137],"source":"If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[138,277],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[701,825],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[832,1015],"content":"This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.","pos":[0,183],"nodes":[{"content":"This method does not block the calling thread while the stream is being opened.","pos":[0,79]},{"content":"To block while waiting for the stream, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWrite%2A&gt;</ph> methods.","pos":[80,183],"source":" To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods."}]}]},{"pos":[1022,1414],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1422,1647],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[200712,202375],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[202549,202594],"yaml":true},{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,105],"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,105],"nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[50,105]}]}]}],"pos":[202656,202762],"yaml":true},{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes","nodes":[{"pos":[0,100],"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes","nodes":[{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes","pos":[0,100]}]}],"pos":[202827,202928],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[203093,203139],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[203231,203419],"yaml":true},{"content":"Opens a stream for writing data to the specified resource. This method does not block the calling thread.","nodes":[{"pos":[0,105],"content":"Opens a stream for writing data to the specified resource. This method does not block the calling thread.","nodes":[{"content":"Opens a stream for writing data to the specified resource. This method does not block the calling thread.","pos":[0,105],"nodes":[{"content":"Opens a stream for writing data to the specified resource.","pos":[0,58]},{"content":"This method does not block the calling thread.","pos":[59,105]}]}]}],"pos":[204576,204682],"yaml":true},{"content":"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. When you close the stream, the thread blocks until the request is sent to `address` and a response is received.  \n  \n This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,430],"content":"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. When you close the stream, the thread blocks until the request is sent to `address` and a response is received.","nodes":[{"content":"This method retrieves a writable stream that is used to send data to a resource.","pos":[0,80]},{"content":"The stream is retrieved using thread resources that are automatically allocated from the thread pool.","pos":[81,182]},{"content":"To receive notification when the stream is available, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteCompleted&gt;</ph> event.","pos":[183,318],"source":" To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event."},{"content":"When you close the stream, the thread blocks until the request is sent to <ph id=\"ph1\">`address`</ph> and a response is received.","pos":[319,430],"source":" When you close the stream, the thread blocks until the request is sent to `address` and a response is received."}]},{"pos":[437,620],"content":"This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.","pos":[0,183],"nodes":[{"content":"This method does not block the calling thread while the stream is being opened.","pos":[0,79]},{"content":"To block while waiting for the stream, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWrite%2A&gt;</ph> methods.","pos":[80,183],"source":" To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods."}]}]},{"pos":[627,1019],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1027,1252],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[204693,205957],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[206113,206158],"yaml":true},{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,105],"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,105],"nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[50,105]}]}]}],"pos":[206220,206326],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[206491,206537],"yaml":true},{"content":"Opens a stream for writing data to the specified resource. This method does not block the calling thread.","nodes":[{"pos":[0,105],"content":"Opens a stream for writing data to the specified resource. This method does not block the calling thread.","nodes":[{"content":"Opens a stream for writing data to the specified resource. This method does not block the calling thread.","pos":[0,105],"nodes":[{"content":"Opens a stream for writing data to the specified resource.","pos":[0,58]},{"content":"This method does not block the calling thread.","pos":[59,105]}]}]}],"pos":[207628,207734],"yaml":true},{"content":"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. When you close the stream, the thread blocks until the request is sent to `address` and a response is received.  \n  \n This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,430],"content":"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. When you close the stream, the thread blocks until the request is sent to `address` and a response is received.","nodes":[{"content":"This method retrieves a writable stream that is used to send data to a resource.","pos":[0,80]},{"content":"The stream is retrieved using thread resources that are automatically allocated from the thread pool.","pos":[81,182]},{"content":"To receive notification when the stream is available, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteCompleted&gt;</ph> event.","pos":[183,318],"source":" To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event."},{"content":"When you close the stream, the thread blocks until the request is sent to <ph id=\"ph1\">`address`</ph> and a response is received.","pos":[319,430],"source":" When you close the stream, the thread blocks until the request is sent to `address` and a response is received."}]},{"pos":[437,620],"content":"This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.","pos":[0,183],"nodes":[{"content":"This method does not block the calling thread while the stream is being opened.","pos":[0,79]},{"content":"To block while waiting for the stream, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWrite%2A&gt;</ph> methods.","pos":[80,183],"source":" To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods."}]}]},{"pos":[627,1019],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1026,1133],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1141,1366],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[207745,209125],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[209266,209311],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[209476,209522],"yaml":true},{"content":"Occurs when an asynchronous operation to open a stream to write data to a resource completes.","nodes":[{"pos":[0,93],"content":"Occurs when an asynchronous operation to open a stream to write data to a resource completes.","nodes":[{"content":"Occurs when an asynchronous operation to open a stream to write data to a resource completes.","pos":[0,93]}]}],"pos":[210585,210679],"yaml":true},{"content":"This event is raised each time an asynchronous operation to open a stream that is used to send data to a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n The <xref:System.Net.OpenWriteCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenWriteCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,223],"content":"This event is raised each time an asynchronous operation to open a stream that is used to send data to a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous operation to open a stream that is used to send data to a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.","pos":[0,223],"nodes":[{"content":"This event is raised each time an asynchronous operation to open a stream that is used to send data to a resource completes.","pos":[0,124]},{"content":"These operations are started by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteAsync%2A&gt;</ph> methods.","pos":[125,223],"source":" These operations are started by calling the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods."}]}]},{"pos":[230,414],"content":"The <xref:System.Net.OpenWriteCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenWriteCompletedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.OpenWriteCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenWriteCompletedEventArgs> class provides the event handler with event data.","pos":[0,184],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.OpenWriteCompletedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,84],"source":"The <xref:System.Net.OpenWriteCompletedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.OpenWriteCompletedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[85,184],"source":" The <xref:System.Net.OpenWriteCompletedEventArgs> class provides the event handler with event data."}]}]},{"pos":[421,563],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[210690,211260],"yaml":true,"extradata":"MT"},{"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,107],"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","pos":[0,107]}]}],"pos":[213078,213186],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,244],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","pos":[0,244],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a writable stream to the data resource has been opened.","pos":[31,169],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened."},{"content":"This method does not block the calling thread while the stream is opening.","pos":[170,244]}]}]},{"pos":[251,481],"content":"This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> instance used to write data to the resource specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,129],"source":"This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter."},{"content":"The stream is obtained using thread resources that are automatically allocated from the thread pool.","pos":[130,230]}]},{"pos":[489,668],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when you are finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,177],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[675,799],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[806,1198],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1205,1312],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1319,1533],"content":"This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[0,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[91,214],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}],"pos":[213197,214748],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[215007,215052],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,296],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to write data to the resource.","pos":[57,230],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."}]}],"pos":[215141,215448],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[215617,215663],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[215755,215943],"yaml":true},{"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,107],"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","pos":[0,107]}]}],"pos":[217133,217241],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,244],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","pos":[0,244],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a writable stream to the data resource has been opened.","pos":[31,169],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened."},{"content":"This method does not block the calling thread while the stream is opening.","pos":[170,244]}]}]},{"pos":[251,481],"content":"This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> instance used to write data to the resource specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,129],"source":"This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter."},{"content":"The stream is obtained using thread resources that are automatically allocated from the thread pool.","pos":[130,230]}]},{"pos":[489,668],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when you are finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,177],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[675,799],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[806,1198],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1205,1312],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1319,1533],"content":"This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[0,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[91,214],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}],"pos":[217252,218803],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[219056,219101],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,296],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to write data to the resource.","pos":[57,230],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."}]}],"pos":[219190,219497],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[219666,219712],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[219804,219992],"yaml":true},{"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,107],"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","pos":[0,107]}]}],"pos":[221266,221374],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,244],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","pos":[0,244],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a writable stream to the data resource has been opened.","pos":[31,169],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened."},{"content":"This method does not block the calling thread while the stream is opening.","pos":[170,244]}]}]},{"pos":[251,481],"content":"This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> instance used to write data to the resource specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,129],"source":"This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter."},{"content":"The stream is obtained using thread resources that are automatically allocated from the thread pool.","pos":[130,230]}]},{"pos":[489,668],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when you are finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,177],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[675,952],"content":"If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,137],"source":"If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[138,277],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[959,1083],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[1090,1482],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1489,1596],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1603,1817],"content":"This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[0,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[91,214],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}],"pos":[221385,223222],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[223496,223541],"yaml":true},{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,105],"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,105],"nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[50,105]}]}]}],"pos":[223603,223709],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,296],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to write data to the resource.","pos":[57,230],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."}]}],"pos":[223798,224105],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[224274,224320],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[224412,224600],"yaml":true},{"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,107],"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.","pos":[0,107]}]}],"pos":[225856,225964],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,244],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.","pos":[0,244],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a writable stream to the data resource has been opened.","pos":[31,169],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened."},{"content":"This method does not block the calling thread while the stream is opening.","pos":[170,244]}]}]},{"pos":[251,481],"content":"This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This method retrieves a <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> instance used to write data to the resource specified by the <ph id=\"ph2\">`address`</ph> parameter.","pos":[0,129],"source":"This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter."},{"content":"The stream is obtained using thread resources that are automatically allocated from the thread pool.","pos":[130,230]}]},{"pos":[489,668],"content":"[!NOTE]\n You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.","leadings":["","> "],"nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> when you are finished with the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> to avoid running out of system resources.","pos":[9,177],"source":" You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources."}]},{"pos":[675,952],"content":"If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,137],"source":"If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[138,277],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[959,1083],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[1090,1482],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1489,1596],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1603,1817],"content":"This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[0,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[91,214],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}],"pos":[225975,227812],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[228080,228125],"yaml":true},{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,105],"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,105],"nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[50,105]}]}]}],"pos":[228187,228293],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,296],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> used to write data to the resource.","pos":[57,230],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."}]}],"pos":[228382,228689],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[228858,228904],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]}],"pos":[228996,229184],"yaml":true},{"content":"Gets or sets the proxy used by this <xref href=\"System.Net.WebClient\"></xref> object.","nodes":[{"pos":[0,85],"content":"Gets or sets the proxy used by this <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets or sets the proxy used by this <xref href=\"System.Net.WebClient\"></xref> object."}],"pos":[230247,230333],"yaml":true},{"content":"The <xref:System.Net.WebClient.Proxy%2A> property identifies the <xref:System.Net.IWebProxy> instance that communicates with remote servers on behalf of this <xref:System.Net.WebClient> object. The proxy is set by the system using configuration files and the Internet Explorer Local Area Network settings. To specify that no proxy should be used, set the <xref:System.Net.WebClient.Proxy%2A> property to the proxy instance returned by the <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A> method.  \n  \n For information on automatic proxy detection, see [Automatic Proxy Detection](~/docs/framework/network-programming/automatic-proxy-detection.md).","nodes":[{"pos":[0,505],"content":"The <xref:System.Net.WebClient.Proxy%2A> property identifies the <xref:System.Net.IWebProxy> instance that communicates with remote servers on behalf of this <xref:System.Net.WebClient> object. The proxy is set by the system using configuration files and the Internet Explorer Local Area Network settings. To specify that no proxy should be used, set the <xref:System.Net.WebClient.Proxy%2A> property to the proxy instance returned by the <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A> method.","nodes":[{"content":"The <xref:System.Net.WebClient.Proxy%2A> property identifies the <xref:System.Net.IWebProxy> instance that communicates with remote servers on behalf of this <xref:System.Net.WebClient> object. The proxy is set by the system using configuration files and the Internet Explorer Local Area Network settings. To specify that no proxy should be used, set the <xref:System.Net.WebClient.Proxy%2A> property to the proxy instance returned by the <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A> method.","pos":[0,505],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Proxy%2A&gt;</ph> property identifies the <ph id=\"ph2\">&lt;xref:System.Net.IWebProxy&gt;</ph> instance that communicates with remote servers on behalf of this <ph id=\"ph3\">&lt;xref:System.Net.WebClient&gt;</ph> object.","pos":[0,193],"source":"The <xref:System.Net.WebClient.Proxy%2A> property identifies the <xref:System.Net.IWebProxy> instance that communicates with remote servers on behalf of this <xref:System.Net.WebClient> object."},{"content":"The proxy is set by the system using configuration files and the Internet Explorer Local Area Network settings.","pos":[194,305]},{"content":"To specify that no proxy should be used, set the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Proxy%2A&gt;</ph> property to the proxy instance returned by the <ph id=\"ph2\">&lt;xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A&gt;</ph> method.","pos":[306,505],"source":" To specify that no proxy should be used, set the <xref:System.Net.WebClient.Proxy%2A> property to the proxy instance returned by the <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A> method."}]}]},{"pos":[512,657],"content":"For information on automatic proxy detection, see <bpt id=\"p1\">[</bpt>Automatic Proxy Detection<ept id=\"p1\">](~/docs/framework/network-programming/automatic-proxy-detection.md)</ept>.","source":"For information on automatic proxy detection, see [Automatic Proxy Detection](~/docs/framework/network-programming/automatic-proxy-detection.md)."}],"pos":[230344,231006],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.IWebProxy\"></xref> instance used to send requests.","nodes":[{"pos":[0,76],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IWebProxy\"&gt;&lt;/xref&gt;</ph> instance used to send requests.","source":"An <xref href=\"System.Net.IWebProxy\"></xref> instance used to send requests."}],"pos":[231141,231218],"yaml":true},{"content":"<xref href=\"System.Net.WebClient.Proxy\"></xref> is set to `null`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.Proxy\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">`null`</ph>.","source":"<xref href=\"System.Net.WebClient.Proxy\"></xref> is set to `null`."}],"pos":[231374,231440],"yaml":true},{"content":"Gets or sets a collection of query name/value pairs associated with the request.","nodes":[{"pos":[0,80],"content":"Gets or sets a collection of query name/value pairs associated with the request.","nodes":[{"content":"Gets or sets a collection of query name/value pairs associated with the request.","pos":[0,80]}]}],"pos":[232464,232545],"yaml":true},{"content":"The <xref:System.Net.WebClient.QueryString%2A> property contains a <xref:System.Collections.Specialized.NameValueCollection> instance containing name/value pairs that are appended to the URI as a query string. The contents of the <xref:System.Net.WebClient.QueryString%2A> property are preceded by a question mark (?), and name/value pairs are separated from one another by an ampersand (&).","nodes":[{"pos":[0,391],"content":"The <xref:System.Net.WebClient.QueryString%2A> property contains a <xref:System.Collections.Specialized.NameValueCollection> instance containing name/value pairs that are appended to the URI as a query string. The contents of the <xref:System.Net.WebClient.QueryString%2A> property are preceded by a question mark (?), and name/value pairs are separated from one another by an ampersand (&).","nodes":[{"content":"The <xref:System.Net.WebClient.QueryString%2A> property contains a <xref:System.Collections.Specialized.NameValueCollection> instance containing name/value pairs that are appended to the URI as a query string. The contents of the <xref:System.Net.WebClient.QueryString%2A> property are preceded by a question mark (?), and name/value pairs are separated from one another by an ampersand (&).","pos":[0,391],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property contains a <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> instance containing name/value pairs that are appended to the URI as a query string.","pos":[0,209],"source":"The <xref:System.Net.WebClient.QueryString%2A> property contains a <xref:System.Collections.Specialized.NameValueCollection> instance containing name/value pairs that are appended to the URI as a query string."},{"content":"The contents of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property are preceded by a question mark (?), and name/value pairs are separated from one another by an ampersand (&amp;).","pos":[210,391],"source":" The contents of the <xref:System.Net.WebClient.QueryString%2A> property are preceded by a question mark (?), and name/value pairs are separated from one another by an ampersand (&)."}]}]}],"pos":[232556,232948],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains query name/value pairs associated with the request. If no pairs are associated with the request, the value is an empty <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref>.","nodes":[{"pos":[0,279],"content":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains query name/value pairs associated with the request. If no pairs are associated with the request, the value is an empty <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> that contains query name/value pairs associated with the request.","pos":[0,139],"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains query name/value pairs associated with the request."},{"content":"If no pairs are associated with the request, the value is an empty <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph>.","pos":[140,279],"source":" If no pairs are associated with the request, the value is an empty <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref>."}]}],"pos":[233873,234153],"yaml":true},{"content":"Gets a collection of header name/value pairs associated with the response.","nodes":[{"pos":[0,74],"content":"Gets a collection of header name/value pairs associated with the response.","nodes":[{"content":"Gets a collection of header name/value pairs associated with the response.","pos":[0,74]}]}],"pos":[235264,235339],"yaml":true},{"content":"The <xref:System.Net.WebClient.ResponseHeaders%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing header information the <xref:System.Net.WebClient> receives with the response.","nodes":[{"pos":[0,207],"content":"The <xref:System.Net.WebClient.ResponseHeaders%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing header information the <xref:System.Net.WebClient> receives with the response.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.ResponseHeaders%2A&gt;</ph> property contains a <ph id=\"ph2\">&lt;xref:System.Net.WebHeaderCollection&gt;</ph> instance containing header information the <ph id=\"ph3\">&lt;xref:System.Net.WebClient&gt;</ph> receives with the response.","pos":[0,207],"source":"The <xref:System.Net.WebClient.ResponseHeaders%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing header information the <xref:System.Net.WebClient> receives with the response."}]}],"pos":[235350,235558],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.WebHeaderCollection\"></xref> containing header name/value pairs associated with the response, or `null` if no response has been received.","nodes":[{"pos":[0,162],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.WebHeaderCollection\"&gt;&lt;/xref&gt;</ph> containing header name/value pairs associated with the response, or <ph id=\"ph2\">`null`</ph> if no response has been received.","source":"A <xref href=\"System.Net.WebHeaderCollection\"></xref> containing header name/value pairs associated with the response, or `null` if no response has been received."}],"pos":[236431,236594],"yaml":true},{"content":"Uploads a data buffer to a resource identified by a URI.","nodes":[{"pos":[0,56],"content":"Uploads a data buffer to a resource identified by a URI.","nodes":[{"content":"Uploads a data buffer to a resource identified by a URI.","pos":[0,56]}]}],"pos":[237812,237869],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,87],"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> method sends a data buffer to a resource.","pos":[0,87],"source":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource."}]},{"pos":[94,455],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","pos":[0,361],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]},{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs.","pos":[108,221]},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[222,361],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]}]},{"pos":[462,756],"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> method sends the content of <ph id=\"ph2\">`data`</ph> to the server without encoding it.","pos":[0,115],"source":"The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it."},{"content":"This method blocks while uploading the data.","pos":[116,160]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadDataAsync%2A&gt;</ph> methods.","pos":[161,294],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods."}]},{"pos":[763,1155],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1163,1388],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[237880,239282],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[240137,240182],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[240242,240283],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[240340,240436],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[240597,240643],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while sending the data.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,165],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[172,176],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[183,224],"content":"An error occurred while sending the data.","nodes":[{"content":"An error occurred while sending the data.","pos":[0,41]}]},{"pos":[231,235],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[242,301],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[240735,241053],"yaml":true},{"content":"Uploads a data buffer to a resource identified by a URI.","nodes":[{"pos":[0,56],"content":"Uploads a data buffer to a resource identified by a URI.","nodes":[{"content":"Uploads a data buffer to a resource identified by a URI.","pos":[0,56]}]}],"pos":[242186,242243],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,87],"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> method sends a data buffer to a resource.","pos":[0,87],"source":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource."}]},{"pos":[94,455],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","pos":[0,361],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]},{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs.","pos":[108,221]},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[222,361],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]}]},{"pos":[462,756],"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> method sends the content of <ph id=\"ph2\">`data`</ph> to the server without encoding it.","pos":[0,115],"source":"The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it."},{"content":"This method blocks while uploading the data.","pos":[116,160]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadDataAsync%2A&gt;</ph> methods.","pos":[161,294],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods."}]},{"pos":[763,1155],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1163,1388],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[242254,243656],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[243808,243853],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[243913,243954],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[244011,244107],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[244268,244314],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while sending the data.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,165],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[172,176],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[183,224],"content":"An error occurred while sending the data.","nodes":[{"content":"An error occurred while sending the data.","pos":[0,41]}]},{"pos":[231,235],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[242,301],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[244406,244724],"yaml":true},{"content":"Uploads a data buffer to the specified resource, using the specified method.","nodes":[{"pos":[0,76],"content":"Uploads a data buffer to the specified resource, using the specified method.","nodes":[{"content":"Uploads a data buffer to the specified resource, using the specified method.","pos":[0,76]}]}],"pos":[245941,246018],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it.  \n  \n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,366],"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> method sends a data buffer to a resource using the HTTP method specified in the <ph id=\"ph2\">`method`</ph> parameter, and returns any response from the server.","pos":[0,187],"source":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server."},{"content":"This method blocks while uploading the data.","pos":[188,232]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadDataAsync%2A&gt;</ph> methods.","pos":[233,366],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods."}]},{"pos":[373,488],"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> method sends the content of <ph id=\"ph2\">`data`</ph> to the server without encoding it.","source":"The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it."},{"pos":[495,770],"content":"If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,135],"source":"If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[136,275],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[777,1169],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1177,1402],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[246029,247445],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[248366,248411],"yaml":true},{"content":"The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,110],"content":"The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,110],"nodes":[{"content":"The HTTP method used to send the data to the resource.","pos":[0,54]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[55,110]}]}]}],"pos":[248473,248584],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[248644,248685],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[248742,248838],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[248999,249045],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while uploading the data.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,165],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[172,176],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[183,226],"content":"An error occurred while uploading the data.","nodes":[{"content":"An error occurred while uploading the data.","pos":[0,43]}]},{"pos":[233,237],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[244,303],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[249137,249457],"yaml":true},{"content":"Uploads a data buffer to the specified resource, using the specified method.","nodes":[{"pos":[0,76],"content":"Uploads a data buffer to the specified resource, using the specified method.","nodes":[{"content":"Uploads a data buffer to the specified resource, using the specified method.","pos":[0,76]}]}],"pos":[250656,250733],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it.  \n  \n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,366],"content":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> method sends a data buffer to a resource using the HTTP method specified in the <ph id=\"ph2\">`method`</ph> parameter, and returns any response from the server.","pos":[0,187],"source":"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server."},{"content":"This method blocks while uploading the data.","pos":[188,232]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadDataAsync%2A&gt;</ph> methods.","pos":[233,366],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods."}]},{"pos":[373,488],"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> method sends the content of <ph id=\"ph2\">`data`</ph> to the server without encoding it.","source":"The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it."},{"pos":[495,770],"content":"If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,135],"source":"If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[136,275],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[777,1169],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1177,1402],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[250744,252160],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[252327,252372],"yaml":true},{"content":"The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,110],"content":"The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,110],"nodes":[{"content":"The HTTP method used to send the data to the resource.","pos":[0,54]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[55,110]}]}]}],"pos":[252434,252545],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[252605,252646],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[252703,252799],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[252960,253006],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while uploading the data.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,165],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[172,176],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[183,226],"content":"An error occurred while uploading the data.","nodes":[{"content":"An error occurred while uploading the data.","pos":[0,43]}]},{"pos":[233,237],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[244,303],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[253098,253418],"yaml":true},{"content":"Uploads a data buffer to a resource identified by a URI, using the specified method. This method does not block the calling thread.","nodes":[{"pos":[0,131],"content":"Uploads a data buffer to a resource identified by a URI, using the specified method. This method does not block the calling thread.","nodes":[{"content":"Uploads a data buffer to a resource identified by a URI, using the specified method. This method does not block the calling thread.","pos":[0,131],"nodes":[{"content":"Uploads a data buffer to a resource identified by a URI, using the specified method.","pos":[0,84]},{"content":"This method does not block the calling thread.","pos":[85,131]}]}]}],"pos":[254647,254779],"yaml":true},{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.  \n  \n This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,327],"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.","nodes":[{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.","pos":[0,327],"nodes":[{"content":"This method sends a data buffer to a resource.","pos":[0,46]},{"content":"The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[47,163]},{"content":"The data is not encoded.","pos":[164,188]},{"content":"To receive notification when the data upload completes, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadDataCompleted&gt;</ph> event.","pos":[189,327],"source":" To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event."}]}]},{"pos":[334,539],"content":"This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.","pos":[0,205],"nodes":[{"content":"This method does not block the calling thread while the data is being sent.","pos":[0,75]},{"content":"To send data and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> methods.","pos":[76,205],"source":" To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods."}]}]},{"pos":[546,670],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[677,1070],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,281],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[282,393],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1078,1303],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[254790,256107],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[256277,256322],"yaml":true},{"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[256384,256492],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[256552,256593],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[256759,256805],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,256],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[256897,257166],"yaml":true},{"content":"Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.","nodes":[{"pos":[0,106],"content":"Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.","nodes":[{"content":"Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.","pos":[0,106]}]}],"pos":[258461,258568],"yaml":true},{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.  \n  \n This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,327],"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.","nodes":[{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.","pos":[0,327],"nodes":[{"content":"This method sends a data buffer to a resource.","pos":[0,46]},{"content":"The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[47,163]},{"content":"The data is not encoded.","pos":[164,188]},{"content":"To receive notification when the data upload completes, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadDataCompleted&gt;</ph> event.","pos":[189,327],"source":" To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event."}]}]},{"pos":[334,539],"content":"This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.","pos":[0,205],"nodes":[{"content":"This method does not block the calling thread while the data is being sent.","pos":[0,75]},{"content":"To send data and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> methods.","pos":[76,205],"source":" To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods."}]}]},{"pos":[546,670],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[677,1070],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,281],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[282,393],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1078,1303],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[258579,259896],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[260084,260129],"yaml":true},{"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[260191,260299],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[260359,260400],"yaml":true},{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"pos":[0,101],"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,101]}]}],"pos":[260465,260567],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[260733,260779],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,256],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[260871,261140],"yaml":true},{"content":"Uploads a data buffer to a resource identified by a URI, using the POST method. This method does not block the calling thread.","nodes":[{"pos":[0,126],"content":"Uploads a data buffer to a resource identified by a URI, using the POST method. This method does not block the calling thread.","nodes":[{"content":"Uploads a data buffer to a resource identified by a URI, using the POST method. This method does not block the calling thread.","pos":[0,126],"nodes":[{"content":"Uploads a data buffer to a resource identified by a URI, using the POST method.","pos":[0,79]},{"content":"This method does not block the calling thread.","pos":[80,126]}]}]}],"pos":[262303,262430],"yaml":true},{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.  \n  \n This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,327],"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.","nodes":[{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.","pos":[0,327],"nodes":[{"content":"This method sends a data buffer to a resource.","pos":[0,46]},{"content":"The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[47,163]},{"content":"The data is not encoded.","pos":[164,188]},{"content":"To receive notification when the data upload completes, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadDataCompleted&gt;</ph> event.","pos":[189,327],"source":" To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event."}]}]},{"pos":[334,539],"content":"This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.","pos":[0,205],"nodes":[{"content":"This method does not block the calling thread while the data is being sent.","pos":[0,75]},{"content":"To send data and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadData%2A&gt;</ph> methods.","pos":[76,205],"source":" To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods."}]}]},{"pos":[546,670],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[677,1070],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,281],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[282,393],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1077,1184],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1192,1417],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[262441,263874],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[264029,264074],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[264134,264175],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[264341,264387],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,256],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[264479,264748],"yaml":true},{"content":"Occurs when an asynchronous data-upload operation completes.","nodes":[{"pos":[0,60],"content":"Occurs when an asynchronous data-upload operation completes.","nodes":[{"content":"Occurs when an asynchronous data-upload operation completes.","pos":[0,60]}]}],"pos":[265817,265878],"yaml":true},{"content":"This event is raised each time an asynchronous data upload operation completes. Asynchronous data uploads are started by calling the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n The <xref:System.Net.UploadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadDataCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,188],"content":"This event is raised each time an asynchronous data upload operation completes. Asynchronous data uploads are started by calling the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous data upload operation completes. Asynchronous data uploads are started by calling the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.","pos":[0,188],"nodes":[{"content":"This event is raised each time an asynchronous data upload operation completes.","pos":[0,79]},{"content":"Asynchronous data uploads are started by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadDataAsync%2A&gt;</ph> methods.","pos":[80,188],"source":" Asynchronous data uploads are started by calling the <xref:System.Net.WebClient.UploadDataAsync%2A> methods."}]}]},{"pos":[195,381],"content":"The <xref:System.Net.UploadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadDataCompletedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.UploadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadDataCompletedEventArgs> class provides the event handler with event data.","pos":[0,186],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadDataCompletedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,85],"source":"The <xref:System.Net.UploadDataCompletedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadDataCompletedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[86,186],"source":" The <xref:System.Net.UploadDataCompletedEventArgs> class provides the event handler with event data."}]}]},{"pos":[388,530],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[265889,266426],"yaml":true,"extradata":"MT"},{"content":"Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object.","nodes":[{"pos":[0,147],"content":"Uploads a data buffer that contains a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array to the URI specified as an asynchronous operation using a task object.","source":"Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object."}],"pos":[268319,268467],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \n  \n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,162],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.","pos":[0,162],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a data buffer has been uploaded to the resource.","pos":[31,162],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource."}]}]},{"pos":[169,357],"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.","nodes":[{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.","pos":[0,188],"nodes":[{"content":"This method sends a data buffer to a resource.","pos":[0,46]},{"content":"The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[47,163]},{"content":"The data is not encoded.","pos":[164,188]}]}]},{"pos":[364,488],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[495,888],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,281],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[282,393],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[895,1002],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1010,1235],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[268478,269729],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[269992,270037],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[270097,270138],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,359],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response received from the resource when the data buffer was uploaded.","pos":[57,293],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded."}]}],"pos":[270224,270594],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[270764,270810],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,256],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[270902,271171],"yaml":true},{"content":"Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object.","nodes":[{"pos":[0,147],"content":"Uploads a data buffer that contains a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array to the URI specified as an asynchronous operation using a task object.","source":"Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object."}],"pos":[272433,272581],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \n  \n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,162],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.","pos":[0,162],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a data buffer has been uploaded to the resource.","pos":[31,162],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource."}]}]},{"pos":[169,357],"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.","nodes":[{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.","pos":[0,188],"nodes":[{"content":"This method sends a data buffer to a resource.","pos":[0,46]},{"content":"The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[47,163]},{"content":"The data is not encoded.","pos":[164,188]}]}]},{"pos":[364,488],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[495,888],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,281],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[282,393],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[895,1002],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1010,1235],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[272592,273843],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[274100,274145],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[274205,274246],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,359],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response received from the resource when the data buffer was uploaded.","pos":[57,293],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded."}]}],"pos":[274332,274702],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[274872,274918],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,256],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[275010,275279],"yaml":true},{"content":"Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object.","nodes":[{"pos":[0,147],"content":"Uploads a data buffer that contains a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array to the URI specified as an asynchronous operation using a task object.","source":"Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object."}],"pos":[276625,276773],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \n  \n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,162],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.","pos":[0,162],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a data buffer has been uploaded to the resource.","pos":[31,162],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource."}]}]},{"pos":[169,357],"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.","nodes":[{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.","pos":[0,188],"nodes":[{"content":"This method sends a data buffer to a resource.","pos":[0,46]},{"content":"The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[47,163]},{"content":"The data is not encoded.","pos":[164,188]}]}]},{"pos":[364,488],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[495,888],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,281],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[282,393],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[896,1121],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[276784,277919],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[278197,278242],"yaml":true},{"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[278304,278412],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[278472,278513],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,359],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response received from the resource when the data buffer was uploaded.","pos":[57,293],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded."}]}],"pos":[278599,278969],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[279139,279185],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,256],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[279277,279546],"yaml":true},{"content":"Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object.","nodes":[{"pos":[0,147],"content":"Uploads a data buffer that contains a <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array to the URI specified as an asynchronous operation using a task object.","source":"Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object."}],"pos":[280874,281022],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \n  \n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,162],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.","pos":[0,162],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the a data buffer has been uploaded to the resource.","pos":[31,162],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource."}]}]},{"pos":[169,357],"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.","nodes":[{"content":"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.","pos":[0,188],"nodes":[{"content":"This method sends a data buffer to a resource.","pos":[0,46]},{"content":"The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[47,163]},{"content":"The data is not encoded.","pos":[164,188]}]}]},{"pos":[364,488],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[495,888],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,281],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[282,393],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[896,1121],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[281033,282168],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the data.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the data.","nodes":[{"content":"The URI of the resource to receive the data.","pos":[0,44]}]}],"pos":[282440,282485],"yaml":true},{"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[282547,282655],"yaml":true},{"content":"The data buffer to send to the resource.","nodes":[{"pos":[0,40],"content":"The data buffer to send to the resource.","nodes":[{"content":"The data buffer to send to the resource.","pos":[0,40]}]}],"pos":[282715,282756],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,359],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response received from the resource when the data buffer was uploaded.","pos":[57,293],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded."}]}],"pos":[282842,283212],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[283382,283428],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,179],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,256],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[283520,283789],"yaml":true},{"content":"Uploads the specified local file to a resource with the specified URI.","nodes":[{"pos":[0,70],"content":"Uploads the specified local file to a resource with the specified URI.","nodes":[{"content":"Uploads the specified local file to a resource with the specified URI.","pos":[0,70]}]}],"pos":[285015,285086],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n The `POST` method is defined by HTTP. If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,194],"content":"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,194],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFile%2A&gt;</ph> method sends a local file to a resource.","pos":[0,86],"source":"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource."},{"content":"This method uses the STOR command to upload an FTP resource.","pos":[87,147]},{"content":"For an HTTP resource, the POST method is used.","pos":[148,194]}]}]},{"pos":[201,379],"content":"This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.","nodes":[{"content":"This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.","pos":[0,178],"nodes":[{"content":"This method blocks while uploading the file.","pos":[0,44]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFileAsync%2A&gt;</ph> methods.","pos":[45,178],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods."}]}]},{"pos":[386,706],"content":"The `POST` method is defined by HTTP. If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"The <ph id=\"ph1\">`POST`</ph> method is defined by HTTP.","pos":[0,37],"source":"The `POST` method is defined by HTTP."},{"content":"If the underlying request does not use HTTP and <ph id=\"ph1\">`POST`</ph> is not understood by the server, the underlying protocol classes determine what occurs.","pos":[38,180],"source":" If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[181,320],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[713,1105],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1113,1338],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[285097,286449],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.","nodes":[{"pos":[0,89],"content":"The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.","nodes":[{"content":"The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.","pos":[0,89],"nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]},{"content":"For example, ftp://localhost/samplefile.txt.","pos":[45,89]}]}]}],"pos":[287899,287989],"yaml":true},{"content":"The file to send to the resource. For example, \"samplefile.txt\".","nodes":[{"pos":[0,64],"content":"The file to send to the resource. For example, \"samplefile.txt\".","nodes":[{"content":"The file to send to the resource. For example, \"samplefile.txt\".","pos":[0,64],"nodes":[{"content":"The file to send to the resource.","pos":[0,33]},{"content":"For example, \"samplefile.txt\".","pos":[34,64]}]}]}],"pos":[288053,288118],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[288175,288271],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[288432,288548],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist.  \n  \n -or-  \n  \n An error occurred while uploading the file.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,262],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid characters, or does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist."},{"pos":[269,273],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[280,323],"content":"An error occurred while uploading the file.","nodes":[{"content":"An error occurred while uploading the file.","pos":[0,43]}]},{"pos":[330,334],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[341,400],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[407,411],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[418,468],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[288640,289131],"yaml":true},{"content":"Uploads the specified local file to a resource with the specified URI.","nodes":[{"pos":[0,70],"content":"Uploads the specified local file to a resource with the specified URI.","nodes":[{"content":"Uploads the specified local file to a resource with the specified URI.","pos":[0,70]}]}],"pos":[290264,290335],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n The `POST` method is defined by HTTP. If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,194],"content":"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,194],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFile%2A&gt;</ph> method sends a local file to a resource.","pos":[0,86],"source":"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource."},{"content":"This method uses the STOR command to upload an FTP resource.","pos":[87,147]},{"content":"For an HTTP resource, the POST method is used.","pos":[148,194]}]}]},{"pos":[201,379],"content":"This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.","nodes":[{"content":"This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.","pos":[0,178],"nodes":[{"content":"This method blocks while uploading the file.","pos":[0,44]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFileAsync%2A&gt;</ph> methods.","pos":[45,178],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods."}]}]},{"pos":[386,706],"content":"The `POST` method is defined by HTTP. If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"The <ph id=\"ph1\">`POST`</ph> method is defined by HTTP.","pos":[0,37],"source":"The `POST` method is defined by HTTP."},{"content":"If the underlying request does not use HTTP and <ph id=\"ph1\">`POST`</ph> is not understood by the server, the underlying protocol classes determine what occurs.","pos":[38,180],"source":" If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[181,320],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[713,1105],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1113,1338],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[290346,291698],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.","nodes":[{"pos":[0,89],"content":"The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.","nodes":[{"content":"The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.","pos":[0,89],"nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]},{"content":"For example, ftp://localhost/samplefile.txt.","pos":[45,89]}]}]}],"pos":[291854,291944],"yaml":true},{"content":"The file to send to the resource. For example, \"samplefile.txt\".","nodes":[{"pos":[0,64],"content":"The file to send to the resource. For example, \"samplefile.txt\".","nodes":[{"content":"The file to send to the resource. For example, \"samplefile.txt\".","pos":[0,64],"nodes":[{"content":"The file to send to the resource.","pos":[0,33]},{"content":"For example, \"samplefile.txt\".","pos":[34,64]}]}]}],"pos":[292008,292073],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[292130,292226],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[292387,292503],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist.  \n  \n -or-  \n  \n An error occurred while uploading the file.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,262],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid characters, or does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist."},{"pos":[269,273],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[280,323],"content":"An error occurred while uploading the file.","nodes":[{"content":"An error occurred while uploading the file.","pos":[0,43]}]},{"pos":[330,334],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[341,400],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[407,411],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[418,468],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[292595,293086],"yaml":true},{"content":"Uploads the specified local file to the specified resource, using the specified method.","nodes":[{"pos":[0,87],"content":"Uploads the specified local file to the specified resource, using the specified method.","nodes":[{"content":"Uploads the specified local file to the specified resource, using the specified method.","pos":[0,87]}]}],"pos":[294303,294391],"yaml":true},{"content":"When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,405],"content":"When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.","nodes":[{"content":"When address specifies an HTTP resource, the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFile%2A&gt;</ph> method sends a local file to a resource using the HTTP method specified in the <ph id=\"ph2\">`method`</ph> parameter and returns any response from the server.","pos":[0,226],"source":"When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server."},{"content":"This method blocks while uploading the file.","pos":[227,271]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFileAsync%2A&gt;</ph> methods.","pos":[272,405],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods."}]},{"pos":[412,713],"content":"If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a verb that is not understood by the server or the <ph id=\"ph2\">`address`</ph> resource, the underlying protocol classes determine what occurs.","pos":[0,161],"source":"If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[162,301],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[720,1112],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1120,1345],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[294402,295759],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the file.","nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]}]}],"pos":[297233,297278],"yaml":true},{"content":"The method used to send the file to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the file to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the file to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[297340,297448],"yaml":true},{"content":"The file to send to the resource.","nodes":[{"pos":[0,33],"content":"The file to send to the resource.","nodes":[{"content":"The file to send to the resource.","pos":[0,33]}]}],"pos":[297512,297546],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[297603,297699],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[297860,297976],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist.  \n  \n -or-  \n  \n An error occurred while uploading the file.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,262],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid characters, or does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist."},{"pos":[269,273],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[280,323],"content":"An error occurred while uploading the file.","nodes":[{"content":"An error occurred while uploading the file.","pos":[0,43]}]},{"pos":[330,334],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[341,400],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[407,411],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[418,468],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[298068,298559],"yaml":true},{"content":"Uploads the specified local file to the specified resource, using the specified method.","nodes":[{"pos":[0,87],"content":"Uploads the specified local file to the specified resource, using the specified method.","nodes":[{"content":"Uploads the specified local file to the specified resource, using the specified method.","pos":[0,87]}]}],"pos":[299758,299846],"yaml":true},{"content":"When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,405],"content":"When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.","nodes":[{"content":"When address specifies an HTTP resource, the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFile%2A&gt;</ph> method sends a local file to a resource using the HTTP method specified in the <ph id=\"ph2\">`method`</ph> parameter and returns any response from the server.","pos":[0,226],"source":"When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server."},{"content":"This method blocks while uploading the file.","pos":[227,271]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFileAsync%2A&gt;</ph> methods.","pos":[272,405],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods."}]},{"pos":[412,713],"content":"If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a verb that is not understood by the server or the <ph id=\"ph2\">`address`</ph> resource, the underlying protocol classes determine what occurs.","pos":[0,161],"source":"If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[162,301],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[720,1112],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1120,1345],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[299857,301214],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file.","nodes":[{"pos":[0,44],"content":"The URI of the resource to receive the file.","nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]}]}],"pos":[301385,301430],"yaml":true},{"content":"The method used to send the file to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the file to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the file to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[301492,301600],"yaml":true},{"content":"The file to send to the resource.","nodes":[{"pos":[0,33],"content":"The file to send to the resource.","nodes":[{"content":"The file to send to the resource.","pos":[0,33]}]}],"pos":[301664,301698],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[301755,301851],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[302012,302128],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist.  \n  \n -or-  \n  \n An error occurred while uploading the file.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,262],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid characters, or does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist."},{"pos":[269,273],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[280,323],"content":"An error occurred while uploading the file.","nodes":[{"content":"An error occurred while uploading the file.","pos":[0,43]}]},{"pos":[330,334],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[341,400],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[407,411],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[418,468],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[302220,302711],"yaml":true},{"content":"Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.","nodes":[{"pos":[0,129],"content":"Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.","nodes":[{"content":"Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.","pos":[0,129],"nodes":[{"content":"Uploads the specified local file to the specified resource, using the POST method.","pos":[0,82]},{"content":"This method does not block the calling thread.","pos":[83,129]}]}]}],"pos":[303874,304004],"yaml":true},{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.  \n  \n This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,248],"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.","nodes":[{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.","pos":[0,248],"nodes":[{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,109]},{"content":"To receive notification when the file upload completes, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFileCompleted&gt;</ph> event.","pos":[110,248],"source":" To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event."}]}]},{"pos":[255,462],"content":"This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.","pos":[0,207],"nodes":[{"content":"This method does not block the calling thread while the file is being sent.","pos":[0,75]},{"content":"To send a file and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFile%2A&gt;</ph> methods.","pos":[76,207],"source":" To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods."}]}]},{"pos":[469,593],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[600,945],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), <ph id=\"ph2\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph3\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,233],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[234,345],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[952,1059],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1067,1292],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[304015,305323],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,181],"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,181],"nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[45,181]}]}]}],"pos":[305482,305664],"yaml":true},{"content":"The file to send to the resource.","nodes":[{"pos":[0,33],"content":"The file to send to the resource.","nodes":[{"content":"The file to send to the resource.","pos":[0,33]}]}],"pos":[305728,305762],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[305928,306044],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,291],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid character, or the specified path to the file does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist."},{"pos":[298,302],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[309,352],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[359,363],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[370,429],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[436,440],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[447,497],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[306136,306656],"yaml":true},{"content":"Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.","nodes":[{"pos":[0,129],"content":"Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.","nodes":[{"content":"Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.","pos":[0,129],"nodes":[{"content":"Uploads the specified local file to the specified resource, using the POST method.","pos":[0,82]},{"content":"This method does not block the calling thread.","pos":[83,129]}]}]}],"pos":[307885,308015],"yaml":true},{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.  \n  \n This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,248],"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.","nodes":[{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.","pos":[0,248],"nodes":[{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,109]},{"content":"To receive notification when the file upload completes, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFileCompleted&gt;</ph> event.","pos":[110,248],"source":" To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event."}]}]},{"pos":[255,462],"content":"This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.","pos":[0,207],"nodes":[{"content":"This method does not block the calling thread while the file is being sent.","pos":[0,75]},{"content":"To send a file and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFile%2A&gt;</ph> methods.","pos":[76,207],"source":" To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods."}]}]},{"pos":[469,593],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[600,945],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), <ph id=\"ph2\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph3\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,233],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[234,345],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[952,1059],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1067,1292],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[308026,309334],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,181],"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,181],"nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[45,181]}]}]}],"pos":[309508,309690],"yaml":true},{"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[309752,309860],"yaml":true},{"content":"The file to send to the resource.","nodes":[{"pos":[0,33],"content":"The file to send to the resource.","nodes":[{"content":"The file to send to the resource.","pos":[0,33]}]}],"pos":[309924,309958],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[310124,310240],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,291],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid character, or the specified path to the file does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist."},{"pos":[298,302],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[309,352],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[359,363],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[370,429],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[436,440],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[447,497],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[310332,310852],"yaml":true},{"content":"Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.","nodes":[{"pos":[0,129],"content":"Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.","nodes":[{"content":"Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.","pos":[0,129],"nodes":[{"content":"Uploads the specified local file to the specified resource, using the POST method.","pos":[0,82]},{"content":"This method does not block the calling thread.","pos":[83,129]}]}]}],"pos":[312147,312277],"yaml":true},{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.  \n  \n This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,248],"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.","nodes":[{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.","pos":[0,248],"nodes":[{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,109]},{"content":"To receive notification when the file upload completes, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFileCompleted&gt;</ph> event.","pos":[110,248],"source":" To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event."}]}]},{"pos":[255,462],"content":"This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.","pos":[0,207],"nodes":[{"content":"This method does not block the calling thread while the file is being sent.","pos":[0,75]},{"content":"To send a file and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFile%2A&gt;</ph> methods.","pos":[76,207],"source":" To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods."}]}]},{"pos":[469,593],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[600,945],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), <ph id=\"ph2\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph3\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,233],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[234,345],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[952,1059],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1067,1292],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[312288,313596],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,181],"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,181],"nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[45,181]}]}]}],"pos":[313788,313970],"yaml":true},{"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[314032,314140],"yaml":true},{"content":"The file to send to the resource.","nodes":[{"pos":[0,33],"content":"The file to send to the resource.","nodes":[{"content":"The file to send to the resource.","pos":[0,33]}]}],"pos":[314204,314238],"yaml":true},{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"pos":[0,101],"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,101]}]}],"pos":[314303,314405],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[314571,314687],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,291],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid character, or the specified path to the file does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist."},{"pos":[298,302],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[309,352],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[359,363],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[370,429],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[436,440],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[447,497],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[314779,315299],"yaml":true},{"content":"Occurs when an asynchronous file-upload operation completes.","nodes":[{"pos":[0,60],"content":"Occurs when an asynchronous file-upload operation completes.","nodes":[{"content":"Occurs when an asynchronous file-upload operation completes.","pos":[0,60]}]}],"pos":[316368,316429],"yaml":true},{"content":"This event is raised each time an asynchronous file upload operation completes. Asynchronous file uploads are started by calling the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n The <xref:System.Net.UploadFileCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadFileCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,188],"content":"This event is raised each time an asynchronous file upload operation completes. Asynchronous file uploads are started by calling the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous file upload operation completes. Asynchronous file uploads are started by calling the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.","pos":[0,188],"nodes":[{"content":"This event is raised each time an asynchronous file upload operation completes.","pos":[0,79]},{"content":"Asynchronous file uploads are started by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadFileAsync%2A&gt;</ph> methods.","pos":[80,188],"source":" Asynchronous file uploads are started by calling the <xref:System.Net.WebClient.UploadFileAsync%2A> methods."}]}]},{"pos":[195,381],"content":"The <xref:System.Net.UploadFileCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadFileCompletedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.UploadFileCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadFileCompletedEventArgs> class provides the event handler with event data.","pos":[0,186],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadFileCompletedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,85],"source":"The <xref:System.Net.UploadFileCompletedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadFileCompletedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[86,186],"source":" The <xref:System.Net.UploadFileCompletedEventArgs> class provides the event handler with event data."}]}]},{"pos":[388,530],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[316440,316977],"yaml":true,"extradata":"MT"},{"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,96],"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","pos":[0,96]}]}],"pos":[318912,319009],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,263],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,263],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the file has been uploaded to the resource.","pos":[31,153],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource."},{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[154,263]}]}]},{"pos":[270,394],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[401,746],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), <ph id=\"ph2\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph3\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,233],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[234,345],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[753,872],"content":"BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,119],"nodes":[{"content":"BY default, this method uses the STOR command to upload an FTP resource.","pos":[0,72]},{"content":"For an HTTP resource, the POST method is used.","pos":[73,119]}]}]},{"pos":[880,1105],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[319020,320139],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,181],"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,181],"nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[45,181]}]}]}],"pos":[320415,320597],"yaml":true},{"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[320659,320767],"yaml":true},{"content":"The local file to send to the resource.","nodes":[{"pos":[0,39],"content":"The local file to send to the resource.","nodes":[{"content":"The local file to send to the resource.","pos":[0,39]}]}],"pos":[320831,320871],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,352],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response received from the resource when the file was uploaded.","pos":[57,286],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded."}]}],"pos":[320957,321320],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[321490,321606],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,291],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid character, or the specified path to the file does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist."},{"pos":[298,302],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[309,352],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[359,363],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[370,429],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[436,440],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[447,497],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[321698,322218],"yaml":true},{"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,96],"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","pos":[0,96]}]}],"pos":[323564,323661],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,263],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,263],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the file has been uploaded to the resource.","pos":[31,153],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource."},{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[154,263]}]}]},{"pos":[270,394],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[401,746],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), <ph id=\"ph2\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph3\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,233],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[234,345],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[753,872],"content":"BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,119],"nodes":[{"content":"BY default, this method uses the STOR command to upload an FTP resource.","pos":[0,72]},{"content":"For an HTTP resource, the POST method is used.","pos":[73,119]}]}]},{"pos":[880,1105],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[323672,324791],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,181],"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,181],"nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[45,181]}]}]}],"pos":[325073,325255],"yaml":true},{"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the data to the resource.","pos":[0,49]},{"content":"If <ph id=\"ph1\">`null`</ph>, the default is POST for http and STOR for ftp.","pos":[50,107],"source":" If `null`, the default is POST for http and STOR for ftp."}]}],"pos":[325317,325425],"yaml":true},{"content":"The local file to send to the resource.","nodes":[{"pos":[0,39],"content":"The local file to send to the resource.","nodes":[{"content":"The local file to send to the resource.","pos":[0,39]}]}],"pos":[325489,325529],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,352],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response received from the resource when the file was uploaded.","pos":[57,286],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded."}]}],"pos":[325615,325978],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[326148,326264],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,291],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid character, or the specified path to the file does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist."},{"pos":[298,302],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[309,352],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[359,363],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[370,429],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[436,440],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[447,497],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[326356,326876],"yaml":true},{"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,96],"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","pos":[0,96]}]}],"pos":[328156,328253],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,263],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,263],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the file has been uploaded to the resource.","pos":[31,153],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource."},{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[154,263]}]}]},{"pos":[270,394],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[401,746],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), <ph id=\"ph2\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph3\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,233],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[234,345],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[753,860],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[868,1093],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[328264,329371],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,181],"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,181],"nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[45,181]}]}]}],"pos":[329638,329820],"yaml":true},{"content":"The local file to send to the resource.","nodes":[{"pos":[0,39],"content":"The local file to send to the resource.","nodes":[{"content":"The local file to send to the resource.","pos":[0,39]}]}],"pos":[329884,329924],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,352],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response received from the resource when the file was uploaded.","pos":[57,286],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded."}]}],"pos":[330010,330373],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[330543,330659],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,291],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid character, or the specified path to the file does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist."},{"pos":[298,302],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[309,352],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[359,363],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[370,429],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[436,440],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[447,497],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[330751,331271],"yaml":true},{"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,96],"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified local file to a resource as an asynchronous operation using a task object.","pos":[0,96]}]}],"pos":[332533,332630],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,263],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,263],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the file has been uploaded to the resource.","pos":[31,153],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource."},{"content":"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[154,263]}]}]},{"pos":[270,394],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[401,746],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), <ph id=\"ph2\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph3\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,233],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[234,345],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[753,860],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[868,1093],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[332641,333748],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,181],"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,181],"nodes":[{"content":"The URI of the resource to receive the file.","pos":[0,44]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[45,181]}]}]}],"pos":[334009,334191],"yaml":true},{"content":"The local file to send to the resource.","nodes":[{"pos":[0,39],"content":"The local file to send to the resource.","nodes":[{"content":"The local file to send to the resource.","pos":[0,39]}]}],"pos":[334255,334295],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,352],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response received from the resource when the file was uploaded.","pos":[57,286],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded."}]}],"pos":[334381,334744],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileName</code> parameter is `null`."}],"pos":[334914,335030],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,291],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, is <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>, contains invalid character, or the specified path to the file does not exist.","source":"<code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist."},{"pos":[298,302],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[309,352],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[359,363],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[370,429],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[436,440],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[447,497],"content":"The <ph id=\"ph1\">`Content-type`</ph> header begins with <ph id=\"ph2\">`multipart`</ph>.","source":"The `Content-type` header begins with `multipart`."}],"pos":[335122,335642],"yaml":true},{"content":"Occurs when an asynchronous upload operation successfully transfers some or all of the data.","nodes":[{"pos":[0,92],"content":"Occurs when an asynchronous upload operation successfully transfers some or all of the data.","nodes":[{"content":"Occurs when an asynchronous upload operation successfully transfers some or all of the data.","pos":[0,92]}]}],"pos":[336798,336891],"yaml":true},{"content":"This event is raised each time an asynchronous upload makes progress. This event is raised when uploads are started using any of the following methods.  \n  \n|Method|Description|  \n|------------|-----------------|  \n|<xref:System.Net.WebClient.UploadDataAsync%2A>|Sends a <xref:System.Byte> array to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadFileAsync%2A>|Sends a local file to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread.|  \n  \n The <xref:System.Net.UploadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.UploadProgressChangedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,151],"content":"This event is raised each time an asynchronous upload makes progress. This event is raised when uploads are started using any of the following methods.","nodes":[{"content":"This event is raised each time an asynchronous upload makes progress. This event is raised when uploads are started using any of the following methods.","pos":[0,151],"nodes":[{"content":"This event is raised each time an asynchronous upload makes progress.","pos":[0,69]},{"content":"This event is raised when uploads are started using any of the following methods.","pos":[70,151]}]}]},{"pos":[158,164],"content":"Method","nodes":[{"content":"Method","pos":[0,6]}]},{"pos":[165,176],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[216,262],"content":"<xref:System.Net.WebClient.UploadDataAsync%2A>","nodes":[]},{"pos":[263,349],"content":"Sends a <xref:System.Byte> array to the resource, without blocking the calling thread.","nodes":[{"content":"Sends a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array to the resource, without blocking the calling thread.","pos":[0,86],"source":"Sends a <xref:System.Byte> array to the resource, without blocking the calling thread."}]},{"pos":[354,400],"content":"<xref:System.Net.WebClient.UploadFileAsync%2A>","nodes":[]},{"pos":[401,473],"content":"Sends a local file to the resource, without blocking the calling thread.","nodes":[{"content":"Sends a local file to the resource, without blocking the calling thread.","pos":[0,72]}]},{"pos":[478,526],"content":"<xref:System.Net.WebClient.UploadValuesAsync%2A>","nodes":[]},{"pos":[527,709],"content":"Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread.","nodes":[{"content":"Sends a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> to the resource and returns a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph> array containing any response, without blocking the calling thread.","pos":[0,182],"source":"Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread."}]},{"pos":[717,907],"content":"The <xref:System.Net.UploadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.UploadProgressChangedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.UploadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.UploadProgressChangedEventArgs> class provides the event handler with event data.","pos":[0,190],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadProgressChangedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,87],"source":"The <xref:System.Net.UploadProgressChangedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadProgressChangedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[88,190],"source":" The <xref:System.Net.UploadProgressChangedEventArgs> class provides the event handler with event data."}]}]},{"pos":[914,1056],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[336902,337971],"yaml":true,"extradata":"MT"},{"content":"Uploads the specified string to the specified resource, using the POST method.","nodes":[{"pos":[0,78],"content":"Uploads the specified string to the specified resource, using the POST method.","nodes":[{"content":"Uploads the specified string to the specified resource, using the POST method.","pos":[0,78]}]}],"pos":[340294,340373],"yaml":true},{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,374],"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","nodes":[{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","pos":[0,374],"nodes":[{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[0,168],"source":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"This method blocks while the string is transmitted.","pos":[169,220]},{"content":"To send a string and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringAsync%2A&gt;</ph> methods.","pos":[221,374],"source":" To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods."}]}]},{"pos":[381,774],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,281],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[282,393],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[781,888],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[896,1121],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[340384,341517],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,183],"content":"The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,183],"nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[47,183]}]}]}],"pos":[342133,342317],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[342377,342404],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"pos":[0,80],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the response sent by the server.","source":"A <xref href=\"System.String\"></xref> containing the response sent by the server."}],"pos":[342461,342542],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[342705,342817],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[342909,343113],"yaml":true},{"content":"Uploads the specified string to the specified resource, using the POST method.","nodes":[{"pos":[0,78],"content":"Uploads the specified string to the specified resource, using the POST method.","nodes":[{"content":"Uploads the specified string to the specified resource, using the POST method.","pos":[0,78]}]}],"pos":[344258,344337],"yaml":true},{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,374],"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","nodes":[{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","pos":[0,374],"nodes":[{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[0,168],"source":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"This method blocks while the string is transmitted.","pos":[169,220]},{"content":"To send a string and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringAsync%2A&gt;</ph> methods.","pos":[221,374],"source":" To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods."}]}]},{"pos":[381,774],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\"), and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,281],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[282,393],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[781,888],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[896,1121],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[344348,345481],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,183],"content":"The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,183],"nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[47,183]}]}]}],"pos":[345635,345819],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[345879,345906],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"pos":[0,80],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the response sent by the server.","source":"A <xref href=\"System.String\"></xref> containing the response sent by the server."}],"pos":[345963,346044],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[346207,346319],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[346411,346615],"yaml":true},{"content":"Uploads the specified string to the specified resource, using the specified method.","nodes":[{"pos":[0,83],"content":"Uploads the specified string to the specified resource, using the specified method.","nodes":[{"content":"Uploads the specified string to the specified resource, using the specified method.","pos":[0,83]}]}],"pos":[347844,347928],"yaml":true},{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,374],"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","nodes":[{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","pos":[0,374],"nodes":[{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[0,168],"source":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"This method blocks while the string is transmitted.","pos":[169,220]},{"content":"To send a string and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringAsync%2A&gt;</ph> methods.","pos":[221,374],"source":" To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods."}]}]},{"pos":[381,773],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[781,1006],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[347939,348955],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the <code>method</code> method.","nodes":[{"pos":[0,148],"content":"The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the <code>method</code> method.","nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"This URI must identify a resource that can accept a request sent with the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> method.","pos":[47,148],"source":" This URI must identify a resource that can accept a request sent with the <code>method</code> method."}]}],"pos":[349586,349735],"yaml":true},{"content":"The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,112],"content":"The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,112],"nodes":[{"content":"The HTTP method used to send the string to the resource.","pos":[0,56]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[57,112]}]}]}],"pos":[349797,349910],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[349970,349997],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"pos":[0,80],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the response sent by the server.","source":"A <xref href=\"System.String\"></xref> containing the response sent by the server."}],"pos":[350054,350135],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[350298,350410],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[202,206],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[213,264],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."}],"pos":[350502,350779],"yaml":true},{"content":"Uploads the specified string to the specified resource, using the specified method.","nodes":[{"pos":[0,83],"content":"Uploads the specified string to the specified resource, using the specified method.","nodes":[{"content":"Uploads the specified string to the specified resource, using the specified method.","pos":[0,83]}]}],"pos":[351990,352074],"yaml":true},{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,374],"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","nodes":[{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","pos":[0,374],"nodes":[{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[0,168],"source":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"This method blocks while the string is transmitted.","pos":[169,220]},{"content":"To send a string and continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringAsync%2A&gt;</ph> methods.","pos":[221,374],"source":" To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods."}]}]},{"pos":[381,773],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[781,1006],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[352085,353101],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the <code>method</code> method.","nodes":[{"pos":[0,148],"content":"The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the <code>method</code> method.","nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"This URI must identify a resource that can accept a request sent with the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> method.","pos":[47,148],"source":" This URI must identify a resource that can accept a request sent with the <code>method</code> method."}]}],"pos":[353270,353419],"yaml":true},{"content":"The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,112],"content":"The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,112],"nodes":[{"content":"The HTTP method used to send the string to the resource.","pos":[0,56]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[57,112]}]}]}],"pos":[353481,353594],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[353654,353681],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"pos":[0,80],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the response sent by the server.","source":"A <xref href=\"System.String\"></xref> containing the response sent by the server."}],"pos":[353738,353819],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[353982,354094],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[202,206],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[213,264],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."}],"pos":[354186,354463],"yaml":true},{"content":"Uploads the specified string to the specified resource. This method does not block the calling thread.","nodes":[{"pos":[0,102],"content":"Uploads the specified string to the specified resource. This method does not block the calling thread.","nodes":[{"content":"Uploads the specified string to the specified resource. This method does not block the calling thread.","pos":[0,102],"nodes":[{"content":"Uploads the specified string to the specified resource.","pos":[0,55]},{"content":"This method does not block the calling thread.","pos":[56,102]}]}]}],"pos":[355638,355741],"yaml":true},{"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,473],"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.","nodes":[{"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.","pos":[0,473],"nodes":[{"content":"This method sends a string to a resource.","pos":[0,41]},{"content":"The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[42,153]},{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[154,322],"source":" Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"To receive notification when the string upload completes, you can add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringCompleted&gt;</ph> event.","pos":[323,473],"source":" To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event."}]}]},{"pos":[480,693],"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.","pos":[0,213],"nodes":[{"content":"This method does not block the calling thread while the string is being sent.","pos":[0,77]},{"content":"To send a string and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadString%2A&gt;</ph> methods.","pos":[78,213],"source":" To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods."}]}]},{"pos":[700,824],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[831,1223],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1230,1337],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1345,1570],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[355752,357338],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,183],"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,183],"nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[47,183]}]}]}],"pos":[357495,357679],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[357739,357766],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[357934,358046],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[358138,358342],"yaml":true},{"content":"Uploads the specified string to the specified resource. This method does not block the calling thread.","nodes":[{"pos":[0,102],"content":"Uploads the specified string to the specified resource. This method does not block the calling thread.","nodes":[{"content":"Uploads the specified string to the specified resource. This method does not block the calling thread.","pos":[0,102],"nodes":[{"content":"Uploads the specified string to the specified resource.","pos":[0,55]},{"content":"This method does not block the calling thread.","pos":[56,102]}]}]}],"pos":[359583,359686],"yaml":true},{"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,473],"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.","nodes":[{"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.","pos":[0,473],"nodes":[{"content":"This method sends a string to a resource.","pos":[0,41]},{"content":"The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[42,153]},{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[154,322],"source":" Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"To receive notification when the string upload completes, you can add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringCompleted&gt;</ph> event.","pos":[323,473],"source":" To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event."}]}]},{"pos":[480,693],"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.","pos":[0,213],"nodes":[{"content":"This method does not block the calling thread while the string is being sent.","pos":[0,77]},{"content":"To send a string and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadString%2A&gt;</ph> methods.","pos":[78,213],"source":" To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods."}]}]},{"pos":[700,824],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[831,1223],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1231,1456],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[359697,361167],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,183],"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,183],"nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[47,183]}]}]}],"pos":[361339,361523],"yaml":true},{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,110],"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,110],"nodes":[{"content":"The HTTP method used to send the file to the resource.","pos":[0,54]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[55,110]}]}]}],"pos":[361585,361696],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[361756,361783],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[361951,362063],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,187],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."},{"pos":[194,198],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[205,264],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[362155,362432],"yaml":true},{"content":"Uploads the specified string to the specified resource. This method does not block the calling thread.","nodes":[{"pos":[0,102],"content":"Uploads the specified string to the specified resource. This method does not block the calling thread.","nodes":[{"content":"Uploads the specified string to the specified resource. This method does not block the calling thread.","pos":[0,102],"nodes":[{"content":"Uploads the specified string to the specified resource.","pos":[0,55]},{"content":"This method does not block the calling thread.","pos":[56,102]}]}]}],"pos":[363739,363842],"yaml":true},{"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,473],"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.","nodes":[{"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.","pos":[0,473],"nodes":[{"content":"This method sends a string to a resource.","pos":[0,41]},{"content":"The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[42,153]},{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[154,322],"source":" Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"To receive notification when the string upload completes, you can add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringCompleted&gt;</ph> event.","pos":[323,473],"source":" To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event."}]}]},{"pos":[480,693],"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.","pos":[0,213],"nodes":[{"content":"This method does not block the calling thread while the string is being sent.","pos":[0,77]},{"content":"To send a string and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadString%2A&gt;</ph> methods.","pos":[78,213],"source":" To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods."}]}]},{"pos":[700,824],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[831,1223],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1231,1456],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[363853,365323],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,183],"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,183],"nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[47,183]}]}]}],"pos":[365513,365697],"yaml":true},{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,110],"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,110],"nodes":[{"content":"The HTTP method used to send the file to the resource.","pos":[0,54]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[55,110]}]}]}],"pos":[365759,365870],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[365930,365957],"yaml":true},{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"pos":[0,101],"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,101]}]}],"pos":[366022,366124],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[366292,366404],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,187],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."},{"pos":[194,198],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[205,264],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[366496,366773],"yaml":true},{"content":"Occurs when an asynchronous string-upload operation completes.","nodes":[{"pos":[0,62],"content":"Occurs when an asynchronous string-upload operation completes.","nodes":[{"content":"Occurs when an asynchronous string-upload operation completes.","pos":[0,62]}]}],"pos":[367854,367917],"yaml":true},{"content":"This event is raised each time an asynchronous string upload operation completes. Asynchronous string uploads are started by calling the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n The <xref:System.Net.UploadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadStringCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,194],"content":"This event is raised each time an asynchronous string upload operation completes. Asynchronous string uploads are started by calling the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous string upload operation completes. Asynchronous string uploads are started by calling the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.","pos":[0,194],"nodes":[{"content":"This event is raised each time an asynchronous string upload operation completes.","pos":[0,81]},{"content":"Asynchronous string uploads are started by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringAsync%2A&gt;</ph> methods.","pos":[82,194],"source":" Asynchronous string uploads are started by calling the <xref:System.Net.WebClient.UploadStringAsync%2A> methods."}]}]},{"pos":[201,391],"content":"The <xref:System.Net.UploadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadStringCompletedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.UploadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadStringCompletedEventArgs> class provides the event handler with event data.","pos":[0,190],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadStringCompletedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,87],"source":"The <xref:System.Net.UploadStringCompletedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadStringCompletedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[88,190],"source":" The <xref:System.Net.UploadStringCompletedEventArgs> class provides the event handler with event data."}]}]},{"pos":[398,540],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[367928,368475],"yaml":true,"extradata":"MT"},{"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,104],"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","pos":[0,104]}]}],"pos":[370434,370539],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,267],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,267],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the string has been uploaded to the resource.","pos":[31,155],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource."},{"content":"The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[156,267]}]}]},{"pos":[274,398],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[405,625],"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.","nodes":[{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.","pos":[0,220],"nodes":[{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[0,168],"source":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"This method blocks while the string is transmitted.","pos":[169,220]}]}]},{"pos":[632,1024],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1032,1257],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[370550,371821],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,183],"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,183],"nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[47,183]}]}]}],"pos":[372095,372279],"yaml":true},{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,110],"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,110],"nodes":[{"content":"The HTTP method used to send the file to the resource.","pos":[0,54]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[55,110]}]}]}],"pos":[372341,372452],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[372512,372539],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,301],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the response sent by the server.","pos":[57,235],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server."}]}],"pos":[372625,372937],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[373109,373221],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,187],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."},{"pos":[194,198],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[205,264],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[373313,373590],"yaml":true},{"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,104],"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","pos":[0,104]}]}],"pos":[374948,375053],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,267],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,267],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the string has been uploaded to the resource.","pos":[31,155],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource."},{"content":"The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[156,267]}]}]},{"pos":[274,398],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[405,625],"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.","nodes":[{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.","pos":[0,220],"nodes":[{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[0,168],"source":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"This method blocks while the string is transmitted.","pos":[169,220]}]}]},{"pos":[632,1024],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1032,1257],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[375064,376335],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,183],"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,183],"nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[47,183]}]}]}],"pos":[376615,376799],"yaml":true},{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,110],"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,110],"nodes":[{"content":"The HTTP method used to send the file to the resource.","pos":[0,54]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[55,110]}]}]}],"pos":[376861,376972],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[377032,377059],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,301],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the response sent by the server.","pos":[57,235],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server."}]}],"pos":[377145,377457],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[377629,377741],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,187],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."},{"pos":[194,198],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[205,264],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[377833,378110],"yaml":true},{"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,104],"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","pos":[0,104]}]}],"pos":[379402,379507],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,267],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,267],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the string has been uploaded to the resource.","pos":[31,155],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource."},{"content":"The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[156,267]}]}]},{"pos":[274,398],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[405,625],"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.","nodes":[{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.","pos":[0,220],"nodes":[{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[0,168],"source":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"This method blocks while the string is transmitted.","pos":[169,220]}]}]},{"pos":[632,1024],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1032,1257],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[379518,380789],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,183],"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,183],"nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[47,183]}]}]}],"pos":[381054,381238],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[381298,381325],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,301],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the response sent by the server.","pos":[57,235],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server."}]}],"pos":[381411,381723],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[381895,382007],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[382099,382303],"yaml":true},{"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","nodes":[{"pos":[0,104],"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified string to the specified resource as an asynchronous operation using a task object.","pos":[0,104]}]}],"pos":[383577,383682],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,267],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,267],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the string has been uploaded to the resource.","pos":[31,155],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource."},{"content":"The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[156,267]}]}]},{"pos":[274,398],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[405,625],"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.","nodes":[{"content":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.","pos":[0,220],"nodes":[{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[0,168],"source":"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"This method blocks while the string is transmitted.","pos":[169,220]}]}]},{"pos":[632,1024],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1032,1257],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[383693,384964],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"pos":[0,183],"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","nodes":[{"content":"The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[0,183],"nodes":[{"content":"The URI of the resource to receive the string.","pos":[0,46]},{"content":"For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.","pos":[47,183]}]}]}],"pos":[385223,385407],"yaml":true},{"content":"The string to be uploaded.","nodes":[{"pos":[0,26],"content":"The string to be uploaded.","nodes":[{"content":"The string to be uploaded.","pos":[0,26]}]}],"pos":[385467,385494],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,301],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the response sent by the server.","pos":[57,235],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server."}]}],"pos":[385580,385892],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[386064,386176],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[386268,386472],"yaml":true},{"content":"Uploads the specified name/value collection to the resource identified by the specified URI.","nodes":[{"pos":[0,92],"content":"Uploads the specified name/value collection to the resource identified by the specified URI.","nodes":[{"content":"Uploads the specified name/value collection to the resource identified by the specified URI.","pos":[0,92]}]}],"pos":[387860,387953],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,314],"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.","nodes":[{"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.","pos":[0,314],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> method sends a <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> to a server.","pos":[0,133],"source":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server."},{"content":"This method blocks while uploading the data.","pos":[134,178]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesAsync%2A&gt;</ph> methods.","pos":[179,314],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods."}]}]},{"pos":[321,574],"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","pos":[0,253],"nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,113]},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[114,253],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]}]},{"pos":[581,721],"content":"If the Content-type header is <ph id=\"ph1\">`null`</ph>, the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> method sets it to \"application/x-www-form-urlencoded\".","source":"If the Content-type header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to \"application/x-www-form-urlencoded\"."},{"pos":[728,1120],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1127,1234],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1242,1467],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[387964,389449],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection.","nodes":[{"pos":[0,50],"content":"The URI of the resource to receive the collection.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]}]}],"pos":[390338,390389],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[390486,390587],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[390644,390740],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[390903,391015],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\".","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,165],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[172,176],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[183,242],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[249,253],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[260,303],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[310,314],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[321,400],"content":"The <ph id=\"ph1\">`Content-type`</ph> header is not <ph id=\"ph2\">`null`</ph> or \"application/x-www-form-urlencoded\".","source":"The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."}],"pos":[391107,391530],"yaml":true},{"content":"Uploads the specified name/value collection to the resource identified by the specified URI.","nodes":[{"pos":[0,92],"content":"Uploads the specified name/value collection to the resource identified by the specified URI.","nodes":[{"content":"Uploads the specified name/value collection to the resource identified by the specified URI.","pos":[0,92]}]}],"pos":[392825,392918],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,314],"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.","nodes":[{"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.","pos":[0,314],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> method sends a <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> to a server.","pos":[0,133],"source":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server."},{"content":"This method blocks while uploading the data.","pos":[134,178]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesAsync%2A&gt;</ph> methods.","pos":[179,314],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods."}]}]},{"pos":[321,574],"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","pos":[0,253],"nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,113]},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[114,253],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]}]},{"pos":[581,721],"content":"If the Content-type header is <ph id=\"ph1\">`null`</ph>, the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> method sets it to \"application/x-www-form-urlencoded\".","source":"If the Content-type header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to \"application/x-www-form-urlencoded\"."},{"pos":[728,1120],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1127,1234],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1242,1467],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[392929,394414],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection.","nodes":[{"pos":[0,50],"content":"The URI of the resource to receive the collection.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]}]}],"pos":[394612,394663],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[394760,394861],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[394918,395014],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[395177,395289],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\".","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,165],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[172,176],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[183,242],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[249,253],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[260,303],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[310,314],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[321,400],"content":"The <ph id=\"ph1\">`Content-type`</ph> header is not <ph id=\"ph2\">`null`</ph> or \"application/x-www-form-urlencoded\".","source":"The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."}],"pos":[395381,395804],"yaml":true},{"content":"Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.","nodes":[{"pos":[0,120],"content":"Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.","nodes":[{"content":"Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.","pos":[0,120]}]}],"pos":[397183,397304],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n If the `Content-type` header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to `application/x-www-form-urlencoded`.  \n  \n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,410],"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> method sends a <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> to a resource using the method specified in the <ph id=\"ph3\">`method`</ph> parameter and returns any response from the server.","pos":[0,229],"source":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server."},{"content":"This method blocks while uploading the data.","pos":[230,274]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesAsync%2A&gt;</ph> methods.","pos":[275,410],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods."}]},{"pos":[417,559],"content":"If the <ph id=\"ph1\">`Content-type`</ph> header is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> method sets it to <ph id=\"ph4\">`application/x-www-form-urlencoded`</ph>.","source":"If the `Content-type` header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to `application/x-www-form-urlencoded`."},{"pos":[566,841],"content":"If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,135],"source":"If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[136,275],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[848,1240],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1248,1473],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[397315,398802],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection.","nodes":[{"pos":[0,50],"content":"The URI of the resource to receive the collection.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]}]}],"pos":[399715,399766],"yaml":true},{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,110],"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,110],"nodes":[{"content":"The HTTP method used to send the file to the resource.","pos":[0,54]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[55,110]}]}]}],"pos":[399828,399939],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[400036,400137],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[400194,400290],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[400453,400565],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,165],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[172,176],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[183,226],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[233,237],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[244,303],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[310,314],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[321,414],"content":"The <ph id=\"ph1\">`Content-type`</ph> header value is not <ph id=\"ph2\">`null`</ph> and is not <ph id=\"ph3\">`application/x-www-form-urlencoded`</ph>.","source":"The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`."}],"pos":[400657,401092],"yaml":true},{"content":"Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.","nodes":[{"pos":[0,120],"content":"Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.","nodes":[{"content":"Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.","pos":[0,120]}]}],"pos":[402453,402574],"yaml":true},{"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n If the `Content-type` header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to `application/x-www-form-urlencoded`.  \n  \n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,410],"content":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> method sends a <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> to a resource using the method specified in the <ph id=\"ph3\">`method`</ph> parameter and returns any response from the server.","pos":[0,229],"source":"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server."},{"content":"This method blocks while uploading the data.","pos":[230,274]},{"content":"To continue executing while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesAsync%2A&gt;</ph> methods.","pos":[275,410],"source":" To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods."}]},{"pos":[417,559],"content":"If the <ph id=\"ph1\">`Content-type`</ph> header is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> method sets it to <ph id=\"ph4\">`application/x-www-form-urlencoded`</ph>.","source":"If the `Content-type` header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to `application/x-www-form-urlencoded`."},{"pos":[566,841],"content":"If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,135],"source":"If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[136,275],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[848,1240],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1248,1473],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[402585,404072],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection.","nodes":[{"pos":[0,50],"content":"The URI of the resource to receive the collection.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]}]}],"pos":[404285,404336],"yaml":true},{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,110],"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,110],"nodes":[{"content":"The HTTP method used to send the file to the resource.","pos":[0,54]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[55,110]}]}]}],"pos":[404398,404509],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[404606,404707],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the body of the response from the resource.","source":"A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource."}],"pos":[404764,404860],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[405023,405135],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,165],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[172,176],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[183,226],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[233,237],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[244,303],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[310,314],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[321,414],"content":"The <ph id=\"ph1\">`Content-type`</ph> header value is not <ph id=\"ph2\">`null`</ph> and is not <ph id=\"ph3\">`application/x-www-form-urlencoded`</ph>.","source":"The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`."}],"pos":[405227,405662],"yaml":true},{"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI. This method does not block the calling thread.","nodes":[{"pos":[0,151],"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI. This method does not block the calling thread.","nodes":[{"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI. This method does not block the calling thread.","pos":[0,151],"nodes":[{"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI.","pos":[0,104]},{"content":"This method does not block the calling thread.","pos":[105,151]}]}]}],"pos":[406987,407139],"yaml":true},{"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,473],"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.","nodes":[{"content":"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.","pos":[0,473],"nodes":[{"content":"This method sends a string to a resource.","pos":[0,41]},{"content":"The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[42,153]},{"content":"Before uploading the string, this method converts it to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array using the encoding specified in the <ph id=\"ph2\">&lt;xref:System.Net.WebClient.Encoding%2A&gt;</ph> property.","pos":[154,322],"source":" Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property."},{"content":"To receive notification when the string upload completes, you can add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadStringCompleted&gt;</ph> event.","pos":[323,473],"source":" To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event."}]}]},{"pos":[480,693],"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.","pos":[0,213],"nodes":[{"content":"This method does not block the calling thread while the string is being sent.","pos":[0,77]},{"content":"To send a string and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadString%2A&gt;</ph> methods.","pos":[78,213],"source":" To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods."}]}]},{"pos":[700,824],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[831,1223],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1230,1337],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1345,1570],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[407150,408736],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the default method.","nodes":[{"pos":[0,140],"content":"The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the default method.","nodes":[{"content":"The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the default method.","pos":[0,140],"nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]},{"content":"This URI must identify a resource that can accept a request sent with the default method.","pos":[51,140]}]}]}],"pos":[408937,409078],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[409175,409276],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[409444,409556],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]}],"pos":[409648,409852],"yaml":true},{"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread.","nodes":[{"pos":[0,179],"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread.","nodes":[{"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread.","pos":[0,179],"nodes":[{"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method.","pos":[0,132]},{"content":"This method does not block the calling thread.","pos":[133,179]}]}]}],"pos":[411243,411423],"yaml":true},{"content":"This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource. Use this method to send form data to a URI for processing. The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \"application/x-www-form-urlencoded\". The header is set correctly by default. The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection.  \n  \n If the `method` method is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,591],"content":"This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource. Use this method to send form data to a URI for processing. The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \"application/x-www-form-urlencoded\". The header is set correctly by default. The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection.","nodes":[{"content":"This method sends the data contained in a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> to the <ph id=\"ph2\">`address`</ph> resource.","pos":[0,126],"source":"This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource."},{"content":"Use this method to send form data to a URI for processing.","pos":[127,185]},{"content":"The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \"application/x-www-form-urlencoded\".","pos":[186,322]},{"content":"The header is set correctly by default.","pos":[323,362]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesAsync%2A&gt;</ph> methods throw a <ph id=\"ph2\">&lt;xref:System.Net.WebException&gt;</ph> if you call this method with a different Content-Type header value set in the <ph id=\"ph3\">&lt;xref:System.Net.WebClient.Headers%2A&gt;</ph> collection.","pos":[363,591],"source":" The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection."}]},{"pos":[598,848],"content":"If the `method` method is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> method is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,110],"source":"If the `method` method is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[111,250],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[855,1163],"content":"The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.","nodes":[{"content":"The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.","pos":[0,308],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,162],"source":"The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool."},{"content":"To receive notification when the upload operation completes, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesCompleted&gt;</ph> event.","pos":[163,308],"source":" To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event."}]}]},{"pos":[1170,1383],"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.","pos":[0,213],"nodes":[{"content":"This method does not block the calling thread while the string is being sent.","pos":[0,77]},{"content":"To send a string and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> methods.","pos":[78,213],"source":" To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods."}]}]},{"pos":[1390,1514],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[1521,1903],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not empty, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,382],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`."}]},{"pos":[1911,2135],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,222],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,214],"source":" For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[411434,413589],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the <code>method</code> method.","nodes":[{"pos":[0,152],"content":"The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the <code>method</code> method.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]},{"content":"This URI must identify a resource that can accept a request sent with the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> method.","pos":[51,152],"source":" This URI must identify a resource that can accept a request sent with the <code>method</code> method."}]}],"pos":[413805,413958],"yaml":true},{"content":"The method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,107],"content":"The method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,107],"nodes":[{"content":"The method used to send the string to the resource.","pos":[0,51]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[52,107]}]}]}],"pos":[414020,414128],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[414225,414326],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[414494,414606],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[202,206],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[213,264],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."}],"pos":[414698,414975],"yaml":true},{"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.","nodes":[{"pos":[0,279],"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.","nodes":[{"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.","pos":[0,279],"nodes":[{"content":"Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method.","pos":[0,132]},{"content":"This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.","pos":[133,279]}]}]}],"pos":[416432,416712],"yaml":true},{"content":"This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource. Use this method to send form data to a URI for processing. The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \"application/x-www-form-urlencoded\". The header is set correctly by default. The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection.  \n  \n If the `method` method is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,591],"content":"This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource. Use this method to send form data to a URI for processing. The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \"application/x-www-form-urlencoded\". The header is set correctly by default. The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection.","nodes":[{"content":"This method sends the data contained in a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> to the <ph id=\"ph2\">`address`</ph> resource.","pos":[0,126],"source":"This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource."},{"content":"Use this method to send form data to a URI for processing.","pos":[127,185]},{"content":"The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \"application/x-www-form-urlencoded\".","pos":[186,322]},{"content":"The header is set correctly by default.","pos":[323,362]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesAsync%2A&gt;</ph> methods throw a <ph id=\"ph2\">&lt;xref:System.Net.WebException&gt;</ph> if you call this method with a different Content-Type header value set in the <ph id=\"ph3\">&lt;xref:System.Net.WebClient.Headers%2A&gt;</ph> collection.","pos":[363,591],"source":" The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection."}]},{"pos":[598,848],"content":"If the `method` method is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the <ph id=\"ph1\">`method`</ph> method is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,110],"source":"If the `method` method is not understood by the server, the underlying protocol classes determine what occurs."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[111,250],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]},{"pos":[855,1163],"content":"The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.","nodes":[{"content":"The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.","pos":[0,308],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,162],"source":"The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool."},{"content":"To receive notification when the upload operation completes, add an event handler to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesCompleted&gt;</ph> event.","pos":[163,308],"source":" To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event."}]}]},{"pos":[1170,1383],"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.","nodes":[{"content":"This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.","pos":[0,213],"nodes":[{"content":"This method does not block the calling thread while the string is being sent.","pos":[0,77]},{"content":"To send a string and block while waiting for the server's response, use one of the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValues%2A&gt;</ph> methods.","pos":[78,213],"source":" To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods."}]}]},{"pos":[1390,1514],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[1521,1903],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not empty, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,382],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`."}]},{"pos":[1911,2135],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,222],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,214],"source":" For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[416723,418878],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the <code>method</code> method.","nodes":[{"pos":[0,152],"content":"The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the <code>method</code> method.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]},{"content":"This URI must identify a resource that can accept a request sent with the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> method.","pos":[51,152],"source":" This URI must identify a resource that can accept a request sent with the <code>method</code> method."}]}],"pos":[419112,419265],"yaml":true},{"content":"The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,112],"content":"The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,112],"nodes":[{"content":"The HTTP method used to send the string to the resource.","pos":[0,56]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[57,112]}]}]}],"pos":[419327,419440],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[419537,419638],"yaml":true},{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"pos":[0,101],"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","nodes":[{"content":"A user-defined object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,101]}]}],"pos":[419703,419805],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[419973,420085],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.","nodes":[{"pos":[0,118],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,195],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[202,206],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[213,264],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."}],"pos":[420177,420454],"yaml":true},{"content":"Occurs when an asynchronous upload of a name/value collection completes.","nodes":[{"pos":[0,72],"content":"Occurs when an asynchronous upload of a name/value collection completes.","nodes":[{"content":"Occurs when an asynchronous upload of a name/value collection completes.","pos":[0,72]}]}],"pos":[421535,421608],"yaml":true},{"content":"This event is raised each time an asynchronous upload of a <xref:System.Collections.Specialized.NameValueCollection> object's data completes. These uploads are started by calling the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n The <xref:System.Net.UploadValuesCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadValuesCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,240],"content":"This event is raised each time an asynchronous upload of a <xref:System.Collections.Specialized.NameValueCollection> object's data completes. These uploads are started by calling the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous upload of a <xref:System.Collections.Specialized.NameValueCollection> object's data completes. These uploads are started by calling the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.","pos":[0,240],"nodes":[{"content":"This event is raised each time an asynchronous upload of a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.NameValueCollection&gt;</ph> object's data completes.","pos":[0,141],"source":"This event is raised each time an asynchronous upload of a <xref:System.Collections.Specialized.NameValueCollection> object's data completes."},{"content":"These uploads are started by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.UploadValuesAsync%2A&gt;</ph> methods.","pos":[142,240],"source":" These uploads are started by calling the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods."}]}]},{"pos":[247,437],"content":"The <xref:System.Net.UploadValuesCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadValuesCompletedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.UploadValuesCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadValuesCompletedEventArgs> class provides the event handler with event data.","pos":[0,190],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadValuesCompletedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,87],"source":"The <xref:System.Net.UploadValuesCompletedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.UploadValuesCompletedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[88,190],"source":" The <xref:System.Net.UploadValuesCompletedEventArgs> class provides the event handler with event data."}]}]},{"pos":[444,586],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[421619,422212],"yaml":true,"extradata":"MT"},{"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","nodes":[{"pos":[0,141],"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","pos":[0,141]}]}],"pos":[423857,423999],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,297],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,297],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the name/value collection has been uploaded to the resource.","pos":[31,170],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource."},{"content":"The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[171,297]}]}]},{"pos":[304,428],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[435,688],"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","pos":[0,253],"nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,113]},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[114,253],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]}]},{"pos":[695,792],"content":"If the Content-type header is <ph id=\"ph1\">`null`</ph>, this method sets it to \"application/x-www-form-urlencoded\".","source":"If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\"."},{"pos":[799,1191],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1198,1305],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1313,1538],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[424010,425568],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection.","nodes":[{"pos":[0,50],"content":"The URI of the resource to receive the collection.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]}]}],"pos":[425892,425943],"yaml":true},{"content":"The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,116],"content":"The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,116],"nodes":[{"content":"The HTTP method used to send the collection to the resource.","pos":[0,60]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[61,116]}]}]}],"pos":[426005,426122],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[426219,426320],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,305],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the response sent by the server.","pos":[57,239],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server."}]}],"pos":[426406,426722],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[426894,427006],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\".","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,188],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."},{"pos":[195,199],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[206,265],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[272,276],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[283,326],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[333,337],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[344,423],"content":"The <ph id=\"ph1\">`Content-type`</ph> header is not <ph id=\"ph2\">`null`</ph> or \"application/x-www-form-urlencoded\".","source":"The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."}],"pos":[427098,427544],"yaml":true},{"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","nodes":[{"pos":[0,141],"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","pos":[0,141]}]}],"pos":[428986,429128],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,297],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,297],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the name/value collection has been uploaded to the resource.","pos":[31,170],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource."},{"content":"The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[171,297]}]}]},{"pos":[304,428],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[435,688],"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","pos":[0,253],"nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,113]},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[114,253],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]}]},{"pos":[695,792],"content":"If the Content-type header is <ph id=\"ph1\">`null`</ph>, this method sets it to \"application/x-www-form-urlencoded\".","source":"If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\"."},{"pos":[799,1191],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1198,1305],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1313,1538],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[429139,430697],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection.","nodes":[{"pos":[0,50],"content":"The URI of the resource to receive the collection.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]}]}],"pos":[431006,431057],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[431154,431255],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,305],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the response sent by the server.","pos":[57,239],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server."}]}],"pos":[431341,431657],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[431829,431941],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\".","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,196],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[203,207],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[214,257],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[264,268],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[275,354],"content":"The <ph id=\"ph1\">`Content-type`</ph> header is not <ph id=\"ph2\">`null`</ph> or \"application/x-www-form-urlencoded\".","source":"The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."}],"pos":[432033,432406],"yaml":true},{"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","nodes":[{"pos":[0,141],"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","pos":[0,141]}]}],"pos":[433830,433972],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,297],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,297],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the name/value collection has been uploaded to the resource.","pos":[31,170],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource."},{"content":"The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[171,297]}]}]},{"pos":[304,428],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[435,688],"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","pos":[0,253],"nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,113]},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[114,253],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]}]},{"pos":[695,792],"content":"If the Content-type header is <ph id=\"ph1\">`null`</ph>, this method sets it to \"application/x-www-form-urlencoded\".","source":"If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\"."},{"pos":[799,1191],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1198,1305],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1313,1538],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[433983,435541],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection.","nodes":[{"pos":[0,50],"content":"The URI of the resource to receive the collection.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]}]}],"pos":[435844,435895],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[435992,436093],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,305],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the response sent by the server.","pos":[57,239],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server."}]}],"pos":[436179,436495],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[436667,436779],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`.","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,180],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[187,191],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[198,257],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[264,268],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[275,368],"content":"The <ph id=\"ph1\">`Content-type`</ph> header value is not <ph id=\"ph2\">`null`</ph> and is not <ph id=\"ph3\">`application/x-www-form-urlencoded`</ph>.","source":"The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`."}],"pos":[436871,437256],"yaml":true},{"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","nodes":[{"pos":[0,141],"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","nodes":[{"content":"Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.","pos":[0,141]}]}],"pos":[438746,438888],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,297],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[0,297],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the name/value collection has been uploaded to the resource.","pos":[31,170],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource."},{"content":"The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.","pos":[171,297]}]}]},{"pos":[304,428],"content":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.","nodes":[{"content":"Asynchronous operations that have not completed can be canceled using the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.CancelAsync%2A&gt;</ph> method.","pos":[0,124],"source":"Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method."}]},{"pos":[435,688],"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.","pos":[0,253],"nodes":[{"content":"If the underlying request is not understood by the server, the underlying protocol classes determine what occurs.","pos":[0,113]},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Net.WebException&gt;</ph> is thrown with the <ph id=\"ph2\">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to indicate the error.","pos":[114,253],"source":" Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error."}]}]},{"pos":[695,792],"content":"If the Content-type header is <ph id=\"ph1\">`null`</ph>, this method sets it to \"application/x-www-form-urlencoded\".","source":"If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\"."},{"pos":[799,1191],"content":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> property is not an empty string (\"\") and <ph id=\"ph2\">`address`</ph> does not contain an absolute URI, <ph id=\"ph3\">`address`</ph> must be a relative URI that is combined with <ph id=\"ph4\">&lt;xref:System.Net.WebClient.BaseAddress%2A&gt;</ph> to form the absolute URI of the requested data.","pos":[0,280],"source":"If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.QueryString%2A&gt;</ph> property is not an empty string, it is appended to <ph id=\"ph2\">`address`</ph>.","pos":[281,392],"source":" If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`."}]},{"pos":[1198,1305],"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","nodes":[{"content":"This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.","pos":[0,107],"nodes":[{"content":"This method uses the STOR command to upload an FTP resource.","pos":[0,60]},{"content":"For an HTTP resource, the POST method is used.","pos":[61,107]}]}]},{"pos":[1313,1538],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[438899,440457],"yaml":true,"extradata":"MT"},{"content":"The URI of the resource to receive the collection.","nodes":[{"pos":[0,50],"content":"The URI of the resource to receive the collection.","nodes":[{"content":"The URI of the resource to receive the collection.","pos":[0,50]}]}],"pos":[440775,440826],"yaml":true},{"content":"The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"pos":[0,116],"content":"The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.","nodes":[{"content":"The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.","pos":[0,116],"nodes":[{"content":"The HTTP method used to send the collection to the resource.","pos":[0,60]},{"content":"If null, the default is POST for http and STOR for ftp.","pos":[61,116]}]}]}],"pos":[440888,441005],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> to send to the resource.","source":"The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource."}],"pos":[441102,441203],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,305],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the response sent by the server.","pos":[57,239],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server."}]}],"pos":[441289,441605],"yaml":true},{"content":"The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>data</code> parameter is `null`."}],"pos":[441777,441889],"yaml":true},{"content":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\".","nodes":[{"pos":[0,119],"content":"The URI formed by combining <ph id=\"ph1\">&lt;xref href=\"System.Net.WebClient.BaseAddress\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid."},{"pos":[126,130],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[137,188],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be used to send content.","source":"<code>method</code> cannot be used to send content."},{"pos":[195,199],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[206,265],"content":"There was no response from the server hosting the resource.","nodes":[{"content":"There was no response from the server hosting the resource.","pos":[0,59]}]},{"pos":[272,276],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[283,326],"content":"An error occurred while opening the stream.","nodes":[{"content":"An error occurred while opening the stream.","pos":[0,43]}]},{"pos":[333,337],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[344,423],"content":"The <ph id=\"ph1\">`Content-type`</ph> header is not <ph id=\"ph2\">`null`</ph> or \"application/x-www-form-urlencoded\".","source":"The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."}],"pos":[441981,442427],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that controls whether the <xref href=\"System.Net.CredentialCache.DefaultCredentials\"></xref> are sent with requests.","nodes":[{"pos":[0,173],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that controls whether the <ph id=\"ph2\">&lt;xref href=\"System.Net.CredentialCache.DefaultCredentials\"&gt;&lt;/xref&gt;</ph> are sent with requests.","source":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that controls whether the <xref href=\"System.Net.CredentialCache.DefaultCredentials\"></xref> are sent with requests."}],"pos":[443586,443760],"yaml":true},{"content":"Set this property to `true` when requests made by this <xref:System.Net.WebClient> object should, if requested by the server, be authenticated using the default credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref:System.Net.WebClient.Credentials%2A> property to the credentials of the client on whose behalf the request is made.","nodes":[{"pos":[0,520],"content":"Set this property to `true` when requests made by this <xref:System.Net.WebClient> object should, if requested by the server, be authenticated using the default credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref:System.Net.WebClient.Credentials%2A> property to the credentials of the client on whose behalf the request is made.","nodes":[{"content":"Set this property to <ph id=\"ph1\">`true`</ph> when requests made by this <ph id=\"ph2\">&lt;xref:System.Net.WebClient&gt;</ph> object should, if requested by the server, be authenticated using the default credentials of the currently logged on user.","pos":[0,205],"source":"Set this property to `true` when requests made by this <xref:System.Net.WebClient> object should, if requested by the server, be authenticated using the default credentials of the currently logged on user."},{"content":"For client applications, this is the desired behavior in most scenarios.","pos":[206,278]},{"content":"For middle tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.Credentials%2A&gt;</ph> property to the credentials of the client on whose behalf the request is made.","pos":[279,520],"source":" For middle tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref:System.Net.WebClient.Credentials%2A> property to the credentials of the client on whose behalf the request is made."}]}],"pos":[443771,444292],"yaml":true,"extradata":"MT"},{"content":"`true` if the default credentials are used; otherwise `false`. The default value is `false`.","nodes":[{"pos":[0,92],"content":"`true` if the default credentials are used; otherwise `false`. The default value is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the default credentials are used; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,62],"source":"`true` if the default credentials are used; otherwise `false`."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[63,92],"source":" The default value is `false`."}]}],"pos":[444879,444974],"yaml":true},{"content":"Occurs when an asynchronous operation to write data to a resource using a write stream is closed.","nodes":[{"pos":[0,97],"content":"Occurs when an asynchronous operation to write data to a resource using a write stream is closed.","nodes":[{"content":"Occurs when an asynchronous operation to write data to a resource using a write stream is closed.","pos":[0,97]}]}],"pos":[446088,446186],"yaml":true},{"content":"This event is raised each time an asynchronous operation used to write data to a resource using a write stream is closed. These operations result from calls to the <xref:System.Net.WebClient.OpenWriteTaskAsync%2A> methods.  \n  \n The <xref:System.Net.WriteStreamClosedEventHandler> is the delegate for this event. The <xref:System.Net.WriteStreamClosedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,222],"content":"This event is raised each time an asynchronous operation used to write data to a resource using a write stream is closed. These operations result from calls to the <xref:System.Net.WebClient.OpenWriteTaskAsync%2A> methods.","nodes":[{"content":"This event is raised each time an asynchronous operation used to write data to a resource using a write stream is closed. These operations result from calls to the <xref:System.Net.WebClient.OpenWriteTaskAsync%2A> methods.","pos":[0,222],"nodes":[{"content":"This event is raised each time an asynchronous operation used to write data to a resource using a write stream is closed.","pos":[0,121]},{"content":"These operations result from calls to the <ph id=\"ph1\">&lt;xref:System.Net.WebClient.OpenWriteTaskAsync%2A&gt;</ph> methods.","pos":[122,222],"source":" These operations result from calls to the <xref:System.Net.WebClient.OpenWriteTaskAsync%2A> methods."}]}]},{"pos":[229,411],"content":"The <xref:System.Net.WriteStreamClosedEventHandler> is the delegate for this event. The <xref:System.Net.WriteStreamClosedEventArgs> class provides the event handler with event data.","nodes":[{"content":"The <xref:System.Net.WriteStreamClosedEventHandler> is the delegate for this event. The <xref:System.Net.WriteStreamClosedEventArgs> class provides the event handler with event data.","pos":[0,182],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WriteStreamClosedEventHandler&gt;</ph> is the delegate for this event.","pos":[0,83],"source":"The <xref:System.Net.WriteStreamClosedEventHandler> is the delegate for this event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WriteStreamClosedEventArgs&gt;</ph> class provides the event handler with event data.","pos":[84,182],"source":" The <xref:System.Net.WriteStreamClosedEventArgs> class provides the event handler with event data."}]}]},{"pos":[418,560],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[446197,446764],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.WebClient\n  commentId: T:System.Net.WebClient\n  id: WebClient\n  children:\n  - System.Net.WebClient.#ctor\n  - System.Net.WebClient.AllowReadStreamBuffering\n  - System.Net.WebClient.AllowWriteStreamBuffering\n  - System.Net.WebClient.BaseAddress\n  - System.Net.WebClient.CachePolicy\n  - System.Net.WebClient.CancelAsync\n  - System.Net.WebClient.Credentials\n  - System.Net.WebClient.DownloadData(System.String)\n  - System.Net.WebClient.DownloadData(System.Uri)\n  - System.Net.WebClient.DownloadDataAsync(System.Uri)\n  - System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)\n  - System.Net.WebClient.DownloadDataCompleted\n  - System.Net.WebClient.DownloadDataTaskAsync(System.String)\n  - System.Net.WebClient.DownloadDataTaskAsync(System.Uri)\n  - System.Net.WebClient.DownloadFile(System.Uri,System.String)\n  - System.Net.WebClient.DownloadFile(System.String,System.String)\n  - System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)\n  - System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)\n  - System.Net.WebClient.DownloadFileCompleted\n  - System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)\n  - System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)\n  - System.Net.WebClient.DownloadProgressChanged\n  - System.Net.WebClient.DownloadString(System.String)\n  - System.Net.WebClient.DownloadString(System.Uri)\n  - System.Net.WebClient.DownloadStringAsync(System.Uri)\n  - System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)\n  - System.Net.WebClient.DownloadStringCompleted\n  - System.Net.WebClient.DownloadStringTaskAsync(System.String)\n  - System.Net.WebClient.DownloadStringTaskAsync(System.Uri)\n  - System.Net.WebClient.Encoding\n  - System.Net.WebClient.GetWebRequest(System.Uri)\n  - System.Net.WebClient.GetWebResponse(System.Net.WebRequest)\n  - System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)\n  - System.Net.WebClient.Headers\n  - System.Net.WebClient.IsBusy\n  - System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)\n  - System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)\n  - System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)\n  - System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)\n  - System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)\n  - System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)\n  - System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)\n  - System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)\n  - System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)\n  - System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)\n  - System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)\n  - System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)\n  - System.Net.WebClient.OpenRead(System.String)\n  - System.Net.WebClient.OpenRead(System.Uri)\n  - System.Net.WebClient.OpenReadAsync(System.Uri)\n  - System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)\n  - System.Net.WebClient.OpenReadCompleted\n  - System.Net.WebClient.OpenReadTaskAsync(System.String)\n  - System.Net.WebClient.OpenReadTaskAsync(System.Uri)\n  - System.Net.WebClient.OpenWrite(System.String)\n  - System.Net.WebClient.OpenWrite(System.Uri)\n  - System.Net.WebClient.OpenWrite(System.String,System.String)\n  - System.Net.WebClient.OpenWrite(System.Uri,System.String)\n  - System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)\n  - System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)\n  - System.Net.WebClient.OpenWriteAsync(System.Uri)\n  - System.Net.WebClient.OpenWriteCompleted\n  - System.Net.WebClient.OpenWriteTaskAsync(System.String)\n  - System.Net.WebClient.OpenWriteTaskAsync(System.Uri)\n  - System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)\n  - System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)\n  - System.Net.WebClient.Proxy\n  - System.Net.WebClient.QueryString\n  - System.Net.WebClient.ResponseHeaders\n  - System.Net.WebClient.UploadData(System.String,System.Byte[])\n  - System.Net.WebClient.UploadData(System.Uri,System.Byte[])\n  - System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])\n  - System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])\n  - System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])\n  - System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)\n  - System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])\n  - System.Net.WebClient.UploadDataCompleted\n  - System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])\n  - System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])\n  - System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])\n  - System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])\n  - System.Net.WebClient.UploadFile(System.String,System.String)\n  - System.Net.WebClient.UploadFile(System.Uri,System.String)\n  - System.Net.WebClient.UploadFile(System.String,System.String,System.String)\n  - System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)\n  - System.Net.WebClient.UploadFileAsync(System.Uri,System.String)\n  - System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)\n  - System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)\n  - System.Net.WebClient.UploadFileCompleted\n  - System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)\n  - System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)\n  - System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)\n  - System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)\n  - System.Net.WebClient.UploadProgressChanged\n  - System.Net.WebClient.UploadString(System.String,System.String)\n  - System.Net.WebClient.UploadString(System.Uri,System.String)\n  - System.Net.WebClient.UploadString(System.String,System.String,System.String)\n  - System.Net.WebClient.UploadString(System.Uri,System.String,System.String)\n  - System.Net.WebClient.UploadStringAsync(System.Uri,System.String)\n  - System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)\n  - System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)\n  - System.Net.WebClient.UploadStringCompleted\n  - System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)\n  - System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)\n  - System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)\n  - System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)\n  - System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)\n  - System.Net.WebClient.UploadValuesCompleted\n  - System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Net.WebClient.UseDefaultCredentials\n  - System.Net.WebClient.WriteStreamClosed\n  langs:\n  - csharp\n  name: WebClient\n  nameWithType: WebClient\n  fullName: System.Net.WebClient\n  type: Class\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Provides common methods for sending data to and receiving data from a resource identified by a URI.\n  remarks: \"The <xref:System.Net.WebClient> class provides common methods for sending data to or receiving data from any local, intranet, or Internet resource identified by a URI.  \\n  \\n The <xref:System.Net.WebClient> class uses the <xref:System.Net.WebRequest> class to provide access to resources. <xref:System.Net.WebClient> instances can access data with any <xref:System.Net.WebRequest> descendant registered with the <xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=fullName> method.  \\n  \\n> [!NOTE]\\n>  By default, the .NET Framework supports URIs that begin with `http:`, `https:`, ftp:, and `file:` scheme identifiers.  \\n  \\n The following table describes <xref:System.Net.WebClient> methods for uploading data to a resource.  \\n  \\n|Method|Description|  \\n|------------|-----------------|  \\n|<xref:System.Net.WebClient.OpenWrite%2A>|Retrieves a <xref:System.IO.Stream> used to send data to the resource.|  \\n|<xref:System.Net.WebClient.OpenWriteAsync%2A>|Retrieves a <xref:System.IO.Stream> used to send data to the resource, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.UploadData%2A>|Sends a byte array to the resource and returns a <xref:System.Byte> array containing any response.|  \\n|<xref:System.Net.WebClient.UploadDataAsync%2A>|Sends a <xref:System.Byte> array to the resource, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.UploadFile%2A>|Sends a local file to the resource and returns a <xref:System.Byte> array containing any response.|  \\n|<xref:System.Net.WebClient.UploadFileAsync%2A>|Sends a local file to the resource, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.UploadValues%2A>|Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response.|  \\n|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.UploadString%2A>|Sends a <xref:System.String> to the resource, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.UploadStringAsync%2A>|Sends a <xref:System.String> to the resource, without blocking the calling thread.|  \\n  \\n The following table describes <xref:System.Net.WebClient> methods for downloading data from a resource.  \\n  \\n|Method|Description|  \\n|------------|-----------------|  \\n|<xref:System.Net.WebClient.OpenRead%2A>|Returns the data from a resource as a <xref:System.IO.Stream>.|  \\n|<xref:System.Net.WebClient.OpenReadAsync%2A>|Returns the data from a resource, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.DownloadData%2A>|Downloads data from a resource and returns a <xref:System.Byte> array.|  \\n|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.DownloadFile%2A>|Downloads data from a resource to a local file.|  \\n|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Downloads data from a resource to a local file, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.DownloadString%2A>|Downloads a <xref:System.String> from a resource and returns a <xref:System.String>.|  \\n|<xref:System.Net.WebClient.DownloadStringAsync%2A>|Downloads a <xref:System.String> from a resource, without blocking the calling thread.|  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n A <xref:System.Net.WebClient> instance does not send optional HTTP headers by default. If your request requires an optional header, you must add the header to the <xref:System.Net.WebClient.Headers%2A> collection. For example, to retain queries in the response, you must add a user-agent header. Also, servers may return 500 (Internal Server Error) if the user agent header is missing.  \\n  \\n <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is set to `true` in <xref:System.Net.WebClient> instances.\"\n  example:\n  - \"The following code example takes the URI of a resource, retrieves it, and displays the response.  \\n  \\n [!code-cpp[NCLWebClientUserAgent#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientUserAgent/CPP/useragent.cpp#1)]\\n [!code-csharp[NCLWebClientUserAgent#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientUserAgent/CS/useragent.cs#1)]\\n [!code-vb[NCLWebClientUserAgent#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientUserAgent/VB/useragent.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class WebClient : System.ComponentModel.Component\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.#ctor\n  commentId: M:System.Net.WebClient.#ctor\n  id: '#ctor'\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: WebClient()\n  nameWithType: WebClient.WebClient()\n  fullName: WebClient.WebClient()\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Initializes a new instance of the <xref href=\"System.Net.WebClient\"></xref> class.\n  remarks: The default constructor creates a new instance of the <xref:System.Net.WebClient> class. The default HTTP method is GET. The default FTP method is RETR. The default <xref:System.Net.WebClient.Encoding%2A> is <xref:System.Text.Encoding.Default%2A>. The default value of <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is `true`.\n  example:\n  - \"The following code example creates a <xref:System.Net.WebClient> instance and then uses it to download data from a server and display it on the system console, to download data from a server and write it to a file, and to upload form values to a server and receive the response.  \\n  \\n [!code-cpp[WebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient/CPP/webclient.cpp#1)]\\n [!code-csharp[WebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient/CS/webclient.cs#1)]\\n [!code-vb[WebClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient/VB/webclient.vb#1)]\"\n  syntax:\n    content: public WebClient ();\n    parameters: []\n  overload: System.Net.WebClient.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.AllowReadStreamBuffering\n  commentId: P:System.Net.WebClient.AllowReadStreamBuffering\n  id: AllowReadStreamBuffering\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: AllowReadStreamBuffering\n  nameWithType: WebClient.AllowReadStreamBuffering\n  fullName: WebClient.AllowReadStreamBuffering\n  type: Property\n  assemblies:\n  - System\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets or sets a value that indicates whether to buffer the data read from the Internet resource for a <xref href=\"System.Net.WebClient\"></xref> instance.\n  remarks: When the <xref:System.Net.WebClient.AllowReadStreamBuffering%2A> property is `true`, the data is buffered in memory so it is ready to be read by the app.\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.\", true)]\n\n      public bool AllowReadStreamBuffering { get; set; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n `true` to enable buffering of the data received from the Internet resource; `false` to disable buffering. The default is `true`.\"\n  overload: System.Net.WebClient.AllowReadStreamBuffering*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.AllowWriteStreamBuffering\n  commentId: P:System.Net.WebClient.AllowWriteStreamBuffering\n  id: AllowWriteStreamBuffering\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: AllowWriteStreamBuffering\n  nameWithType: WebClient.AllowWriteStreamBuffering\n  fullName: WebClient.AllowWriteStreamBuffering\n  type: Property\n  assemblies:\n  - System\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets or sets a value that indicates whether to buffer the data written to the Internet resource for a <xref href=\"System.Net.WebClient\"></xref> instance.\n  remarks: When the <xref:System.Net.WebClient.AllowWriteStreamBuffering%2A> property is `true`, the data is buffered in memory so it can be written more efficiently to the Internet resource in larger chunks.\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.\", true)]\n\n      public bool AllowWriteStreamBuffering { get; set; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n `true` to enable buffering of the data written to the Internet resource; `false` to disable buffering. The default is `true`.\"\n  overload: System.Net.WebClient.AllowWriteStreamBuffering*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.BaseAddress\n  commentId: P:System.Net.WebClient.BaseAddress\n  id: BaseAddress\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: BaseAddress\n  nameWithType: WebClient.BaseAddress\n  fullName: WebClient.BaseAddress\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets or sets the base URI for requests made by a <xref href=\"System.Net.WebClient\"></xref>.\n  remarks: \"The <xref:System.Net.WebClient.BaseAddress%2A> property contains a base URI that is combined with a relative address. When you call a method that uploads or downloads data, the <xref:System.Net.WebClient> object combines this base URI with the relative address you specify in the method call. If you specify an absolute URI, <xref:System.Net.WebClient> does not use the <xref:System.Net.WebClient.BaseAddress%2A> property value.  \\n  \\n To remove a previously set value, set this property to `null` or an empty string (\\\"\\\").\"\n  example:\n  - \"The following code example downloads data from an Internet server and displays it on the console. It assumes that the server's address (such as http://www.contoso.com) is in `hostUri` and that the path to the resource (such as /default.htm) is in `uriSuffix`.  \\n  \\n [!code-cpp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#1)]\\n [!code-csharp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#1)]\\n [!code-vb[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#1)]\"\n  syntax:\n    content: public string BaseAddress { get; set; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the base URI for requests made by a <xref href=\"System.Net.WebClient\"></xref> or <xref href=\"System.String.Empty\"></xref> if no base address has been specified.\n  overload: System.Net.WebClient.BaseAddress*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <xref href=\"System.Net.WebClient.BaseAddress\"></xref> is set to an invalid URI. The inner exception may contain information that will help you locate the error.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.CachePolicy\n  commentId: P:System.Net.WebClient.CachePolicy\n  id: CachePolicy\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: CachePolicy\n  nameWithType: WebClient.CachePolicy\n  fullName: WebClient.CachePolicy\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets or sets the application's cache policy for any resources obtained by this WebClient instance using <xref href=\"System.Net.WebRequest\"></xref> objects.\n  syntax:\n    content: public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }\n    return:\n      type: System.Net.Cache.RequestCachePolicy\n      description: A <xref href=\"System.Net.Cache.RequestCachePolicy\"></xref> object that represents the application's caching requirements.\n  overload: System.Net.WebClient.CachePolicy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.CancelAsync\n  commentId: M:System.Net.WebClient.CancelAsync\n  id: CancelAsync\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: CancelAsync()\n  nameWithType: WebClient.CancelAsync()\n  fullName: WebClient.CancelAsync()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Cancels a pending asynchronous operation.\n  remarks: \"If an operation is pending, this method calls <xref:System.Net.WebRequest.Abort%2A> on the underlying <xref:System.Net.WebRequest>.  \\n  \\n When you call <xref:System.Net.WebClient.CancelAsync%2A>, your application still receives the completion event associated with the operation. For example, when you call <xref:System.Net.WebClient.CancelAsync%2A> to cancel a <xref:System.Net.WebClient.DownloadStringAsync%2A> operation, if you have specified an event handler for the <xref:System.Net.WebClient.DownloadStringCompleted> event, your event handler receives notification that the operation has ended. To learn whether the operation completed successfully, check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property on the base class of <xref:System.Net.DownloadDataCompletedEventArgs> in the event data object passed to the event handler.  \\n  \\n If no asynchronous operation is in progress, this method does nothing.\"\n  syntax:\n    content: public void CancelAsync ();\n    parameters: []\n  overload: System.Net.WebClient.CancelAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.Credentials\n  commentId: P:System.Net.WebClient.Credentials\n  id: Credentials\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: Credentials\n  nameWithType: WebClient.Credentials\n  fullName: WebClient.Credentials\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets or sets the network credentials that are sent to the host and used to authenticate the request.\n  remarks: \"The <xref:System.Net.WebClient.Credentials%2A> property contains the authentication credentials used to access a resource on a host. In most client-side scenarios, you should use the <xref:System.Net.CredentialCache.DefaultCredentials%2A>, which are the credentials of the currently logged on user. To do this, set the <xref:System.Net.WebClient.UseDefaultCredentials%2A> property to `true` instead of setting this property.  \\n  \\n If the <xref:System.Net.WebClient> class is being used in a middle tier application, such as an ASP.NET application, the <xref:System.Net.CredentialCache.DefaultCredentials%2A> belong to the account running the ASP page (the server-side credentials). Typically, you would set this property to the credentials of the client on whose behalf the request is made.\"\n  example:\n  - \"The following code example uses the user's system credentials to authenticate a request.  \\n  \\n [!code-cpp[WebClientAuthentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClientAuthentication/CPP/webclientauth.cpp#1)]\\n [!code-csharp[WebClientAuthentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClientAuthentication/CS/webclientauth.cs#1)]\\n [!code-vb[WebClientAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClientAuthentication/VB/webclientauth.vb#1)]\"\n  syntax:\n    content: public System.Net.ICredentials Credentials { get; set; }\n    return:\n      type: System.Net.ICredentials\n      description: An <xref href=\"System.Net.ICredentials\"></xref> containing the authentication credentials for the request. The default is `null`.\n  overload: System.Net.WebClient.Credentials*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadData(System.String)\n  commentId: M:System.Net.WebClient.DownloadData(System.String)\n  id: DownloadData(System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadData(String)\n  nameWithType: WebClient.DownloadData(String)\n  fullName: WebClient.DownloadData(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified.\n  remarks: \"The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example requests data from a server and displays the data returned. It assumes that `remoteUri` contains a valid URI for the requested data.  \\n  \\n [!code-cpp[WebClient_DownloadData#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadData/CPP/webclient_downloaddata.cpp#1)]\\n [!code-csharp[WebClient_DownloadData#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadData/CS/webclient_downloaddata.cs#1)]\\n [!code-vb[WebClient_DownloadData#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadData/VB/webclient_downloaddata.vb#1)]\"\n  syntax:\n    content: public byte[] DownloadData (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI from which to download data.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the downloaded resource.\n  overload: System.Net.WebClient.DownloadData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading data.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The method has been called simultaneously on multiple threads.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadData(System.Uri)\n  commentId: M:System.Net.WebClient.DownloadData(System.Uri)\n  id: DownloadData(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadData(Uri)\n  nameWithType: WebClient.DownloadData(Uri)\n  fullName: WebClient.DownloadData(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified.\n  remarks: \"The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public byte[] DownloadData (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI represented by the <xref href=\"System.Uri\"></xref> object, from which to download data.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the downloaded resource.\n  overload: System.Net.WebClient.DownloadData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadDataAsync(System.Uri)\n  commentId: M:System.Net.WebClient.DownloadDataAsync(System.Uri)\n  id: DownloadDataAsync(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadDataAsync(Uri)\n  nameWithType: WebClient.DownloadDataAsync(Uri)\n  fullName: WebClient.DownloadDataAsync(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation.\n  remarks: \"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void DownloadDataAsync (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: A <xref href=\"System.Uri\"></xref> containing the URI to download.\n  overload: System.Net.WebClient.DownloadDataAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)\n  commentId: M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)\n  id: DownloadDataAsync(System.Uri,System.Object)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadDataAsync(Uri, Object)\n  nameWithType: WebClient.DownloadDataAsync(Uri, Object)\n  fullName: WebClient.DownloadDataAsync(Uri, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation.\n  remarks: \"This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void DownloadDataAsync (Uri address, object userToken);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: A <xref href=\"System.Uri\"></xref> containing the URI to download.\n    - id: userToken\n      type: System.Object\n      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.WebClient.DownloadDataAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadDataCompleted\n  commentId: E:System.Net.WebClient.DownloadDataCompleted\n  id: DownloadDataCompleted\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadDataCompleted\n  nameWithType: WebClient.DownloadDataCompleted\n  fullName: WebClient.DownloadDataCompleted\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous data download operation completes.\n  remarks: \"This event is raised each time an asynchronous data download operation completes. Asynchronous data downloads are started by calling the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.  \\n  \\n The <xref:System.Net.DownloadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadDataCompletedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#21](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#21)]\\n [!code-csharp[NCLWebClientAsync#21](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#21)]\\n [!code-vb[NCLWebClientAsync#21](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#21)]\"\n  syntax:\n    content: public event System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted;\n    return:\n      type: System.Net.DownloadDataCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadDataTaskAsync(System.String)\n  commentId: M:System.Net.WebClient.DownloadDataTaskAsync(System.String)\n  id: DownloadDataTaskAsync(System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadDataTaskAsync(String)\n  nameWithType: WebClient.DownloadDataTaskAsync(String)\n  fullName: WebClient.DownloadDataTaskAsync(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  \\n  \\n This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n The following code example requests data from a server and displays the data returned. It assumes that `remoteUri` contains a valid URI for the requested data.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> DownloadDataTaskAsync (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to download.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the downloaded resource.\"\n  overload: System.Net.WebClient.DownloadDataTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadDataTaskAsync(System.Uri)\n  commentId: M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)\n  id: DownloadDataTaskAsync(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadDataTaskAsync(Uri)\n  nameWithType: WebClient.DownloadDataTaskAsync(Uri)\n  fullName: WebClient.DownloadDataTaskAsync(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource as a <xref href=\"System.Byte\"></xref> array from the URI specified as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  \\n  \\n This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> DownloadDataTaskAsync (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to download.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the downloaded resource.\"\n  overload: System.Net.WebClient.DownloadDataTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadFile(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.DownloadFile(System.Uri,System.String)\n  id: DownloadFile(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadFile(Uri, String)\n  nameWithType: WebClient.DownloadFile(Uri, String)\n  fullName: WebClient.DownloadFile(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource with the specified URI to a local file.\n  remarks: \"The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file.\"\n  syntax:\n    content: public void DownloadFile (Uri address, string fileName);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI specified as a <xref href=\"System.String\"></xref>, from which to download data.\n    - id: fileName\n      type: System.String\n      description: The name of the local file that is to receive the data.\n  overload: System.Net.WebClient.DownloadFile*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>filename</code> is `null` or <xref href=\\\"System.String.Empty\\\"></xref>.  \\n  \\n -or-  \\n  \\n The file does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while downloading data.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The method has been called simultaneously on multiple threads.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadFile(System.String,System.String)\n  commentId: M:System.Net.WebClient.DownloadFile(System.String,System.String)\n  id: DownloadFile(System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadFile(String, String)\n  nameWithType: WebClient.DownloadFile(String, String)\n  fullName: WebClient.DownloadFile(String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource with the specified URI to a local file.\n  remarks: \"The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file.\"\n  example:\n  - \"The following code example downloads a file from http://www.contoso.com to the local hard drive.  \\n  \\n [!code-cpp[WebClient_DownloadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadFile/CPP/webclient_downloadfile.cpp#1)]\\n [!code-csharp[WebClient_DownloadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadFile/CS/webclient_downloadfile.cs#1)]\\n [!code-vb[WebClient_DownloadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadFile/VB/webclient_downloadfile.vb#1)]\"\n  syntax:\n    content: public void DownloadFile (string address, string fileName);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI from which to download data.\n    - id: fileName\n      type: System.String\n      description: The name of the local file that is to receive the data.\n  overload: System.Net.WebClient.DownloadFile*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>filename</code> is `null` or <xref href=\\\"System.String.Empty\\\"></xref>.  \\n  \\n -or-  \\n  \\n The file does not exist.  \\n  \\n -or- An error occurred while downloading data.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The method has been called simultaneously on multiple threads.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)\n  id: DownloadFileAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadFileAsync(Uri, String)\n  nameWithType: WebClient.DownloadFileAsync(Uri, String)\n  fullName: WebClient.DownloadFileAsync(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.\n  remarks: \"This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event.  \\n  \\n This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.\"\n  syntax:\n    content: public void DownloadFileAsync (Uri address, string fileName);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to download.\n    - id: fileName\n      type: System.String\n      description: The name of the file to be placed on the local computer.\n  overload: System.Net.WebClient.DownloadFileAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The local file specified by <code>fileName</code> is in use by another thread.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)\n  commentId: M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)\n  id: DownloadFileAsync(System.Uri,System.String,System.Object)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadFileAsync(Uri, String, Object)\n  nameWithType: WebClient.DownloadFileAsync(Uri, String, Object)\n  fullName: WebClient.DownloadFileAsync(Uri, String, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.\n  remarks: \"This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event.  \\n  \\n This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.\"\n  syntax:\n    content: public void DownloadFileAsync (Uri address, string fileName, object userToken);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to download.\n    - id: fileName\n      type: System.String\n      description: The name of the file to be placed on the local computer.\n    - id: userToken\n      type: System.Object\n      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.WebClient.DownloadFileAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The local file specified by <code>fileName</code> is in use by another thread.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadFileCompleted\n  commentId: E:System.Net.WebClient.DownloadFileCompleted\n  id: DownloadFileCompleted\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadFileCompleted\n  nameWithType: WebClient.DownloadFileCompleted\n  fullName: WebClient.DownloadFileCompleted\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous file download operation completes.\n  remarks: \"This event is raised each time an asynchronous file download operation completes. Asynchronous file downloads are started by calling the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.  \\n  \\n The <xref:System.ComponentModel.AsyncCompletedEventHandler> is the delegate for this event. The <xref:System.ComponentModel.AsyncCompletedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]\\n [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]\\n [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]\"\n  syntax:\n    content: public event System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted;\n    return:\n      type: System.ComponentModel.AsyncCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)\n  commentId: M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)\n  id: DownloadFileTaskAsync(System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadFileTaskAsync(String, String)\n  nameWithType: WebClient.DownloadFileTaskAsync(String, String)\n  fullName: WebClient.DownloadFileTaskAsync(String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the specified resource to a local file as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.  \\n  \\n This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task DownloadFileTaskAsync (string address, string fileName);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to download.\n    - id: fileName\n      type: System.String\n      description: The name of the file to be placed on the local computer.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.WebClient.DownloadFileTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The local file specified by <code>fileName</code> is in use by another thread.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)\n  id: DownloadFileTaskAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadFileTaskAsync(Uri, String)\n  nameWithType: WebClient.DownloadFileTaskAsync(Uri, String)\n  fullName: WebClient.DownloadFileTaskAsync(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the specified resource to a local file as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.  \\n  \\n This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task DownloadFileTaskAsync (Uri address, string fileName);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to download.\n    - id: fileName\n      type: System.String\n      description: The name of the file to be placed on the local computer.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.WebClient.DownloadFileTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The local file specified by <code>fileName</code> is in use by another thread.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadProgressChanged\n  commentId: E:System.Net.WebClient.DownloadProgressChanged\n  id: DownloadProgressChanged\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadProgressChanged\n  nameWithType: WebClient.DownloadProgressChanged\n  fullName: WebClient.DownloadProgressChanged\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous download operation successfully transfers some or all of the data.\n  remarks: \"This event is raised each time an asynchronous download makes progress. This event is raised when downloads are started using any of the following methods.  \\n  \\n|Method|Description|  \\n|------------|-----------------|  \\n|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Downloads data from a resource to a local file, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.OpenReadAsync%2A>|Returns the data from a resource, without blocking the calling thread.|  \\n  \\n The <xref:System.Net.DownloadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadProgressChangedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  \\n  \\n> [!NOTE]\\n>  A passive FTP file transfer will always show a progress percentage of zero, since the server did not send the file size. To show progress, you can change the FTP connection to active by overriding the <xref:System.Net.WebClient.GetWebRequest%2A> virtual method:  \\n  \\n```  \\ninternal class MyWebClient:WebClient{  \\n        protected override WebRequest GetWebRequest(Uri address) {  \\n            FtpWebRequest req = (FtpWebRequest)base.GetWebRequest(address);  \\n            req.UsePassive = false;  \\n            return req;  \\n        }  \\n    }  \\n```\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]\\n [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]\\n [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  \\n  \\n The following code example shows an implementation of a handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]\\n [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]\\n [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]\"\n  syntax:\n    content: public event System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged;\n    return:\n      type: System.Net.DownloadProgressChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadString(System.String)\n  commentId: M:System.Net.WebClient.DownloadString(System.String)\n  id: DownloadString(System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadString(String)\n  nameWithType: WebClient.DownloadString(String)\n  fullName: WebClient.DownloadString(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the requested resource as a <xref href=\"System.String\"></xref>. The resource to download is specified as a <xref href=\"System.String\"></xref> containing the URI.\n  remarks: \"This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cpp[NCLWebClientAsync#25](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#25)]\\n [!code-csharp[NCLWebClientAsync#25](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#25)]\\n [!code-vb[NCLWebClientAsync#25](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#25)]\"\n  syntax:\n    content: public string DownloadString (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the URI to download.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the requested resource.\n  overload: System.Net.WebClient.DownloadString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The method has been called simultaneously on multiple threads.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadString(System.Uri)\n  commentId: M:System.Net.WebClient.DownloadString(System.Uri)\n  id: DownloadString(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadString(Uri)\n  nameWithType: WebClient.DownloadString(Uri)\n  fullName: WebClient.DownloadString(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the requested resource as a <xref href=\"System.String\"></xref>. The resource to download is specified as a <xref href=\"System.Uri\"></xref>.\n  remarks: \"This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public string DownloadString (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: A <xref href=\"System.Uri\"></xref> object containing the URI to download.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the requested resource.\n  overload: System.Net.WebClient.DownloadString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The method has been called simultaneously on multiple threads.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadStringAsync(System.Uri)\n  commentId: M:System.Net.WebClient.DownloadStringAsync(System.Uri)\n  id: DownloadStringAsync(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadStringAsync(Uri)\n  nameWithType: WebClient.DownloadStringAsync(Uri)\n  fullName: WebClient.DownloadStringAsync(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource specified as a <xref href=\"System.Uri\"></xref>. This method does not block the calling thread.\n  remarks: \"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void DownloadStringAsync (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: A <xref href=\"System.Uri\"></xref> containing the URI to download.\n  overload: System.Net.WebClient.DownloadStringAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)\n  commentId: M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)\n  id: DownloadStringAsync(System.Uri,System.Object)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadStringAsync(Uri, Object)\n  nameWithType: WebClient.DownloadStringAsync(Uri, Object)\n  fullName: WebClient.DownloadStringAsync(Uri, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the specified string to the specified resource. This method does not block the calling thread.\n  remarks: \"The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void DownloadStringAsync (Uri address, object userToken);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: A <xref href=\"System.Uri\"></xref> containing the URI to download.\n    - id: userToken\n      type: System.Object\n      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.WebClient.DownloadStringAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadStringCompleted\n  commentId: E:System.Net.WebClient.DownloadStringCompleted\n  id: DownloadStringCompleted\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadStringCompleted\n  nameWithType: WebClient.DownloadStringCompleted\n  fullName: WebClient.DownloadStringCompleted\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous resource-download operation completes.\n  remarks: \"This event is raised each time an asynchronous operation to download a resource as a string completes. These operations are started by calling the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.  \\n  \\n The <xref:System.Net.DownloadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadStringCompletedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#28](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#28)]\\n [!code-csharp[NCLWebClientAsync#28](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#28)]\\n [!code-vb[NCLWebClientAsync#28](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#28)]\"\n  syntax:\n    content: public event System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted;\n    return:\n      type: System.Net.DownloadStringCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadStringTaskAsync(System.String)\n  commentId: M:System.Net.WebClient.DownloadStringTaskAsync(System.String)\n  id: DownloadStringTaskAsync(System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadStringTaskAsync(String)\n  nameWithType: WebClient.DownloadStringTaskAsync(String)\n  fullName: WebClient.DownloadStringTaskAsync(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource as a <xref href=\"System.String\"></xref> from the URI specified as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<string> DownloadStringTaskAsync (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to download.\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the downloaded resource.\"\n  overload: System.Net.WebClient.DownloadStringTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.DownloadStringTaskAsync(System.Uri)\n  commentId: M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)\n  id: DownloadStringTaskAsync(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: DownloadStringTaskAsync(Uri)\n  nameWithType: WebClient.DownloadStringTaskAsync(Uri)\n  fullName: WebClient.DownloadStringTaskAsync(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Downloads the resource as a <xref href=\"System.String\"></xref> from the URI specified as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded. The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.  \\n  \\n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<string> DownloadStringTaskAsync (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to download.\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the downloaded resource.\"\n  overload: System.Net.WebClient.DownloadStringTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.Encoding\n  commentId: P:System.Net.WebClient.Encoding\n  id: Encoding\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: Encoding\n  nameWithType: WebClient.Encoding\n  fullName: WebClient.Encoding\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets and sets the <xref href=\"System.Text.Encoding\"></xref> used to upload and download strings.\n  remarks: \"The <xref:System.Net.WebClient.UploadString%2A> and <xref:System.Net.WebClient.UploadStringAsync%2A> methods use this property to convert the specified string to a <xref:System.Byte> array before uploading the string. For additional information, see the <xref:System.Text.Encoding.GetBytes%2A> method.  \\n  \\n When a string is downloaded using the <xref:System.Net.WebClient.DownloadString%2A> or <xref:System.Net.WebClient.DownloadStringAsync%2A> methods, <xref:System.Net.WebClient> uses the <xref:System.Text.Encoding> returned by this to convert the downloaded <xref:System.Byte> array into a string. For additional information, see the <xref:System.Text.Encoding.GetString%2A> method.\"\n  example:\n  - \"The following code example demonstrates setting the value of this property.  \\n  \\n [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]\\n [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]\\n [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]\"\n  syntax:\n    content: public System.Text.Encoding Encoding { get; set; }\n    return:\n      type: System.Text.Encoding\n      description: A <xref href=\"System.Text.Encoding\"></xref> that is used to encode strings. The default value of this property is the encoding returned by <xref href=\"System.Text.Encoding.Default\"></xref>.\n  overload: System.Net.WebClient.Encoding*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.GetWebRequest(System.Uri)\n  commentId: M:System.Net.WebClient.GetWebRequest(System.Uri)\n  id: GetWebRequest(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: GetWebRequest(Uri)\n  nameWithType: WebClient.GetWebRequest(Uri)\n  fullName: WebClient.GetWebRequest(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Returns a <xref href=\"System.Net.WebRequest\"></xref> object for the specified resource.\n  remarks: \"This method copies the existing <xref:System.Net.WebClient.Headers%2A>, <xref:System.Net.WebClient.Credentials%2A>, and method to the newly created <xref:System.Net.WebRequest> object.  \\n  \\n This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebRequest> object. Derived classes should call the base class implementation of <xref:System.Net.WebClient.GetWebRequest%2A> to ensure the method works as expected.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#1)]\\n [!code-csharp[NCLCustomWebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#1)]\"\n  syntax:\n    content: protected virtual System.Net.WebRequest GetWebRequest (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: A <xref href=\"System.Uri\"></xref> that identifies the resource to request.\n    return:\n      type: System.Net.WebRequest\n      description: A new <xref href=\"System.Net.WebRequest\"></xref> object for the specified resource.\n  overload: System.Net.WebClient.GetWebRequest*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.GetWebResponse(System.Net.WebRequest)\n  commentId: M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)\n  id: GetWebResponse(System.Net.WebRequest)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: GetWebResponse(WebRequest)\n  nameWithType: WebClient.GetWebResponse(WebRequest)\n  fullName: WebClient.GetWebResponse(WebRequest)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Returns the <xref href=\"System.Net.WebResponse\"></xref> for the specified <xref href=\"System.Net.WebRequest\"></xref>.\n  remarks: \"The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.GetResponse%2A> method on the specified <xref:System.Net.WebRequest> object.  \\n  \\n This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#2)]\\n [!code-csharp[NCLCustomWebClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#2)]\"\n  syntax:\n    content: protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);\n    parameters:\n    - id: request\n      type: System.Net.WebRequest\n      description: A <xref href=\"System.Net.WebRequest\"></xref> that is used to obtain the response.\n    return:\n      type: System.Net.WebResponse\n      description: A <xref href=\"System.Net.WebResponse\"></xref> containing the response for the specified <xref href=\"System.Net.WebRequest\"></xref>.\n  overload: System.Net.WebClient.GetWebResponse*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)\n  commentId: M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)\n  id: GetWebResponse(System.Net.WebRequest,System.IAsyncResult)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: GetWebResponse(WebRequest, IAsyncResult)\n  nameWithType: WebClient.GetWebResponse(WebRequest, IAsyncResult)\n  fullName: WebClient.GetWebResponse(WebRequest, IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Returns the <xref href=\"System.Net.WebResponse\"></xref> for the specified <xref href=\"System.Net.WebRequest\"></xref> using the specified <xref href=\"System.IAsyncResult\"></xref>.\n  remarks: \"The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.EndGetResponse%2A> method on the specified <xref:System.Net.WebRequest> object.  \\n  \\n This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#3)]\\n [!code-csharp[NCLCustomWebClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#3)]\"\n  syntax:\n    content: protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);\n    parameters:\n    - id: request\n      type: System.Net.WebRequest\n      description: A <xref href=\"System.Net.WebRequest\"></xref> that is used to obtain the response.\n    - id: result\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object obtained from a previous call to <xref href=\"System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\"></xref> .\n    return:\n      type: System.Net.WebResponse\n      description: A <xref href=\"System.Net.WebResponse\"></xref> containing the response for the specified <xref href=\"System.Net.WebRequest\"></xref>.\n  overload: System.Net.WebClient.GetWebResponse*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.Headers\n  commentId: P:System.Net.WebClient.Headers\n  id: Headers\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: Headers\n  nameWithType: WebClient.Headers\n  fullName: WebClient.Headers\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets or sets a collection of header name/value pairs associated with the request.\n  remarks: \"The <xref:System.Net.WebClient.Headers%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing protocol headers that the <xref:System.Net.WebClient> sends with the request.  \\n  \\n Some common headers are considered restricted and are protected by the system and cannot be set or changed in a <xref:System.Net.WebHeaderCollection> object. Any attempt to set one of these restricted headers in the <xref:System.Net.WebHeaderCollection> object associated with a <xref:System.Net.WebClient> object will throw an exception later when attempting to send the <xref:System.Net.WebClient> request.  \\n  \\n Restricted headers protected by the system include, but are not limited to the following:  \\n  \\n-   Date  \\n  \\n-   Host  \\n  \\n In addition, some other headers are also restricted when using a <xref:System.Net.WebClient> object. These restricted headers include, but are not limited to the following:  \\n  \\n-   Accept  \\n  \\n-   Connection  \\n  \\n-   Content-Length  \\n  \\n-   Expect (when the value is set to \\\"100-continue\\\"  \\n  \\n-   If-Modified-Since  \\n  \\n-   Range  \\n  \\n-   Transfer-Encoding  \\n  \\n The <xref:System.Net.HttpWebRequest> class has properties for setting some of the above headers. If it is important for an application to set these headers, then the <xref:System.Net.HttpWebRequest> class should be used instead of the <xref:System.Net.WebRequest> class.  \\n  \\n You should not assume that the header values will remain unchanged, because Web servers and caches may change or add headers to a Web request.\"\n  example:\n  - \"The following code example uses the <xref:System.Net.WebClient.Headers%2A> collection to set the HTTP `Content-Type` header to `application/x-www-form-urlencoded,` to notify the server that form data is attached to the post.  \\n  \\n [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]\\n [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]\\n [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]\"\n  syntax:\n    content: public System.Net.WebHeaderCollection Headers { get; set; }\n    return:\n      type: System.Net.WebHeaderCollection\n      description: A <xref href=\"System.Net.WebHeaderCollection\"></xref> containing header name/value pairs associated with this request.\n  overload: System.Net.WebClient.Headers*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.IsBusy\n  commentId: P:System.Net.WebClient.IsBusy\n  id: IsBusy\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: IsBusy\n  nameWithType: WebClient.IsBusy\n  fullName: WebClient.IsBusy\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets whether a Web request is in progress.\n  syntax:\n    content: public bool IsBusy { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the Web request is still in progress; otherwise `false`.'\n  overload: System.Net.WebClient.IsBusy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)\n  commentId: M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)\n  id: OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnDownloadDataCompleted(DownloadDataCompletedEventArgs)\n  nameWithType: WebClient.OnDownloadDataCompleted(DownloadDataCompletedEventArgs)\n  fullName: WebClient.OnDownloadDataCompleted(DownloadDataCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.DownloadDataCompleted\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadDataCompleted> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)  \\n  \\n The <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#4)]\\n [!code-csharp[NCLCustomWebClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#4)]\"\n  syntax:\n    content: protected virtual void OnDownloadDataCompleted (System.Net.DownloadDataCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.DownloadDataCompletedEventArgs\n      description: A <xref href=\"System.Net.DownloadDataCompletedEventArgs\"></xref> object that contains event data.\n  overload: System.Net.WebClient.OnDownloadDataCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)\n  commentId: M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)\n  id: OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnDownloadFileCompleted(AsyncCompletedEventArgs)\n  nameWithType: WebClient.OnDownloadFileCompleted(AsyncCompletedEventArgs)\n  fullName: WebClient.OnDownloadFileCompleted(AsyncCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.DownloadFileCompleted\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadFileCompleted> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#5)]\\n [!code-csharp[NCLCustomWebClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#5)]\"\n  syntax:\n    content: protected virtual void OnDownloadFileCompleted (System.ComponentModel.AsyncCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.ComponentModel.AsyncCompletedEventArgs\n      description: An <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnDownloadFileCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)\n  commentId: M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)\n  id: OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnDownloadProgressChanged(DownloadProgressChangedEventArgs)\n  nameWithType: WebClient.OnDownloadProgressChanged(DownloadProgressChangedEventArgs)\n  fullName: WebClient.OnDownloadProgressChanged(DownloadProgressChangedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.DownloadProgressChanged\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadProgressChanged> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#12)]\\n [!code-csharp[NCLCustomWebClient#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#12)]\"\n  syntax:\n    content: protected virtual void OnDownloadProgressChanged (System.Net.DownloadProgressChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.DownloadProgressChangedEventArgs\n      description: A <xref href=\"System.Net.DownloadProgressChangedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnDownloadProgressChanged*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)\n  commentId: M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)\n  id: OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnDownloadStringCompleted(DownloadStringCompletedEventArgs)\n  nameWithType: WebClient.OnDownloadStringCompleted(DownloadStringCompletedEventArgs)\n  fullName: WebClient.OnDownloadStringCompleted(DownloadStringCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.DownloadStringCompleted\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadStringCompleted> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#6)]\\n [!code-csharp[NCLCustomWebClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#6)]\"\n  syntax:\n    content: protected virtual void OnDownloadStringCompleted (System.Net.DownloadStringCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.DownloadStringCompletedEventArgs\n      description: A <xref href=\"System.Net.DownloadStringCompletedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnDownloadStringCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)\n  commentId: M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)\n  id: OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnOpenReadCompleted(OpenReadCompletedEventArgs)\n  nameWithType: WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs)\n  fullName: WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.OpenReadCompleted\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenReadCompleted> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnOpenReadCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#7)]\\n [!code-csharp[NCLCustomWebClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#7)]\"\n  syntax:\n    content: protected virtual void OnOpenReadCompleted (System.Net.OpenReadCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.OpenReadCompletedEventArgs\n      description: A <xref href=\"System.Net.OpenReadCompletedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnOpenReadCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)\n  commentId: M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)\n  id: OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnOpenWriteCompleted(OpenWriteCompletedEventArgs)\n  nameWithType: WebClient.OnOpenWriteCompleted(OpenWriteCompletedEventArgs)\n  fullName: WebClient.OnOpenWriteCompleted(OpenWriteCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.OpenWriteCompleted\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenWriteCompleted> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#8)]\\n [!code-csharp[NCLCustomWebClient#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#8)]\"\n  syntax:\n    content: protected virtual void OnOpenWriteCompleted (System.Net.OpenWriteCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.OpenWriteCompletedEventArgs\n      description: A <xref href=\"System.Net.OpenWriteCompletedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnOpenWriteCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)\n  commentId: M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)\n  id: OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnUploadDataCompleted(UploadDataCompletedEventArgs)\n  nameWithType: WebClient.OnUploadDataCompleted(UploadDataCompletedEventArgs)\n  fullName: WebClient.OnUploadDataCompleted(UploadDataCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.UploadDataCompleted\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadDataCompleted> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnUploadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#9)]\\n [!code-csharp[NCLCustomWebClient#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#9)]\"\n  syntax:\n    content: protected virtual void OnUploadDataCompleted (System.Net.UploadDataCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.UploadDataCompletedEventArgs\n      description: A <xref href=\"System.Net.UploadDataCompletedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnUploadDataCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)\n  commentId: M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)\n  id: OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnUploadFileCompleted(UploadFileCompletedEventArgs)\n  nameWithType: WebClient.OnUploadFileCompleted(UploadFileCompletedEventArgs)\n  fullName: WebClient.OnUploadFileCompleted(UploadFileCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.UploadFileCompleted\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadFileCompleted> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnUploadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#10)]\\n [!code-csharp[NCLCustomWebClient#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#10)]\"\n  syntax:\n    content: protected virtual void OnUploadFileCompleted (System.Net.UploadFileCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.UploadFileCompletedEventArgs\n      description: An <xref href=\"System.Net.UploadFileCompletedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnUploadFileCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)\n  commentId: M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)\n  id: OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnUploadProgressChanged(UploadProgressChangedEventArgs)\n  nameWithType: WebClient.OnUploadProgressChanged(UploadProgressChangedEventArgs)\n  fullName: WebClient.OnUploadProgressChanged(UploadProgressChangedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.UploadProgressChanged\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadProgressChanged> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnUploadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#13)]\\n [!code-csharp[NCLCustomWebClient#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#13)]\"\n  syntax:\n    content: protected virtual void OnUploadProgressChanged (System.Net.UploadProgressChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.UploadProgressChangedEventArgs\n      description: An <xref href=\"System.Net.UploadProgressChangedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnUploadProgressChanged*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)\n  commentId: M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)\n  id: OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnUploadStringCompleted(UploadStringCompletedEventArgs)\n  nameWithType: WebClient.OnUploadStringCompleted(UploadStringCompletedEventArgs)\n  fullName: WebClient.OnUploadStringCompleted(UploadStringCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.UploadStringCompleted\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadStringCompleted> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnUploadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#11)]\\n [!code-csharp[NCLCustomWebClient#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#11)]\"\n  syntax:\n    content: protected virtual void OnUploadStringCompleted (System.Net.UploadStringCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.UploadStringCompletedEventArgs\n      description: An <xref href=\"System.Net.UploadStringCompletedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnUploadStringCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)\n  commentId: M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)\n  id: OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnUploadValuesCompleted(UploadValuesCompletedEventArgs)\n  nameWithType: WebClient.OnUploadValuesCompleted(UploadValuesCompletedEventArgs)\n  fullName: WebClient.OnUploadValuesCompleted(UploadValuesCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.UploadValuesCompleted\"></xref> event.\n  remarks: \"Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadValuesCompleted> event occurs.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \\n  \\n [!code-cpp[NCLCustomWebClient#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#14)]\\n [!code-csharp[NCLCustomWebClient#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#14)]\"\n  syntax:\n    content: protected virtual void OnUploadValuesCompleted (System.Net.UploadValuesCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.UploadValuesCompletedEventArgs\n      description: A <xref href=\"System.Net.UploadValuesCompletedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnUploadValuesCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)\n  commentId: M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)\n  id: OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OnWriteStreamClosed(WriteStreamClosedEventArgs)\n  nameWithType: WebClient.OnWriteStreamClosed(WriteStreamClosedEventArgs)\n  fullName: WebClient.OnWriteStreamClosed(WriteStreamClosedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Raises the <xref href=\"System.Net.WebClient.WriteStreamClosed\"></xref> event.\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.\", true)]\n\n      protected virtual void OnWriteStreamClosed (System.Net.WriteStreamClosedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.WriteStreamClosedEventArgs\n      description: A <xref href=\"System.Net.WriteStreamClosedEventArgs\"></xref> object containing event data.\n  overload: System.Net.WebClient.OnWriteStreamClosed*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenRead(System.String)\n  commentId: M:System.Net.WebClient.OpenRead(System.String)\n  id: OpenRead(System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenRead(String)\n  nameWithType: WebClient.OpenRead(String)\n  fullName: WebClient.OpenRead(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a readable stream for the data downloaded from a resource with the URI specified as a <xref href=\"System.String\"></xref>.\n  remarks: \"The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example opens the resource identified by `uriString` and displays the results on the system console. Note that the <xref:System.IO.Stream> returned by <xref:System.Net.WebClient.OpenRead%2A> is closed when the data has been read.  \\n  \\n [!code-cpp[WebClient_OpenRead#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenRead/CPP/webclient_openread.cpp#1)]\\n [!code-csharp[WebClient_OpenRead#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenRead/CS/webclient_openread.cs#1)]\\n [!code-vb[WebClient_OpenRead#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenRead/VB/webclient_openread.vb#1)]\"\n  syntax:\n    content: public System.IO.Stream OpenRead (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI specified as a <xref href=\"System.String\"></xref> from which to download data.\n    return:\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> used to read data from a resource.\n  overload: System.Net.WebClient.OpenRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading data.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenRead(System.Uri)\n  commentId: M:System.Net.WebClient.OpenRead(System.Uri)\n  id: OpenRead(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenRead(Uri)\n  nameWithType: WebClient.OpenRead(Uri)\n  fullName: WebClient.OpenRead(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a readable stream for the data downloaded from a resource with the URI specified as a <xref href=\"System.Uri\"></xref>\n  remarks: \"The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public System.IO.Stream OpenRead (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI specified as a <xref href=\"System.Uri\"></xref> from which to download data.\n    return:\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> used to read data from a resource.\n  overload: System.Net.WebClient.OpenRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading data.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenReadAsync(System.Uri)\n  commentId: M:System.Net.WebClient.OpenReadAsync(System.Uri)\n  id: OpenReadAsync(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenReadAsync(Uri)\n  nameWithType: WebClient.OpenReadAsync(Uri)\n  fullName: WebClient.OpenReadAsync(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a readable stream containing the specified resource. This method does not block the calling thread.\n  remarks: \"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenReadAsync%2A> method.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void OpenReadAsync (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to retrieve.\n  overload: System.Net.WebClient.OpenReadAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and address is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)\n  commentId: M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)\n  id: OpenReadAsync(System.Uri,System.Object)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenReadAsync(Uri, Object)\n  nameWithType: WebClient.OpenReadAsync(Uri, Object)\n  fullName: WebClient.OpenReadAsync(Uri, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a readable stream containing the specified resource. This method does not block the calling thread.\n  remarks: \"This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenRead%2A> method.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void OpenReadAsync (Uri address, object userToken);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to retrieve.\n    - id: userToken\n      type: System.Object\n      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.WebClient.OpenReadAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and address is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenReadCompleted\n  commentId: E:System.Net.WebClient.OpenReadCompleted\n  id: OpenReadCompleted\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenReadCompleted\n  nameWithType: WebClient.OpenReadCompleted\n  fullName: WebClient.OpenReadCompleted\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous operation to open a stream containing a resource completes.\n  remarks: \"This event is raised each time an asynchronous operation to open a stream containing a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.  \\n  \\n The <xref:System.Net.OpenReadCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenReadCompletedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#30](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#30)]\\n [!code-csharp[NCLWebClientAsync#30](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#30)]\\n [!code-vb[NCLWebClientAsync#30](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#30)]\"\n  syntax:\n    content: public event System.Net.OpenReadCompletedEventHandler OpenReadCompleted;\n    return:\n      type: System.Net.OpenReadCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenReadTaskAsync(System.String)\n  commentId: M:System.Net.WebClient.OpenReadTaskAsync(System.String)\n  id: OpenReadTaskAsync(System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenReadTaskAsync(String)\n  nameWithType: WebClient.OpenReadTaskAsync(String)\n  fullName: WebClient.OpenReadTaskAsync(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a readable stream containing the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \\n  \\n This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<System.IO.Stream> OpenReadTaskAsync (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to retrieve.\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.IO.Stream\\\"></xref> used to read data from a resource.\"\n  overload: System.Net.WebClient.OpenReadTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and address is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenReadTaskAsync(System.Uri)\n  commentId: M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)\n  id: OpenReadTaskAsync(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenReadTaskAsync(Uri)\n  nameWithType: WebClient.OpenReadTaskAsync(Uri)\n  fullName: WebClient.OpenReadTaskAsync(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a readable stream containing the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \\n  \\n This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \\n  \\n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<System.IO.Stream> OpenReadTaskAsync (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to retrieve.\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.IO.Stream\\\"></xref> used to read data from a resource.\"\n  overload: System.Net.WebClient.OpenReadTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and address is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while downloading the resource.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWrite(System.String)\n  commentId: M:System.Net.WebClient.OpenWrite(System.String)\n  id: OpenWrite(System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWrite(String)\n  nameWithType: WebClient.OpenWrite(String)\n  fullName: WebClient.OpenWrite(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource.\n  remarks: \"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example reads data from the command line and uses <xref:System.Net.WebClient.OpenWrite%2A> to obtain a stream for writing the data. Note that the <xref:System.IO.Stream> returned by <xref:System.Net.WebClient.OpenWrite%2A> is closed after the data is sent.  \\n  \\n [!code-cpp[WebClient_OpenWrite2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite2/CPP/webclient_openwrite2.cpp#1)]\\n [!code-csharp[WebClient_OpenWrite2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite2/CS/webclient_openwrite2.cs#1)]\\n [!code-vb[WebClient_OpenWrite2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite2/VB/webclient_openwrite2.vb#1)]\"\n  syntax:\n    content: public System.IO.Stream OpenWrite (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the data.\n    return:\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.\n  overload: System.Net.WebClient.OpenWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWrite(System.Uri)\n  commentId: M:System.Net.WebClient.OpenWrite(System.Uri)\n  id: OpenWrite(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWrite(Uri)\n  nameWithType: WebClient.OpenWrite(Uri)\n  fullName: WebClient.OpenWrite(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource.\n  remarks: \"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public System.IO.Stream OpenWrite (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    return:\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.\n  overload: System.Net.WebClient.OpenWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWrite(System.String,System.String)\n  commentId: M:System.Net.WebClient.OpenWrite(System.String,System.String)\n  id: OpenWrite(System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWrite(String, String)\n  nameWithType: WebClient.OpenWrite(String, String)\n  fullName: WebClient.OpenWrite(String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource, using the specified method.\n  remarks: \"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. The underlying request is made with the method specified in the `method` parameter. The data is sent to the server when you close the stream. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \\n  \\n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not specify an absolute address, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example reads data from the command line and uses <xref:System.Net.WebClient.OpenWrite%2A> to obtain a stream used to write the data. Note that the <xref:System.IO.Stream> returned by <xref:System.Net.WebClient.OpenWrite%2A> must be closed to send the data.  \\n  \\n [!code-cpp[WebClient_OpenWrite#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite/CPP/webclient_openwrite.cpp#1)]\\n [!code-csharp[WebClient_OpenWrite#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite/CS/webclient_openwrite.cs#1)]\\n [!code-vb[WebClient_OpenWrite#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite/VB/webclient_openwrite.vb#1)]\"\n  syntax:\n    content: public System.IO.Stream OpenWrite (string address, string method);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.\n    return:\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.\n  overload: System.Net.WebClient.OpenWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWrite(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.OpenWrite(System.Uri,System.String)\n  id: OpenWrite(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWrite(Uri, String)\n  nameWithType: WebClient.OpenWrite(Uri, String)\n  fullName: WebClient.OpenWrite(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource, by using the specified method.\n  remarks: \"The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public System.IO.Stream OpenWrite (Uri address, string method);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.\n    return:\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> used to write data to the resource.\n  overload: System.Net.WebClient.OpenWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)\n  commentId: M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)\n  id: OpenWriteAsync(System.Uri,System.String,System.Object)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWriteAsync(Uri, String, Object)\n  nameWithType: WebClient.OpenWriteAsync(Uri, String, Object)\n  fullName: WebClient.OpenWriteAsync(Uri, String, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource, using the specified method. This method does not block the calling thread.\n  remarks: \"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. The contents of the stream are sent to the server when you close the stream.  \\n  \\n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void OpenWriteAsync (Uri address, string method, object userToken);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: userToken\n      type: System.Object\n      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes\n  overload: System.Net.WebClient.OpenWriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)\n  id: OpenWriteAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWriteAsync(Uri, String)\n  nameWithType: WebClient.OpenWriteAsync(Uri, String)\n  fullName: WebClient.OpenWriteAsync(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource. This method does not block the calling thread.\n  remarks: \"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. When you close the stream, the thread blocks until the request is sent to `address` and a response is received.  \\n  \\n This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void OpenWriteAsync (Uri address, string method);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.\n  overload: System.Net.WebClient.OpenWriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWriteAsync(System.Uri)\n  commentId: M:System.Net.WebClient.OpenWriteAsync(System.Uri)\n  id: OpenWriteAsync(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWriteAsync(Uri)\n  nameWithType: WebClient.OpenWriteAsync(Uri)\n  fullName: WebClient.OpenWriteAsync(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource. This method does not block the calling thread.\n  remarks: \"This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. When you close the stream, the thread blocks until the request is sent to `address` and a response is received.  \\n  \\n This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void OpenWriteAsync (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n  overload: System.Net.WebClient.OpenWriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWriteCompleted\n  commentId: E:System.Net.WebClient.OpenWriteCompleted\n  id: OpenWriteCompleted\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWriteCompleted\n  nameWithType: WebClient.OpenWriteCompleted\n  fullName: WebClient.OpenWriteCompleted\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous operation to open a stream to write data to a resource completes.\n  remarks: \"This event is raised each time an asynchronous operation to open a stream that is used to send data to a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \\n  \\n The <xref:System.Net.OpenWriteCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenWriteCompletedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#14)]\\n [!code-csharp[NCLWebClientAsync#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#14)]\\n [!code-vb[NCLWebClientAsync#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#14)]\"\n  syntax:\n    content: public event System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted;\n    return:\n      type: System.Net.OpenWriteCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWriteTaskAsync(System.String)\n  commentId: M:System.Net.WebClient.OpenWriteTaskAsync(System.String)\n  id: OpenWriteTaskAsync(System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWriteTaskAsync(String)\n  nameWithType: WebClient.OpenWriteTaskAsync(String)\n  fullName: WebClient.OpenWriteTaskAsync(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \\n  \\n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the data.\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.IO.Stream\\\"></xref> used to write data to the resource.\"\n  overload: System.Net.WebClient.OpenWriteTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWriteTaskAsync(System.Uri)\n  commentId: M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)\n  id: OpenWriteTaskAsync(System.Uri)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWriteTaskAsync(Uri)\n  nameWithType: WebClient.OpenWriteTaskAsync(Uri)\n  fullName: WebClient.OpenWriteTaskAsync(Uri)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \\n  \\n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync (Uri address);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.IO.Stream\\\"></xref> used to write data to the resource.\"\n  overload: System.Net.WebClient.OpenWriteTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)\n  commentId: M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)\n  id: OpenWriteTaskAsync(System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWriteTaskAsync(String, String)\n  nameWithType: WebClient.OpenWriteTaskAsync(String, String)\n  fullName: WebClient.OpenWriteTaskAsync(String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \\n  \\n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync (string address, string method);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.IO.Stream\\\"></xref> used to write data to the resource.\"\n  overload: System.Net.WebClient.OpenWriteTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)\n  id: OpenWriteTaskAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: OpenWriteTaskAsync(Uri, String)\n  nameWithType: WebClient.OpenWriteTaskAsync(Uri, String)\n  fullName: WebClient.OpenWriteTaskAsync(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \\n  \\n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \\n  \\n> [!NOTE]\\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \\n  \\n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync (Uri address, string method);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.IO.Stream\\\"></xref> used to write data to the resource.\"\n  overload: System.Net.WebClient.OpenWriteTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.Proxy\n  commentId: P:System.Net.WebClient.Proxy\n  id: Proxy\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: Proxy\n  nameWithType: WebClient.Proxy\n  fullName: WebClient.Proxy\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets or sets the proxy used by this <xref href=\"System.Net.WebClient\"></xref> object.\n  remarks: \"The <xref:System.Net.WebClient.Proxy%2A> property identifies the <xref:System.Net.IWebProxy> instance that communicates with remote servers on behalf of this <xref:System.Net.WebClient> object. The proxy is set by the system using configuration files and the Internet Explorer Local Area Network settings. To specify that no proxy should be used, set the <xref:System.Net.WebClient.Proxy%2A> property to the proxy instance returned by the <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A> method.  \\n  \\n For information on automatic proxy detection, see [Automatic Proxy Detection](~/docs/framework/network-programming/automatic-proxy-detection.md).\"\n  syntax:\n    content: public System.Net.IWebProxy Proxy { get; set; }\n    return:\n      type: System.Net.IWebProxy\n      description: An <xref href=\"System.Net.IWebProxy\"></xref> instance used to send requests.\n  overload: System.Net.WebClient.Proxy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <xref href=\"System.Net.WebClient.Proxy\"></xref> is set to `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.QueryString\n  commentId: P:System.Net.WebClient.QueryString\n  id: QueryString\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: QueryString\n  nameWithType: WebClient.QueryString\n  fullName: WebClient.QueryString\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets or sets a collection of query name/value pairs associated with the request.\n  remarks: The <xref:System.Net.WebClient.QueryString%2A> property contains a <xref:System.Collections.Specialized.NameValueCollection> instance containing name/value pairs that are appended to the URI as a query string. The contents of the <xref:System.Net.WebClient.QueryString%2A> property are preceded by a question mark (?), and name/value pairs are separated from one another by an ampersand (&).\n  example:\n  - \"The following code example takes user input from the command line and builds a <xref:System.Collections.Specialized.NameValueCollection> that is assigned to the <xref:System.Net.WebClient.QueryString%2A> property. It then downloads the response from the server to a local file.  \\n  \\n [!code-cpp[WebClient_QueryString#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_QueryString/CPP/webclient_querystring.cpp#1)]\\n [!code-csharp[WebClient_QueryString#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_QueryString/CS/webclient_querystring.cs#1)]\\n [!code-vb[WebClient_QueryString#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_QueryString/VB/webclient_querystring.vb#1)]\"\n  syntax:\n    content: public System.Collections.Specialized.NameValueCollection QueryString { get; set; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains query name/value pairs associated with the request. If no pairs are associated with the request, the value is an empty <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref>.\n  overload: System.Net.WebClient.QueryString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.ResponseHeaders\n  commentId: P:System.Net.WebClient.ResponseHeaders\n  id: ResponseHeaders\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: ResponseHeaders\n  nameWithType: WebClient.ResponseHeaders\n  fullName: WebClient.ResponseHeaders\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets a collection of header name/value pairs associated with the response.\n  remarks: The <xref:System.Net.WebClient.ResponseHeaders%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing header information the <xref:System.Net.WebClient> receives with the response.\n  example:\n  - \"The following code example downloads and displays the <xref:System.Net.WebClient.ResponseHeaders%2A> returned by a server.  \\n  \\n [!code-cpp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#2)]\\n [!code-csharp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#2)]\\n [!code-vb[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#2)]\"\n  syntax:\n    content: public System.Net.WebHeaderCollection ResponseHeaders { get; }\n    return:\n      type: System.Net.WebHeaderCollection\n      description: A <xref href=\"System.Net.WebHeaderCollection\"></xref> containing header name/value pairs associated with the response, or `null` if no response has been received.\n  overload: System.Net.WebClient.ResponseHeaders*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadData(System.String,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadData(System.String,System.Byte[])\n  id: UploadData(System.String,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadData(String, Byte[])\n  nameWithType: WebClient.UploadData(String, Byte[])\n  fullName: WebClient.UploadData(String, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer to a resource identified by a URI.\n  remarks: \"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example converts a string entered from the console to a <xref:System.Byte> array and posts the array to the specified server using <xref:System.Net.WebClient.UploadData%2A>. Any response from the server is displayed to the console.  \\n  \\n [!code-cpp[WebClient_UpLoadData2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData2/CPP/webclient_uploaddata2.cpp#1)]\\n [!code-csharp[WebClient_UpLoadData2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData2/CS/webclient_uploaddata2.cs#1)]\\n [!code-vb[WebClient_UpLoadData2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData2/VB/webclient_uploaddata2.vb#1)]\"\n  syntax:\n    content: public byte[] UploadData (string address, byte[] data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the data.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n An error occurred while sending the data.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadData(System.Uri,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])\n  id: UploadData(System.Uri,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadData(Uri, Byte[])\n  nameWithType: WebClient.UploadData(Uri, Byte[])\n  fullName: WebClient.UploadData(Uri, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer to a resource identified by a URI.\n  remarks: \"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public byte[] UploadData (Uri address, byte[] data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n An error occurred while sending the data.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])\n  id: UploadData(System.String,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadData(String, String, Byte[])\n  nameWithType: WebClient.UploadData(String, String, Byte[])\n  fullName: WebClient.UploadData(String, String, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer to the specified resource, using the specified method.\n  remarks: \"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \\n  \\n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it.  \\n  \\n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example converts a string entered from the console into a byte array and posts the array to the specified server using <xref:System.Net.WebClient.UploadData%2A>. Any response from the server is displayed to the console.  \\n  \\n [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]\\n [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]\\n [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]\"\n  syntax:\n    content: public byte[] UploadData (string address, string method, byte[] data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n An error occurred while uploading the data.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])\n  id: UploadData(System.Uri,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadData(Uri, String, Byte[])\n  nameWithType: WebClient.UploadData(Uri, String, Byte[])\n  fullName: WebClient.UploadData(Uri, String, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer to the specified resource, using the specified method.\n  remarks: \"The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \\n  \\n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it.  \\n  \\n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public byte[] UploadData (Uri address, string method, byte[] data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n An error occurred while uploading the data.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])\n  id: UploadDataAsync(System.Uri,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadDataAsync(Uri, String, Byte[])\n  nameWithType: WebClient.UploadDataAsync(Uri, String, Byte[])\n  fullName: WebClient.UploadDataAsync(Uri, String, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer to a resource identified by a URI, using the specified method. This method does not block the calling thread.\n  remarks: \"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.  \\n  \\n This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadDataAsync (Uri address, string method, byte[] data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n  overload: System.Net.WebClient.UploadDataAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)\n  commentId: M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)\n  id: UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadDataAsync(Uri, String, Byte[], Object)\n  nameWithType: WebClient.UploadDataAsync(Uri, String, Byte[], Object)\n  fullName: WebClient.UploadDataAsync(Uri, String, Byte[], Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.\n  remarks: \"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.  \\n  \\n This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadDataAsync (Uri address, string method, byte[] data, object userToken);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n    - id: userToken\n      type: System.Object\n      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.WebClient.UploadDataAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])\n  id: UploadDataAsync(System.Uri,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadDataAsync(Uri, Byte[])\n  nameWithType: WebClient.UploadDataAsync(Uri, Byte[])\n  fullName: WebClient.UploadDataAsync(Uri, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer to a resource identified by a URI, using the POST method. This method does not block the calling thread.\n  remarks: \"This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.  \\n  \\n This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadDataAsync (Uri address, byte[] data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n  overload: System.Net.WebClient.UploadDataAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadDataCompleted\n  commentId: E:System.Net.WebClient.UploadDataCompleted\n  id: UploadDataCompleted\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadDataCompleted\n  nameWithType: WebClient.UploadDataCompleted\n  fullName: WebClient.UploadDataCompleted\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous data-upload operation completes.\n  remarks: \"This event is raised each time an asynchronous data upload operation completes. Asynchronous data uploads are started by calling the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \\n  \\n The <xref:System.Net.UploadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadDataCompletedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#36](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#36)]\\n [!code-csharp[NCLWebClientAsync#36](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#36)]\\n [!code-vb[NCLWebClientAsync#36](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#36)]\"\n  syntax:\n    content: public event System.Net.UploadDataCompletedEventHandler UploadDataCompleted;\n    return:\n      type: System.Net.UploadDataCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])\n  id: UploadDataTaskAsync(System.String,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadDataTaskAsync(String, Byte[])\n  nameWithType: WebClient.UploadDataTaskAsync(String, Byte[])\n  fullName: WebClient.UploadDataTaskAsync(String, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \\n  \\n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadDataTaskAsync (string address, byte[] data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the data.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.\"\n  overload: System.Net.WebClient.UploadDataTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])\n  id: UploadDataTaskAsync(System.Uri,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadDataTaskAsync(Uri, Byte[])\n  nameWithType: WebClient.UploadDataTaskAsync(Uri, Byte[])\n  fullName: WebClient.UploadDataTaskAsync(Uri, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \\n  \\n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadDataTaskAsync (Uri address, byte[] data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.\"\n  overload: System.Net.WebClient.UploadDataTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])\n  id: UploadDataTaskAsync(System.String,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadDataTaskAsync(String, String, Byte[])\n  nameWithType: WebClient.UploadDataTaskAsync(String, String, Byte[])\n  fullName: WebClient.UploadDataTaskAsync(String, String, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \\n  \\n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadDataTaskAsync (string address, string method, byte[] data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.\"\n  overload: System.Net.WebClient.UploadDataTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])\n  commentId: M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])\n  id: UploadDataTaskAsync(System.Uri,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadDataTaskAsync(Uri, String, Byte[])\n  nameWithType: WebClient.UploadDataTaskAsync(Uri, String, Byte[])\n  fullName: WebClient.UploadDataTaskAsync(Uri, String, Byte[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads a data buffer that contains a <xref href=\"System.Byte\"></xref> array to the URI specified as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \\n  \\n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadDataTaskAsync (Uri address, string method, byte[] data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the data.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Byte[]\n      description: The data buffer to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded.\"\n  overload: System.Net.WebClient.UploadDataTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFile(System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadFile(System.String,System.String)\n  id: UploadFile(System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFile(String, String)\n  nameWithType: WebClient.UploadFile(String, String)\n  fullName: WebClient.UploadFile(String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to a resource with the specified URI.\n  remarks: \"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \\n  \\n The `POST` method is defined by HTTP. If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example uploads the specified file to the specified URI using <xref:System.Net.WebClient.UploadFile%2A>. Any response returned by the server is displayed on the console.  \\n  \\n [!code-cpp[WebClient_UpLoadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile/CPP/webclient_uploadfile.cpp#1)]\\n [!code-csharp[WebClient_UpLoadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile/CS/webclient_uploadfile.cs#1)]\\n [!code-vb[WebClient_UpLoadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile/VB/webclient_uploadfile.vb#1)]  \\n  \\n The following code example shows an ASP.NET page that can accept posted files and is suitable for use with the <xref:System.Net.WebClient.UploadFile%2A> method. The page must reside on a Web server. Its address provides the value for the `address` parameter of the <xref:System.Net.WebClient.UploadFile%2A> method.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]  -->\"\n  syntax:\n    content: public byte[] UploadFile (string address, string fileName);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.\n    - id: fileName\n      type: System.String\n      description: The file to send to the resource. For example, \"samplefile.txt\".\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadFile*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid characters, or does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while uploading the file.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFile(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.UploadFile(System.Uri,System.String)\n  id: UploadFile(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFile(Uri, String)\n  nameWithType: WebClient.UploadFile(Uri, String)\n  fullName: WebClient.UploadFile(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to a resource with the specified URI.\n  remarks: \"The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \\n  \\n The `POST` method is defined by HTTP. If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public byte[] UploadFile (Uri address, string fileName);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.\n    - id: fileName\n      type: System.String\n      description: The file to send to the resource. For example, \"samplefile.txt\".\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadFile*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid characters, or does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while uploading the file.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFile(System.String,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)\n  id: UploadFile(System.String,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFile(String, String, String)\n  nameWithType: WebClient.UploadFile(String, String, String)\n  fullName: WebClient.UploadFile(String, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to the specified resource, using the specified method.\n  remarks: \"When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \\n  \\n If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example uploads the specified file to the specified URI using <xref:System.Net.WebClient.UploadFile%2A>. Any response returned by the server is displayed on the console.  \\n  \\n [!code-cpp[WebClient_UpLoadFile2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CPP/webclient_uploadfile2.cpp#1)]\\n [!code-csharp[WebClient_UpLoadFile2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CS/webclient_uploadfile2.cs#1)]\\n [!code-vb[WebClient_UpLoadFile2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile2/VB/webclient_uploadfile2.vb#1)]  \\n  \\n The following code example shows an ASP.NET page that can accept posted files and is suitable for use with the <xref:System.Net.WebClient.UploadFile%2A> method. The page must reside on a Web server. Its address provides the value for the `address` parameter of the <xref:System.Net.WebClient.UploadFile%2A> method.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]  -->\"\n  syntax:\n    content: public byte[] UploadFile (string address, string method, string fileName);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the file.\n    - id: method\n      type: System.String\n      description: The method used to send the file to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: fileName\n      type: System.String\n      description: The file to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadFile*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid characters, or does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while uploading the file.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)\n  id: UploadFile(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFile(Uri, String, String)\n  nameWithType: WebClient.UploadFile(Uri, String, String)\n  fullName: WebClient.UploadFile(Uri, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to the specified resource, using the specified method.\n  remarks: \"When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \\n  \\n If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public byte[] UploadFile (Uri address, string method, string fileName);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the file.\n    - id: method\n      type: System.String\n      description: The method used to send the file to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: fileName\n      type: System.String\n      description: The file to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadFile*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid characters, or does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while uploading the file.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)\n  id: UploadFileAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFileAsync(Uri, String)\n  nameWithType: WebClient.UploadFileAsync(Uri, String)\n  fullName: WebClient.UploadFileAsync(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.\n  remarks: \"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.  \\n  \\n This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadFileAsync (Uri address, string fileName);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: fileName\n      type: System.String\n      description: The file to send to the resource.\n  overload: System.Net.WebClient.UploadFileAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid character, or the specified path to the file does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)\n  id: UploadFileAsync(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFileAsync(Uri, String, String)\n  nameWithType: WebClient.UploadFileAsync(Uri, String, String)\n  fullName: WebClient.UploadFileAsync(Uri, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.\n  remarks: \"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.  \\n  \\n This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadFileAsync (Uri address, string method, string fileName);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: fileName\n      type: System.String\n      description: The file to send to the resource.\n  overload: System.Net.WebClient.UploadFileAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid character, or the specified path to the file does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)\n  commentId: M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)\n  id: UploadFileAsync(System.Uri,System.String,System.String,System.Object)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFileAsync(Uri, String, String, Object)\n  nameWithType: WebClient.UploadFileAsync(Uri, String, String, Object)\n  fullName: WebClient.UploadFileAsync(Uri, String, String, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.\n  remarks: \"The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.  \\n  \\n This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadFileAsync (Uri address, string method, string fileName, object userToken);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: fileName\n      type: System.String\n      description: The file to send to the resource.\n    - id: userToken\n      type: System.Object\n      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.WebClient.UploadFileAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid character, or the specified path to the file does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFileCompleted\n  commentId: E:System.Net.WebClient.UploadFileCompleted\n  id: UploadFileCompleted\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFileCompleted\n  nameWithType: WebClient.UploadFileCompleted\n  fullName: WebClient.UploadFileCompleted\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous file-upload operation completes.\n  remarks: \"This event is raised each time an asynchronous file upload operation completes. Asynchronous file uploads are started by calling the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \\n  \\n The <xref:System.Net.UploadFileCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadFileCompletedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]\\n [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]\\n [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]\"\n  syntax:\n    content: public event System.Net.UploadFileCompletedEventHandler UploadFileCompleted;\n    return:\n      type: System.Net.UploadFileCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)\n  id: UploadFileTaskAsync(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFileTaskAsync(Uri, String, String)\n  nameWithType: WebClient.UploadFileTaskAsync(Uri, String, String)\n  fullName: WebClient.UploadFileTaskAsync(Uri, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to a resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadFileTaskAsync (Uri address, string method, string fileName);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: fileName\n      type: System.String\n      description: The local file to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the body of the response received from the resource when the file was uploaded.\"\n  overload: System.Net.WebClient.UploadFileTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid character, or the specified path to the file does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)\n  id: UploadFileTaskAsync(System.String,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFileTaskAsync(String, String, String)\n  nameWithType: WebClient.UploadFileTaskAsync(String, String, String)\n  fullName: WebClient.UploadFileTaskAsync(String, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to a resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadFileTaskAsync (string address, string method, string fileName);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: method\n      type: System.String\n      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.\n    - id: fileName\n      type: System.String\n      description: The local file to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the body of the response received from the resource when the file was uploaded.\"\n  overload: System.Net.WebClient.UploadFileTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid character, or the specified path to the file does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)\n  id: UploadFileTaskAsync(System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFileTaskAsync(String, String)\n  nameWithType: WebClient.UploadFileTaskAsync(String, String)\n  fullName: WebClient.UploadFileTaskAsync(String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to a resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadFileTaskAsync (string address, string fileName);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: fileName\n      type: System.String\n      description: The local file to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the body of the response received from the resource when the file was uploaded.\"\n  overload: System.Net.WebClient.UploadFileTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid character, or the specified path to the file does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)\n  id: UploadFileTaskAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadFileTaskAsync(Uri, String)\n  nameWithType: WebClient.UploadFileTaskAsync(Uri, String)\n  fullName: WebClient.UploadFileTaskAsync(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified local file to a resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadFileTaskAsync (Uri address, string fileName);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: fileName\n      type: System.String\n      description: The local file to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the body of the response received from the resource when the file was uploaded.\"\n  overload: System.Net.WebClient.UploadFileTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>fileName</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>fileName</code> is `null`, is <xref href=\\\"System.String.Empty\\\"></xref>, contains invalid character, or the specified path to the file does not exist.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header begins with `multipart`.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadProgressChanged\n  commentId: E:System.Net.WebClient.UploadProgressChanged\n  id: UploadProgressChanged\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadProgressChanged\n  nameWithType: WebClient.UploadProgressChanged\n  fullName: WebClient.UploadProgressChanged\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous upload operation successfully transfers some or all of the data.\n  remarks: \"This event is raised each time an asynchronous upload makes progress. This event is raised when uploads are started using any of the following methods.  \\n  \\n|Method|Description|  \\n|------------|-----------------|  \\n|<xref:System.Net.WebClient.UploadDataAsync%2A>|Sends a <xref:System.Byte> array to the resource, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.UploadFileAsync%2A>|Sends a local file to the resource, without blocking the calling thread.|  \\n|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread.|  \\n  \\n The <xref:System.Net.UploadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.UploadProgressChangedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]\\n [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]\\n [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  \\n  \\n The following code example shows an implementation of a handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]\\n [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]\\n [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]\"\n  syntax:\n    content: public event System.Net.UploadProgressChangedEventHandler UploadProgressChanged;\n    return:\n      type: System.Net.UploadProgressChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadString(System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadString(System.String,System.String)\n  id: UploadString(System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadString(String, String)\n  nameWithType: WebClient.UploadString(String, String)\n  fullName: WebClient.UploadString(String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource, using the POST method.\n  remarks: \"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]\\n [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]\\n [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]\"\n  syntax:\n    content: public string UploadString (string address, string data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the response sent by the server.\n  overload: System.Net.WebClient.UploadString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadString(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.UploadString(System.Uri,System.String)\n  id: UploadString(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadString(Uri, String)\n  nameWithType: WebClient.UploadString(Uri, String)\n  fullName: WebClient.UploadString(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource, using the POST method.\n  remarks: \"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public string UploadString (Uri address, string data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the response sent by the server.\n  overload: System.Net.WebClient.UploadString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadString(System.String,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadString(System.String,System.String,System.String)\n  id: UploadString(System.String,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadString(String, String, String)\n  nameWithType: WebClient.UploadString(String, String, String)\n  fullName: WebClient.UploadString(String, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource, using the specified method.\n  remarks: \"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cpp[NCLWebClientAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#2)]\\n [!code-csharp[NCLWebClientAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#2)]\\n [!code-vb[NCLWebClientAsync#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#2)]\"\n  syntax:\n    content: public string UploadString (string address, string method, string data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the <code>method</code> method.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the response sent by the server.\n  overload: System.Net.WebClient.UploadString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadString(System.Uri,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)\n  id: UploadString(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadString(Uri, String, String)\n  nameWithType: WebClient.UploadString(Uri, String, String)\n  fullName: WebClient.UploadString(Uri, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource, using the specified method.\n  remarks: \"Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public string UploadString (Uri address, string method, string data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the <code>method</code> method.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the response sent by the server.\n  overload: System.Net.WebClient.UploadString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)\n  id: UploadStringAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadStringAsync(Uri, String)\n  nameWithType: WebClient.UploadStringAsync(Uri, String)\n  fullName: WebClient.UploadStringAsync(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource. This method does not block the calling thread.\n  remarks: \"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \\n  \\n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadStringAsync (Uri address, string data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n  overload: System.Net.WebClient.UploadStringAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)\n  id: UploadStringAsync(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadStringAsync(Uri, String, String)\n  nameWithType: WebClient.UploadStringAsync(Uri, String, String)\n  fullName: WebClient.UploadStringAsync(Uri, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource. This method does not block the calling thread.\n  remarks: \"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \\n  \\n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadStringAsync (Uri address, string method, string data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n  overload: System.Net.WebClient.UploadStringAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)\n  commentId: M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)\n  id: UploadStringAsync(System.Uri,System.String,System.String,System.Object)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadStringAsync(Uri, String, String, Object)\n  nameWithType: WebClient.UploadStringAsync(Uri, String, String, Object)\n  fullName: WebClient.UploadStringAsync(Uri, String, String, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource. This method does not block the calling thread.\n  remarks: \"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \\n  \\n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadStringAsync (Uri address, string method, string data, object userToken);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n    - id: userToken\n      type: System.Object\n      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.WebClient.UploadStringAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadStringCompleted\n  commentId: E:System.Net.WebClient.UploadStringCompleted\n  id: UploadStringCompleted\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadStringCompleted\n  nameWithType: WebClient.UploadStringCompleted\n  fullName: WebClient.UploadStringCompleted\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous string-upload operation completes.\n  remarks: \"This event is raised each time an asynchronous string upload operation completes. Asynchronous string uploads are started by calling the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \\n  \\n The <xref:System.Net.UploadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadStringCompletedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates setting an event handler for this event.  \\n  \\n [!code-cpp[NCLWebClientAsync#38](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#38)]\\n [!code-csharp[NCLWebClientAsync#38](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#38)]\\n [!code-vb[NCLWebClientAsync#38](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#38)]\"\n  syntax:\n    content: public event System.Net.UploadStringCompletedEventHandler UploadStringCompleted;\n    return:\n      type: System.Net.UploadStringCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)\n  id: UploadStringTaskAsync(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadStringTaskAsync(Uri, String, String)\n  nameWithType: WebClient.UploadStringTaskAsync(Uri, String, String)\n  fullName: WebClient.UploadStringTaskAsync(Uri, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<string> UploadStringTaskAsync (Uri address, string method, string data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.String\\\"></xref> containing the response sent by the server.\"\n  overload: System.Net.WebClient.UploadStringTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)\n  id: UploadStringTaskAsync(System.String,System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadStringTaskAsync(String, String, String)\n  nameWithType: WebClient.UploadStringTaskAsync(String, String, String)\n  fullName: WebClient.UploadStringTaskAsync(String, String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<string> UploadStringTaskAsync (string address, string method, string data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.String\\\"></xref> containing the response sent by the server.\"\n  overload: System.Net.WebClient.UploadStringTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)\n  commentId: M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)\n  id: UploadStringTaskAsync(System.String,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadStringTaskAsync(String, String)\n  nameWithType: WebClient.UploadStringTaskAsync(String, String)\n  fullName: WebClient.UploadStringTaskAsync(String, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<string> UploadStringTaskAsync (string address, string data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.String\\\"></xref> containing the response sent by the server.\"\n  overload: System.Net.WebClient.UploadStringTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)\n  commentId: M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)\n  id: UploadStringTaskAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadStringTaskAsync(Uri, String)\n  nameWithType: WebClient.UploadStringTaskAsync(Uri, String)\n  fullName: WebClient.UploadStringTaskAsync(Uri, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified string to the specified resource as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<string> UploadStringTaskAsync (Uri address, string data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.\n    - id: data\n      type: System.String\n      description: The string to be uploaded.\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.String\\\"></xref> containing the response sent by the server.\"\n  overload: System.Net.WebClient.UploadStringTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)\n  id: UploadValues(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValues(String, NameValueCollection)\n  nameWithType: WebClient.UploadValues(String, NameValueCollection)\n  fullName: WebClient.UploadValues(String, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified name/value collection to the resource identified by the specified URI.\n  remarks: \"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \\n  \\n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the Content-type header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to \\\"application/x-www-form-urlencoded\\\".  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example gathers information from the user (name, age, and address) and posts the values to the server using <xref:System.Net.WebClient.UploadValues%2A>. Any response from the server is displayed on the console.  \\n  \\n [!code-cpp[WebClient_UploadValues#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues/CPP/webclient_uploadvalues.cpp#1)]\\n [!code-csharp[WebClient_UploadValues#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues/CS/webclient_uploadvalues.cs#1)]\\n [!code-vb[WebClient_UploadValues#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues/VB/webclient_uploadvalues.vb#1)]\"\n  syntax:\n    content: public byte[] UploadValues (string address, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the collection.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadValues*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n The `Content-type` header is not `null` or \\\"application/x-www-form-urlencoded\\\".\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)\n  id: UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValues(Uri, NameValueCollection)\n  nameWithType: WebClient.UploadValues(Uri, NameValueCollection)\n  fullName: WebClient.UploadValues(Uri, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified name/value collection to the resource identified by the specified URI.\n  remarks: \"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \\n  \\n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the Content-type header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to \\\"application/x-www-form-urlencoded\\\".  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public byte[] UploadValues (Uri address, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the collection.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadValues*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n The `Content-type` header is not `null` or \\\"application/x-www-form-urlencoded\\\".\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  id: UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValues(String, String, NameValueCollection)\n  nameWithType: WebClient.UploadValues(String, String, NameValueCollection)\n  fullName: WebClient.UploadValues(String, String, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.\n  remarks: \"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \\n  \\n If the `Content-type` header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to `application/x-www-form-urlencoded`.  \\n  \\n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example gathers information from the user (name, age, and address) and posts the values to the server using <xref:System.Net.WebClient.UploadValues%2A>. Any response from the server is displayed on the console.  \\n  \\n [!code-cpp[WebClient_UploadValues2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues2/CPP/webclient_uploadvalues2.cpp#1)]\\n [!code-csharp[WebClient_UploadValues2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues2/CS/webclient_uploadvalues2.cs#1)]\\n [!code-vb[WebClient_UploadValues2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues2/VB/webclient_uploadvalues2.vb#1)]\"\n  syntax:\n    content: public byte[] UploadValues (string address, string method, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the collection.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadValues*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  id: UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValues(Uri, String, NameValueCollection)\n  nameWithType: WebClient.UploadValues(Uri, String, NameValueCollection)\n  fullName: WebClient.UploadValues(Uri, String, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.\n  remarks: \"The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \\n  \\n If the `Content-type` header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to `application/x-www-form-urlencoded`.  \\n  \\n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public byte[] UploadValues (Uri address, string method, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the collection.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the body of the response from the resource.\n  overload: System.Net.WebClient.UploadValues*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  id: UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValuesAsync(Uri, NameValueCollection)\n  nameWithType: WebClient.UploadValuesAsync(Uri, NameValueCollection)\n  fullName: WebClient.UploadValuesAsync(Uri, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the data in the specified name/value collection to the resource identified by the specified URI. This method does not block the calling thread.\n  remarks: \"This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \\n  \\n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadValuesAsync (Uri address, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the default method.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n  overload: System.Net.WebClient.UploadValuesAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  id: UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValuesAsync(Uri, String, NameValueCollection)\n  nameWithType: WebClient.UploadValuesAsync(Uri, String, NameValueCollection)\n  fullName: WebClient.UploadValuesAsync(Uri, String, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread.\n  remarks: \"This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource. Use this method to send form data to a URI for processing. The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \\\"application/x-www-form-urlencoded\\\". The header is set correctly by default. The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection.  \\n  \\n If the `method` method is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.  \\n  \\n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the <code>method</code> method.\n    - id: method\n      type: System.String\n      description: The method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n  overload: System.Net.WebClient.UploadValuesAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)\n  commentId: M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)\n  id: UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValuesAsync(Uri, String, NameValueCollection, Object)\n  nameWithType: WebClient.UploadValuesAsync(Uri, String, NameValueCollection, Object)\n  fullName: WebClient.UploadValuesAsync(Uri, String, NameValueCollection, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.\n  remarks: \"This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource. Use this method to send form data to a URI for processing. The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \\\"application/x-www-form-urlencoded\\\". The header is set correctly by default. The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection.  \\n  \\n If the `method` method is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.  \\n  \\n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data, object userToken);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the <code>method</code> method.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n    - id: userToken\n      type: System.Object\n      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.WebClient.UploadValuesAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref> and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValuesCompleted\n  commentId: E:System.Net.WebClient.UploadValuesCompleted\n  id: UploadValuesCompleted\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValuesCompleted\n  nameWithType: WebClient.UploadValuesCompleted\n  fullName: WebClient.UploadValuesCompleted\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous upload of a name/value collection completes.\n  remarks: \"This event is raised each time an asynchronous upload of a <xref:System.Collections.Specialized.NameValueCollection> object's data completes. These uploads are started by calling the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \\n  \\n The <xref:System.Net.UploadValuesCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadValuesCompletedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  syntax:\n    content: public event System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted;\n    return:\n      type: System.Net.UploadValuesCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  id: UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValuesTaskAsync(String, String, NameValueCollection)\n  nameWithType: WebClient.UploadValuesTaskAsync(String, String, NameValueCollection)\n  fullName: WebClient.UploadValuesTaskAsync(String, String, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the Content-type header is `null`, this method sets it to \\\"application/x-www-form-urlencoded\\\".  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadValuesTaskAsync (string address, string method, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the collection.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the response sent by the server.\"\n  overload: System.Net.WebClient.UploadValuesTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n The `Content-type` header is not `null` or \\\"application/x-www-form-urlencoded\\\".\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)\n  id: UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValuesTaskAsync(String, NameValueCollection)\n  nameWithType: WebClient.UploadValuesTaskAsync(String, NameValueCollection)\n  fullName: WebClient.UploadValuesTaskAsync(String, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the Content-type header is `null`, this method sets it to \\\"application/x-www-form-urlencoded\\\".  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadValuesTaskAsync (string address, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.String\n      description: The URI of the resource to receive the collection.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the response sent by the server.\"\n  overload: System.Net.WebClient.UploadValuesTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n The `Content-type` header is not `null` or \\\"application/x-www-form-urlencoded\\\".\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  id: UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValuesTaskAsync(Uri, NameValueCollection)\n  nameWithType: WebClient.UploadValuesTaskAsync(Uri, NameValueCollection)\n  fullName: WebClient.UploadValuesTaskAsync(Uri, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the Content-type header is `null`, this method sets it to \\\"application/x-www-form-urlencoded\\\".  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadValuesTaskAsync (Uri address, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the collection.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the response sent by the server.\"\n  overload: System.Net.WebClient.UploadValuesTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  id: UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UploadValuesTaskAsync(Uri, String, NameValueCollection)\n  nameWithType: WebClient.UploadValuesTaskAsync(Uri, String, NameValueCollection)\n  fullName: WebClient.UploadValuesTaskAsync(Uri, String, NameValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \\n  \\n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \\n  \\n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \\n  \\n If the Content-type header is `null`, this method sets it to \\\"application/x-www-form-urlencoded\\\".  \\n  \\n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\\\"\\\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \\n  \\n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task<byte[]> UploadValuesTaskAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);\n    parameters:\n    - id: address\n      type: System.Uri\n      description: The URI of the resource to receive the collection.\n    - id: method\n      type: System.String\n      description: The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.\n    - id: data\n      type: System.Collections.Specialized.NameValueCollection\n      description: The <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> to send to the resource.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns a <xref href=\\\"System.Byte\\\"></xref> array containing the response sent by the server.\"\n  overload: System.Net.WebClient.UploadValuesTaskAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>address</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>data</code> parameter is `null`.\"\n  - type: System.Net.WebException\n    commentId: T:System.Net.WebException\n    description: \"The URI formed by combining <xref href=\\\"System.Net.WebClient.BaseAddress\\\"></xref>, and <code>address</code> is invalid.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be used to send content.  \\n  \\n -or-  \\n  \\n There was no response from the server hosting the resource.  \\n  \\n -or-  \\n  \\n An error occurred while opening the stream.  \\n  \\n -or-  \\n  \\n The `Content-type` header is not `null` or \\\"application/x-www-form-urlencoded\\\".\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.UseDefaultCredentials\n  commentId: P:System.Net.WebClient.UseDefaultCredentials\n  id: UseDefaultCredentials\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: UseDefaultCredentials\n  nameWithType: WebClient.UseDefaultCredentials\n  fullName: WebClient.UseDefaultCredentials\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Gets or sets a <xref href=\"System.Boolean\"></xref> value that controls whether the <xref href=\"System.Net.CredentialCache.DefaultCredentials\"></xref> are sent with requests.\n  remarks: Set this property to `true` when requests made by this <xref:System.Net.WebClient> object should, if requested by the server, be authenticated using the default credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref:System.Net.WebClient.Credentials%2A> property to the credentials of the client on whose behalf the request is made.\n  example:\n  - \"The following code example demonstrates setting this property.  \\n  \\n [!code-cpp[NCLWebClientAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#3)]\\n [!code-csharp[NCLWebClientAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#3)]\\n [!code-vb[NCLWebClientAsync#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#3)]\"\n  syntax:\n    content: public bool UseDefaultCredentials { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the default credentials are used; otherwise `false`. The default value is `false`.'\n  overload: System.Net.WebClient.UseDefaultCredentials*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebClient.WriteStreamClosed\n  commentId: E:System.Net.WebClient.WriteStreamClosed\n  id: WriteStreamClosed\n  parent: System.Net.WebClient\n  langs:\n  - csharp\n  name: WriteStreamClosed\n  nameWithType: WebClient.WriteStreamClosed\n  fullName: WebClient.WriteStreamClosed\n  type: Event\n  assemblies:\n  - System\n  - System.Net.WebClient\n  namespace: System.Net\n  summary: Occurs when an asynchronous operation to write data to a resource using a write stream is closed.\n  remarks: \"This event is raised each time an asynchronous operation used to write data to a resource using a write stream is closed. These operations result from calls to the <xref:System.Net.WebClient.OpenWriteTaskAsync%2A> methods.  \\n  \\n The <xref:System.Net.WriteStreamClosedEventHandler> is the delegate for this event. The <xref:System.Net.WriteStreamClosedEventArgs> class provides the event handler with event data.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.\", true)]\n\n      public event System.Net.WriteStreamClosedEventHandler WriteStreamClosed;\n    return:\n      type: System.Net.WriteStreamClosedEventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.ComponentModel.Component\n  parent: System.ComponentModel\n  isExternal: false\n  name: Component\n  nameWithType: Component\n  fullName: System.ComponentModel.Component\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Net.WebException\n  parent: System.Net\n  isExternal: false\n  name: WebException\n  nameWithType: WebException\n  fullName: System.Net.WebException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Net.WebClient.#ctor\n  parent: System.Net.WebClient\n  isExternal: false\n  name: WebClient()\n  nameWithType: WebClient.WebClient()\n  fullName: WebClient.WebClient()\n- uid: System.Net.WebClient.AllowReadStreamBuffering\n  parent: System.Net.WebClient\n  isExternal: false\n  name: AllowReadStreamBuffering\n  nameWithType: WebClient.AllowReadStreamBuffering\n  fullName: WebClient.AllowReadStreamBuffering\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.WebClient.AllowWriteStreamBuffering\n  parent: System.Net.WebClient\n  isExternal: false\n  name: AllowWriteStreamBuffering\n  nameWithType: WebClient.AllowWriteStreamBuffering\n  fullName: WebClient.AllowWriteStreamBuffering\n- uid: System.Net.WebClient.BaseAddress\n  parent: System.Net.WebClient\n  isExternal: false\n  name: BaseAddress\n  nameWithType: WebClient.BaseAddress\n  fullName: WebClient.BaseAddress\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.WebClient.CachePolicy\n  parent: System.Net.WebClient\n  isExternal: false\n  name: CachePolicy\n  nameWithType: WebClient.CachePolicy\n  fullName: WebClient.CachePolicy\n- uid: System.Net.Cache.RequestCachePolicy\n  parent: System.Net.Cache\n  isExternal: false\n  name: RequestCachePolicy\n  nameWithType: RequestCachePolicy\n  fullName: System.Net.Cache.RequestCachePolicy\n- uid: System.Net.WebClient.CancelAsync\n  parent: System.Net.WebClient\n  isExternal: false\n  name: CancelAsync()\n  nameWithType: WebClient.CancelAsync()\n  fullName: WebClient.CancelAsync()\n- uid: System.Net.WebClient.Credentials\n  parent: System.Net.WebClient\n  isExternal: false\n  name: Credentials\n  nameWithType: WebClient.Credentials\n  fullName: WebClient.Credentials\n- uid: System.Net.ICredentials\n  parent: System.Net\n  isExternal: false\n  name: ICredentials\n  nameWithType: ICredentials\n  fullName: System.Net.ICredentials\n- uid: System.Net.WebClient.DownloadData(System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadData(String)\n  nameWithType: WebClient.DownloadData(String)\n  fullName: WebClient.DownloadData(String)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.WebClient.DownloadData(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadData(Uri)\n  nameWithType: WebClient.DownloadData(Uri)\n  fullName: WebClient.DownloadData(Uri)\n- uid: System.Uri\n  parent: System\n  isExternal: false\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Net.WebClient.DownloadDataAsync(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadDataAsync(Uri)\n  nameWithType: WebClient.DownloadDataAsync(Uri)\n  fullName: WebClient.DownloadDataAsync(Uri)\n- uid: System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadDataAsync(Uri, Object)\n  nameWithType: WebClient.DownloadDataAsync(Uri, Object)\n  fullName: WebClient.DownloadDataAsync(Uri, Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.WebClient.DownloadDataCompleted\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadDataCompleted\n  nameWithType: WebClient.DownloadDataCompleted\n  fullName: WebClient.DownloadDataCompleted\n- uid: System.Net.DownloadDataCompletedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: DownloadDataCompletedEventHandler\n  nameWithType: DownloadDataCompletedEventHandler\n  fullName: System.Net.DownloadDataCompletedEventHandler\n- uid: System.Net.WebClient.DownloadDataTaskAsync(System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadDataTaskAsync(String)\n  nameWithType: WebClient.DownloadDataTaskAsync(String)\n  fullName: WebClient.DownloadDataTaskAsync(String)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Byte[]}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Byte[]>\n  nameWithType: Task<Byte[]>\n  fullName: System.Threading.Tasks.Task<System.Byte[]>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.WebClient.DownloadDataTaskAsync(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadDataTaskAsync(Uri)\n  nameWithType: WebClient.DownloadDataTaskAsync(Uri)\n  fullName: WebClient.DownloadDataTaskAsync(Uri)\n- uid: System.Net.WebClient.DownloadFile(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFile(Uri, String)\n  nameWithType: WebClient.DownloadFile(Uri, String)\n  fullName: WebClient.DownloadFile(Uri, String)\n- uid: System.Net.WebClient.DownloadFile(System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFile(String, String)\n  nameWithType: WebClient.DownloadFile(String, String)\n  fullName: WebClient.DownloadFile(String, String)\n- uid: System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFileAsync(Uri, String)\n  nameWithType: WebClient.DownloadFileAsync(Uri, String)\n  fullName: WebClient.DownloadFileAsync(Uri, String)\n- uid: System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFileAsync(Uri, String, Object)\n  nameWithType: WebClient.DownloadFileAsync(Uri, String, Object)\n  fullName: WebClient.DownloadFileAsync(Uri, String, Object)\n- uid: System.Net.WebClient.DownloadFileCompleted\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFileCompleted\n  nameWithType: WebClient.DownloadFileCompleted\n  fullName: WebClient.DownloadFileCompleted\n- uid: System.ComponentModel.AsyncCompletedEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: AsyncCompletedEventHandler\n  nameWithType: AsyncCompletedEventHandler\n  fullName: System.ComponentModel.AsyncCompletedEventHandler\n- uid: System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFileTaskAsync(String, String)\n  nameWithType: WebClient.DownloadFileTaskAsync(String, String)\n  fullName: WebClient.DownloadFileTaskAsync(String, String)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFileTaskAsync(Uri, String)\n  nameWithType: WebClient.DownloadFileTaskAsync(Uri, String)\n  fullName: WebClient.DownloadFileTaskAsync(Uri, String)\n- uid: System.Net.WebClient.DownloadProgressChanged\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadProgressChanged\n  nameWithType: WebClient.DownloadProgressChanged\n  fullName: WebClient.DownloadProgressChanged\n- uid: System.Net.DownloadProgressChangedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: DownloadProgressChangedEventHandler\n  nameWithType: DownloadProgressChangedEventHandler\n  fullName: System.Net.DownloadProgressChangedEventHandler\n- uid: System.Net.WebClient.DownloadString(System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadString(String)\n  nameWithType: WebClient.DownloadString(String)\n  fullName: WebClient.DownloadString(String)\n- uid: System.Net.WebClient.DownloadString(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadString(Uri)\n  nameWithType: WebClient.DownloadString(Uri)\n  fullName: WebClient.DownloadString(Uri)\n- uid: System.Net.WebClient.DownloadStringAsync(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadStringAsync(Uri)\n  nameWithType: WebClient.DownloadStringAsync(Uri)\n  fullName: WebClient.DownloadStringAsync(Uri)\n- uid: System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadStringAsync(Uri, Object)\n  nameWithType: WebClient.DownloadStringAsync(Uri, Object)\n  fullName: WebClient.DownloadStringAsync(Uri, Object)\n- uid: System.Net.WebClient.DownloadStringCompleted\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadStringCompleted\n  nameWithType: WebClient.DownloadStringCompleted\n  fullName: WebClient.DownloadStringCompleted\n- uid: System.Net.DownloadStringCompletedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: DownloadStringCompletedEventHandler\n  nameWithType: DownloadStringCompletedEventHandler\n  fullName: System.Net.DownloadStringCompletedEventHandler\n- uid: System.Net.WebClient.DownloadStringTaskAsync(System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadStringTaskAsync(String)\n  nameWithType: WebClient.DownloadStringTaskAsync(String)\n  fullName: WebClient.DownloadStringTaskAsync(String)\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<String>\n  nameWithType: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.WebClient.DownloadStringTaskAsync(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadStringTaskAsync(Uri)\n  nameWithType: WebClient.DownloadStringTaskAsync(Uri)\n  fullName: WebClient.DownloadStringTaskAsync(Uri)\n- uid: System.Net.WebClient.Encoding\n  parent: System.Net.WebClient\n  isExternal: false\n  name: Encoding\n  nameWithType: WebClient.Encoding\n  fullName: WebClient.Encoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.Net.WebClient.GetWebRequest(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: GetWebRequest(Uri)\n  nameWithType: WebClient.GetWebRequest(Uri)\n  fullName: WebClient.GetWebRequest(Uri)\n- uid: System.Net.WebRequest\n  parent: System.Net\n  isExternal: false\n  name: WebRequest\n  nameWithType: WebRequest\n  fullName: System.Net.WebRequest\n- uid: System.Net.WebClient.GetWebResponse(System.Net.WebRequest)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: GetWebResponse(WebRequest)\n  nameWithType: WebClient.GetWebResponse(WebRequest)\n  fullName: WebClient.GetWebResponse(WebRequest)\n- uid: System.Net.WebResponse\n  parent: System.Net\n  isExternal: false\n  name: WebResponse\n  nameWithType: WebResponse\n  fullName: System.Net.WebResponse\n- uid: System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: GetWebResponse(WebRequest, IAsyncResult)\n  nameWithType: WebClient.GetWebResponse(WebRequest, IAsyncResult)\n  fullName: WebClient.GetWebResponse(WebRequest, IAsyncResult)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Net.WebClient.Headers\n  parent: System.Net.WebClient\n  isExternal: false\n  name: Headers\n  nameWithType: WebClient.Headers\n  fullName: WebClient.Headers\n- uid: System.Net.WebHeaderCollection\n  parent: System.Net\n  isExternal: false\n  name: WebHeaderCollection\n  nameWithType: WebHeaderCollection\n  fullName: System.Net.WebHeaderCollection\n- uid: System.Net.WebClient.IsBusy\n  parent: System.Net.WebClient\n  isExternal: false\n  name: IsBusy\n  nameWithType: WebClient.IsBusy\n  fullName: WebClient.IsBusy\n- uid: System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnDownloadDataCompleted(DownloadDataCompletedEventArgs)\n  nameWithType: WebClient.OnDownloadDataCompleted(DownloadDataCompletedEventArgs)\n  fullName: WebClient.OnDownloadDataCompleted(DownloadDataCompletedEventArgs)\n- uid: System.Net.DownloadDataCompletedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: DownloadDataCompletedEventArgs\n  nameWithType: DownloadDataCompletedEventArgs\n  fullName: System.Net.DownloadDataCompletedEventArgs\n- uid: System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnDownloadFileCompleted(AsyncCompletedEventArgs)\n  nameWithType: WebClient.OnDownloadFileCompleted(AsyncCompletedEventArgs)\n  fullName: WebClient.OnDownloadFileCompleted(AsyncCompletedEventArgs)\n- uid: System.ComponentModel.AsyncCompletedEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: AsyncCompletedEventArgs\n  nameWithType: AsyncCompletedEventArgs\n  fullName: System.ComponentModel.AsyncCompletedEventArgs\n- uid: System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnDownloadProgressChanged(DownloadProgressChangedEventArgs)\n  nameWithType: WebClient.OnDownloadProgressChanged(DownloadProgressChangedEventArgs)\n  fullName: WebClient.OnDownloadProgressChanged(DownloadProgressChangedEventArgs)\n- uid: System.Net.DownloadProgressChangedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: DownloadProgressChangedEventArgs\n  nameWithType: DownloadProgressChangedEventArgs\n  fullName: System.Net.DownloadProgressChangedEventArgs\n- uid: System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnDownloadStringCompleted(DownloadStringCompletedEventArgs)\n  nameWithType: WebClient.OnDownloadStringCompleted(DownloadStringCompletedEventArgs)\n  fullName: WebClient.OnDownloadStringCompleted(DownloadStringCompletedEventArgs)\n- uid: System.Net.DownloadStringCompletedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: DownloadStringCompletedEventArgs\n  nameWithType: DownloadStringCompletedEventArgs\n  fullName: System.Net.DownloadStringCompletedEventArgs\n- uid: System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnOpenReadCompleted(OpenReadCompletedEventArgs)\n  nameWithType: WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs)\n  fullName: WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs)\n- uid: System.Net.OpenReadCompletedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: OpenReadCompletedEventArgs\n  nameWithType: OpenReadCompletedEventArgs\n  fullName: System.Net.OpenReadCompletedEventArgs\n- uid: System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnOpenWriteCompleted(OpenWriteCompletedEventArgs)\n  nameWithType: WebClient.OnOpenWriteCompleted(OpenWriteCompletedEventArgs)\n  fullName: WebClient.OnOpenWriteCompleted(OpenWriteCompletedEventArgs)\n- uid: System.Net.OpenWriteCompletedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: OpenWriteCompletedEventArgs\n  nameWithType: OpenWriteCompletedEventArgs\n  fullName: System.Net.OpenWriteCompletedEventArgs\n- uid: System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadDataCompleted(UploadDataCompletedEventArgs)\n  nameWithType: WebClient.OnUploadDataCompleted(UploadDataCompletedEventArgs)\n  fullName: WebClient.OnUploadDataCompleted(UploadDataCompletedEventArgs)\n- uid: System.Net.UploadDataCompletedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: UploadDataCompletedEventArgs\n  nameWithType: UploadDataCompletedEventArgs\n  fullName: System.Net.UploadDataCompletedEventArgs\n- uid: System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadFileCompleted(UploadFileCompletedEventArgs)\n  nameWithType: WebClient.OnUploadFileCompleted(UploadFileCompletedEventArgs)\n  fullName: WebClient.OnUploadFileCompleted(UploadFileCompletedEventArgs)\n- uid: System.Net.UploadFileCompletedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: UploadFileCompletedEventArgs\n  nameWithType: UploadFileCompletedEventArgs\n  fullName: System.Net.UploadFileCompletedEventArgs\n- uid: System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadProgressChanged(UploadProgressChangedEventArgs)\n  nameWithType: WebClient.OnUploadProgressChanged(UploadProgressChangedEventArgs)\n  fullName: WebClient.OnUploadProgressChanged(UploadProgressChangedEventArgs)\n- uid: System.Net.UploadProgressChangedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: UploadProgressChangedEventArgs\n  nameWithType: UploadProgressChangedEventArgs\n  fullName: System.Net.UploadProgressChangedEventArgs\n- uid: System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadStringCompleted(UploadStringCompletedEventArgs)\n  nameWithType: WebClient.OnUploadStringCompleted(UploadStringCompletedEventArgs)\n  fullName: WebClient.OnUploadStringCompleted(UploadStringCompletedEventArgs)\n- uid: System.Net.UploadStringCompletedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: UploadStringCompletedEventArgs\n  nameWithType: UploadStringCompletedEventArgs\n  fullName: System.Net.UploadStringCompletedEventArgs\n- uid: System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadValuesCompleted(UploadValuesCompletedEventArgs)\n  nameWithType: WebClient.OnUploadValuesCompleted(UploadValuesCompletedEventArgs)\n  fullName: WebClient.OnUploadValuesCompleted(UploadValuesCompletedEventArgs)\n- uid: System.Net.UploadValuesCompletedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: UploadValuesCompletedEventArgs\n  nameWithType: UploadValuesCompletedEventArgs\n  fullName: System.Net.UploadValuesCompletedEventArgs\n- uid: System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnWriteStreamClosed(WriteStreamClosedEventArgs)\n  nameWithType: WebClient.OnWriteStreamClosed(WriteStreamClosedEventArgs)\n  fullName: WebClient.OnWriteStreamClosed(WriteStreamClosedEventArgs)\n- uid: System.Net.WriteStreamClosedEventArgs\n  parent: System.Net\n  isExternal: false\n  name: WriteStreamClosedEventArgs\n  nameWithType: WriteStreamClosedEventArgs\n  fullName: System.Net.WriteStreamClosedEventArgs\n- uid: System.Net.WebClient.OpenRead(System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenRead(String)\n  nameWithType: WebClient.OpenRead(String)\n  fullName: WebClient.OpenRead(String)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Net.WebClient.OpenRead(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenRead(Uri)\n  nameWithType: WebClient.OpenRead(Uri)\n  fullName: WebClient.OpenRead(Uri)\n- uid: System.Net.WebClient.OpenReadAsync(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenReadAsync(Uri)\n  nameWithType: WebClient.OpenReadAsync(Uri)\n  fullName: WebClient.OpenReadAsync(Uri)\n- uid: System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenReadAsync(Uri, Object)\n  nameWithType: WebClient.OpenReadAsync(Uri, Object)\n  fullName: WebClient.OpenReadAsync(Uri, Object)\n- uid: System.Net.WebClient.OpenReadCompleted\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenReadCompleted\n  nameWithType: WebClient.OpenReadCompleted\n  fullName: WebClient.OpenReadCompleted\n- uid: System.Net.OpenReadCompletedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: OpenReadCompletedEventHandler\n  nameWithType: OpenReadCompletedEventHandler\n  fullName: System.Net.OpenReadCompletedEventHandler\n- uid: System.Net.WebClient.OpenReadTaskAsync(System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenReadTaskAsync(String)\n  nameWithType: WebClient.OpenReadTaskAsync(String)\n  fullName: WebClient.OpenReadTaskAsync(String)\n- uid: System.Threading.Tasks.Task{System.IO.Stream}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Stream>\n  nameWithType: Task<Stream>\n  fullName: System.Threading.Tasks.Task<System.IO.Stream>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.WebClient.OpenReadTaskAsync(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenReadTaskAsync(Uri)\n  nameWithType: WebClient.OpenReadTaskAsync(Uri)\n  fullName: WebClient.OpenReadTaskAsync(Uri)\n- uid: System.Net.WebClient.OpenWrite(System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWrite(String)\n  nameWithType: WebClient.OpenWrite(String)\n  fullName: WebClient.OpenWrite(String)\n- uid: System.Net.WebClient.OpenWrite(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWrite(Uri)\n  nameWithType: WebClient.OpenWrite(Uri)\n  fullName: WebClient.OpenWrite(Uri)\n- uid: System.Net.WebClient.OpenWrite(System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWrite(String, String)\n  nameWithType: WebClient.OpenWrite(String, String)\n  fullName: WebClient.OpenWrite(String, String)\n- uid: System.Net.WebClient.OpenWrite(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWrite(Uri, String)\n  nameWithType: WebClient.OpenWrite(Uri, String)\n  fullName: WebClient.OpenWrite(Uri, String)\n- uid: System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteAsync(Uri, String, Object)\n  nameWithType: WebClient.OpenWriteAsync(Uri, String, Object)\n  fullName: WebClient.OpenWriteAsync(Uri, String, Object)\n- uid: System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteAsync(Uri, String)\n  nameWithType: WebClient.OpenWriteAsync(Uri, String)\n  fullName: WebClient.OpenWriteAsync(Uri, String)\n- uid: System.Net.WebClient.OpenWriteAsync(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteAsync(Uri)\n  nameWithType: WebClient.OpenWriteAsync(Uri)\n  fullName: WebClient.OpenWriteAsync(Uri)\n- uid: System.Net.WebClient.OpenWriteCompleted\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteCompleted\n  nameWithType: WebClient.OpenWriteCompleted\n  fullName: WebClient.OpenWriteCompleted\n- uid: System.Net.OpenWriteCompletedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: OpenWriteCompletedEventHandler\n  nameWithType: OpenWriteCompletedEventHandler\n  fullName: System.Net.OpenWriteCompletedEventHandler\n- uid: System.Net.WebClient.OpenWriteTaskAsync(System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteTaskAsync(String)\n  nameWithType: WebClient.OpenWriteTaskAsync(String)\n  fullName: WebClient.OpenWriteTaskAsync(String)\n- uid: System.Net.WebClient.OpenWriteTaskAsync(System.Uri)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteTaskAsync(Uri)\n  nameWithType: WebClient.OpenWriteTaskAsync(Uri)\n  fullName: WebClient.OpenWriteTaskAsync(Uri)\n- uid: System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteTaskAsync(String, String)\n  nameWithType: WebClient.OpenWriteTaskAsync(String, String)\n  fullName: WebClient.OpenWriteTaskAsync(String, String)\n- uid: System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteTaskAsync(Uri, String)\n  nameWithType: WebClient.OpenWriteTaskAsync(Uri, String)\n  fullName: WebClient.OpenWriteTaskAsync(Uri, String)\n- uid: System.Net.WebClient.Proxy\n  parent: System.Net.WebClient\n  isExternal: false\n  name: Proxy\n  nameWithType: WebClient.Proxy\n  fullName: WebClient.Proxy\n- uid: System.Net.IWebProxy\n  parent: System.Net\n  isExternal: false\n  name: IWebProxy\n  nameWithType: IWebProxy\n  fullName: System.Net.IWebProxy\n- uid: System.Net.WebClient.QueryString\n  parent: System.Net.WebClient\n  isExternal: false\n  name: QueryString\n  nameWithType: WebClient.QueryString\n  fullName: WebClient.QueryString\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Net.WebClient.ResponseHeaders\n  parent: System.Net.WebClient\n  isExternal: false\n  name: ResponseHeaders\n  nameWithType: WebClient.ResponseHeaders\n  fullName: WebClient.ResponseHeaders\n- uid: System.Net.WebClient.UploadData(System.String,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadData(String, Byte[])\n  nameWithType: WebClient.UploadData(String, Byte[])\n  fullName: WebClient.UploadData(String, Byte[])\n- uid: System.Net.WebClient.UploadData(System.Uri,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadData(Uri, Byte[])\n  nameWithType: WebClient.UploadData(Uri, Byte[])\n  fullName: WebClient.UploadData(Uri, Byte[])\n- uid: System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadData(String, String, Byte[])\n  nameWithType: WebClient.UploadData(String, String, Byte[])\n  fullName: WebClient.UploadData(String, String, Byte[])\n- uid: System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadData(Uri, String, Byte[])\n  nameWithType: WebClient.UploadData(Uri, String, Byte[])\n  fullName: WebClient.UploadData(Uri, String, Byte[])\n- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataAsync(Uri, String, Byte[])\n  nameWithType: WebClient.UploadDataAsync(Uri, String, Byte[])\n  fullName: WebClient.UploadDataAsync(Uri, String, Byte[])\n- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataAsync(Uri, String, Byte[], Object)\n  nameWithType: WebClient.UploadDataAsync(Uri, String, Byte[], Object)\n  fullName: WebClient.UploadDataAsync(Uri, String, Byte[], Object)\n- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataAsync(Uri, Byte[])\n  nameWithType: WebClient.UploadDataAsync(Uri, Byte[])\n  fullName: WebClient.UploadDataAsync(Uri, Byte[])\n- uid: System.Net.WebClient.UploadDataCompleted\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataCompleted\n  nameWithType: WebClient.UploadDataCompleted\n  fullName: WebClient.UploadDataCompleted\n- uid: System.Net.UploadDataCompletedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: UploadDataCompletedEventHandler\n  nameWithType: UploadDataCompletedEventHandler\n  fullName: System.Net.UploadDataCompletedEventHandler\n- uid: System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataTaskAsync(String, Byte[])\n  nameWithType: WebClient.UploadDataTaskAsync(String, Byte[])\n  fullName: WebClient.UploadDataTaskAsync(String, Byte[])\n- uid: System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataTaskAsync(Uri, Byte[])\n  nameWithType: WebClient.UploadDataTaskAsync(Uri, Byte[])\n  fullName: WebClient.UploadDataTaskAsync(Uri, Byte[])\n- uid: System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataTaskAsync(String, String, Byte[])\n  nameWithType: WebClient.UploadDataTaskAsync(String, String, Byte[])\n  fullName: WebClient.UploadDataTaskAsync(String, String, Byte[])\n- uid: System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataTaskAsync(Uri, String, Byte[])\n  nameWithType: WebClient.UploadDataTaskAsync(Uri, String, Byte[])\n  fullName: WebClient.UploadDataTaskAsync(Uri, String, Byte[])\n- uid: System.Net.WebClient.UploadFile(System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFile(String, String)\n  nameWithType: WebClient.UploadFile(String, String)\n  fullName: WebClient.UploadFile(String, String)\n- uid: System.Net.WebClient.UploadFile(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFile(Uri, String)\n  nameWithType: WebClient.UploadFile(Uri, String)\n  fullName: WebClient.UploadFile(Uri, String)\n- uid: System.Net.WebClient.UploadFile(System.String,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFile(String, String, String)\n  nameWithType: WebClient.UploadFile(String, String, String)\n  fullName: WebClient.UploadFile(String, String, String)\n- uid: System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFile(Uri, String, String)\n  nameWithType: WebClient.UploadFile(Uri, String, String)\n  fullName: WebClient.UploadFile(Uri, String, String)\n- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileAsync(Uri, String)\n  nameWithType: WebClient.UploadFileAsync(Uri, String)\n  fullName: WebClient.UploadFileAsync(Uri, String)\n- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileAsync(Uri, String, String)\n  nameWithType: WebClient.UploadFileAsync(Uri, String, String)\n  fullName: WebClient.UploadFileAsync(Uri, String, String)\n- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileAsync(Uri, String, String, Object)\n  nameWithType: WebClient.UploadFileAsync(Uri, String, String, Object)\n  fullName: WebClient.UploadFileAsync(Uri, String, String, Object)\n- uid: System.Net.WebClient.UploadFileCompleted\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileCompleted\n  nameWithType: WebClient.UploadFileCompleted\n  fullName: WebClient.UploadFileCompleted\n- uid: System.Net.UploadFileCompletedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: UploadFileCompletedEventHandler\n  nameWithType: UploadFileCompletedEventHandler\n  fullName: System.Net.UploadFileCompletedEventHandler\n- uid: System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileTaskAsync(Uri, String, String)\n  nameWithType: WebClient.UploadFileTaskAsync(Uri, String, String)\n  fullName: WebClient.UploadFileTaskAsync(Uri, String, String)\n- uid: System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileTaskAsync(String, String, String)\n  nameWithType: WebClient.UploadFileTaskAsync(String, String, String)\n  fullName: WebClient.UploadFileTaskAsync(String, String, String)\n- uid: System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileTaskAsync(String, String)\n  nameWithType: WebClient.UploadFileTaskAsync(String, String)\n  fullName: WebClient.UploadFileTaskAsync(String, String)\n- uid: System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileTaskAsync(Uri, String)\n  nameWithType: WebClient.UploadFileTaskAsync(Uri, String)\n  fullName: WebClient.UploadFileTaskAsync(Uri, String)\n- uid: System.Net.WebClient.UploadProgressChanged\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadProgressChanged\n  nameWithType: WebClient.UploadProgressChanged\n  fullName: WebClient.UploadProgressChanged\n- uid: System.Net.UploadProgressChangedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: UploadProgressChangedEventHandler\n  nameWithType: UploadProgressChangedEventHandler\n  fullName: System.Net.UploadProgressChangedEventHandler\n- uid: System.Net.WebClient.UploadString(System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadString(String, String)\n  nameWithType: WebClient.UploadString(String, String)\n  fullName: WebClient.UploadString(String, String)\n- uid: System.Net.WebClient.UploadString(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadString(Uri, String)\n  nameWithType: WebClient.UploadString(Uri, String)\n  fullName: WebClient.UploadString(Uri, String)\n- uid: System.Net.WebClient.UploadString(System.String,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadString(String, String, String)\n  nameWithType: WebClient.UploadString(String, String, String)\n  fullName: WebClient.UploadString(String, String, String)\n- uid: System.Net.WebClient.UploadString(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadString(Uri, String, String)\n  nameWithType: WebClient.UploadString(Uri, String, String)\n  fullName: WebClient.UploadString(Uri, String, String)\n- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringAsync(Uri, String)\n  nameWithType: WebClient.UploadStringAsync(Uri, String)\n  fullName: WebClient.UploadStringAsync(Uri, String)\n- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringAsync(Uri, String, String)\n  nameWithType: WebClient.UploadStringAsync(Uri, String, String)\n  fullName: WebClient.UploadStringAsync(Uri, String, String)\n- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringAsync(Uri, String, String, Object)\n  nameWithType: WebClient.UploadStringAsync(Uri, String, String, Object)\n  fullName: WebClient.UploadStringAsync(Uri, String, String, Object)\n- uid: System.Net.WebClient.UploadStringCompleted\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringCompleted\n  nameWithType: WebClient.UploadStringCompleted\n  fullName: WebClient.UploadStringCompleted\n- uid: System.Net.UploadStringCompletedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: UploadStringCompletedEventHandler\n  nameWithType: UploadStringCompletedEventHandler\n  fullName: System.Net.UploadStringCompletedEventHandler\n- uid: System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringTaskAsync(Uri, String, String)\n  nameWithType: WebClient.UploadStringTaskAsync(Uri, String, String)\n  fullName: WebClient.UploadStringTaskAsync(Uri, String, String)\n- uid: System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringTaskAsync(String, String, String)\n  nameWithType: WebClient.UploadStringTaskAsync(String, String, String)\n  fullName: WebClient.UploadStringTaskAsync(String, String, String)\n- uid: System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringTaskAsync(String, String)\n  nameWithType: WebClient.UploadStringTaskAsync(String, String)\n  fullName: WebClient.UploadStringTaskAsync(String, String)\n- uid: System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringTaskAsync(Uri, String)\n  nameWithType: WebClient.UploadStringTaskAsync(Uri, String)\n  fullName: WebClient.UploadStringTaskAsync(Uri, String)\n- uid: System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValues(String, NameValueCollection)\n  nameWithType: WebClient.UploadValues(String, NameValueCollection)\n  fullName: WebClient.UploadValues(String, NameValueCollection)\n- uid: System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValues(Uri, NameValueCollection)\n  nameWithType: WebClient.UploadValues(Uri, NameValueCollection)\n  fullName: WebClient.UploadValues(Uri, NameValueCollection)\n- uid: System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValues(String, String, NameValueCollection)\n  nameWithType: WebClient.UploadValues(String, String, NameValueCollection)\n  fullName: WebClient.UploadValues(String, String, NameValueCollection)\n- uid: System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValues(Uri, String, NameValueCollection)\n  nameWithType: WebClient.UploadValues(Uri, String, NameValueCollection)\n  fullName: WebClient.UploadValues(Uri, String, NameValueCollection)\n- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesAsync(Uri, NameValueCollection)\n  nameWithType: WebClient.UploadValuesAsync(Uri, NameValueCollection)\n  fullName: WebClient.UploadValuesAsync(Uri, NameValueCollection)\n- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesAsync(Uri, String, NameValueCollection)\n  nameWithType: WebClient.UploadValuesAsync(Uri, String, NameValueCollection)\n  fullName: WebClient.UploadValuesAsync(Uri, String, NameValueCollection)\n- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesAsync(Uri, String, NameValueCollection, Object)\n  nameWithType: WebClient.UploadValuesAsync(Uri, String, NameValueCollection, Object)\n  fullName: WebClient.UploadValuesAsync(Uri, String, NameValueCollection, Object)\n- uid: System.Net.WebClient.UploadValuesCompleted\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesCompleted\n  nameWithType: WebClient.UploadValuesCompleted\n  fullName: WebClient.UploadValuesCompleted\n- uid: System.Net.UploadValuesCompletedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: UploadValuesCompletedEventHandler\n  nameWithType: UploadValuesCompletedEventHandler\n  fullName: System.Net.UploadValuesCompletedEventHandler\n- uid: System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesTaskAsync(String, String, NameValueCollection)\n  nameWithType: WebClient.UploadValuesTaskAsync(String, String, NameValueCollection)\n  fullName: WebClient.UploadValuesTaskAsync(String, String, NameValueCollection)\n- uid: System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesTaskAsync(String, NameValueCollection)\n  nameWithType: WebClient.UploadValuesTaskAsync(String, NameValueCollection)\n  fullName: WebClient.UploadValuesTaskAsync(String, NameValueCollection)\n- uid: System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesTaskAsync(Uri, NameValueCollection)\n  nameWithType: WebClient.UploadValuesTaskAsync(Uri, NameValueCollection)\n  fullName: WebClient.UploadValuesTaskAsync(Uri, NameValueCollection)\n- uid: System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesTaskAsync(Uri, String, NameValueCollection)\n  nameWithType: WebClient.UploadValuesTaskAsync(Uri, String, NameValueCollection)\n  fullName: WebClient.UploadValuesTaskAsync(Uri, String, NameValueCollection)\n- uid: System.Net.WebClient.UseDefaultCredentials\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UseDefaultCredentials\n  nameWithType: WebClient.UseDefaultCredentials\n  fullName: WebClient.UseDefaultCredentials\n- uid: System.Net.WebClient.WriteStreamClosed\n  parent: System.Net.WebClient\n  isExternal: false\n  name: WriteStreamClosed\n  nameWithType: WebClient.WriteStreamClosed\n  fullName: WebClient.WriteStreamClosed\n- uid: System.Net.WriteStreamClosedEventHandler\n  parent: System.Net\n  isExternal: false\n  name: WriteStreamClosedEventHandler\n  nameWithType: WriteStreamClosedEventHandler\n  fullName: System.Net.WriteStreamClosedEventHandler\n- uid: System.Net.WebClient.#ctor*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: WebClient\n  nameWithType: WebClient.WebClient\n  fullName: WebClient.WebClient\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.AllowReadStreamBuffering*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: AllowReadStreamBuffering\n  nameWithType: WebClient.AllowReadStreamBuffering\n  fullName: WebClient.AllowReadStreamBuffering\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.AllowWriteStreamBuffering*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: AllowWriteStreamBuffering\n  nameWithType: WebClient.AllowWriteStreamBuffering\n  fullName: WebClient.AllowWriteStreamBuffering\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.BaseAddress*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: BaseAddress\n  nameWithType: WebClient.BaseAddress\n  fullName: WebClient.BaseAddress\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.CachePolicy*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: CachePolicy\n  nameWithType: WebClient.CachePolicy\n  fullName: WebClient.CachePolicy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.CancelAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: CancelAsync\n  nameWithType: WebClient.CancelAsync\n  fullName: WebClient.CancelAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.Credentials*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: Credentials\n  nameWithType: WebClient.Credentials\n  fullName: WebClient.Credentials\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.DownloadData*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadData\n  nameWithType: WebClient.DownloadData\n  fullName: WebClient.DownloadData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.DownloadDataAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadDataAsync\n  nameWithType: WebClient.DownloadDataAsync\n  fullName: WebClient.DownloadDataAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.DownloadDataTaskAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadDataTaskAsync\n  nameWithType: WebClient.DownloadDataTaskAsync\n  fullName: WebClient.DownloadDataTaskAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.DownloadFile*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFile\n  nameWithType: WebClient.DownloadFile\n  fullName: WebClient.DownloadFile\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.DownloadFileAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFileAsync\n  nameWithType: WebClient.DownloadFileAsync\n  fullName: WebClient.DownloadFileAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.DownloadFileTaskAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadFileTaskAsync\n  nameWithType: WebClient.DownloadFileTaskAsync\n  fullName: WebClient.DownloadFileTaskAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.DownloadString*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadString\n  nameWithType: WebClient.DownloadString\n  fullName: WebClient.DownloadString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.DownloadStringAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadStringAsync\n  nameWithType: WebClient.DownloadStringAsync\n  fullName: WebClient.DownloadStringAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.DownloadStringTaskAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: DownloadStringTaskAsync\n  nameWithType: WebClient.DownloadStringTaskAsync\n  fullName: WebClient.DownloadStringTaskAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.Encoding*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: Encoding\n  nameWithType: WebClient.Encoding\n  fullName: WebClient.Encoding\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.GetWebRequest*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: GetWebRequest\n  nameWithType: WebClient.GetWebRequest\n  fullName: WebClient.GetWebRequest\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.GetWebResponse*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: GetWebResponse\n  nameWithType: WebClient.GetWebResponse\n  fullName: WebClient.GetWebResponse\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.Headers*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: Headers\n  nameWithType: WebClient.Headers\n  fullName: WebClient.Headers\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.IsBusy*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: IsBusy\n  nameWithType: WebClient.IsBusy\n  fullName: WebClient.IsBusy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnDownloadDataCompleted*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnDownloadDataCompleted\n  nameWithType: WebClient.OnDownloadDataCompleted\n  fullName: WebClient.OnDownloadDataCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnDownloadFileCompleted*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnDownloadFileCompleted\n  nameWithType: WebClient.OnDownloadFileCompleted\n  fullName: WebClient.OnDownloadFileCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnDownloadProgressChanged*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnDownloadProgressChanged\n  nameWithType: WebClient.OnDownloadProgressChanged\n  fullName: WebClient.OnDownloadProgressChanged\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnDownloadStringCompleted*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnDownloadStringCompleted\n  nameWithType: WebClient.OnDownloadStringCompleted\n  fullName: WebClient.OnDownloadStringCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnOpenReadCompleted*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnOpenReadCompleted\n  nameWithType: WebClient.OnOpenReadCompleted\n  fullName: WebClient.OnOpenReadCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnOpenWriteCompleted*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnOpenWriteCompleted\n  nameWithType: WebClient.OnOpenWriteCompleted\n  fullName: WebClient.OnOpenWriteCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnUploadDataCompleted*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadDataCompleted\n  nameWithType: WebClient.OnUploadDataCompleted\n  fullName: WebClient.OnUploadDataCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnUploadFileCompleted*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadFileCompleted\n  nameWithType: WebClient.OnUploadFileCompleted\n  fullName: WebClient.OnUploadFileCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnUploadProgressChanged*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadProgressChanged\n  nameWithType: WebClient.OnUploadProgressChanged\n  fullName: WebClient.OnUploadProgressChanged\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnUploadStringCompleted*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadStringCompleted\n  nameWithType: WebClient.OnUploadStringCompleted\n  fullName: WebClient.OnUploadStringCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnUploadValuesCompleted*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnUploadValuesCompleted\n  nameWithType: WebClient.OnUploadValuesCompleted\n  fullName: WebClient.OnUploadValuesCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OnWriteStreamClosed*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OnWriteStreamClosed\n  nameWithType: WebClient.OnWriteStreamClosed\n  fullName: WebClient.OnWriteStreamClosed\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OpenRead*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenRead\n  nameWithType: WebClient.OpenRead\n  fullName: WebClient.OpenRead\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OpenReadAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenReadAsync\n  nameWithType: WebClient.OpenReadAsync\n  fullName: WebClient.OpenReadAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OpenReadTaskAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenReadTaskAsync\n  nameWithType: WebClient.OpenReadTaskAsync\n  fullName: WebClient.OpenReadTaskAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OpenWrite*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWrite\n  nameWithType: WebClient.OpenWrite\n  fullName: WebClient.OpenWrite\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OpenWriteAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteAsync\n  nameWithType: WebClient.OpenWriteAsync\n  fullName: WebClient.OpenWriteAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.OpenWriteTaskAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: OpenWriteTaskAsync\n  nameWithType: WebClient.OpenWriteTaskAsync\n  fullName: WebClient.OpenWriteTaskAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.Proxy*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: Proxy\n  nameWithType: WebClient.Proxy\n  fullName: WebClient.Proxy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.QueryString*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: QueryString\n  nameWithType: WebClient.QueryString\n  fullName: WebClient.QueryString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.ResponseHeaders*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: ResponseHeaders\n  nameWithType: WebClient.ResponseHeaders\n  fullName: WebClient.ResponseHeaders\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadData*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadData\n  nameWithType: WebClient.UploadData\n  fullName: WebClient.UploadData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadDataAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataAsync\n  nameWithType: WebClient.UploadDataAsync\n  fullName: WebClient.UploadDataAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadDataTaskAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadDataTaskAsync\n  nameWithType: WebClient.UploadDataTaskAsync\n  fullName: WebClient.UploadDataTaskAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadFile*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFile\n  nameWithType: WebClient.UploadFile\n  fullName: WebClient.UploadFile\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadFileAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileAsync\n  nameWithType: WebClient.UploadFileAsync\n  fullName: WebClient.UploadFileAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadFileTaskAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadFileTaskAsync\n  nameWithType: WebClient.UploadFileTaskAsync\n  fullName: WebClient.UploadFileTaskAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadString*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadString\n  nameWithType: WebClient.UploadString\n  fullName: WebClient.UploadString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadStringAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringAsync\n  nameWithType: WebClient.UploadStringAsync\n  fullName: WebClient.UploadStringAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadStringTaskAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadStringTaskAsync\n  nameWithType: WebClient.UploadStringTaskAsync\n  fullName: WebClient.UploadStringTaskAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadValues*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValues\n  nameWithType: WebClient.UploadValues\n  fullName: WebClient.UploadValues\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadValuesAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesAsync\n  nameWithType: WebClient.UploadValuesAsync\n  fullName: WebClient.UploadValuesAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UploadValuesTaskAsync*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UploadValuesTaskAsync\n  nameWithType: WebClient.UploadValuesTaskAsync\n  fullName: WebClient.UploadValuesTaskAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Net.WebClient.UseDefaultCredentials*\n  parent: System.Net.WebClient\n  isExternal: false\n  name: UseDefaultCredentials\n  nameWithType: WebClient.UseDefaultCredentials\n  fullName: WebClient.UseDefaultCredentials\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.ComponentModel.Component.ToString\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: ToString()\n  nameWithType: Component.ToString()\n  fullName: Component.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.ComponentModel.Component.CanRaiseEvents\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: CanRaiseEvents\n  nameWithType: Component.CanRaiseEvents\n  fullName: Component.CanRaiseEvents\n- uid: System.ComponentModel.Component.Container\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Container\n  nameWithType: Component.Container\n  fullName: Component.Container\n- uid: System.ComponentModel.Component.DesignMode\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: DesignMode\n  nameWithType: Component.DesignMode\n  fullName: Component.DesignMode\n- uid: System.ComponentModel.Component.Dispose\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Dispose()\n  nameWithType: Component.Dispose()\n  fullName: Component.Dispose()\n- uid: System.ComponentModel.Component.Dispose(System.Boolean)\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Component.Dispose(Boolean)\n  fullName: Component.Dispose(Boolean)\n- uid: System.ComponentModel.Component.Disposed\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Disposed\n  nameWithType: Component.Disposed\n  fullName: Component.Disposed\n- uid: System.ComponentModel.Component.Events\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Events\n  nameWithType: Component.Events\n  fullName: Component.Events\n- uid: System.ComponentModel.Component.GetService(System.Type)\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: Component.GetService(Type)\n  fullName: Component.GetService(Type)\n- uid: System.ComponentModel.Component.Site\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Site\n  nameWithType: Component.Site\n  fullName: Component.Site\n"}