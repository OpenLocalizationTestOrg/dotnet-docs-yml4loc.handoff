{"nodes":[{"content":"Provides information for the <xref href=\"System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected\"></xref> and <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected\"></xref> events.","nodes":[{"pos":[0,227],"content":"Provides information for the <ph id=\"ph1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected\"&gt;&lt;/xref&gt;</ph> events.","source":"Provides information for the <xref href=\"System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected\"></xref> and <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected\"></xref> events."}],"pos":[519,747],"yaml":true},{"content":"The `SpeechRecognitionRejected` event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.  \n  \n **SpeechRecognitionRejected** events are generated by a speech recognition engine when none of the alternates from a recognition operation have a high enough confidence score to be accepted. Detailed information about rejected phrases is available through the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property.  \n  \n **SpeechRecognitionRejectedEventArgs** derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.","nodes":[{"pos":[0,174],"content":"The <ph id=\"ph1\">`SpeechRecognitionRejected`</ph> event is raised by the <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.SpeechRecognizer&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt;</ph> classes.","source":"The `SpeechRecognitionRejected` event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes."},{"pos":[181,514],"content":"**SpeechRecognitionRejected** events are generated by a speech recognition engine when none of the alternates from a recognition operation have a high enough confidence score to be accepted. Detailed information about rejected phrases is available through the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>SpeechRecognitionRejected<ept id=\"p1\">**</ept> events are generated by a speech recognition engine when none of the alternates from a recognition operation have a high enough confidence score to be accepted.","pos":[0,190],"source":"**SpeechRecognitionRejected** events are generated by a speech recognition engine when none of the alternates from a recognition operation have a high enough confidence score to be accepted."},{"content":"Detailed information about rejected phrases is available through the <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A&gt;</ph> property.","pos":[191,333],"source":" Detailed information about rejected phrases is available through the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property."}]},{"pos":[521,627],"content":"<bpt id=\"p1\">**</bpt>SpeechRecognitionRejectedEventArgs<ept id=\"p1\">**</ept> derives from <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognitionEventArgs&gt;</ph>.","source":"**SpeechRecognitionRejectedEventArgs** derives from <xref:System.Speech.Recognition.RecognitionEventArgs>."}],"pos":[758,1392],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Recognition.SpeechRecognitionRejectedEventArgs\n  commentId: T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs\n  id: SpeechRecognitionRejectedEventArgs\n  children: []\n  langs:\n  - csharp\n  name: SpeechRecognitionRejectedEventArgs\n  nameWithType: SpeechRecognitionRejectedEventArgs\n  fullName: System.Speech.Recognition.SpeechRecognitionRejectedEventArgs\n  type: Class\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Provides information for the <xref href=\"System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected\"></xref> and <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected\"></xref> events.\n  remarks: \"The `SpeechRecognitionRejected` event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.  \\n  \\n **SpeechRecognitionRejected** events are generated by a speech recognition engine when none of the alternates from a recognition operation have a high enough confidence score to be accepted. Detailed information about rejected phrases is available through the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property.  \\n  \\n **SpeechRecognitionRejectedEventArgs** derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.\"\n  example:\n  - \"The following example recognizes phrases such as \\\"Display the list of artists in the jazz category\\\" or \\\"Display albums gospel\\\". The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient confidence to produce a successful recognition.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n  \\n    // Initialize a shared speech recognition engine.  \\n    {  \\n      using (SpeechRecognizer recognizer =  \\n         new SpeechRecognizer())  \\n      {  \\n  \\n        // Create a grammar.  \\n        //  Create lists of alternative choices.  \\n        Choices listTypes = new Choices(new string[] { \\\"albums\\\", \\\"artists\\\" });  \\n        Choices genres = new Choices(new string[] {   \\n          \\\"blues\\\", \\\"classical\\\", \\\"gospel\\\", \\\"jazz\\\", \\\"rock\\\" });  \\n  \\n        //  Create a GrammarBuilder object and assemble the grammar components.  \\n        GrammarBuilder mediaMenu = new GrammarBuilder(\\\"Display\\\");  \\n        mediaMenu.Append(\\\"the list of\\\", 0, 1);  \\n        mediaMenu.Append(listTypes);  \\n        mediaMenu.Append(\\\"in the\\\", 0, 1);  \\n        mediaMenu.Append(genres);  \\n        mediaMenu.Append(\\\"category\\\", 0, 1);  \\n  \\n        //  Build a Grammar object from the GrammarBuilder.  \\n        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  \\n        mediaMenuGrammar.Name = \\\"Media Chooser\\\";  \\n  \\n        // Attach event handlers.  \\n        recognizer.LoadGrammarCompleted +=  \\n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n        recognizer.SpeechRecognitionRejected +=   \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  \\n  \\n        // Load the grammar object to the recognizer.  \\n        recognizer.LoadGrammarAsync(mediaMenuGrammar);  \\n  \\n        // Keep the console window open.  \\n        Console.ReadLine();  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechRecognitionRejected event.  \\n    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Speech input was rejected.\\\");  \\n      foreach (RecognizedPhrase phrase in e.Result.Alternates)  \\n      {  \\n        Console.WriteLine(\\\"  Rejected phrase: \\\" + phrase.Text);  \\n        Console.WriteLine(\\\"  Confidence score: \\\" + phrase.Confidence);  \\n      }  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.  \\n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Grammar loaded: \\\" + e.Grammar.Name);  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Speech recognized: \\\" + e.Result.Text);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: 'public class SpeechRecognitionRejectedEventArgs : System.Speech.Recognition.RecognitionEventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  - System.Speech.Recognition.RecognitionEventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Speech.Recognition.RecognitionEventArgs.Result\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/SpeechRecognitionRejectedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\nreferences:\n- uid: System.Speech.Recognition.RecognitionEventArgs\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: RecognitionEventArgs\n  nameWithType: RecognitionEventArgs\n  fullName: System.Speech.Recognition.RecognitionEventArgs\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n- uid: System.Speech.Recognition.RecognitionEventArgs.Result\n  parent: System.Speech.Recognition.RecognitionEventArgs\n  isExternal: false\n  name: Result\n  nameWithType: RecognitionEventArgs.Result\n  fullName: RecognitionEventArgs.Result\n"}