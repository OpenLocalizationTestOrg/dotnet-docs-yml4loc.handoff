{"nodes":[{"content":"Represents a state in a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>.","nodes":[{"pos":[0,101],"content":"Represents a state in a <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"&gt;&lt;/xref&gt;</ph>.","source":"Represents a state in a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>."}],"pos":[1216,1318],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \n  \n The <xref:System.Workflow.Activities.StateActivity> represents a State in a <xref:System.Workflow.Activities.StateMachineWorkflowActivity>. State activities could contain one or more <xref:System.Workflow.Activities.EventDrivenActivity>, or <xref:System.Workflow.Activities.StateActivity> classes, one <xref:System.Workflow.Activities.StateInitializationActivity> class, and one <xref:System.Workflow.Activities.StateFinalizationActivity> class.  SetState activities are used inside an <xref:System.Workflow.Activities.EventHandlersActivity> and <xref:System.Workflow.Activities.StateInitializationActivity> to move the state of the workflow.  \n  \n When a <xref:System.Workflow.Activities.StateActivity> is executing, the only events that can be received are the events that can be handled by the <xref:System.Workflow.Activities.EventDrivenActivity> activities in the <xref:System.Workflow.Activities.StateActivity> and also the <xref:System.Workflow.Activities.EventDrivenActivity> activities attached to the enclosing <xref:System.Workflow.Activities.StateActivity> activities and the root <xref:System.Workflow.ComponentModel.Activity>.  \n  \n When the <xref:System.Workflow.Activities.StateActivity> starts running, the <xref:System.Workflow.Activities.StateActivity> will check to see whether a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present or not. The <xref:System.Workflow.Activities.StateActivity> can have zero or one <xref:System.Workflow.Activities.StateInitializationActivity> activity. If a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present the <xref:System.Workflow.Activities.StateInitializationActivity> will be executed. As soon as the <xref:System.Workflow.Activities.StateInitializationActivity> activity finishes, the <xref:System.Workflow.Activities.StateActivity> blocks events so that the <xref:System.Workflow.Activities.StateActivity> only receives events that can be handled by its <xref:System.Workflow.Activities.EventDrivenActivity> activities.  \n  \n The <xref:System.Workflow.Activities.StateActivity> is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the <xref:System.Workflow.Activities.StateActivity> activity can contain other activities.","nodes":[{"pos":[2,78],"content":"[!NOTE]\n [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]","leadings":["","> "],"nodes":[]},{"pos":[85,727],"content":"The <xref:System.Workflow.Activities.StateActivity> represents a State in a <xref:System.Workflow.Activities.StateMachineWorkflowActivity>. State activities could contain one or more <xref:System.Workflow.Activities.EventDrivenActivity>, or <xref:System.Workflow.Activities.StateActivity> classes, one <xref:System.Workflow.Activities.StateInitializationActivity> class, and one <xref:System.Workflow.Activities.StateFinalizationActivity> class.  SetState activities are used inside an <xref:System.Workflow.Activities.EventHandlersActivity> and <xref:System.Workflow.Activities.StateInitializationActivity> to move the state of the workflow.","nodes":[{"content":"The <xref:System.Workflow.Activities.StateActivity> represents a State in a <xref:System.Workflow.Activities.StateMachineWorkflowActivity>. State activities could contain one or more <xref:System.Workflow.Activities.EventDrivenActivity>, or <xref:System.Workflow.Activities.StateActivity> classes, one <xref:System.Workflow.Activities.StateInitializationActivity> class, and one <xref:System.Workflow.Activities.StateFinalizationActivity> class.  SetState activities are used inside an <xref:System.Workflow.Activities.EventHandlersActivity> and <xref:System.Workflow.Activities.StateInitializationActivity> to move the state of the workflow.","pos":[0,642],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> represents a State in a <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.StateMachineWorkflowActivity&gt;</ph>.","pos":[0,139],"source":"The <xref:System.Workflow.Activities.StateActivity> represents a State in a <xref:System.Workflow.Activities.StateMachineWorkflowActivity>."},{"content":"State activities could contain one or more <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph>, or <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> classes, one <ph id=\"ph3\">&lt;xref:System.Workflow.Activities.StateInitializationActivity&gt;</ph> class, and one <ph id=\"ph4\">&lt;xref:System.Workflow.Activities.StateFinalizationActivity&gt;</ph> class.","pos":[140,445],"source":" State activities could contain one or more <xref:System.Workflow.Activities.EventDrivenActivity>, or <xref:System.Workflow.Activities.StateActivity> classes, one <xref:System.Workflow.Activities.StateInitializationActivity> class, and one <xref:System.Workflow.Activities.StateFinalizationActivity> class."},{"content":"SetState activities are used inside an <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.EventHandlersActivity&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.StateInitializationActivity&gt;</ph> to move the state of the workflow.","pos":[447,642],"source":"  SetState activities are used inside an <xref:System.Workflow.Activities.EventHandlersActivity> and <xref:System.Workflow.Activities.StateInitializationActivity> to move the state of the workflow."}]}]},{"pos":[734,1225],"content":"When a <xref:System.Workflow.Activities.StateActivity> is executing, the only events that can be received are the events that can be handled by the <xref:System.Workflow.Activities.EventDrivenActivity> activities in the <xref:System.Workflow.Activities.StateActivity> and also the <xref:System.Workflow.Activities.EventDrivenActivity> activities attached to the enclosing <xref:System.Workflow.Activities.StateActivity> activities and the root <xref:System.Workflow.ComponentModel.Activity>.","nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> is executing, the only events that can be received are the events that can be handled by the <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> activities in the <ph id=\"ph3\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> and also the <ph id=\"ph4\">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> activities attached to the enclosing <ph id=\"ph5\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> activities and the root <ph id=\"ph6\">&lt;xref:System.Workflow.ComponentModel.Activity&gt;</ph>.","pos":[0,491],"source":"When a <xref:System.Workflow.Activities.StateActivity> is executing, the only events that can be received are the events that can be handled by the <xref:System.Workflow.Activities.EventDrivenActivity> activities in the <xref:System.Workflow.Activities.StateActivity> and also the <xref:System.Workflow.Activities.EventDrivenActivity> activities attached to the enclosing <xref:System.Workflow.Activities.StateActivity> activities and the root <xref:System.Workflow.ComponentModel.Activity>."}]},{"pos":[1232,2126],"content":"When the <xref:System.Workflow.Activities.StateActivity> starts running, the <xref:System.Workflow.Activities.StateActivity> will check to see whether a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present or not. The <xref:System.Workflow.Activities.StateActivity> can have zero or one <xref:System.Workflow.Activities.StateInitializationActivity> activity. If a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present the <xref:System.Workflow.Activities.StateInitializationActivity> will be executed. As soon as the <xref:System.Workflow.Activities.StateInitializationActivity> activity finishes, the <xref:System.Workflow.Activities.StateActivity> blocks events so that the <xref:System.Workflow.Activities.StateActivity> only receives events that can be handled by its <xref:System.Workflow.Activities.EventDrivenActivity> activities.","nodes":[{"content":"When the <xref:System.Workflow.Activities.StateActivity> starts running, the <xref:System.Workflow.Activities.StateActivity> will check to see whether a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present or not. The <xref:System.Workflow.Activities.StateActivity> can have zero or one <xref:System.Workflow.Activities.StateInitializationActivity> activity. If a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present the <xref:System.Workflow.Activities.StateInitializationActivity> will be executed. As soon as the <xref:System.Workflow.Activities.StateInitializationActivity> activity finishes, the <xref:System.Workflow.Activities.StateActivity> blocks events so that the <xref:System.Workflow.Activities.StateActivity> only receives events that can be handled by its <xref:System.Workflow.Activities.EventDrivenActivity> activities.","pos":[0,894],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> starts running, the <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> will check to see whether a <ph id=\"ph3\">&lt;xref:System.Workflow.Activities.StateInitializationActivity&gt;</ph> activity is present or not.","pos":[0,242],"source":"When the <xref:System.Workflow.Activities.StateActivity> starts running, the <xref:System.Workflow.Activities.StateActivity> will check to see whether a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present or not."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> can have zero or one <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.StateInitializationActivity&gt;</ph> activity.","pos":[243,387],"source":" The <xref:System.Workflow.Activities.StateActivity> can have zero or one <xref:System.Workflow.Activities.StateInitializationActivity> activity."},{"content":"If a <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateInitializationActivity&gt;</ph> activity is present the <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.StateInitializationActivity&gt;</ph> will be executed.","pos":[388,558],"source":" If a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present the <xref:System.Workflow.Activities.StateInitializationActivity> will be executed."},{"content":"As soon as the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateInitializationActivity&gt;</ph> activity finishes, the <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> blocks events so that the <ph id=\"ph3\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> only receives events that can be handled by its <ph id=\"ph4\">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> activities.","pos":[559,894],"source":" As soon as the <xref:System.Workflow.Activities.StateInitializationActivity> activity finishes, the <xref:System.Workflow.Activities.StateActivity> blocks events so that the <xref:System.Workflow.Activities.StateActivity> only receives events that can be handled by its <xref:System.Workflow.Activities.EventDrivenActivity> activities."}]}]},{"pos":[2133,2345],"content":"The <xref:System.Workflow.Activities.StateActivity> is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the <xref:System.Workflow.Activities.StateActivity> activity can contain other activities.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> is a <ph id=\"ph2\">&lt;xref:System.Workflow.ComponentModel.CompositeActivity&gt;</ph>, meaning the <ph id=\"ph3\">&lt;xref:System.Workflow.Activities.StateActivity&gt;</ph> activity can contain other activities.","pos":[0,212],"source":"The <xref:System.Workflow.Activities.StateActivity> is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the <xref:System.Workflow.Activities.StateActivity> activity can contain other activities."}]}],"pos":[1329,3686],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class.","nodes":[{"pos":[0,102],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class."}],"pos":[13504,13607],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class using the name of the activity.","nodes":[{"pos":[0,133],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;&lt;/xref&gt;</ph> class using the name of the activity.","source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class using the name of the activity."}],"pos":[15351,15485],"yaml":true},{"content":"The user-defined name of the activity.","nodes":[{"pos":[0,38],"content":"The user-defined name of the activity.","nodes":[{"content":"The user-defined name of the activity.","pos":[0,38]}]}],"pos":[15620,15659],"yaml":true},{"content":"Cancels the execution of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>.","nodes":[{"pos":[0,91],"content":"Cancels the execution of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;&lt;/xref&gt;</ph>.","source":"Cancels the execution of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>."}],"pos":[16882,16974],"yaml":true},{"content":"The execution context for the activity.","nodes":[{"pos":[0,39],"content":"The execution context for the activity.","nodes":[{"content":"The execution context for the activity.","pos":[0,39]}]}],"pos":[17284,17324],"yaml":true},{"content":"The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance.","nodes":[{"pos":[0,120],"content":"The current status of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> in the running workflow instance.","source":"The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance."}],"pos":[17422,17543],"yaml":true},{"content":"Executes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>.","nodes":[{"pos":[0,75],"content":"Executes the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;&lt;/xref&gt;</ph>.","source":"Executes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>."}],"pos":[18773,18849],"yaml":true},{"content":"The execution context for the activity.","nodes":[{"pos":[0,39],"content":"The execution context for the activity.","nodes":[{"content":"The execution context for the activity.","pos":[0,39]}]}],"pos":[19160,19200],"yaml":true},{"content":"The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance.","nodes":[{"pos":[0,120],"content":"The current status of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> in the running workflow instance.","source":"The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance."}],"pos":[19298,19419],"yaml":true},{"content":"Gets the executing instance of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that corresponds to the specified child activity name.","nodes":[{"pos":[0,150],"content":"Gets the executing instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> that corresponds to the specified child activity name.","source":"Gets the executing instance of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that corresponds to the specified child activity name."}],"pos":[20536,20687],"yaml":true},{"content":"The child activity.","nodes":[{"pos":[0,19],"content":"The child activity.","nodes":[{"content":"The child activity.","pos":[0,19]}]}],"pos":[20893,20913],"yaml":true},{"content":"The dynamic child activities.","nodes":[{"pos":[0,29],"content":"The dynamic child activities.","nodes":[{"content":"The dynamic child activities.","pos":[0,29]}]}],"pos":[20996,21026],"yaml":true},{"content":"The executable activities do not contain the <code>childActivityName</code>.","nodes":[{"pos":[0,76],"content":"The executable activities do not contain the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">childActivityName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The executable activities do not contain the <code>childActivityName</code>."}],"pos":[21207,21284],"yaml":true},{"content":"Initializes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> using the service provider.","nodes":[{"pos":[0,105],"content":"Initializes the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;&lt;/xref&gt;</ph> using the service provider.","source":"Initializes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> using the service provider."}],"pos":[22334,22440],"yaml":true},{"content":"The service provider from which to obtain services.","nodes":[{"pos":[0,51],"content":"The service provider from which to obtain services.","nodes":[{"content":"The service provider from which to obtain services.","pos":[0,51]}]}],"pos":[22617,22669],"yaml":true},{"content":"Determines if the activity being added is an <xref href=\"System.Workflow.Activities.EventDrivenActivity\"></xref> and if so, verifies whether the newly added event driven needs to be subscribed.","nodes":[{"pos":[0,193],"content":"Determines if the activity being added is an <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.EventDrivenActivity\"&gt;&lt;/xref&gt;</ph> and if so, verifies whether the newly added event driven needs to be subscribed.","source":"Determines if the activity being added is an <xref href=\"System.Workflow.Activities.EventDrivenActivity\"></xref> and if so, verifies whether the newly added event driven needs to be subscribed."}],"pos":[24125,24319],"yaml":true},{"content":"This is method is called whenever a user adds a child to a <xref:System.Workflow.ComponentModel.CompositeActivity> through workflow changes. Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <xref:System.Workflow.Activities.EventDrivenActivity> and if so, verifies if the newly added event driven needs to be subscribed.","nodes":[{"pos":[0,416],"content":"This is method is called whenever a user adds a child to a <xref:System.Workflow.ComponentModel.CompositeActivity> through workflow changes. Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <xref:System.Workflow.Activities.EventDrivenActivity> and if so, verifies if the newly added event driven needs to be subscribed.","nodes":[{"content":"This is method is called whenever a user adds a child to a <xref:System.Workflow.ComponentModel.CompositeActivity> through workflow changes. Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <xref:System.Workflow.Activities.EventDrivenActivity> and if so, verifies if the newly added event driven needs to be subscribed.","pos":[0,416],"nodes":[{"content":"This is method is called whenever a user adds a child to a <ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.CompositeActivity&gt;</ph> through workflow changes.","pos":[0,140],"source":"This is method is called whenever a user adds a child to a <xref:System.Workflow.ComponentModel.CompositeActivity> through workflow changes."},{"content":"Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> and if so, verifies if the newly added event driven needs to be subscribed.","pos":[141,416],"source":" Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <xref:System.Workflow.Activities.EventDrivenActivity> and if so, verifies if the newly added event driven needs to be subscribed."}]}]}],"pos":[24330,24747],"yaml":true,"extradata":"MT"},{"content":"The execution context for the activity.","nodes":[{"pos":[0,39],"content":"The execution context for the activity.","nodes":[{"content":"The execution context for the activity.","pos":[0,39]}]}],"pos":[25075,25115],"yaml":true},{"content":"The activity added to the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>.","nodes":[{"pos":[0,88],"content":"The activity added to the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;&lt;/xref&gt;</ph>.","source":"The activity added to the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>."}],"pos":[25210,25299],"yaml":true},{"content":"Called by the workflow runtime engine as part of the activity's transition to the <xref href=\"System.Workflow.ComponentModel.ActivityExecutionStatus.Closed\"></xref> state.","nodes":[{"pos":[0,171],"content":"Called by the workflow runtime engine as part of the activity's transition to the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.ActivityExecutionStatus.Closed\"&gt;&lt;/xref&gt;</ph> state.","source":"Called by the workflow runtime engine as part of the activity's transition to the <xref href=\"System.Workflow.ComponentModel.ActivityExecutionStatus.Closed\"></xref> state."}],"pos":[26428,26600],"yaml":true},{"content":"The service provider from which to obtain services.","nodes":[{"pos":[0,51],"content":"The service provider from which to obtain services.","nodes":[{"content":"The service provider from which to obtain services.","pos":[0,51]}]}],"pos":[26775,26827],"yaml":true},{"content":"Holds the string value of the change tracking data key; \"StateActivity.StateChange\". This field is a constant.","nodes":[{"pos":[0,110],"content":"Holds the string value of the change tracking data key; \"StateActivity.StateChange\". This field is a constant.","nodes":[{"content":"Holds the string value of the change tracking data key; \"StateActivity.StateChange\". This field is a constant.","pos":[0,110],"nodes":[{"content":"Holds the string value of the change tracking data key; \"StateActivity.StateChange\".","pos":[0,84]},{"content":"This field is a constant.","pos":[85,110]}]}]}],"pos":[27923,28034],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Activities.StateActivity\n  commentId: T:System.Workflow.Activities.StateActivity\n  id: StateActivity\n  children:\n  - System.Workflow.Activities.StateActivity.#ctor\n  - System.Workflow.Activities.StateActivity.#ctor(System.String)\n  - System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)\n  - System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)\n  - System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)\n  - System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey\n  langs:\n  - csharp\n  name: StateActivity\n  nameWithType: StateActivity\n  fullName: System.Workflow.Activities.StateActivity\n  type: Class\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Represents a state in a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \\n  \\n The <xref:System.Workflow.Activities.StateActivity> represents a State in a <xref:System.Workflow.Activities.StateMachineWorkflowActivity>. State activities could contain one or more <xref:System.Workflow.Activities.EventDrivenActivity>, or <xref:System.Workflow.Activities.StateActivity> classes, one <xref:System.Workflow.Activities.StateInitializationActivity> class, and one <xref:System.Workflow.Activities.StateFinalizationActivity> class.  SetState activities are used inside an <xref:System.Workflow.Activities.EventHandlersActivity> and <xref:System.Workflow.Activities.StateInitializationActivity> to move the state of the workflow.  \\n  \\n When a <xref:System.Workflow.Activities.StateActivity> is executing, the only events that can be received are the events that can be handled by the <xref:System.Workflow.Activities.EventDrivenActivity> activities in the <xref:System.Workflow.Activities.StateActivity> and also the <xref:System.Workflow.Activities.EventDrivenActivity> activities attached to the enclosing <xref:System.Workflow.Activities.StateActivity> activities and the root <xref:System.Workflow.ComponentModel.Activity>.  \\n  \\n When the <xref:System.Workflow.Activities.StateActivity> starts running, the <xref:System.Workflow.Activities.StateActivity> will check to see whether a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present or not. The <xref:System.Workflow.Activities.StateActivity> can have zero or one <xref:System.Workflow.Activities.StateInitializationActivity> activity. If a <xref:System.Workflow.Activities.StateInitializationActivity> activity is present the <xref:System.Workflow.Activities.StateInitializationActivity> will be executed. As soon as the <xref:System.Workflow.Activities.StateInitializationActivity> activity finishes, the <xref:System.Workflow.Activities.StateActivity> blocks events so that the <xref:System.Workflow.Activities.StateActivity> only receives events that can be handled by its <xref:System.Workflow.Activities.EventDrivenActivity> activities.  \\n  \\n The <xref:System.Workflow.Activities.StateActivity> is a <xref:System.Workflow.ComponentModel.CompositeActivity>, meaning the <xref:System.Workflow.Activities.StateActivity> activity can contain other activities.\"\n  example:\n  - \"The following code example shows how to create a new instance of the <xref:System.Workflow.Activities.StateActivity> class and use it implement a simple state machine to transition between 3 states. This code example is part of the SimpleStateMachineWorkflow SDK sample from the StateMachineWorkflow.cs file. For more information, see [Simple State Machine](http://msdn.microsoft.com/en-us/1974edbd-253d-4e01-9095-38ff9c3e749e).  \\n  \\n [!code-csharp[wf_samples#181](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#181)]\\n [!code-vb[wf_samples#181](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#181)]\"\n  syntax:\n    content: >-\n      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.StateActivity), \"Resources.StateActivity.png\")]\n\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.StateActivityValidator))]\n\n      public class StateActivity : System.Workflow.ComponentModel.CompositeActivity\n  inheritance:\n  - System.Object\n  - System.Workflow.ComponentModel.DependencyObject\n  - System.Workflow.ComponentModel.Activity\n  - System.Workflow.ComponentModel.CompositeActivity\n  derivedClasses:\n  - System.Workflow.Activities.StateMachineWorkflowActivity\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty\n  - System.Workflow.ComponentModel.Activity.Canceling\n  - System.Workflow.ComponentModel.Activity.CancelingEvent\n  - System.Workflow.ComponentModel.Activity.Clone\n  - System.Workflow.ComponentModel.Activity.Closed\n  - System.Workflow.ComponentModel.Activity.ClosedEvent\n  - System.Workflow.ComponentModel.Activity.Compensating\n  - System.Workflow.ComponentModel.Activity.CompensatingEvent\n  - System.Workflow.ComponentModel.Activity.Description\n  - System.Workflow.ComponentModel.Activity.Enabled\n  - System.Workflow.ComponentModel.Activity.Executing\n  - System.Workflow.ComponentModel.Activity.ExecutingEvent\n  - System.Workflow.ComponentModel.Activity.ExecutionResult\n  - System.Workflow.ComponentModel.Activity.ExecutionStatus\n  - System.Workflow.ComponentModel.Activity.Faulting\n  - System.Workflow.ComponentModel.Activity.FaultingEvent\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener{``0},``0)\n  - System.Workflow.ComponentModel.Activity.IsDynamicActivity\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.Name\n  - System.Workflow.ComponentModel.Activity.Parent\n  - System.Workflow.ComponentModel.Activity.QualifiedName\n  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)\n  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)\n  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.StatusChanged\n  - System.Workflow.ComponentModel.Activity.StatusChangedEvent\n  - System.Workflow.ComponentModel.Activity.ToString\n  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)\n  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)\n  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId\n  - System.Workflow.ComponentModel.CompositeActivity.Activities\n  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities\n  - System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)\n  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities\n  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.DesignMode\n  - System.Workflow.ComponentModel.DependencyObject.Dispose\n  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)\n  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties\n  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)\n  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject\n  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)\n  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.Site\n  - System.Workflow.ComponentModel.DependencyObject.UserData\n  attributes:\n  - type: System.Drawing.ToolboxBitmapAttribute\n  - type: System.ObsoleteAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.StateActivity.#ctor\n  commentId: M:System.Workflow.Activities.StateActivity.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: StateActivity()\n  nameWithType: StateActivity.StateActivity()\n  fullName: StateActivity.StateActivity()\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create a new instance of the <xref:System.Workflow.Activities.StateActivity> class.  This code example is part of the SimpleStateMachineWorkflow SDK Sample from the StateMachineWorkflow.cs file. For more information, see [Simple State Machine](http://msdn.microsoft.com/en-us/1974edbd-253d-4e01-9095-38ff9c3e749e).  \\n  \\n [!code-csharp[WF_Samples#188](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#188)]\\n [!code-vb[WF_Samples#188](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#188)]\"\n  syntax:\n    content: public StateActivity ();\n    parameters: []\n  overload: System.Workflow.Activities.StateActivity.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.StateActivity.#ctor(System.String)\n  commentId: M:System.Workflow.Activities.StateActivity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: StateActivity(String)\n  nameWithType: StateActivity.StateActivity(String)\n  fullName: StateActivity.StateActivity(String)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> class using the name of the activity.\n  syntax:\n    content: public StateActivity (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The user-defined name of the activity.\n  overload: System.Workflow.Activities.StateActivity.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  commentId: M:System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: StateActivity.Cancel(ActivityExecutionContext)\n  fullName: StateActivity.Cancel(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Cancels the execution of the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>.\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: The execution context for the activity.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance.\n  overload: System.Workflow.Activities.StateActivity.Cancel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  commentId: M:System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: Execute(ActivityExecutionContext)\n  nameWithType: StateActivity.Execute(ActivityExecutionContext)\n  fullName: StateActivity.Execute(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Executes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>.\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: The execution context for the activity.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: The current status of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> in the running workflow instance.\n  overload: System.Workflow.Activities.StateActivity.Execute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)\n  commentId: M:System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)\n  id: GetDynamicActivity(System.String)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: GetDynamicActivity(String)\n  nameWithType: StateActivity.GetDynamicActivity(String)\n  fullName: StateActivity.GetDynamicActivity(String)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Gets the executing instance of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that corresponds to the specified child activity name.\n  syntax:\n    content: public System.Workflow.ComponentModel.Activity GetDynamicActivity (string childActivityName);\n    parameters:\n    - id: childActivityName\n      type: System.String\n      description: The child activity.\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: The dynamic child activities.\n  overload: System.Workflow.Activities.StateActivity.GetDynamicActivity*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The executable activities do not contain the <code>childActivityName</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)\n  commentId: M:System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)\n  id: Initialize(System.IServiceProvider)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: Initialize(IServiceProvider)\n  nameWithType: StateActivity.Initialize(IServiceProvider)\n  fullName: StateActivity.Initialize(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> using the service provider.\n  syntax:\n    content: protected override void Initialize (IServiceProvider provider);\n    parameters:\n    - id: provider\n      type: System.IServiceProvider\n      description: The service provider from which to obtain services.\n  overload: System.Workflow.Activities.StateActivity.Initialize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  commentId: M:System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  id: OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: OnActivityChangeAdd(ActivityExecutionContext, Activity)\n  nameWithType: StateActivity.OnActivityChangeAdd(ActivityExecutionContext, Activity)\n  fullName: StateActivity.OnActivityChangeAdd(ActivityExecutionContext, Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Determines if the activity being added is an <xref href=\"System.Workflow.Activities.EventDrivenActivity\"></xref> and if so, verifies whether the newly added event driven needs to be subscribed.\n  remarks: This is method is called whenever a user adds a child to a <xref:System.Workflow.ComponentModel.CompositeActivity> through workflow changes. Note that this method is defined in CompositeActivity and overridden by the StateActivity, where it checks whether the activity being added is an <xref:System.Workflow.Activities.EventDrivenActivity> and if so, verifies if the newly added event driven needs to be subscribed.\n  syntax:\n    content: protected override void OnActivityChangeAdd (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, System.Workflow.ComponentModel.Activity addedActivity);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: The execution context for the activity.\n    - id: addedActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: The activity added to the <xref href=\"System.Workflow.Activities.StateActivity\"></xref>.\n  overload: System.Workflow.Activities.StateActivity.OnActivityChangeAdd*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)\n  commentId: M:System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)\n  id: OnClosed(System.IServiceProvider)\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: OnClosed(IServiceProvider)\n  nameWithType: StateActivity.OnClosed(IServiceProvider)\n  fullName: StateActivity.OnClosed(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Called by the workflow runtime engine as part of the activity's transition to the <xref href=\"System.Workflow.ComponentModel.ActivityExecutionStatus.Closed\"></xref> state.\n  syntax:\n    content: protected override void OnClosed (IServiceProvider provider);\n    parameters:\n    - id: provider\n      type: System.IServiceProvider\n      description: The service provider from which to obtain services.\n  overload: System.Workflow.Activities.StateActivity.OnClosed*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey\n  commentId: F:System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey\n  id: StateChangeTrackingDataKey\n  parent: System.Workflow.Activities.StateActivity\n  langs:\n  - csharp\n  name: StateChangeTrackingDataKey\n  nameWithType: StateActivity.StateChangeTrackingDataKey\n  fullName: StateActivity.StateChangeTrackingDataKey\n  type: Field\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Holds the string value of the change tracking data key; \"StateActivity.StateChange\". This field is a constant.\n  syntax:\n    content: public const string StateChangeTrackingDataKey;\n    return:\n      type: System.String\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Workflow.ComponentModel.CompositeActivity\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: CompositeActivity\n  nameWithType: CompositeActivity\n  fullName: System.Workflow.ComponentModel.CompositeActivity\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Workflow.Activities.StateActivity.#ctor\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: StateActivity()\n  nameWithType: StateActivity.StateActivity()\n  fullName: StateActivity.StateActivity()\n- uid: System.Workflow.Activities.StateActivity.#ctor(System.String)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: StateActivity(String)\n  nameWithType: StateActivity.StateActivity(String)\n  fullName: StateActivity.StateActivity(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: StateActivity.Cancel(ActivityExecutionContext)\n  fullName: StateActivity.Cancel(ActivityExecutionContext)\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatus\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatus\n  nameWithType: ActivityExecutionStatus\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus\n- uid: System.Workflow.ComponentModel.ActivityExecutionContext\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionContext\n  nameWithType: ActivityExecutionContext\n  fullName: System.Workflow.ComponentModel.ActivityExecutionContext\n- uid: System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Execute(ActivityExecutionContext)\n  nameWithType: StateActivity.Execute(ActivityExecutionContext)\n  fullName: StateActivity.Execute(ActivityExecutionContext)\n- uid: System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: GetDynamicActivity(String)\n  nameWithType: StateActivity.GetDynamicActivity(String)\n  fullName: StateActivity.GetDynamicActivity(String)\n- uid: System.Workflow.ComponentModel.Activity\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Workflow.ComponentModel.Activity\n- uid: System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Initialize(IServiceProvider)\n  nameWithType: StateActivity.Initialize(IServiceProvider)\n  fullName: StateActivity.Initialize(IServiceProvider)\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: false\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: OnActivityChangeAdd(ActivityExecutionContext, Activity)\n  nameWithType: StateActivity.OnActivityChangeAdd(ActivityExecutionContext, Activity)\n  fullName: StateActivity.OnActivityChangeAdd(ActivityExecutionContext, Activity)\n- uid: System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: OnClosed(IServiceProvider)\n  nameWithType: StateActivity.OnClosed(IServiceProvider)\n  fullName: StateActivity.OnClosed(IServiceProvider)\n- uid: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: StateChangeTrackingDataKey\n  nameWithType: StateActivity.StateChangeTrackingDataKey\n  fullName: StateActivity.StateChangeTrackingDataKey\n- uid: System.Workflow.Activities.StateActivity.#ctor*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: StateActivity\n  nameWithType: StateActivity.StateActivity\n  fullName: StateActivity.StateActivity\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n- uid: System.Workflow.Activities.StateActivity.Cancel*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Cancel\n  nameWithType: StateActivity.Cancel\n  fullName: StateActivity.Cancel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n- uid: System.Workflow.Activities.StateActivity.Execute*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Execute\n  nameWithType: StateActivity.Execute\n  fullName: StateActivity.Execute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n- uid: System.Workflow.Activities.StateActivity.GetDynamicActivity*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: GetDynamicActivity\n  nameWithType: StateActivity.GetDynamicActivity\n  fullName: StateActivity.GetDynamicActivity\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n- uid: System.Workflow.Activities.StateActivity.Initialize*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: Initialize\n  nameWithType: StateActivity.Initialize\n  fullName: StateActivity.Initialize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n- uid: System.Workflow.Activities.StateActivity.OnActivityChangeAdd*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: OnActivityChangeAdd\n  nameWithType: StateActivity.OnActivityChangeAdd\n  fullName: StateActivity.OnActivityChangeAdd\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n- uid: System.Workflow.Activities.StateActivity.OnClosed*\n  parent: System.Workflow.Activities.StateActivity\n  isExternal: false\n  name: OnClosed\n  nameWithType: StateActivity.OnClosed\n  fullName: StateActivity.OnClosed\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/StateActivity.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Workflow.ComponentModel.Activity.ToString\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ToString()\n  nameWithType: Activity.ToString()\n  fullName: Activity.ToString()\n- uid: System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: AddHandler(DependencyProperty, Object)\n  nameWithType: DependencyObject.AddHandler(DependencyProperty, Object)\n  fullName: DependencyObject.AddHandler(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.DesignMode\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: DesignMode\n  nameWithType: DependencyObject.DesignMode\n  fullName: DependencyObject.DesignMode\n- uid: System.Workflow.ComponentModel.DependencyObject.Dispose\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: Dispose()\n  nameWithType: DependencyObject.Dispose()\n  fullName: DependencyObject.Dispose()\n- uid: System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: CompositeActivity.Dispose(Boolean)\n  fullName: CompositeActivity.Dispose(Boolean)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetBinding(DependencyProperty)\n  nameWithType: DependencyObject.GetBinding(DependencyProperty)\n  fullName: DependencyObject.GetBinding(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetBoundValue(ActivityBind, Type)\n  nameWithType: DependencyObject.GetBoundValue(ActivityBind, Type)\n  fullName: DependencyObject.GetBoundValue(ActivityBind, Type)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetInvocationList<T>(DependencyProperty)\n  nameWithType: DependencyObject.GetInvocationList<T>(DependencyProperty)\n  fullName: DependencyObject.GetInvocationList<T>(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetValue(DependencyProperty)\n  nameWithType: DependencyObject.GetValue(DependencyProperty)\n  fullName: DependencyObject.GetValue(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetValueBase(DependencyProperty)\n  nameWithType: DependencyObject.GetValueBase(DependencyProperty)\n  fullName: DependencyObject.GetValueBase(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.InitializeProperties\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: InitializeProperties()\n  nameWithType: DependencyObject.InitializeProperties()\n  fullName: DependencyObject.InitializeProperties()\n- uid: System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: IsBindingSet(DependencyProperty)\n  nameWithType: DependencyObject.IsBindingSet(DependencyProperty)\n  fullName: DependencyObject.IsBindingSet(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: MetaEquals(DependencyObject)\n  nameWithType: DependencyObject.MetaEquals(DependencyObject)\n  fullName: DependencyObject.MetaEquals(DependencyObject)\n- uid: System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: ParentDependencyObject\n  nameWithType: DependencyObject.ParentDependencyObject\n  fullName: DependencyObject.ParentDependencyObject\n- uid: System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: RemoveHandler(DependencyProperty, Object)\n  nameWithType: DependencyObject.RemoveHandler(DependencyProperty, Object)\n  fullName: DependencyObject.RemoveHandler(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: RemoveProperty(DependencyProperty)\n  nameWithType: DependencyObject.RemoveProperty(DependencyProperty)\n  fullName: DependencyObject.RemoveProperty(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetBinding(DependencyProperty, ActivityBind)\n  nameWithType: DependencyObject.SetBinding(DependencyProperty, ActivityBind)\n  fullName: DependencyObject.SetBinding(DependencyProperty, ActivityBind)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetBoundValue(ActivityBind, Object)\n  nameWithType: DependencyObject.SetBoundValue(ActivityBind, Object)\n  fullName: DependencyObject.SetBoundValue(ActivityBind, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetReadOnlyPropertyValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetReadOnlyPropertyValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetReadOnlyPropertyValue(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetValue(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetValueBase(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValueBase(DependencyProperty, Object)\n  fullName: DependencyObject.SetValueBase(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.Site\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: Site\n  nameWithType: DependencyObject.Site\n  fullName: DependencyObject.Site\n- uid: System.Workflow.ComponentModel.DependencyObject.UserData\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: UserData\n  nameWithType: DependencyObject.UserData\n  fullName: DependencyObject.UserData\n- uid: System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ActivityContextGuidProperty\n  nameWithType: Activity.ActivityContextGuidProperty\n  fullName: Activity.ActivityContextGuidProperty\n- uid: System.Workflow.ComponentModel.Activity.Canceling\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Canceling\n  nameWithType: Activity.Canceling\n  fullName: Activity.Canceling\n- uid: System.Workflow.ComponentModel.Activity.CancelingEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: CancelingEvent\n  nameWithType: Activity.CancelingEvent\n  fullName: Activity.CancelingEvent\n- uid: System.Workflow.ComponentModel.Activity.Clone\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Clone()\n  nameWithType: Activity.Clone()\n  fullName: Activity.Clone()\n- uid: System.Workflow.ComponentModel.Activity.Closed\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Closed\n  nameWithType: Activity.Closed\n  fullName: Activity.Closed\n- uid: System.Workflow.ComponentModel.Activity.ClosedEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ClosedEvent\n  nameWithType: Activity.ClosedEvent\n  fullName: Activity.ClosedEvent\n- uid: System.Workflow.ComponentModel.Activity.Compensating\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Compensating\n  nameWithType: Activity.Compensating\n  fullName: Activity.Compensating\n- uid: System.Workflow.ComponentModel.Activity.CompensatingEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: CompensatingEvent\n  nameWithType: Activity.CompensatingEvent\n  fullName: Activity.CompensatingEvent\n- uid: System.Workflow.ComponentModel.Activity.Description\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Description\n  nameWithType: Activity.Description\n  fullName: Activity.Description\n- uid: System.Workflow.ComponentModel.Activity.Enabled\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Enabled\n  nameWithType: Activity.Enabled\n  fullName: Activity.Enabled\n- uid: System.Workflow.ComponentModel.Activity.Executing\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Executing\n  nameWithType: Activity.Executing\n  fullName: Activity.Executing\n- uid: System.Workflow.ComponentModel.Activity.ExecutingEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ExecutingEvent\n  nameWithType: Activity.ExecutingEvent\n  fullName: Activity.ExecutingEvent\n- uid: System.Workflow.ComponentModel.Activity.ExecutionResult\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ExecutionResult\n  nameWithType: Activity.ExecutionResult\n  fullName: Activity.ExecutionResult\n- uid: System.Workflow.ComponentModel.Activity.ExecutionStatus\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ExecutionStatus\n  nameWithType: Activity.ExecutionStatus\n  fullName: Activity.ExecutionStatus\n- uid: System.Workflow.ComponentModel.Activity.Faulting\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Faulting\n  nameWithType: Activity.Faulting\n  fullName: Activity.Faulting\n- uid: System.Workflow.ComponentModel.Activity.FaultingEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: FaultingEvent\n  nameWithType: Activity.FaultingEvent\n  fullName: Activity.FaultingEvent\n- uid: System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: GetActivityByName(String)\n  nameWithType: Activity.GetActivityByName(String)\n  fullName: Activity.GetActivityByName(String)\n- uid: System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: GetActivityByName(String, Boolean)\n  nameWithType: Activity.GetActivityByName(String, Boolean)\n  fullName: Activity.GetActivityByName(String, Boolean)\n- uid: System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: HandleFault(ActivityExecutionContext, Exception)\n  nameWithType: CompositeActivity.HandleFault(ActivityExecutionContext, Exception)\n  fullName: CompositeActivity.HandleFault(ActivityExecutionContext, Exception)\n- uid: System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Invoke<T>(EventHandler<T>, T)\n  nameWithType: Activity.Invoke<T>(EventHandler<T>, T)\n  fullName: Activity.Invoke<T>(EventHandler<T>, T)\n- uid: System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener{``0},``0)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Invoke<T>(IActivityEventListener<T>, T)\n  nameWithType: Activity.Invoke<T>(IActivityEventListener<T>, T)\n  fullName: Activity.Invoke<T>(IActivityEventListener<T>, T)\n- uid: System.Workflow.ComponentModel.Activity.IsDynamicActivity\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: IsDynamicActivity\n  nameWithType: Activity.IsDynamicActivity\n  fullName: Activity.IsDynamicActivity\n- uid: System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Load(Stream, Activity)\n  nameWithType: Activity.Load(Stream, Activity)\n  fullName: Activity.Load(Stream, Activity)\n- uid: System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Load(Stream, Activity, IFormatter)\n  nameWithType: Activity.Load(Stream, Activity, IFormatter)\n  fullName: Activity.Load(Stream, Activity, IFormatter)\n- uid: System.Workflow.ComponentModel.Activity.Name\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Name\n  nameWithType: Activity.Name\n  fullName: Activity.Name\n- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: OnActivityExecutionContextLoad(IServiceProvider)\n  nameWithType: CompositeActivity.OnActivityExecutionContextLoad(IServiceProvider)\n  fullName: CompositeActivity.OnActivityExecutionContextLoad(IServiceProvider)\n- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: OnActivityExecutionContextUnload(IServiceProvider)\n  nameWithType: CompositeActivity.OnActivityExecutionContextUnload(IServiceProvider)\n  fullName: CompositeActivity.OnActivityExecutionContextUnload(IServiceProvider)\n- uid: System.Workflow.ComponentModel.Activity.Parent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Parent\n  nameWithType: Activity.Parent\n  fullName: Activity.Parent\n- uid: System.Workflow.ComponentModel.Activity.QualifiedName\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: QualifiedName\n  nameWithType: Activity.QualifiedName\n  fullName: Activity.QualifiedName\n- uid: System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: RaiseEvent(DependencyProperty, Object, EventArgs)\n  nameWithType: Activity.RaiseEvent(DependencyProperty, Object, EventArgs)\n  fullName: Activity.RaiseEvent(DependencyProperty, Object, EventArgs)\n- uid: System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: RaiseGenericEvent<T>(DependencyProperty, Object, T)\n  nameWithType: Activity.RaiseGenericEvent<T>(DependencyProperty, Object, T)\n  fullName: Activity.RaiseGenericEvent<T>(DependencyProperty, Object, T)\n- uid: System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: RegisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n  nameWithType: Activity.RegisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n  fullName: Activity.RegisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n- uid: System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Save(Stream)\n  nameWithType: Activity.Save(Stream)\n  fullName: Activity.Save(Stream)\n- uid: System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Save(Stream, IFormatter)\n  nameWithType: Activity.Save(Stream, IFormatter)\n  fullName: Activity.Save(Stream, IFormatter)\n- uid: System.Workflow.ComponentModel.Activity.StatusChanged\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: StatusChanged\n  nameWithType: Activity.StatusChanged\n  fullName: Activity.StatusChanged\n- uid: System.Workflow.ComponentModel.Activity.StatusChangedEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: StatusChangedEvent\n  nameWithType: Activity.StatusChangedEvent\n  fullName: Activity.StatusChangedEvent\n- uid: System.Workflow.ComponentModel.Activity.TrackData(System.Object)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: TrackData(Object)\n  nameWithType: Activity.TrackData(Object)\n  fullName: Activity.TrackData(Object)\n- uid: System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: TrackData(String, Object)\n  nameWithType: Activity.TrackData(String, Object)\n  fullName: Activity.TrackData(String, Object)\n- uid: System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: Uninitialize(IServiceProvider)\n  nameWithType: CompositeActivity.Uninitialize(IServiceProvider)\n  fullName: CompositeActivity.Uninitialize(IServiceProvider)\n- uid: System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: UnregisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n  nameWithType: Activity.UnregisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n  fullName: Activity.UnregisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n- uid: System.Workflow.ComponentModel.Activity.WorkflowInstanceId\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: WorkflowInstanceId\n  nameWithType: Activity.WorkflowInstanceId\n  fullName: Activity.WorkflowInstanceId\n- uid: System.Workflow.ComponentModel.CompositeActivity.Activities\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: Activities\n  nameWithType: CompositeActivity.Activities\n  fullName: CompositeActivity.Activities\n- uid: System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: ApplyWorkflowChanges(WorkflowChanges)\n  nameWithType: CompositeActivity.ApplyWorkflowChanges(WorkflowChanges)\n  fullName: CompositeActivity.ApplyWorkflowChanges(WorkflowChanges)\n- uid: System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: CanModifyActivities\n  nameWithType: CompositeActivity.CanModifyActivities\n  fullName: CompositeActivity.CanModifyActivities\n- uid: System.Workflow.ComponentModel.CompositeActivity.EnabledActivities\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: EnabledActivities\n  nameWithType: CompositeActivity.EnabledActivities\n  fullName: CompositeActivity.EnabledActivities\n- uid: System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: GetDynamicActivities(Activity)\n  nameWithType: CompositeActivity.GetDynamicActivities(Activity)\n  fullName: CompositeActivity.GetDynamicActivities(Activity)\n- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: OnActivityChangeRemove(ActivityExecutionContext, Activity)\n  nameWithType: CompositeActivity.OnActivityChangeRemove(ActivityExecutionContext, Activity)\n  fullName: CompositeActivity.OnActivityChangeRemove(ActivityExecutionContext, Activity)\n- uid: System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: OnListChanged(ActivityCollectionChangeEventArgs)\n  nameWithType: CompositeActivity.OnListChanged(ActivityCollectionChangeEventArgs)\n  fullName: CompositeActivity.OnListChanged(ActivityCollectionChangeEventArgs)\n- uid: System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: OnListChanging(ActivityCollectionChangeEventArgs)\n  nameWithType: CompositeActivity.OnListChanging(ActivityCollectionChangeEventArgs)\n  fullName: CompositeActivity.OnListChanging(ActivityCollectionChangeEventArgs)\n- uid: System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: OnWorkflowChangesCompleted(ActivityExecutionContext)\n  nameWithType: CompositeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)\n  fullName: CompositeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)\n"}