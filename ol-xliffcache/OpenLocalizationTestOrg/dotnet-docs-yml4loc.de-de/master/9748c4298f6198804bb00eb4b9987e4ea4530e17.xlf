<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9748c4298f6198804bb00eb4b9987e4ea4530e17</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Application.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7967f71b869753de9bd345d847ef4665694cb61</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d1a3e26af6b9fb98c29af2296be438dc193ef1b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates a Windows Presentation Foundation (WPF) application.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> is a class that encapsulates <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application-specific functionality, including the following:</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Application Lifetime<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Application.Exit&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Application.Startup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Application-Scope Window, Property, and Resource Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Application.LoadComponent%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Command-Line Parameter and Exit Code Processing<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.Startup?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.Exit?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Navigation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.FragmentNavigation&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.LoadCompleted&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Application.Navigated&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Application.Navigating&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Application.NavigationProgress&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Application.NavigationStopped&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Application.NavigationFailed&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Application.GetCookie%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> implements the singleton pattern to provide shared access to its window, property, and resource scope services.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, only one instance of the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class can be created per <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can implement an <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> using markup, markup and code-behind, or code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> is implemented with markup, whether markup or markup and code-behind, the markup file must be configured as an <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph> <ph id="ph3">`ApplicationDefinition`</ph> item.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standalone application does not require an <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object; it is possible to implement a custom <ph id="ph2">`static`</ph> entry point method (<ph id="ph3">`Main`</ph>) that opens a window without creating an instance of <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph> require an <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Application"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one instance of the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class can be created per <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>, to ensure shared access to a single set of application-scope window, property, and resource data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, the default constructor of the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class detects whether the instance being initialized is the first instance in an <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>; if it is not, an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object for the current <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> is exposed from the static <ph id="ph3">&lt;xref:System.Windows.Application.Current%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>More than one instance of the <ph id="ph1">&lt;xref href="System.Windows.Application"&gt;&lt;/xref&gt;</ph> class is created per <ph id="ph2">&lt;xref href="System.AppDomain"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Occurs when an application becomes the foreground application.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application that has one or more open windows is activated (becomes the foreground application) when one of the windows is activated for the first time since the application was launched, or when one of the windows is activated while the application is inactive: Specifically, activation occurs when:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application opens its first window.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>A user switches to the application by using ALT+TAB or by using Task Manager.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>A user clicks the taskbar button for one of the windows in an application.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications that need to detect when they activate can handle the <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an application is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application's behavior or state depends on its activation state, it can handle both <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> events to determine which activation state it's in.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once an application becomes active, <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> will not be raised again until the application is deactivated, irrespective of how many windows within an application are activated while the application is active.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> is not raised for <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Application"&gt;&lt;/xref&gt;</ph> object for the current <ph id="ph2">&lt;xref href="System.AppDomain"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> is a per-<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> singleton type that implements the static <ph id="ph3">&lt;xref:System.Windows.Application.Current%2A&gt;</ph> property to provide shared access to the <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph> instance for the current <ph id="ph5">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This design guarantees that state managed by <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>, including shared resources and state, is available from a single, shared location.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is thread safe and is available from any thread.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Application"&gt;&lt;/xref&gt;</ph> object for the current <ph id="ph2">&lt;xref href="System.AppDomain"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Occurs when an application stops being the foreground application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application that has one or more open windows deactivates (stops being the foreground application) when a user does the following:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Switches to another application by using ALT+TAB or by using Task Manager.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clicks the taskbar button for a window in another application.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications that need to detect deactivation can handle the <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an application is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application's behavior or state depends on its activation state, it can handle both <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> events to determine which state it's in.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> is not raised for <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Occurs when an exception is thrown by an application but not handled.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> catches unhandled exceptions, notifies users of the exception from a dialog box (from which they can report the exception), and automatically shuts down an application.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if an application needs to perform custom unhandled exception processing from a centralized location, you should handle <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> is raised by an <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> for each exception that is unhandled by code running on the main UI thread.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception is not handled on either a background <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> thread (a thread with its own <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>) or a background worker thread (a thread without a <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>), the exception is not forwarded to the main <ph id="ph4">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> is not raised.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these circumstances, you will need to write code to do the following:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handle exceptions on the background thread.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dispatch those exceptions to the main <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rethrow them on the main <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread without handling them to allow <ph id="ph2">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> to be raised.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Threading Model<ept id="p1">](~/docs/framework/wpf/advanced/threading-model.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> event handler is passed a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs&gt;</ph> argument that contains contextual information regarding the exception, including:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception (<ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> from which it originated (<ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this information to determine whether an exception is recoverable or not.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>A recoverable exception might be a <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph>, for example, while an unrecoverable exception might be a <ph id="ph2">&lt;xref:System.StackOverflowException&gt;</ph>, for example.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you process an unhandled exception from <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>, and you don't want <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> to continue processing it, you need to set the <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the other events that <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> raises, <ph id="ph2">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> does not have a matching protected virtual implementation (OnDispatcherUnhandledException).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, classes that derive from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> must always register an event handler with <ph id="ph2">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> to process unhandled exceptions.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Occurs just before an application shuts down, and cannot be canceled.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application can shut down for either of the following reasons:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object is called, either explicitly or as determined by the <ph id="ph3">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user ends the session by logging off or shutting down.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can detect when application shutdown occurs by handling the <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event, and perform any additional processing as required.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also handle <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> to inspect or change the application exit code when you don't need to call <ph id="ph2">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> explicitly.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exit code is exposed from the <ph id="ph1">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.ExitEventArgs&gt;</ph> argument that's passed to the <ph id="ph3">&lt;xref:System.Windows.Application.Exit&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application stops running, the exit code is passed to the operating system for subsequent processing.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application handles the <ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event and subsequently cancels it, <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> is not raised and the application continues running in accordance with the shutdown mode.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exit code can be set from an <ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>, although the value is ignored.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> is raised in the following circumstances:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]</ph> is navigated away from.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_ie7](~/includes/tla2sharptla-ie7-md.md)]</ph>, when the tab that is hosting the <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the browser is closed.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>In all cases, the value of the <ph id="ph1">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;</ph> property is ignored.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Searches for a <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> resource, such as a <ph id="ph2">&lt;xref href="System.Windows.Style"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Windows.Media.Brush"&gt;&lt;/xref&gt;</ph>, with the specified key, and throws an exception if the requested resource is not found (see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> will first look in application-scope resources for the specified resource.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application-scope resources are managed by <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>, and are exposed from the <ph id="ph2">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified resource is not found in the set of application-scope resources, <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> then next searches the system resources.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>System resources are shell resources defined by the user, and include colors, fonts, and shell configurations.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>These are exposed from the <ph id="ph1">&lt;xref:System.Windows.SystemColors&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.SystemFonts&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.SystemParameters&gt;</ph> types, respectively, as static properties.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> to acquire them, these types also expose resource key properties that are designed to be passed to <ph id="ph2">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>; for example, <ph id="ph3">&lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> returns an object, you must cast the returned value to the appropriate type if the resource is found.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method for a key that cannot be found, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not want to handle exceptions that result from calling <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>, call <ph id="ph2">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> instead; <ph id="ph3">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> returns a <ph id="ph4">`null`</ph> reference when a requested resource cannot be found, and does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is thread safe and can be called from any thread.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The name of the resource to find.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The requested resource object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If the requested resource is not found, a <ph id="ph1">&lt;xref href="System.Windows.ResourceReferenceKeyNotFoundException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The resource cannot be found.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Occurs when a navigator in the application begins navigation to a content fragment, Navigation occurs immediately if the desired fragment is in the current content, or after the source <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> content has been loaded if the desired fragment is in different content.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns a resource stream for a content data file that is located at the specified <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> (see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not thread safe.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The relative <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that maps to a loose resource.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Resources.StreamResourceInfo"&gt;&lt;/xref&gt;</ph> that contains a content data file that is located at the specified <ph id="ph2">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If a loose resource is not found, null is returned.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that is passed to <ph id="ph2">&lt;xref href="System.Windows.Application.GetContentStream(System.Uri)"&gt;&lt;/xref&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that is passed to <ph id="ph2">&lt;xref href="System.Windows.Application.GetContentStream(System.Uri)"&gt;&lt;/xref&gt;</ph> is an absolute <ph id="ph3">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Retrieves a cookie for the location specified by a <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.GetCookie%2A&gt;</ph> retrieves a cookie for the specified <ph id="ph2">&lt;xref:System.Uri&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the cookie can't be retrieved, a <ph id="ph1">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>You need to write the code to parse the cookie string into a list of name/value pairs.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview of cookies in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>, see <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](~/docs/framework/wpf/app-development/navigation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that specifies the location for which a cookie was created.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> value, if the cookie exists; otherwise, a <ph id="ph2">&lt;xref href="System.ComponentModel.Win32Exception"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> error is raised by the <ph id="ph2">`InternetGetCookie`</ph> function (called by <ph id="ph3">&lt;xref href="System.Windows.Application.GetCookie(System.Uri)"&gt;&lt;/xref&gt;</ph>) if a problem occurs when attempting to retrieve the specified cookie.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns a resource stream for a site-of-origin data file that is located at the specified <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> (see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not thread safe.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that maps to a loose resource at the site of origin.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Resources.StreamResourceInfo"&gt;&lt;/xref&gt;</ph> that contains a resource stream for a site-of-origin data file that is located at the specified <ph id="ph2">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If the loose resource is not found, <ph id="ph1">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that is passed to <ph id="ph2">&lt;xref href="System.Windows.Application.GetRemoteStream(System.Uri)"&gt;&lt;/xref&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that is passed to <ph id="ph2">&lt;xref href="System.Windows.Application.GetRemoteStream(System.Uri)"&gt;&lt;/xref&gt;</ph> is either not relative, or is absolute but not in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">pack://siteoforigin:,,,/</ph><ept id="p1">&lt;/code&gt;</ept> form.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Returns a resource stream for a resource data file that is located at the specified <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> (see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not thread safe.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that maps to an embedded resource.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Resources.StreamResourceInfo"&gt;&lt;/xref&gt;</ph> that contains a resource stream for resource data file that is located at the specified <ph id="ph2">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that is passed to <ph id="ph2">&lt;xref href="System.Windows.Application.GetResourceStream(System.Uri)"&gt;&lt;/xref&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that is passed to <ph id="ph2">&lt;xref href="System.Windows.Application.GetResourceStream(System.Uri)"&gt;&lt;/xref&gt;</ph> is either not relative, or is absolute but not in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">pack://application:,,,/</ph><ept id="p1">&lt;/code&gt;</ept> form.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that is passed to <ph id="ph2">&lt;xref href="System.Windows.Application.GetResourceStream(System.Uri)"&gt;&lt;/xref&gt;</ph> cannot be found.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Occurs when content that was navigated to by a navigator in the application has been loaded, parsed, and has begun rendering.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Listen for events on the navigated content such as the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>event on <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> before you access properties of the navigated content.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Loads a <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file that is located at the specified <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph>, and converts it to an instance of the object that is specified by the root element of the <ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must explicitly convert the return value to the same type as the root element of the <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> file can be an application code file (configured as an <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph> Page item) or an application data file (a resource file, content file, or site-of-origin file; see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not thread-safe.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that maps to a relative <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>An instance of the root element specified by the XAML file loaded.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceLocator&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceLocator</ph><ept id="p1">&lt;/code&gt;</ept> is an absolute <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The file is not a <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Loads a <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file that is located at the specified <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> and converts it to an instance of the object that is specified by the root element of the <ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> file can be an application code file (configured as an <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph> Page item) or an application data file (a resource file, content file, or site-of-origin file; see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not thread-safe.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>An object of the same type as the root element of the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that maps to a relative <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceLocator&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceLocator</ph><ept id="p1">&lt;/code&gt;</ept> is an absolute <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;component&lt;/code&gt;</ph> is of a type that does not match the root element of the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Gets or sets the main window of the application.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is automatically set with a reference to the first <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> object to be instantiated in the <ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify a different main window by setting <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> assigning another <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object is set to <ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>, closing the main window causes the application to shut down.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is possible to set the <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> property from <ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>, if an application's main window is not the window that is produced by setting the <ph id="ph3">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> property in <ph id="ph4">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The two limitations of the <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> approach are:</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify either a <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>-only <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> or a <ph id="ph3">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>-only <ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> as the main window.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of the window you specify, otherwise it won't be shown.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reference to the first <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> object to be instantiated is also added as the first item to the <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is subsequently set with a reference to a different <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, the position of the item with the reference to the main window will change, while the order of items in <ph id="ph3">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> remains the same.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, always use <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> to refer to the main window instead of the first item in <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the main window is a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, and you need specific access to <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> members, you will need to cast the value of <ph id="ph3">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> to <ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is available only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph> that is designated as the main application window.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Application.MainWindow"&gt;&lt;/xref&gt;</ph> is set from an application that's hosted in a browser, such as an <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Occurs when the content that is being navigated to by a navigator in the application has been found, although it may not have completed loading.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Occurs when a new navigation is requested by a navigator in the application.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Occurs when an error occurs while a navigator in the application is navigating to the requested content.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Occurs periodically during a download that is being managed by a navigator in the application to provide navigation progress information.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">`StopLoading`</ph> method of a navigator in the application is called, or when a new navigation is requested by a navigator while a current navigation is in progress.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.Activated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnActivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnActivated%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnActivated%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.Deactivated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnDeactivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnDeactivated%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnDeactivated%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.Exit"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnExit%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override the <ph id="ph2">&lt;xref:System.Windows.Application.OnExit%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnExit%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.ExitEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.FragmentNavigation"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnFragmentNavigation%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.FragmentNavigation&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnFragmentNavigation%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnFragmentNavigation%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.FragmentNavigation&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Navigation.FragmentNavigationEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.LoadCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnLoadCompleted%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.LoadCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnLoadCompleted%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnLoadCompleted%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.LoadCompleted&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Navigation.NavigationEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.Navigated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Navigated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigated%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigated%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Navigated&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Navigation.NavigationEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.Navigating"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigating%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Navigating&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigating%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigating%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Navigating&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Navigation.NavigatingCancelEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.NavigationFailed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationFailed%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.NavigationFailed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigationFailed%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationFailed%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.NavigationFailed&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Navigation.NavigationFailedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.NavigationProgress"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationProgress%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.NavigationProgress&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigationProgress%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must explicitly call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationProgress%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.NavigationProgress&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Navigation.NavigationProgressEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.NavigationStopped"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationStopped%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.NavigationStopped&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigationStopped%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationStopped%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.NavigationStopped&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Navigation.NavigationEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.SessionEnding"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnSessionEnding%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnSessionEnding%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnSessionEnding%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.SessionEndingCancelEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Application.Startup"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph> in the base class if the <ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph> event needs to be raised.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.StartupEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Gets a collection of application-scope properties.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> exposes a dictionary via <ph id="ph2">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph> which you can use to store application-scope properties.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows you to share state amongst all code in an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> in a thread-safe fashion, without the need to write your own state code.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties stored in <ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph> must be converted to the appropriate type returned.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The<ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph> property is thread safe and is available from any thread.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the application-scope properties.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Reflection.Assembly"&gt;&lt;/xref&gt;</ph> that provides the pack <ph id="ph2">[!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)]</ph> for resources in a <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> resources are resolved at run time with respect to the entry assembly, which is identified by the value returned from the <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>The entry assembly is the assembly that is returned by <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> and could be the following:</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The executable assembly in the default application domain.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first assembly to be executed by calling <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following cases, however, a <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly cannot get a reference to the entry assembly:</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>An unmanaged (native) application hosts the <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>A managed application hosts the <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly by loading it into a new application domain using a method other than <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>In both of these cases, <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> returns <ph id="ph2">`null`</ph>, and the <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly's resources cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these cases, <ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> can be set, once only, with a reference to the assembly that should be used to resolve resources.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> can only be set once because it is unlikely that the resource assembly will change after the <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly is loaded.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> cannot be set when a <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly can discover the entry assembly—that is, when <ph id="ph3">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> returns a reference to an assembly rather than <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is thread safe and is available from any thread.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> is introduced in the .NET Framework version 3.5.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Versions and Dependencies<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A reference to the <ph id="ph1">&lt;xref href="System.Reflection.Assembly"&gt;&lt;/xref&gt;</ph> that provides the pack <ph id="ph2">[!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)]</ph> for resources in a <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application has an entry assembly, or <ph id="ph2">&lt;xref href="System.Windows.Application.ResourceAssembly"&gt;&lt;/xref&gt;</ph> has already been set.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Gets or sets a collection of application-scope resources, such as styles and brushes.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property can be used to share resources across the windows and elements of an application.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property is included in the resource lookup path, which is traversed in the following order:</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>System</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> elements can bind to application-scope resources.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, if resources change, the resource system ensures that element properties which are bound to those resources are automatically updated to reflect the change.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application-scope resources provide a simple way to support a consistent theme across your application.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can easily create a theme in <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> by using the <ph id="ph2">`Application.Resources`</ph> tag.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if your application supports multiple themes, which may contain a large number of theme elements, it might be easier to manage them using one <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> instance for each theme.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this way, a new theme can be applied by setting the Resources property to the appropriate <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two considerations to make when using <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>First, the dictionary <bpt id="p1">*</bpt>key<ept id="p1">*</ept> is an object, so you need to use exactly the same object instance when both setting and getting a property value (note that the key is case-sensitive when using a string).</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>Second, the dictionary <bpt id="p1">*</bpt>value<ept id="p1">*</ept> is an object, so you will need to convert the value to the desired type when getting a property value.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> is thread safe and is available from any thread.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.ResourceDictionary"&gt;&lt;/xref&gt;</ph> object that contains zero or more application-scope resources.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Starts a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> is called to start a <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you define your <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> using markup, or markup and code-behind, <ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> will be called implicitly.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you define your <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> using code, you will need to explicitly call <ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> is called, <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> attaches a new <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> instance to the <ph id="ph4">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> object's <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</ph> method is called, which starts a message pump to process windows messages.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> object calls the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object's the <ph id="ph3">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph> method to raise the <ph id="ph4">&lt;xref:System.Windows.Application.Startup&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, the application execution model has been established by the time you handle <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph>, at which point the application is considered to be running.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application stops running when <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called; the value of the <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property determines when <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, and whether it happens automatically or you need to explicitly call it.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> can be called only from the thread that creates the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> cannot be called from a <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> application exit code that is returned to the operating system when the application shuts down.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>By default, the exit code value is 0.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Application.Run"&gt;&lt;/xref&gt;</ph> is called from a browser-hosted application (for example, an <ph id="ph2">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>).</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Starts a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application and opens the specified window.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload extends the <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> method to open the specified window after an application starts running.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you define a code <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> that opens a window when it starts running, you explicitly call <ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create your <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> using markup, or markup and code-behind, you can automatically open a window during using either of the following techniques:</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Declaratively, by setting <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>Programmatically, by handling <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph> that opens automatically when an application starts.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> application exit code that is returned to the operating system when the application shuts down.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>By default, the exit code value is 0.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Application.Run"&gt;&lt;/xref&gt;</ph> is called from a browser-hosted application (for example, an <ph id="ph2">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>).</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Occurs when the user ends the <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph> session by logging off or shutting down the operating system.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, an application shuts down when the <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph> session ends, which occurs when a user logs off or shuts down.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)]</ph> asks each open application to shut down.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it is possible that an application may not be ready to shut down when this occurs.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application may have data that is in an inconsistent state, or in the middle of a long-running operation.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these situations, it may be desirable to prevent the session from ending, and may be more desirable to allow users the option to decide whether or not to let the session to end.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can detect when a session ends by handling the <ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application needs to prevent the session from ending, the <ph id="ph1">&lt;xref:System.Windows.SessionEndingCancelEventArgs&gt;</ph> argument that is passed to the event handler exposes the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> that you set to <ph id="ph3">`true`</ph> (the default value is <ph id="ph4">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> is unhandled, or is handled without being cancelled, <ph id="ph2">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called and the <ph id="ph3">&lt;xref:System.Windows.Application.Exit&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain more information about why the session is ending, an application can inspect <ph id="ph1">&lt;xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A&gt;</ph>, which is one of the <ph id="ph2">&lt;xref:System.Windows.ReasonSessionEnding&gt;</ph> values (<ph id="ph3">&lt;xref:System.Windows.ReasonSessionEnding.Logoff&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.ReasonSessionEnding.Shutdown&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> is not raised by console applications.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> is raised only on the thread that creates the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> is not raised for <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Creates a cookie for the location specified by a <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cookie is an arbitrary piece of data that can be stored by an application on the client machine during application sessions (session cookies) or across application sessions (persistent cookies).</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create both types of cookies by calling <ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cookie data typically takes the form of a name/value pair in the following format:</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>You pass a string of this format to <ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>, along with the <ph id="ph2">&lt;xref:System.Uri&gt;</ph> of the location for which the cookie should be set (typically, the application domain).</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether a cookie is a session cookie or a persistent cookie depends on whether the cookie string that you pass to <ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph> includes an expiry date.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string for a session cookie does not include an expiry date.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string for a persistent cookie does, and must be in the following format:</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>Persistent cookies are stored in the current <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph> installation's Temporary Internet Files folder until they expire, in which case they are deleted.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can delete a persistent cookie from your application by setting its expiry date to a date/time value that is in the past.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview of cookies in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>, see <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](~/docs/framework/wpf/app-development/navigation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that specifies the location for which the cookie should be created.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains the cookie data.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> error is raised by the <ph id="ph2">`InternetSetCookie`</ph> function (called by <ph id="ph3">&lt;xref href="System.Windows.Application.SetCookie(System.Uri,System.String)"&gt;&lt;/xref&gt;</ph>) if a problem occurs when attempting to create the specified cookie.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Shuts down an application.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, an application stops running.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can handle the <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event to detect when an application is about to stop running, to perform any appropriate processing.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is implicitly called by <ph id="ph2">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> in the following situations:</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a user ends a session and the <ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event is either unhandled, or handled without cancellation.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> explicitly causes an application to shut down, regardless of the <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> setting.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnExplicitShutdown&gt;</ph>, you must call <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> to shut down an application.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, the application will shut down irrespective of whether the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event of any open windows is canceled.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Shuts down an application that returns the specified exit code to the operating system.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can handle the <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event to set an exit code.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you explicitly call <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>, and you handle <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> only to set an exit code, you can call <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>An integer exit code for an application.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The default exit code is 0.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Gets or sets the condition that causes the <ph id="ph1">&lt;xref href="System.Windows.Application.Shutdown"&gt;&lt;/xref&gt;</ph> method to be called.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications stop running only when the <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method of the Application is called.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>Shut down can occur implicitly or explicitly, as specified by the value of the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>, <ph id="ph3">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> implicitly calls <ph id="ph4">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> when the last window in an application closes, even if any currently instantiated windows are set as the main window (see <ph id="ph5">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> of <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph> causes <ph id="ph3">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>to implicitly call <ph id="ph4">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> when the <ph id="ph5">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> closes, even if other windows are currently open.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>The lifetime of some applications may not be dependent on when the main window or last window is closed, or may not be dependent on windows at all.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>For these scenarios you need to set the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnExplicitShutdown&gt;</ph>, which requires an explicit <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method call to stop the application.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the application continues running in the background.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> can be configured declaratively from <ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> or programmatically from code.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is available only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.ShutdownMode"&gt;&lt;/xref&gt;</ph> enumeration value.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.Windows.ShutdownMode.OnLastWindowClose"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Application.Run"&gt;&lt;/xref&gt;</ph> method of the <ph id="ph2">&lt;xref href="System.Windows.Application"&gt;&lt;/xref&gt;</ph> object is called.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>A typical <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application may perform a variety of initialization tasks when it starts up, including:</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>Processing command-line parameters.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>Opening the main window.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initializing application-scope resources.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initializing application-scope properties.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can declaratively specify the main window and application-scope resources using <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> (<ph id="ph2">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>, respectively).</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sometimes, however, the resources or main window of your application can only be determined programmatically at run time.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, application-scope properties and command-line parameters can only be used programmatically.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>Programmatic initialization can be performed by handling the <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> event, including the following:</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>Acquire and process command-line parameters, which are available from the <ph id="ph1">&lt;xref:System.Windows.StartupEventArgs.Args%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.StartupEventArgs&gt;</ph> class that is passed to the <ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initialize application-scope resources by using the <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initialize application-scope properties by using the <ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instantiate and show one (or more) windows.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Command-line parameters can also be acquired by calling the static <ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Environment&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, <ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> requires full trust to execute.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> using <ph id="ph2">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>, the main window that is created is not available from either the <ph id="ph3">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> property or the <ph id="ph4">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property of the <ph id="ph5">&lt;xref:System.Windows.Application&gt;</ph> object until after the <ph id="ph6">&lt;xref:System.Windows.Application.Startup&gt;</ph> event is processed.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need access to the main window during startup, you need to manually create a new window object from your <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application uses <ph id="ph1">&lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt;</ph> to specify a credential policy, you need to set <ph id="ph2">&lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt;</ph> after <ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph> is raised; otherwise, <ph id="ph4">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> sets it to a default internal policy directly after the <ph id="ph5">&lt;xref:System.Windows.Application.Startup&gt;</ph> event has been raised.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command-line arguments that are passed to the <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler are not the same as the <ph id="ph2">[!INCLUDE[TLA#tla_url](~/includes/tlasharptla-url-md.md)]</ph> query string parameters that are passed to an <ph id="ph3">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> that is automatically shown when an application starts.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> to automatically load a <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resource when an application starts.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the types of <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resources that can be loaded, the type of window they are opened into, and the type of application that these resources can be set as the <ph id="ph2">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>Window</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application type</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Standalone only</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Standalone only</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>Standalone/browser-hosted</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>Standalone/browser-hosted</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>Standalone/browser-hosted</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>Standalone/browser-hosted</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you set the <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> property declaratively in <ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can set <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> programmatically, such as from a <ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler, which is useful if for applications that can only load the necessary <ph id="ph3">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resources at run time.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application might wait until run time to load its resources if the name of the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resource is stored in a configuration file.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether you set <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> declaratively or programmatically, the corresponding <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resource is not loaded until after the <ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph> event is handled.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, you won't have access to the resulting window from either the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property or the <ph id="ph2">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> property when handling <ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that refers to the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> that automatically opens when an application starts.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Application.StartupUri"&gt;&lt;/xref&gt;</ph> is set with a value of null.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Searches for the specified resource.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> will first look in application-scope resources for the specified resource.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application-scope resources are managed by <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>, and are exposed from the <ph id="ph2">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified resource is not found in the set of application-scope resources, <ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> then next searches the system resources.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>System resources are shell resources defined by the user, and include colors, fonts, and shell configurations.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>These are exposed from the <ph id="ph1">&lt;xref:System.Windows.SystemColors&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.SystemFonts&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.SystemParameters&gt;</ph> types, respectively, as static properties.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use <ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> to acquire them, these types also expose resource key properties that are designed to be passed to <ph id="ph2">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph>; for example, <ph id="ph3">&lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> returns an object, you must cast the returned value to the appropriate type if the resource is found.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is thread safe and can be called from any thread.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The name of the resource to find.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The requested resource object.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>If the requested resource is not found, a null reference is returned.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Gets the instantiated windows in an application.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> reference is automatically added to <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> as soon as a window is instantiated on the <ph id="ph3">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> thread; windows that are created by worker threads are not added.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> reference is automatically removed after its <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event has been handled and before its <ph id="ph3">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the first item added to the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property becomes the <ph id="ph2">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is available only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.WindowCollection"&gt;&lt;/xref&gt;</ph> that contains references to all window objects in the current <ph id="ph2">&lt;xref href="System.AppDomain"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Queries for whether a specified ambient property is available in the current scope.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Markup.IQueryAmbient&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The name of the requested ambient property.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the requested ambient property is available; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>