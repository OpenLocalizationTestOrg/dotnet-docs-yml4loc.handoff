{"nodes":[{"content":"Enables the .NET Framework Data Provider for SQL Server to help make sure that a user has a security level sufficient to access a data source.","nodes":[{"pos":[0,142],"content":"Enables the .NET Framework Data Provider for SQL Server to help make sure that a user has a security level sufficient to access a data source.","nodes":[{"content":"Enables the .NET Framework Data Provider for SQL Server to help make sure that a user has a security level sufficient to access a data source.","pos":[0,142]}]}],"pos":[866,1009],"yaml":true},{"content":"The <xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A> property takes precedence over the <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> property. Therefore, if you set <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> to `false`, you must also set <xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A> to `false` to prevent a user from making a connection using a blank password.  \n  \n> [!NOTE]\n>  When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform. The opposite pattern, starting with all permissions and then denying a specific permission, is not secure, because there are many ways of expressing the same connection string. For example, if you start with all permissions and then attempt to deny the use of the connection string \"server=someserver\", the string \"server=someserver.mycompany.com\" would still be allowed. By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.","nodes":[{"pos":[0,430],"content":"The <xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A> property takes precedence over the <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> property. Therefore, if you set <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> to `false`, you must also set <xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A> to `false` to prevent a user from making a connection using a blank password.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A&gt;</ph> property takes precedence over the <ph id=\"ph2\">&lt;xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A&gt;</ph> property.","pos":[0,174],"source":"The <xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A> property takes precedence over the <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> property."},{"content":"Therefore, if you set <ph id=\"ph1\">&lt;xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A&gt;</ph> to <ph id=\"ph2\">`false`</ph>, you must also set <ph id=\"ph3\">&lt;xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A&gt;</ph> to <ph id=\"ph4\">`false`</ph> to prevent a user from making a connection using a blank password.","pos":[175,430],"source":" Therefore, if you set <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> to `false`, you must also set <xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A> to `false` to prevent a user from making a connection using a blank password."}]},{"pos":[438,1195],"content":"[!NOTE]\n When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform. The opposite pattern, starting with all permissions and then denying a specific permission, is not secure, because there are many ways of expressing the same connection string. For example, if you start with all permissions and then attempt to deny the use of the connection string \"server=someserver\", the string \"server=someserver.mycompany.com\" would still be allowed. By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.","leadings":["","> "],"nodes":[{"content":" When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform. The opposite pattern, starting with all permissions and then denying a specific permission, is not secure, because there are many ways of expressing the same connection string. For example, if you start with all permissions and then attempt to deny the use of the connection string \"server=someserver\", the string \"server=someserver.mycompany.com\" would still be allowed. By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.","pos":[8,755],"nodes":[{"content":"When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform.","pos":[1,254]},{"content":"The opposite pattern, starting with all permissions and then denying a specific permission, is not secure, because there are many ways of expressing the same connection string.","pos":[255,431]},{"content":"For example, if you start with all permissions and then attempt to deny the use of the connection string \"server=someserver\", the string \"server=someserver.mycompany.com\" would still be allowed.","pos":[432,626]},{"content":"By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.","pos":[627,747]}]}]}],"pos":[1020,2225],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> class.","nodes":[{"pos":[0,103],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.SqlClient.SqlClientPermission\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> class."}],"pos":[5358,5462],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> class.","nodes":[{"pos":[0,103],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.SqlClient.SqlClientPermission\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> class."}],"pos":[7211,7315],"yaml":true},{"content":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.","nodes":[{"pos":[0,83],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."}],"pos":[7525,7609],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> class.","nodes":[{"pos":[0,103],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.SqlClient.SqlClientPermission\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> class."}],"pos":[9112,9216],"yaml":true},{"content":"The <xref:System.Security.Permissions.PermissionState> enumeration takes precedence over the <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> property. Therefore, if you set <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> to `false`, you must also set <xref:System.Security.Permissions.PermissionState> to `None` to prevent a user from making a connection using a blank password. For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/docs/framework/data/adonet/code-access-security.md).","nodes":[{"pos":[0,564],"content":"The <xref:System.Security.Permissions.PermissionState> enumeration takes precedence over the <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> property. Therefore, if you set <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> to `false`, you must also set <xref:System.Security.Permissions.PermissionState> to `None` to prevent a user from making a connection using a blank password. For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/docs/framework/data/adonet/code-access-security.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph> enumeration takes precedence over the <ph id=\"ph2\">&lt;xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A&gt;</ph> property.","pos":[0,167],"source":"The <xref:System.Security.Permissions.PermissionState> enumeration takes precedence over the <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> property."},{"content":"Therefore, if you set <ph id=\"ph1\">&lt;xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A&gt;</ph> to <ph id=\"ph2\">`false`</ph>, you must also set <ph id=\"ph3\">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph> to <ph id=\"ph4\">`None`</ph> to prevent a user from making a connection using a blank password.","pos":[168,412],"source":" Therefore, if you set <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> to `false`, you must also set <xref:System.Security.Permissions.PermissionState> to `None` to prevent a user from making a connection using a blank password."},{"content":"For an example demonstrating how to use security demands, see <bpt id=\"p1\">[</bpt>Code Access Security and ADO.NET<ept id=\"p1\">](~/docs/framework/data/adonet/code-access-security.md)</ept>.","pos":[413,564],"source":" For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/docs/framework/data/adonet/code-access-security.md)."}]}],"pos":[9227,9792],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.","nodes":[{"pos":[0,83],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."}],"pos":[10272,10356],"yaml":true},{"content":"Indicates whether a blank password is allowed.","nodes":[{"pos":[0,46],"content":"Indicates whether a blank password is allowed.","nodes":[{"content":"Indicates whether a blank password is allowed.","pos":[0,46]}]}],"pos":[10431,10478],"yaml":true},{"content":"Adds a new connection string and a set of restricted keywords to the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> object.","nodes":[{"pos":[0,139],"content":"Adds a new connection string and a set of restricted keywords to the <ph id=\"ph1\">&lt;xref href=\"System.Data.SqlClient.SqlClientPermission\"&gt;&lt;/xref&gt;</ph> object.","source":"Adds a new connection string and a set of restricted keywords to the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> object."}],"pos":[12023,12163],"yaml":true},{"content":"Use this method to configure which connection strings are allowed by a particular permission object. For example, use the following code fragment if you want to only allow a specific connection string and nothing else:  \n  \n `permission.Add(\"server=MyServer; database=MyDatabase; Integrated Security=true\", \"\", KeyRestrictionBehavior.AllowOnly)`  \n  \n The following example allows connection strings that use any database, but only on the server named MyServer, with any user and password combination and containing no other connection string keywords:  \n  \n `permission.Add(\"server=MyServer;\", \"database=; user id=; password=;\", KeyRestrictionBehavior.AllowOnly)`  \n  \n The following example uses the same scenario as above but allows for a failover partner that can be used when connecting to servers configured for mirroring:  \n  \n `permission.Add(\"server=MyServer; failover partner=MyMirrorServer\", \"database=; user id=; password=;\", KeyRestrictionBehavior.AllowOnly)`  \n  \n> [!NOTE]\n>  When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform. The opposite pattern, starting with all permissions and then trying to deny a specific permission, is not secure, because there are many ways of expressing the same connection string. For example, if you start with all permissions and then attempt to deny the use of the connection string \"server=someserver\", the string \"server=someserver.mycompany.com\" would still be allowed. By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.","nodes":[{"pos":[0,218],"content":"Use this method to configure which connection strings are allowed by a particular permission object. For example, use the following code fragment if you want to only allow a specific connection string and nothing else:","nodes":[{"content":"Use this method to configure which connection strings are allowed by a particular permission object. For example, use the following code fragment if you want to only allow a specific connection string and nothing else:","pos":[0,218],"nodes":[{"content":"Use this method to configure which connection strings are allowed by a particular permission object.","pos":[0,100]},{"content":"For example, use the following code fragment if you want to only allow a specific connection string and nothing else:","pos":[101,218]}]}]},{"pos":[352,552],"content":"The following example allows connection strings that use any database, but only on the server named MyServer, with any user and password combination and containing no other connection string keywords:","nodes":[{"content":"The following example allows connection strings that use any database, but only on the server named MyServer, with any user and password combination and containing no other connection string keywords:","pos":[0,200]}]},{"pos":[671,828],"content":"The following example uses the same scenario as above but allows for a failover partner that can be used when connecting to servers configured for mirroring:","nodes":[{"content":"The following example uses the same scenario as above but allows for a failover partner that can be used when connecting to servers configured for mirroring:","pos":[0,157]}]},{"pos":[980,1744],"content":"[!NOTE]\n When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform. The opposite pattern, starting with all permissions and then trying to deny a specific permission, is not secure, because there are many ways of expressing the same connection string. For example, if you start with all permissions and then attempt to deny the use of the connection string \"server=someserver\", the string \"server=someserver.mycompany.com\" would still be allowed. By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.","leadings":["","> "],"nodes":[{"content":" When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform. The opposite pattern, starting with all permissions and then trying to deny a specific permission, is not secure, because there are many ways of expressing the same connection string. For example, if you start with all permissions and then attempt to deny the use of the connection string \"server=someserver\", the string \"server=someserver.mycompany.com\" would still be allowed. By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.","pos":[8,762],"nodes":[{"content":"When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform.","pos":[1,254]},{"content":"The opposite pattern, starting with all permissions and then trying to deny a specific permission, is not secure, because there are many ways of expressing the same connection string.","pos":[255,438]},{"content":"For example, if you start with all permissions and then attempt to deny the use of the connection string \"server=someserver\", the string \"server=someserver.mycompany.com\" would still be allowed.","pos":[439,633]},{"content":"By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.","pos":[634,754]}]}]}],"pos":[12174,13950],"yaml":true,"extradata":"MT"},{"content":"The connection string.","nodes":[{"pos":[0,22],"content":"The connection string.","nodes":[{"content":"The connection string.","pos":[0,22]}]}],"pos":[14179,14202],"yaml":true},{"content":"The key restrictions.","nodes":[{"pos":[0,21],"content":"The key restrictions.","nodes":[{"content":"The key restrictions.","pos":[0,21]}]}],"pos":[14270,14292],"yaml":true},{"content":"One of the <xref href=\"System.Data.KeyRestrictionBehavior\"></xref> enumerations.","nodes":[{"pos":[0,80],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.KeyRestrictionBehavior\"&gt;&lt;/xref&gt;</ph> enumerations.","source":"One of the <xref href=\"System.Data.KeyRestrictionBehavior\"></xref> enumerations."}],"pos":[14377,14458],"yaml":true},{"content":"Returns the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> as an <xref href=\"System.Security.IPermission\"></xref>.","nodes":[{"pos":[0,130],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Data.SqlClient.SqlClientPermission\"&gt;&lt;/xref&gt;</ph> as an <ph id=\"ph2\">&lt;xref href=\"System.Security.IPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> as an <xref href=\"System.Security.IPermission\"></xref>."}],"pos":[15652,15783],"yaml":true},{"content":"A copy of the current permission object.","nodes":[{"pos":[0,40],"content":"A copy of the current permission object.","nodes":[{"content":"A copy of the current permission object.","pos":[0,40]}]}],"pos":[15949,15990],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.SqlClient.SqlClientPermission\n  commentId: T:System.Data.SqlClient.SqlClientPermission\n  id: SqlClientPermission\n  children:\n  - System.Data.SqlClient.SqlClientPermission.#ctor\n  - System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)\n  - System.Data.SqlClient.SqlClientPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)\n  - System.Data.SqlClient.SqlClientPermission.Copy\n  langs:\n  - csharp\n  name: SqlClientPermission\n  nameWithType: SqlClientPermission\n  fullName: System.Data.SqlClient.SqlClientPermission\n  type: Class\n  assemblies:\n  - System.Data\n  - System.Security.Permissions\n  namespace: System.Data.SqlClient\n  summary: Enables the .NET Framework Data Provider for SQL Server to help make sure that a user has a security level sufficient to access a data source.\n  remarks: \"The <xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A> property takes precedence over the <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> property. Therefore, if you set <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> to `false`, you must also set <xref:System.Data.Common.DBDataPermission.IsUnrestricted%2A> to `false` to prevent a user from making a connection using a blank password.  \\n  \\n> [!NOTE]\\n>  When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform. The opposite pattern, starting with all permissions and then denying a specific permission, is not secure, because there are many ways of expressing the same connection string. For example, if you start with all permissions and then attempt to deny the use of the connection string \\\"server=someserver\\\", the string \\\"server=someserver.mycompany.com\\\" would still be allowed. By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.\"\n  syntax:\n    content: 'public sealed class SqlClientPermission : System.Data.Common.DBDataPermission'\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  - System.Data.Common.DBDataPermission\n  implements: []\n  inheritedMembers:\n  - System.Data.Common.DBDataPermission.AllowBlankPassword\n  - System.Data.Common.DBDataPermission.Clear\n  - System.Data.Common.DBDataPermission.CreateInstance\n  - System.Data.Common.DBDataPermission.FromXml(System.Security.SecurityElement)\n  - System.Data.Common.DBDataPermission.Intersect(System.Security.IPermission)\n  - System.Data.Common.DBDataPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Data.Common.DBDataPermission.IsUnrestricted\n  - System.Data.Common.DBDataPermission.ToXml\n  - System.Data.Common.DBDataPermission.Union(System.Security.IPermission)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlClientPermission.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlClientPermission.#ctor\n  commentId: M:System.Data.SqlClient.SqlClientPermission.#ctor\n  id: '#ctor'\n  parent: System.Data.SqlClient.SqlClientPermission\n  langs:\n  - csharp\n  name: SqlClientPermission()\n  nameWithType: SqlClientPermission.SqlClientPermission()\n  fullName: SqlClientPermission.SqlClientPermission()\n  type: Constructor\n  assemblies:\n  - System.Data\n  - System.Security.Permissions\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> class.\n  syntax:\n    content: >-\n      [System.Obsolete(\"SqlClientPermission() has been deprecated.  Use the SqlClientPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202\", true)]\n\n      public SqlClientPermission ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlClientPermission.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlClientPermission.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState)\n  commentId: M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Data.SqlClient.SqlClientPermission\n  langs:\n  - csharp\n  name: SqlClientPermission(PermissionState)\n  nameWithType: SqlClientPermission.SqlClientPermission(PermissionState)\n  fullName: SqlClientPermission.SqlClientPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - System.Data\n  - System.Security.Permissions\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> class.\n  syntax:\n    content: public SqlClientPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Data.SqlClient.SqlClientPermission.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlClientPermission.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)\n  commentId: M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)\n  id: '#ctor(System.Security.Permissions.PermissionState,System.Boolean)'\n  parent: System.Data.SqlClient.SqlClientPermission\n  langs:\n  - csharp\n  name: SqlClientPermission(PermissionState, Boolean)\n  nameWithType: SqlClientPermission.SqlClientPermission(PermissionState, Boolean)\n  fullName: SqlClientPermission.SqlClientPermission(PermissionState, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Data\n  - System.Security.Permissions\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> class.\n  remarks: The <xref:System.Security.Permissions.PermissionState> enumeration takes precedence over the <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> property. Therefore, if you set <xref:System.Data.Common.DBDataPermission.AllowBlankPassword%2A> to `false`, you must also set <xref:System.Security.Permissions.PermissionState> to `None` to prevent a user from making a connection using a blank password. For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/docs/framework/data/adonet/code-access-security.md).\n  syntax:\n    content: >-\n      [System.Obsolete(\"SqlClientPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the SqlClientPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202\", true)]\n\n      public SqlClientPermission (System.Security.Permissions.PermissionState state, bool allowBlankPassword);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n    - id: allowBlankPassword\n      type: System.Boolean\n      description: Indicates whether a blank password is allowed.\n  overload: System.Data.SqlClient.SqlClientPermission.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlClientPermission.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlClientPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)\n  commentId: M:System.Data.SqlClient.SqlClientPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)\n  id: Add(System.String,System.String,System.Data.KeyRestrictionBehavior)\n  parent: System.Data.SqlClient.SqlClientPermission\n  langs:\n  - csharp\n  name: Add(String, String, KeyRestrictionBehavior)\n  nameWithType: SqlClientPermission.Add(String, String, KeyRestrictionBehavior)\n  fullName: SqlClientPermission.Add(String, String, KeyRestrictionBehavior)\n  type: Method\n  assemblies:\n  - System.Data\n  - System.Security.Permissions\n  namespace: System.Data.SqlClient\n  summary: Adds a new connection string and a set of restricted keywords to the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> object.\n  remarks: \"Use this method to configure which connection strings are allowed by a particular permission object. For example, use the following code fragment if you want to only allow a specific connection string and nothing else:  \\n  \\n `permission.Add(\\\"server=MyServer; database=MyDatabase; Integrated Security=true\\\", \\\"\\\", KeyRestrictionBehavior.AllowOnly)`  \\n  \\n The following example allows connection strings that use any database, but only on the server named MyServer, with any user and password combination and containing no other connection string keywords:  \\n  \\n `permission.Add(\\\"server=MyServer;\\\", \\\"database=; user id=; password=;\\\", KeyRestrictionBehavior.AllowOnly)`  \\n  \\n The following example uses the same scenario as above but allows for a failover partner that can be used when connecting to servers configured for mirroring:  \\n  \\n `permission.Add(\\\"server=MyServer; failover partner=MyMirrorServer\\\", \\\"database=; user id=; password=;\\\", KeyRestrictionBehavior.AllowOnly)`  \\n  \\n> [!NOTE]\\n>  When using code access security permissions for ADO.NET, the correct pattern is to start with the most restrictive case (no permissions at all) and then add the specific permissions that are needed for the particular task that the code needs to perform. The opposite pattern, starting with all permissions and then trying to deny a specific permission, is not secure, because there are many ways of expressing the same connection string. For example, if you start with all permissions and then attempt to deny the use of the connection string \\\"server=someserver\\\", the string \\\"server=someserver.mycompany.com\\\" would still be allowed. By always starting by granting no permissions at all, you reduce the chances that there are holes in the permission set.\"\n  syntax:\n    content: public override void Add (string connectionString, string restrictions, System.Data.KeyRestrictionBehavior behavior);\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: The connection string.\n    - id: restrictions\n      type: System.String\n      description: The key restrictions.\n    - id: behavior\n      type: System.Data.KeyRestrictionBehavior\n      description: One of the <xref href=\"System.Data.KeyRestrictionBehavior\"></xref> enumerations.\n  overload: System.Data.SqlClient.SqlClientPermission.Add*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlClientPermission.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlClientPermission.Copy\n  commentId: M:System.Data.SqlClient.SqlClientPermission.Copy\n  id: Copy\n  parent: System.Data.SqlClient.SqlClientPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: SqlClientPermission.Copy()\n  fullName: SqlClientPermission.Copy()\n  type: Method\n  assemblies:\n  - System.Data\n  - System.Security.Permissions\n  namespace: System.Data.SqlClient\n  summary: Returns the <xref href=\"System.Data.SqlClient.SqlClientPermission\"></xref> as an <xref href=\"System.Security.IPermission\"></xref>.\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission object.\n  overload: System.Data.SqlClient.SqlClientPermission.Copy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlClientPermission.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\nreferences:\n- uid: System.Data.Common.DBDataPermission\n  parent: System.Data.Common\n  isExternal: false\n  name: DBDataPermission\n  nameWithType: DBDataPermission\n  fullName: System.Data.Common.DBDataPermission\n- uid: System.Data.SqlClient.SqlClientPermission.#ctor\n  parent: System.Data.SqlClient.SqlClientPermission\n  isExternal: false\n  name: SqlClientPermission()\n  nameWithType: SqlClientPermission.SqlClientPermission()\n  fullName: SqlClientPermission.SqlClientPermission()\n- uid: System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Data.SqlClient.SqlClientPermission\n  isExternal: false\n  name: SqlClientPermission(PermissionState)\n  nameWithType: SqlClientPermission.SqlClientPermission(PermissionState)\n  fullName: SqlClientPermission.SqlClientPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)\n  parent: System.Data.SqlClient.SqlClientPermission\n  isExternal: false\n  name: SqlClientPermission(PermissionState, Boolean)\n  nameWithType: SqlClientPermission.SqlClientPermission(PermissionState, Boolean)\n  fullName: SqlClientPermission.SqlClientPermission(PermissionState, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.SqlClient.SqlClientPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)\n  parent: System.Data.SqlClient.SqlClientPermission\n  isExternal: false\n  name: Add(String, String, KeyRestrictionBehavior)\n  nameWithType: SqlClientPermission.Add(String, String, KeyRestrictionBehavior)\n  fullName: SqlClientPermission.Add(String, String, KeyRestrictionBehavior)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.KeyRestrictionBehavior\n  parent: System.Data\n  isExternal: false\n  name: KeyRestrictionBehavior\n  nameWithType: KeyRestrictionBehavior\n  fullName: System.Data.KeyRestrictionBehavior\n- uid: System.Data.SqlClient.SqlClientPermission.Copy\n  parent: System.Data.SqlClient.SqlClientPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: SqlClientPermission.Copy()\n  fullName: SqlClientPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Data.SqlClient.SqlClientPermission.#ctor*\n  parent: System.Data.SqlClient.SqlClientPermission\n  isExternal: false\n  name: SqlClientPermission\n  nameWithType: SqlClientPermission.SqlClientPermission\n  fullName: SqlClientPermission.SqlClientPermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlClientPermission.xml\n- uid: System.Data.SqlClient.SqlClientPermission.Add*\n  parent: System.Data.SqlClient.SqlClientPermission\n  isExternal: false\n  name: Add\n  nameWithType: SqlClientPermission.Add\n  fullName: SqlClientPermission.Add\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlClientPermission.xml\n- uid: System.Data.SqlClient.SqlClientPermission.Copy*\n  parent: System.Data.SqlClient.SqlClientPermission\n  isExternal: false\n  name: Copy\n  nameWithType: SqlClientPermission.Copy\n  fullName: SqlClientPermission.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlClientPermission.xml\n- uid: System.Security.CodeAccessPermission.Equals(System.Object)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CodeAccessPermission.Equals(Object)\n  fullName: CodeAccessPermission.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Security.CodeAccessPermission.GetHashCode\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CodeAccessPermission.GetHashCode()\n  fullName: CodeAccessPermission.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Security.CodeAccessPermission.ToString\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: CodeAccessPermission.ToString()\n- uid: System.Security.CodeAccessPermission.Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: CodeAccessPermission.Assert()\n- uid: System.Security.CodeAccessPermission.Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: CodeAccessPermission.Demand()\n- uid: System.Security.CodeAccessPermission.Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: CodeAccessPermission.Deny()\n- uid: System.Data.Common.DBDataPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Data.Common.DBDataPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: DBDataPermission.FromXml(SecurityElement)\n  fullName: DBDataPermission.FromXml(SecurityElement)\n- uid: System.Data.Common.DBDataPermission.Intersect(System.Security.IPermission)\n  parent: System.Data.Common.DBDataPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: DBDataPermission.Intersect(IPermission)\n  fullName: DBDataPermission.Intersect(IPermission)\n- uid: System.Data.Common.DBDataPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Data.Common.DBDataPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: DBDataPermission.IsSubsetOf(IPermission)\n  fullName: DBDataPermission.IsSubsetOf(IPermission)\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: CodeAccessPermission.PermitOnly()\n- uid: System.Security.CodeAccessPermission.RevertAll\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: CodeAccessPermission.RevertAll()\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: CodeAccessPermission.RevertAssert()\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: CodeAccessPermission.RevertDeny()\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: CodeAccessPermission.RevertPermitOnly()\n- uid: System.Data.Common.DBDataPermission.ToXml\n  parent: System.Data.Common.DBDataPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: DBDataPermission.ToXml()\n  fullName: DBDataPermission.ToXml()\n- uid: System.Data.Common.DBDataPermission.Union(System.Security.IPermission)\n  parent: System.Data.Common.DBDataPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: DBDataPermission.Union(IPermission)\n  fullName: DBDataPermission.Union(IPermission)\n- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IPermission.Demand()\n  nameWithType: CodeAccessPermission.IPermission.Demand()\n  fullName: CodeAccessPermission.IPermission.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Assert()\n  nameWithType: CodeAccessPermission.IStackWalk.Assert()\n  fullName: CodeAccessPermission.IStackWalk.Assert()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Demand()\n  nameWithType: CodeAccessPermission.IStackWalk.Demand()\n  fullName: CodeAccessPermission.IStackWalk.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Deny()\n  nameWithType: CodeAccessPermission.IStackWalk.Deny()\n  fullName: CodeAccessPermission.IStackWalk.Deny()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.PermitOnly()\n  nameWithType: CodeAccessPermission.IStackWalk.PermitOnly()\n  fullName: CodeAccessPermission.IStackWalk.PermitOnly()\n- uid: System.Data.Common.DBDataPermission.AllowBlankPassword\n  parent: System.Data.Common.DBDataPermission\n  isExternal: false\n  name: AllowBlankPassword\n  nameWithType: DBDataPermission.AllowBlankPassword\n  fullName: DBDataPermission.AllowBlankPassword\n- uid: System.Data.Common.DBDataPermission.Clear\n  parent: System.Data.Common.DBDataPermission\n  isExternal: false\n  name: Clear()\n  nameWithType: DBDataPermission.Clear()\n  fullName: DBDataPermission.Clear()\n- uid: System.Data.Common.DBDataPermission.CreateInstance\n  parent: System.Data.Common.DBDataPermission\n  isExternal: false\n  name: CreateInstance()\n  nameWithType: DBDataPermission.CreateInstance()\n  fullName: DBDataPermission.CreateInstance()\n- uid: System.Data.Common.DBDataPermission.IsUnrestricted\n  parent: System.Data.Common.DBDataPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: DBDataPermission.IsUnrestricted()\n  fullName: DBDataPermission.IsUnrestricted()\n"}