{"nodes":[{"content":"Provides a base class for requesting the security status of an action from the <xref href=\"System.AppDomainManager\"></xref> object.","nodes":[{"pos":[0,131],"content":"Provides a base class for requesting the security status of an action from the <ph id=\"ph1\">&lt;xref href=\"System.AppDomainManager\"&gt;&lt;/xref&gt;</ph> object.","source":"Provides a base class for requesting the security status of an action from the <xref href=\"System.AppDomainManager\"></xref> object."}],"pos":[514,646],"yaml":true},{"content":"You must inherit from this class to provide a class that includes a property that specifies the security-sensitive action to be performed. The <xref:System.Security.SecurityState> object that is instantiated from the derived class is passed to the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the host allows that action to be performed. The default implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method always returns `false`.  The method must be overridden to detect the actions that are allowed.  \n  \n For example, if you want to access a Web camera in your library code, you would create a `WebcamSecurityState` object and call the <xref:System.Security.SecurityState.EnsureState%2A> method to determine whether the host allows Web camera access, as shown in the following example.  (You can find the code for `WebcamSecurityState` in the \"Example\" section.)  \n  \n```  \nWebcamSecurityState securityState = new WebcamSecurityState(\"Safe access to Webcam\", WebcamSecurityOptions.SafeAccess);  \ntry  \n{  \n   securityState.EnsureState();  \n   // Allocate memory.  \n   }  \ncatch (ApplicationException e)  \n{  \n    // Handle any exception that is thrown.  \n    System.Diagnostics.Debug.WriteLine(e.Message);  \n}  \n```  \n  \n To process the call the <xref:System.AppDomainManager> must be made aware of `WebcamSecurityState` through an override of the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method, as shown in the following example.  \n  \n```  \n[SecurityCritical]  \npublic override bool CheckSecuritySettings(System.Security.SecurityState securityState)  \n{  \n   switch (securityState.ToString())  \n   {  \n      case \"WebcamSecurityState\":  \n      {  \n          if ((securityState as WebcamSecurityState).Options == WebcamSecurityOptions.SafeAccess)  \n              return PromptUser((securityState as WebcamSecurityState).Description);  \n           return false;  \n      }  \n   }  \n      return false;  \n}  \nprivate bool PromptUser(string text)  \n{  \n   // Replace the OpenFileDialog with a custom user prompt.  \n   OpenFileDialog o = new OpenFileDialog();  \n   o.Title = text;  \n   if (o.ShowDialog() == DialogResult.OK)  \n      return true;  \n   else  \n      return false;  \n}  \n  \n```","nodes":[{"pos":[0,593],"content":"You must inherit from this class to provide a class that includes a property that specifies the security-sensitive action to be performed. The <xref:System.Security.SecurityState> object that is instantiated from the derived class is passed to the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the host allows that action to be performed. The default implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method always returns `false`.  The method must be overridden to detect the actions that are allowed.","nodes":[{"content":"You must inherit from this class to provide a class that includes a property that specifies the security-sensitive action to be performed.","pos":[0,138]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.SecurityState&gt;</ph> object that is instantiated from the derived class is passed to the <ph id=\"ph2\">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName&gt;</ph> method to determine whether the host allows that action to be performed.","pos":[139,401],"source":" The <xref:System.Security.SecurityState> object that is instantiated from the derived class is passed to the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the host allows that action to be performed."},{"content":"The default implementation of the <ph id=\"ph1\">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph> method always returns <ph id=\"ph2\">`false`</ph>.","pos":[402,522],"source":" The default implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method always returns `false`."},{"content":"The method must be overridden to detect the actions that are allowed.","pos":[524,593]}]},{"pos":[600,957],"content":"For example, if you want to access a Web camera in your library code, you would create a `WebcamSecurityState` object and call the <xref:System.Security.SecurityState.EnsureState%2A> method to determine whether the host allows Web camera access, as shown in the following example.  (You can find the code for `WebcamSecurityState` in the \"Example\" section.)","nodes":[{"content":"For example, if you want to access a Web camera in your library code, you would create a <ph id=\"ph1\">`WebcamSecurityState`</ph> object and call the <ph id=\"ph2\">&lt;xref:System.Security.SecurityState.EnsureState%2A&gt;</ph> method to determine whether the host allows Web camera access, as shown in the following example.","pos":[0,280],"source":"For example, if you want to access a Web camera in your library code, you would create a `WebcamSecurityState` object and call the <xref:System.Security.SecurityState.EnsureState%2A> method to determine whether the host allows Web camera access, as shown in the following example."},{"content":"(You can find the code for <ph id=\"ph1\">`WebcamSecurityState`</ph> in the \"Example\" section.)","pos":[282,357],"source":"  (You can find the code for `WebcamSecurityState` in the \"Example\" section.)"}]},{"pos":[1317,1566],"content":"To process the call the <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph> must be made aware of <ph id=\"ph2\">`WebcamSecurityState`</ph> through an override of the <ph id=\"ph3\">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName&gt;</ph> method, as shown in the following example.","source":"To process the call the <xref:System.AppDomainManager> must be made aware of `WebcamSecurityState` through an override of the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method, as shown in the following example."}],"pos":[657,3033],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.SecurityState\"></xref> class.","nodes":[{"pos":[0,91],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.SecurityState\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.SecurityState\"></xref> class."}],"pos":[5389,5481],"yaml":true},{"content":"When overridden in a derived class, ensures that the state that is represented by <xref href=\"System.Security.SecurityState\"></xref> is available on the host.","nodes":[{"pos":[0,158],"content":"When overridden in a derived class, ensures that the state that is represented by <ph id=\"ph1\">&lt;xref href=\"System.Security.SecurityState\"&gt;&lt;/xref&gt;</ph> is available on the host.","source":"When overridden in a derived class, ensures that the state that is represented by <xref href=\"System.Security.SecurityState\"></xref> is available on the host."}],"pos":[6704,6863],"yaml":true},{"content":"The implementation of this method should be similar to the following example.  \n  \n```  \npublic override void EnsureState()  \n{  \n    if (!IsStateAvailable())  \n          throw new ApplicationException(\"WebcamSecurityState not available\");  \n}  \n  \n```","nodes":[{"pos":[0,77],"content":"The implementation of this method should be similar to the following example.","nodes":[{"content":"The implementation of this method should be similar to the following example.","pos":[0,77]}]}],"pos":[6874,7140],"yaml":true,"extradata":"MT"},{"content":"Gets a value that indicates whether the state for this implementation of the <xref href=\"System.Security.SecurityState\"></xref> class is available on the current host.","nodes":[{"pos":[0,167],"content":"Gets a value that indicates whether the state for this implementation of the <ph id=\"ph1\">&lt;xref href=\"System.Security.SecurityState\"&gt;&lt;/xref&gt;</ph> class is available on the current host.","source":"Gets a value that indicates whether the state for this implementation of the <xref href=\"System.Security.SecurityState\"></xref> class is available on the current host."}],"pos":[8408,8576],"yaml":true},{"content":"<xref:System.Security.SecurityState.IsStateAvailable%2A> calls the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the state that is represented by this class is available on the host.  \n  \n See the <xref:System.Security.SecurityState> class for an example implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method.","nodes":[{"pos":[0,245],"content":"<xref:System.Security.SecurityState.IsStateAvailable%2A> calls the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the state that is represented by this class is available on the host.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.SecurityState.IsStateAvailable%2A&gt;</ph> calls the <ph id=\"ph2\">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName&gt;</ph> method to determine whether the state that is represented by this class is available on the host.","pos":[0,245],"source":"<xref:System.Security.SecurityState.IsStateAvailable%2A> calls the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the state that is represented by this class is available on the host."}]},{"pos":[252,403],"content":"See the <xref:System.Security.SecurityState> class for an example implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method.","nodes":[{"content":"See the <ph id=\"ph1\">&lt;xref:System.Security.SecurityState&gt;</ph> class for an example implementation of the <ph id=\"ph2\">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph> method.","pos":[0,151],"source":"See the <xref:System.Security.SecurityState> class for an example implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method."}]}],"pos":[8587,8995],"yaml":true,"extradata":"MT"},{"content":"`true` if the state is available; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the state is available; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the state is available; otherwise, `false`."}],"pos":[9128,9184],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.SecurityState\n  commentId: T:System.Security.SecurityState\n  id: SecurityState\n  children:\n  - System.Security.SecurityState.#ctor\n  - System.Security.SecurityState.EnsureState\n  - System.Security.SecurityState.IsStateAvailable\n  langs:\n  - csharp\n  name: SecurityState\n  nameWithType: SecurityState\n  fullName: System.Security.SecurityState\n  type: Class\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Provides a base class for requesting the security status of an action from the <xref href=\"System.AppDomainManager\"></xref> object.\n  remarks: \"You must inherit from this class to provide a class that includes a property that specifies the security-sensitive action to be performed. The <xref:System.Security.SecurityState> object that is instantiated from the derived class is passed to the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the host allows that action to be performed. The default implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method always returns `false`.  The method must be overridden to detect the actions that are allowed.  \\n  \\n For example, if you want to access a Web camera in your library code, you would create a `WebcamSecurityState` object and call the <xref:System.Security.SecurityState.EnsureState%2A> method to determine whether the host allows Web camera access, as shown in the following example.  (You can find the code for `WebcamSecurityState` in the \\\"Example\\\" section.)  \\n  \\n```  \\nWebcamSecurityState securityState = new WebcamSecurityState(\\\"Safe access to Webcam\\\", WebcamSecurityOptions.SafeAccess);  \\ntry  \\n{  \\n   securityState.EnsureState();  \\n   // Allocate memory.  \\n   }  \\ncatch (ApplicationException e)  \\n{  \\n    // Handle any exception that is thrown.  \\n    System.Diagnostics.Debug.WriteLine(e.Message);  \\n}  \\n```  \\n  \\n To process the call the <xref:System.AppDomainManager> must be made aware of `WebcamSecurityState` through an override of the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method, as shown in the following example.  \\n  \\n```  \\n[SecurityCritical]  \\npublic override bool CheckSecuritySettings(System.Security.SecurityState securityState)  \\n{  \\n   switch (securityState.ToString())  \\n   {  \\n      case \\\"WebcamSecurityState\\\":  \\n      {  \\n          if ((securityState as WebcamSecurityState).Options == WebcamSecurityOptions.SafeAccess)  \\n              return PromptUser((securityState as WebcamSecurityState).Description);  \\n           return false;  \\n      }  \\n   }  \\n      return false;  \\n}  \\nprivate bool PromptUser(string text)  \\n{  \\n   // Replace the OpenFileDialog with a custom user prompt.  \\n   OpenFileDialog o = new OpenFileDialog();  \\n   o.Title = text;  \\n   if (o.ShowDialog() == DialogResult.OK)  \\n      return true;  \\n   else  \\n      return false;  \\n}  \\n  \\n```\"\n  example:\n  - \"The following example shows how to override the <xref:System.Security.SecurityState> class.  \\n  \\n```  \\n[SecurityCritical]  \\npublic enum WebcamSecurityOptions  \\n    {  \\n        SafeAccess,  \\n        FullAccess  \\n    }  \\n[SecurityCritical]  \\npublic class WebcamSecurityState : SecurityState  \\n{  \\n    public WebcamSecurityState(string description, WebcamSecurityOptions options)  \\n    {  \\n        Options = options;  \\n        Description = description;  \\n    }  \\n    public WebcamSecurityOptions Options { get; set; }  \\n    public string Description { get; set; }  \\n    public override void EnsureState()  \\n    {  \\n       if (!IsStateAvailable())  \\n           throw new ApplicationException(\\\"WebcamSecurityState not available\\\");  \\n    }  \\n }  \\n  \\n```\"\n  syntax:\n    content: public abstract class SecurityState\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.IO.IsolatedStorage.IsolatedStorageSecurityState\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecurityState.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.SecurityState.#ctor\n  commentId: M:System.Security.SecurityState.#ctor\n  id: '#ctor'\n  parent: System.Security.SecurityState\n  langs:\n  - csharp\n  name: SecurityState()\n  nameWithType: SecurityState.SecurityState()\n  fullName: SecurityState.SecurityState()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Initializes a new instance of the <xref href=\"System.Security.SecurityState\"></xref> class.\n  syntax:\n    content: protected SecurityState ();\n    parameters: []\n  overload: System.Security.SecurityState.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecurityState.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.SecurityState.EnsureState\n  commentId: M:System.Security.SecurityState.EnsureState\n  id: EnsureState\n  parent: System.Security.SecurityState\n  langs:\n  - csharp\n  name: EnsureState()\n  nameWithType: SecurityState.EnsureState()\n  fullName: SecurityState.EnsureState()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: When overridden in a derived class, ensures that the state that is represented by <xref href=\"System.Security.SecurityState\"></xref> is available on the host.\n  remarks: \"The implementation of this method should be similar to the following example.  \\n  \\n```  \\npublic override void EnsureState()  \\n{  \\n    if (!IsStateAvailable())  \\n          throw new ApplicationException(\\\"WebcamSecurityState not available\\\");  \\n}  \\n  \\n```\"\n  syntax:\n    content: public abstract void EnsureState ();\n    parameters: []\n  overload: System.Security.SecurityState.EnsureState*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecurityState.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.SecurityState.IsStateAvailable\n  commentId: M:System.Security.SecurityState.IsStateAvailable\n  id: IsStateAvailable\n  parent: System.Security.SecurityState\n  langs:\n  - csharp\n  name: IsStateAvailable()\n  nameWithType: SecurityState.IsStateAvailable()\n  fullName: SecurityState.IsStateAvailable()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Gets a value that indicates whether the state for this implementation of the <xref href=\"System.Security.SecurityState\"></xref> class is available on the current host.\n  remarks: \"<xref:System.Security.SecurityState.IsStateAvailable%2A> calls the <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> method to determine whether the state that is represented by this class is available on the host.  \\n  \\n See the <xref:System.Security.SecurityState> class for an example implementation of the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method.\"\n  syntax:\n    content: public bool IsStateAvailable ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the state is available; otherwise, `false`.'\n  overload: System.Security.SecurityState.IsStateAvailable*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecurityState.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.SecurityState.#ctor\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: SecurityState()\n  nameWithType: SecurityState.SecurityState()\n  fullName: SecurityState.SecurityState()\n- uid: System.Security.SecurityState.EnsureState\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: EnsureState()\n  nameWithType: SecurityState.EnsureState()\n  fullName: SecurityState.EnsureState()\n- uid: System.Security.SecurityState.IsStateAvailable\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: IsStateAvailable()\n  nameWithType: SecurityState.IsStateAvailable()\n  fullName: SecurityState.IsStateAvailable()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.SecurityState.#ctor*\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: SecurityState\n  nameWithType: SecurityState.SecurityState\n  fullName: SecurityState.SecurityState\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecurityState.xml\n- uid: System.Security.SecurityState.EnsureState*\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: EnsureState\n  nameWithType: SecurityState.EnsureState\n  fullName: SecurityState.EnsureState\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecurityState.xml\n- uid: System.Security.SecurityState.IsStateAvailable*\n  parent: System.Security.SecurityState\n  isExternal: false\n  name: IsStateAvailable\n  nameWithType: SecurityState.IsStateAvailable\n  fullName: SecurityState.IsStateAvailable\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecurityState.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}