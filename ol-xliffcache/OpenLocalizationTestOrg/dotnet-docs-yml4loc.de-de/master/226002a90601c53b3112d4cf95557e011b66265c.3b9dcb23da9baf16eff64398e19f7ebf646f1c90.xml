{"nodes":[{"content":"Provides a strongly typed collection of <xref href=\"System.Diagnostics.ProcessThread\"></xref> objects.","nodes":[{"pos":[0,102],"content":"Provides a strongly typed collection of <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThread\"&gt;&lt;/xref&gt;</ph> objects.","source":"Provides a strongly typed collection of <xref href=\"System.Diagnostics.ProcessThread\"></xref> objects."}],"pos":[5808,5911],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref> class, with no associated <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances.","nodes":[{"pos":[0,188],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThreadCollection\"&gt;&lt;/xref&gt;</ph> class, with no associated <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.ProcessThread\"&gt;&lt;/xref&gt;</ph> instances.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref> class, with no associated <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances."}],"pos":[7665,7854],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref> class, using the specified array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances.","nodes":[{"pos":[0,198],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThreadCollection\"&gt;&lt;/xref&gt;</ph> class, using the specified array of <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.ProcessThread\"&gt;&lt;/xref&gt;</ph> instances.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref> class, using the specified array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances."}],"pos":[9470,9669],"yaml":true},{"content":"An array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances with which to initialize this <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref> instance.","nodes":[{"pos":[0,179],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThread\"&gt;&lt;/xref&gt;</ph> instances with which to initialize this <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.ProcessThreadCollection\"&gt;&lt;/xref&gt;</ph> instance.","source":"An array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances with which to initialize this <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref> instance."}],"pos":[9883,10063],"yaml":true},{"content":"Appends a process thread to the collection.","nodes":[{"pos":[0,43],"content":"Appends a process thread to the collection.","nodes":[{"content":"Appends a process thread to the collection.","pos":[0,43]}]}],"pos":[11514,11558],"yaml":true},{"content":"The thread to add to the collection.","nodes":[{"pos":[0,36],"content":"The thread to add to the collection.","nodes":[{"content":"The thread to add to the collection.","pos":[0,36]}]}],"pos":[11736,11773],"yaml":true},{"content":"The zero-based index of the thread in the collection.","nodes":[{"pos":[0,53],"content":"The zero-based index of the thread in the collection.","nodes":[{"content":"The zero-based index of the thread in the collection.","pos":[0,53]}]}],"pos":[11829,11883],"yaml":true},{"content":"Determines whether the specified process thread exists in the collection.","nodes":[{"pos":[0,73],"content":"Determines whether the specified process thread exists in the collection.","nodes":[{"content":"Determines whether the specified process thread exists in the collection.","pos":[0,73]}]}],"pos":[22703,22777],"yaml":true},{"content":"A module is identified by its module name and its fully qualified file path.","nodes":[{"pos":[0,76],"content":"A module is identified by its module name and its fully qualified file path.","nodes":[{"content":"A module is identified by its module name and its fully qualified file path.","pos":[0,76]}]}],"pos":[22788,22865],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.ProcessThread\"></xref> instance that indicates the thread to find in this collection.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThread\"&gt;&lt;/xref&gt;</ph> instance that indicates the thread to find in this collection.","source":"A <xref href=\"System.Diagnostics.ProcessThread\"></xref> instance that indicates the thread to find in this collection."}],"pos":[23049,23168],"yaml":true},{"content":"`true` if the thread exists in the collection; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the thread exists in the collection; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the thread exists in the collection; otherwise, `false`."}],"pos":[23226,23295],"yaml":true},{"content":"Copies an array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances to the collection, at the specified index.","nodes":[{"pos":[0,125],"content":"Copies an array of <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThread\"&gt;&lt;/xref&gt;</ph> instances to the collection, at the specified index.","source":"Copies an array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances to the collection, at the specified index."}],"pos":[29145,29271],"yaml":true},{"content":"An array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances to add to the collection.","nodes":[{"pos":[0,101],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThread\"&gt;&lt;/xref&gt;</ph> instances to add to the collection.","source":"An array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances to add to the collection."}],"pos":[29466,29568],"yaml":true},{"content":"The location at which to add the new instances.","nodes":[{"pos":[0,47],"content":"The location at which to add the new instances.","nodes":[{"content":"The location at which to add the new instances.","pos":[0,47]}]}],"pos":[29628,29676],"yaml":true},{"content":"Provides the location of a specified thread within the collection.","nodes":[{"pos":[0,66],"content":"Provides the location of a specified thread within the collection.","nodes":[{"content":"Provides the location of a specified thread within the collection.","pos":[0,66]}]}],"pos":[49887,49954],"yaml":true},{"content":"The <xref href=\"System.Diagnostics.ProcessThread\"></xref> whose index is retrieved.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThread\"&gt;&lt;/xref&gt;</ph> whose index is retrieved.","source":"The <xref href=\"System.Diagnostics.ProcessThread\"></xref> whose index is retrieved."}],"pos":[50136,50220],"yaml":true},{"content":"The zero-based index that defines the location of the thread within the <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref>.","nodes":[{"pos":[0,136],"content":"The zero-based index that defines the location of the thread within the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThreadCollection\"&gt;&lt;/xref&gt;</ph>.","source":"The zero-based index that defines the location of the thread within the <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref>."}],"pos":[50276,50413],"yaml":true},{"content":"Inserts a process thread at the specified location in the collection.","nodes":[{"pos":[0,69],"content":"Inserts a process thread at the specified location in the collection.","nodes":[{"content":"Inserts a process thread at the specified location in the collection.","pos":[0,69]}]}],"pos":[54756,54826],"yaml":true},{"content":"The zero-based index indicating the location at which to insert the thread.","nodes":[{"pos":[0,75],"content":"The zero-based index indicating the location at which to insert the thread.","nodes":[{"content":"The zero-based index indicating the location at which to insert the thread.","pos":[0,75]}]}],"pos":[54998,55074],"yaml":true},{"content":"The thread to insert into the collection.","nodes":[{"pos":[0,41],"content":"The thread to insert into the collection.","nodes":[{"content":"The thread to insert into the collection.","pos":[0,41]}]}],"pos":[55155,55197],"yaml":true},{"content":"Gets an index for iterating over the set of process threads.","nodes":[{"pos":[0,60],"content":"Gets an index for iterating over the set of process threads.","nodes":[{"content":"Gets an index for iterating over the set of process threads.","pos":[0,60]}]}],"pos":[58137,58198],"yaml":true},{"content":"The zero-based index value of the thread in the collection.","nodes":[{"pos":[0,59],"content":"The zero-based index value of the thread in the collection.","nodes":[{"content":"The zero-based index value of the thread in the collection.","pos":[0,59]}]}],"pos":[58362,58422],"yaml":true},{"content":"A <xref href=\"System.Diagnostics.ProcessThread\"></xref> that indexes the threads in the collection.","nodes":[{"pos":[0,99],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ProcessThread\"&gt;&lt;/xref&gt;</ph> that indexes the threads in the collection.","source":"A <xref href=\"System.Diagnostics.ProcessThread\"></xref> that indexes the threads in the collection."}],"pos":[58498,58598],"yaml":true},{"content":"Deletes a process thread from the collection.","nodes":[{"pos":[0,45],"content":"Deletes a process thread from the collection.","nodes":[{"content":"Deletes a process thread from the collection.","pos":[0,45]}]}],"pos":[64179,64225],"yaml":true},{"content":"The thread to remove from the collection.","nodes":[{"pos":[0,41],"content":"The thread to remove from the collection.","nodes":[{"content":"The thread to remove from the collection.","pos":[0,41]}]}],"pos":[64407,64449],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.ProcessThreadCollection\n  commentId: T:System.Diagnostics.ProcessThreadCollection\n  id: ProcessThreadCollection\n  children:\n  - System.Diagnostics.ProcessThreadCollection.#ctor\n  - System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])\n  - System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.AsReadOnly\n  - System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.Capacity\n  - System.Diagnostics.ProcessThreadCollection.Clear\n  - System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessThread,``0})\n  - System.Diagnostics.ProcessThreadCollection.CopyTo(System.Int32,System.Diagnostics.ProcessThread[],System.Int32,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[])\n  - System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.Count\n  - System.Diagnostics.ProcessThreadCollection.Exists(System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.Find(System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.FindAll(System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.FindLast(System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.ForEach(System.Action{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.GetEnumerator\n  - System.Diagnostics.ProcessThreadCollection.GetRange(System.Int32,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.Item(System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.RemoveAt(System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.RemoveRange(System.Int32,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.Reverse\n  - System.Diagnostics.ProcessThreadCollection.Reverse(System.Int32,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.Sort\n  - System.Diagnostics.ProcessThreadCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.Sort(System.Comparison{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.ToArray\n  - System.Diagnostics.ProcessThreadCollection.TrimExcess\n  - System.Diagnostics.ProcessThreadCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessThread})\n  - System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#IsSynchronized\n  - System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  name: ProcessThreadCollection\n  nameWithType: ProcessThreadCollection\n  fullName: System.Diagnostics.ProcessThreadCollection\n  type: Class\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Provides a strongly typed collection of <xref href=\"System.Diagnostics.ProcessThread\"></xref> objects.\n  syntax:\n    content: 'public class ProcessThreadCollection : System.Collections.ReadOnlyCollectionBase'\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.#ctor\n  commentId: M:System.Diagnostics.ProcessThreadCollection.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: ProcessThreadCollection()\n  nameWithType: ProcessThreadCollection.ProcessThreadCollection()\n  fullName: ProcessThreadCollection.ProcessThreadCollection()\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref> class, with no associated <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances.\n  syntax:\n    content: protected ProcessThreadCollection ();\n    parameters: []\n  overload: System.Diagnostics.ProcessThreadCollection.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])\n  commentId: M:System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])\n  id: '#ctor(System.Diagnostics.ProcessThread[])'\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: ProcessThreadCollection(ProcessThread[])\n  nameWithType: ProcessThreadCollection.ProcessThreadCollection(ProcessThread[])\n  fullName: ProcessThreadCollection.ProcessThreadCollection(ProcessThread[])\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref> class, using the specified array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances.\n  syntax:\n    content: public ProcessThreadCollection (System.Diagnostics.ProcessThread[] processThreads);\n    parameters:\n    - id: processThreads\n      type: System.Diagnostics.ProcessThread[]\n      description: An array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances with which to initialize this <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref> instance.\n  overload: System.Diagnostics.ProcessThreadCollection.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)\n  id: Add(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Add(ProcessThread)\n  nameWithType: ProcessThreadCollection.Add(ProcessThread)\n  fullName: ProcessThreadCollection.Add(ProcessThread)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Appends a process thread to the collection.\n  syntax:\n    content: public int Add (System.Diagnostics.ProcessThread thread);\n    parameters:\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: The thread to add to the collection.\n    return:\n      type: System.Int32\n      description: The zero-based index of the thread in the collection.\n  overload: System.Diagnostics.ProcessThreadCollection.Add*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  id: AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: AddRange(IEnumerable<ProcessThread>)\n  nameWithType: ProcessThreadCollection.AddRange(IEnumerable<ProcessThread>)\n  fullName: ProcessThreadCollection.AddRange(IEnumerable<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void AddRange (System.Collections.Generic.IEnumerable<System.Diagnostics.ProcessThread> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.AddRange*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.AsReadOnly\n  commentId: M:System.Diagnostics.ProcessThreadCollection.AsReadOnly\n  id: AsReadOnly\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: AsReadOnly()\n  nameWithType: ProcessThreadCollection.AsReadOnly()\n  fullName: ProcessThreadCollection.AsReadOnly()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public System.Collections.ObjectModel.ReadOnlyCollection<System.Diagnostics.ProcessThread> AsReadOnly ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Diagnostics.ProcessThread}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.AsReadOnly*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread)\n  id: BinarySearch(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: BinarySearch(ProcessThread)\n  nameWithType: ProcessThreadCollection.BinarySearch(ProcessThread)\n  fullName: ProcessThreadCollection.BinarySearch(ProcessThread)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int BinarySearch (System.Diagnostics.ProcessThread item);\n    parameters:\n    - id: item\n      type: System.Diagnostics.ProcessThread\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.BinarySearch*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  id: BinarySearch(System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: BinarySearch(ProcessThread, IComparer<ProcessThread>)\n  nameWithType: ProcessThreadCollection.BinarySearch(ProcessThread, IComparer<ProcessThread>)\n  fullName: ProcessThreadCollection.BinarySearch(ProcessThread, IComparer<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int BinarySearch (System.Diagnostics.ProcessThread item, System.Collections.Generic.IComparer<System.Diagnostics.ProcessThread> comparer);\n    parameters:\n    - id: item\n      type: System.Diagnostics.ProcessThread\n      description: ''\n    - id: comparer\n      type: System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.BinarySearch*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  id: BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: BinarySearch(Int32, Int32, ProcessThread, IComparer<ProcessThread>)\n  nameWithType: ProcessThreadCollection.BinarySearch(Int32, Int32, ProcessThread, IComparer<ProcessThread>)\n  fullName: ProcessThreadCollection.BinarySearch(Int32, Int32, ProcessThread, IComparer<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int BinarySearch (int index, int count, System.Diagnostics.ProcessThread item, System.Collections.Generic.IComparer<System.Diagnostics.ProcessThread> comparer);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: item\n      type: System.Diagnostics.ProcessThread\n      description: ''\n    - id: comparer\n      type: System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.BinarySearch*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Capacity\n  commentId: P:System.Diagnostics.ProcessThreadCollection.Capacity\n  id: Capacity\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: ProcessThreadCollection.Capacity\n  fullName: ProcessThreadCollection.Capacity\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.Capacity*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Clear\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Clear\n  id: Clear\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ProcessThreadCollection.Clear()\n  fullName: ProcessThreadCollection.Clear()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void Clear ();\n    parameters: []\n  overload: System.Diagnostics.ProcessThreadCollection.Clear*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)\n  id: Contains(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Contains(ProcessThread)\n  nameWithType: ProcessThreadCollection.Contains(ProcessThread)\n  fullName: ProcessThreadCollection.Contains(ProcessThread)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Determines whether the specified process thread exists in the collection.\n  remarks: A module is identified by its module name and its fully qualified file path.\n  syntax:\n    content: public bool Contains (System.Diagnostics.ProcessThread thread);\n    parameters:\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: A <xref href=\"System.Diagnostics.ProcessThread\"></xref> instance that indicates the thread to find in this collection.\n    return:\n      type: System.Boolean\n      description: '`true` if the thread exists in the collection; otherwise, `false`.'\n  overload: System.Diagnostics.ProcessThreadCollection.Contains*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessThread,``0})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessThread,``0})\n  id: ConvertAll``1(System.Converter{System.Diagnostics.ProcessThread,``0})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: ConvertAll<TOutput>(Converter<ProcessThread,TOutput>)\n  nameWithType: ProcessThreadCollection.ConvertAll<TOutput>(Converter<ProcessThread,TOutput>)\n  fullName: ProcessThreadCollection.ConvertAll<TOutput>(Converter<ProcessThread,TOutput>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public System.Collections.Generic.List<TOutput> ConvertAll<TOutput> (Converter<System.Diagnostics.ProcessThread,TOutput> converter);\n    parameters:\n    - id: converter\n      type: System.Converter{System.Diagnostics.ProcessThread,TOutput}\n      description: ''\n    typeParameters:\n    - id: TOutput\n      description: ''\n    return:\n      type: System.Collections.Generic.List{TOutput}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.ConvertAll``1*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.CopyTo(System.Int32,System.Diagnostics.ProcessThread[],System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Int32,System.Diagnostics.ProcessThread[],System.Int32,System.Int32)\n  id: CopyTo(System.Int32,System.Diagnostics.ProcessThread[],System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: CopyTo(Int32, ProcessThread[], Int32, Int32)\n  nameWithType: ProcessThreadCollection.CopyTo(Int32, ProcessThread[], Int32, Int32)\n  fullName: ProcessThreadCollection.CopyTo(Int32, ProcessThread[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void CopyTo (int index, System.Diagnostics.ProcessThread[] array, int arrayIndex, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: array\n      type: System.Diagnostics.ProcessThread[]\n      description: ''\n    - id: arrayIndex\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.CopyTo*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[])\n  commentId: M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[])\n  id: CopyTo(System.Diagnostics.ProcessThread[])\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: CopyTo(ProcessThread[])\n  nameWithType: ProcessThreadCollection.CopyTo(ProcessThread[])\n  fullName: ProcessThreadCollection.CopyTo(ProcessThread[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void CopyTo (System.Diagnostics.ProcessThread[] array);\n    parameters:\n    - id: array\n      type: System.Diagnostics.ProcessThread[]\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.CopyTo*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)\n  id: CopyTo(System.Diagnostics.ProcessThread[],System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: CopyTo(ProcessThread[], Int32)\n  nameWithType: ProcessThreadCollection.CopyTo(ProcessThread[], Int32)\n  fullName: ProcessThreadCollection.CopyTo(ProcessThread[], Int32)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Copies an array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances to the collection, at the specified index.\n  syntax:\n    content: public void CopyTo (System.Diagnostics.ProcessThread[] array, int index);\n    parameters:\n    - id: array\n      type: System.Diagnostics.ProcessThread[]\n      description: An array of <xref href=\"System.Diagnostics.ProcessThread\"></xref> instances to add to the collection.\n    - id: index\n      type: System.Int32\n      description: The location at which to add the new instances.\n  overload: System.Diagnostics.ProcessThreadCollection.CopyTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.Count\n  commentId: P:System.Diagnostics.ProcessThreadCollection.Count\n  id: Count\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ProcessThreadCollection.Count\n  fullName: ProcessThreadCollection.Count\n  type: Property\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Exists(System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Exists(System.Predicate{System.Diagnostics.ProcessThread})\n  id: Exists(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Exists(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Exists(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.Exists(Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public bool Exists (Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.Exists*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Find(System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Find(System.Predicate{System.Diagnostics.ProcessThread})\n  id: Find(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Find(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Find(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.Find(Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public System.Diagnostics.ProcessThread Find (Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Diagnostics.ProcessThread\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.Find*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindAll(System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.FindAll(System.Predicate{System.Diagnostics.ProcessThread})\n  id: FindAll(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: FindAll(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindAll(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindAll(Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public System.Collections.Generic.List<System.Diagnostics.ProcessThread> FindAll (Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Collections.Generic.List{System.Diagnostics.ProcessThread}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.FindAll*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  id: FindIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: FindIndex(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindIndex(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindIndex(Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int FindIndex (Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.FindIndex*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  id: FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: FindIndex(Int32, Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindIndex(Int32, Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindIndex(Int32, Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int FindIndex (int startIndex, Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: ''\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.FindIndex*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  id: FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: FindIndex(Int32, Int32, Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindIndex(Int32, Int32, Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindIndex(Int32, Int32, Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int FindIndex (int startIndex, int count, Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.FindIndex*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindLast(System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.FindLast(System.Predicate{System.Diagnostics.ProcessThread})\n  id: FindLast(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: FindLast(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindLast(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindLast(Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public System.Diagnostics.ProcessThread FindLast (Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Diagnostics.ProcessThread\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.FindLast*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  id: FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: FindLastIndex(Int32, Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindLastIndex(Int32, Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindLastIndex(Int32, Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int FindLastIndex (int startIndex, Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: ''\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.FindLastIndex*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  id: FindLastIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: FindLastIndex(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindLastIndex(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindLastIndex(Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int FindLastIndex (Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.FindLastIndex*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  id: FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: FindLastIndex(Int32, Int32, Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindLastIndex(Int32, Int32, Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindLastIndex(Int32, Int32, Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int FindLastIndex (int startIndex, int count, Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.FindLastIndex*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.ForEach(System.Action{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.ForEach(System.Action{System.Diagnostics.ProcessThread})\n  id: ForEach(System.Action{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: ForEach(Action<ProcessThread>)\n  nameWithType: ProcessThreadCollection.ForEach(Action<ProcessThread>)\n  fullName: ProcessThreadCollection.ForEach(Action<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void ForEach (Action<System.Diagnostics.ProcessThread> action);\n    parameters:\n    - id: action\n      type: System.Action{System.Diagnostics.ProcessThread}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.ForEach*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.GetEnumerator\n  commentId: M:System.Diagnostics.ProcessThreadCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ProcessThreadCollection.GetEnumerator()\n  fullName: ProcessThreadCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.GetRange(System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.GetRange(System.Int32,System.Int32)\n  id: GetRange(System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: GetRange(Int32, Int32)\n  nameWithType: ProcessThreadCollection.GetRange(Int32, Int32)\n  fullName: ProcessThreadCollection.GetRange(Int32, Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public System.Collections.Generic.List<System.Diagnostics.ProcessThread> GetRange (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Collections.Generic.List{System.Diagnostics.ProcessThread}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.GetRange*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)\n  id: IndexOf(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: IndexOf(ProcessThread)\n  nameWithType: ProcessThreadCollection.IndexOf(ProcessThread)\n  fullName: ProcessThreadCollection.IndexOf(ProcessThread)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Provides the location of a specified thread within the collection.\n  syntax:\n    content: public int IndexOf (System.Diagnostics.ProcessThread thread);\n    parameters:\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: The <xref href=\"System.Diagnostics.ProcessThread\"></xref> whose index is retrieved.\n    return:\n      type: System.Int32\n      description: The zero-based index that defines the location of the thread within the <xref href=\"System.Diagnostics.ProcessThreadCollection\"></xref>.\n  overload: System.Diagnostics.ProcessThreadCollection.IndexOf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  id: IndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: IndexOf(ProcessThread, Int32)\n  nameWithType: ProcessThreadCollection.IndexOf(ProcessThread, Int32)\n  fullName: ProcessThreadCollection.IndexOf(ProcessThread, Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int IndexOf (System.Diagnostics.ProcessThread item, int index);\n    parameters:\n    - id: item\n      type: System.Diagnostics.ProcessThread\n      description: ''\n    - id: index\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.IndexOf*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  id: IndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: IndexOf(ProcessThread, Int32, Int32)\n  nameWithType: ProcessThreadCollection.IndexOf(ProcessThread, Int32, Int32)\n  fullName: ProcessThreadCollection.IndexOf(ProcessThread, Int32, Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int IndexOf (System.Diagnostics.ProcessThread item, int index, int count);\n    parameters:\n    - id: item\n      type: System.Diagnostics.ProcessThread\n      description: ''\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.IndexOf*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)\n  id: Insert(System.Int32,System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Insert(Int32, ProcessThread)\n  nameWithType: ProcessThreadCollection.Insert(Int32, ProcessThread)\n  fullName: ProcessThreadCollection.Insert(Int32, ProcessThread)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Inserts a process thread at the specified location in the collection.\n  syntax:\n    content: public void Insert (int index, System.Diagnostics.ProcessThread thread);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index indicating the location at which to insert the thread.\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: The thread to insert into the collection.\n  overload: System.Diagnostics.ProcessThreadCollection.Insert*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: InsertRange(Int32, IEnumerable<ProcessThread>)\n  nameWithType: ProcessThreadCollection.InsertRange(Int32, IEnumerable<ProcessThread>)\n  fullName: ProcessThreadCollection.InsertRange(Int32, IEnumerable<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void InsertRange (int index, System.Collections.Generic.IEnumerable<System.Diagnostics.ProcessThread> collection);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.InsertRange*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Item(System.Int32)\n  commentId: P:System.Diagnostics.ProcessThreadCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: ProcessThreadCollection.Item(Int32)\n  fullName: ProcessThreadCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Gets an index for iterating over the set of process threads.\n  syntax:\n    content: public System.Diagnostics.ProcessThread this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index value of the thread in the collection.\n    return:\n      type: System.Diagnostics.ProcessThread\n      description: A <xref href=\"System.Diagnostics.ProcessThread\"></xref> that indexes the threads in the collection.\n  overload: System.Diagnostics.ProcessThreadCollection.Item*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread)\n  id: LastIndexOf(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: LastIndexOf(ProcessThread)\n  nameWithType: ProcessThreadCollection.LastIndexOf(ProcessThread)\n  fullName: ProcessThreadCollection.LastIndexOf(ProcessThread)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int LastIndexOf (System.Diagnostics.ProcessThread item);\n    parameters:\n    - id: item\n      type: System.Diagnostics.ProcessThread\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.LastIndexOf*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  id: LastIndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: LastIndexOf(ProcessThread, Int32)\n  nameWithType: ProcessThreadCollection.LastIndexOf(ProcessThread, Int32)\n  fullName: ProcessThreadCollection.LastIndexOf(ProcessThread, Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int LastIndexOf (System.Diagnostics.ProcessThread item, int index);\n    parameters:\n    - id: item\n      type: System.Diagnostics.ProcessThread\n      description: ''\n    - id: index\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.LastIndexOf*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  id: LastIndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: LastIndexOf(ProcessThread, Int32, Int32)\n  nameWithType: ProcessThreadCollection.LastIndexOf(ProcessThread, Int32, Int32)\n  fullName: ProcessThreadCollection.LastIndexOf(ProcessThread, Int32, Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int LastIndexOf (System.Diagnostics.ProcessThread item, int index, int count);\n    parameters:\n    - id: item\n      type: System.Diagnostics.ProcessThread\n      description: ''\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.LastIndexOf*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)\n  id: Remove(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Remove(ProcessThread)\n  nameWithType: ProcessThreadCollection.Remove(ProcessThread)\n  fullName: ProcessThreadCollection.Remove(ProcessThread)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Deletes a process thread from the collection.\n  syntax:\n    content: public void Remove (System.Diagnostics.ProcessThread thread);\n    parameters:\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: The thread to remove from the collection.\n  overload: System.Diagnostics.ProcessThreadCollection.Remove*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ProcessThreadCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessThread})\n  id: RemoveAll(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: RemoveAll(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.RemoveAll(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.RemoveAll(Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public int RemoveAll (Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.RemoveAll*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.RemoveAt(System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: ProcessThreadCollection.RemoveAt(Int32)\n  fullName: ProcessThreadCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.RemoveAt*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.RemoveRange(System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.RemoveRange(System.Int32,System.Int32)\n  id: RemoveRange(System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: RemoveRange(Int32, Int32)\n  nameWithType: ProcessThreadCollection.RemoveRange(Int32, Int32)\n  fullName: ProcessThreadCollection.RemoveRange(Int32, Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void RemoveRange (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.RemoveRange*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Reverse\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Reverse\n  id: Reverse\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Reverse()\n  nameWithType: ProcessThreadCollection.Reverse()\n  fullName: ProcessThreadCollection.Reverse()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void Reverse ();\n    parameters: []\n  overload: System.Diagnostics.ProcessThreadCollection.Reverse*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Reverse(System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Reverse(System.Int32,System.Int32)\n  id: Reverse(System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Reverse(Int32, Int32)\n  nameWithType: ProcessThreadCollection.Reverse(Int32, Int32)\n  fullName: ProcessThreadCollection.Reverse(Int32, Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void Reverse (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.Reverse*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Sort\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Sort\n  id: Sort\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Sort()\n  nameWithType: ProcessThreadCollection.Sort()\n  fullName: ProcessThreadCollection.Sort()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void Sort ();\n    parameters: []\n  overload: System.Diagnostics.ProcessThreadCollection.Sort*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  id: Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Sort(IComparer<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Sort(IComparer<ProcessThread>)\n  fullName: ProcessThreadCollection.Sort(IComparer<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void Sort (System.Collections.Generic.IComparer<System.Diagnostics.ProcessThread> comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.Sort*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Sort(System.Comparison{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Sort(System.Comparison{System.Diagnostics.ProcessThread})\n  id: Sort(System.Comparison{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Sort(Comparison<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Sort(Comparison<ProcessThread>)\n  fullName: ProcessThreadCollection.Sort(Comparison<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void Sort (Comparison<System.Diagnostics.ProcessThread> comparison);\n    parameters:\n    - id: comparison\n      type: System.Comparison{System.Diagnostics.ProcessThread}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.Sort*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: Sort(Int32, Int32, IComparer<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Sort(Int32, Int32, IComparer<ProcessThread>)\n  fullName: ProcessThreadCollection.Sort(Int32, Int32, IComparer<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void Sort (int index, int count, System.Collections.Generic.IComparer<System.Diagnostics.ProcessThread> comparer);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: comparer\n      type: System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread}\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.Sort*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.ToArray\n  commentId: M:System.Diagnostics.ProcessThreadCollection.ToArray\n  id: ToArray\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: ProcessThreadCollection.ToArray()\n  fullName: ProcessThreadCollection.ToArray()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public System.Diagnostics.ProcessThread[] ToArray ();\n    parameters: []\n    return:\n      type: System.Diagnostics.ProcessThread[]\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.ToArray*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.TrimExcess\n  commentId: M:System.Diagnostics.ProcessThreadCollection.TrimExcess\n  id: TrimExcess\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: TrimExcess()\n  nameWithType: ProcessThreadCollection.TrimExcess()\n  fullName: ProcessThreadCollection.TrimExcess()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public void TrimExcess ();\n    parameters: []\n  overload: System.Diagnostics.ProcessThreadCollection.TrimExcess*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessThread})\n  commentId: M:System.Diagnostics.ProcessThreadCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessThread})\n  id: TrueForAll(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: TrueForAll(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.TrueForAll(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.TrueForAll(Predicate<ProcessThread>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API is no longer available\", true)]\n\n      public bool TrueForAll (Predicate<System.Diagnostics.ProcessThread> match);\n    parameters:\n    - id: match\n      type: System.Predicate{System.Diagnostics.ProcessThread}\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.TrueForAll*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: ProcessThreadCollection.ICollection.CopyTo(Array, Int32)\n  fullName: ProcessThreadCollection.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: ''\n    - id: index\n      type: System.Int32\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: ProcessThreadCollection.ICollection.IsSynchronized\n  fullName: ProcessThreadCollection.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: ProcessThreadCollection.ICollection.SyncRoot\n  fullName: ProcessThreadCollection.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: ''\n  overload: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Diagnostics.ProcessThreadCollection.#ctor\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ProcessThreadCollection()\n  nameWithType: ProcessThreadCollection.ProcessThreadCollection()\n  fullName: ProcessThreadCollection.ProcessThreadCollection()\n- uid: System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ProcessThreadCollection(ProcessThread[])\n  nameWithType: ProcessThreadCollection.ProcessThreadCollection(ProcessThread[])\n  fullName: ProcessThreadCollection.ProcessThreadCollection(ProcessThread[])\n- uid: System.Diagnostics.ProcessThread\n  name: ProcessThread\n  nameWithType: ProcessThread\n  fullName: System.Diagnostics.ProcessThread\n- uid: System.Diagnostics.ProcessThread[]\n  parent: System.Diagnostics\n  isExternal: false\n  name: ProcessThread[]\n  nameWithType: ProcessThread[]\n  fullName: System.Diagnostics.ProcessThread[]\n  spec.csharp:\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    nameWithType: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Add(ProcessThread)\n  nameWithType: ProcessThreadCollection.Add(ProcessThread)\n  fullName: ProcessThreadCollection.Add(ProcessThread)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.ProcessThreadCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: AddRange(IEnumerable<ProcessThread>)\n  nameWithType: ProcessThreadCollection.AddRange(IEnumerable<ProcessThread>)\n  fullName: ProcessThreadCollection.AddRange(IEnumerable<ProcessThread>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ProcessThread>\n  nameWithType: IEnumerable<ProcessThread>\n  fullName: System.Collections.Generic.IEnumerable<System.Diagnostics.ProcessThread>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    nameWithType: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.ProcessThreadCollection.AsReadOnly\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: AsReadOnly()\n  nameWithType: ProcessThreadCollection.AsReadOnly()\n  fullName: ProcessThreadCollection.AsReadOnly()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Diagnostics.ProcessThread}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<ProcessThread>\n  nameWithType: ReadOnlyCollection<ProcessThread>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Diagnostics.ProcessThread>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    nameWithType: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: BinarySearch(ProcessThread)\n  nameWithType: ProcessThreadCollection.BinarySearch(ProcessThread)\n  fullName: ProcessThreadCollection.BinarySearch(ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: BinarySearch(ProcessThread, IComparer<ProcessThread>)\n  nameWithType: ProcessThreadCollection.BinarySearch(ProcessThread, IComparer<ProcessThread>)\n  fullName: ProcessThreadCollection.BinarySearch(ProcessThread, IComparer<ProcessThread>)\n- uid: System.Collections.Generic.IComparer`1\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<ProcessThread>\n  nameWithType: IComparer<ProcessThread>\n  fullName: System.Collections.Generic.IComparer<System.Diagnostics.ProcessThread>\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    nameWithType: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    nameWithType: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: BinarySearch(Int32, Int32, ProcessThread, IComparer<ProcessThread>)\n  nameWithType: ProcessThreadCollection.BinarySearch(Int32, Int32, ProcessThread, IComparer<ProcessThread>)\n  fullName: ProcessThreadCollection.BinarySearch(Int32, Int32, ProcessThread, IComparer<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.Capacity\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Capacity\n  nameWithType: ProcessThreadCollection.Capacity\n  fullName: ProcessThreadCollection.Capacity\n- uid: System.Diagnostics.ProcessThreadCollection.Clear\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: ProcessThreadCollection.Clear()\n  fullName: ProcessThreadCollection.Clear()\n- uid: System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Contains(ProcessThread)\n  nameWithType: ProcessThreadCollection.Contains(ProcessThread)\n  fullName: ProcessThreadCollection.Contains(ProcessThread)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.ProcessThreadCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessThread,``0})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ConvertAll<TOutput>(Converter<ProcessThread,TOutput>)\n  nameWithType: ProcessThreadCollection.ConvertAll<TOutput>(Converter<ProcessThread,TOutput>)\n  fullName: ProcessThreadCollection.ConvertAll<TOutput>(Converter<ProcessThread,TOutput>)\n- uid: System.Collections.Generic.List`1\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>\n- uid: TOutput\n  name: TOutput\n  nameWithType: TOutput\n  fullName: TOutput\n- uid: System.Collections.Generic.List{TOutput}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<TOutput>\n  nameWithType: List<TOutput>\n  fullName: System.Collections.Generic.List<TOutput>\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    nameWithType: List\n    fullName: System.Collections.Generic.List\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOutput\n    name: TOutput\n    nameWithType: TOutput\n    fullName: TOutput\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Converter`2\n  name: Converter<TInput,TOutput>\n  nameWithType: Converter<TInput,TOutput>\n  fullName: System.Converter<TInput,TOutput>\n- uid: System.Converter{System.Diagnostics.ProcessThread,TOutput}\n  parent: System\n  isExternal: false\n  name: Converter<ProcessThread,TOutput>\n  nameWithType: Converter<ProcessThread,TOutput>\n  fullName: System.Converter<System.Diagnostics.ProcessThread,TOutput>\n  spec.csharp:\n  - uid: System.Converter`2\n    name: Converter\n    nameWithType: Converter\n    fullName: System.Converter\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    nameWithType: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TOutput\n    name: TOutput\n    nameWithType: TOutput\n    fullName: TOutput\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.ProcessThreadCollection.CopyTo(System.Int32,System.Diagnostics.ProcessThread[],System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: CopyTo(Int32, ProcessThread[], Int32, Int32)\n  nameWithType: ProcessThreadCollection.CopyTo(Int32, ProcessThread[], Int32, Int32)\n  fullName: ProcessThreadCollection.CopyTo(Int32, ProcessThread[], Int32, Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[])\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: CopyTo(ProcessThread[])\n  nameWithType: ProcessThreadCollection.CopyTo(ProcessThread[])\n  fullName: ProcessThreadCollection.CopyTo(ProcessThread[])\n- uid: System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: CopyTo(ProcessThread[], Int32)\n  nameWithType: ProcessThreadCollection.CopyTo(ProcessThread[], Int32)\n  fullName: ProcessThreadCollection.CopyTo(ProcessThread[], Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.Count\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Count\n  nameWithType: ProcessThreadCollection.Count\n  fullName: ProcessThreadCollection.Count\n- uid: System.Diagnostics.ProcessThreadCollection.Exists(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Exists(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Exists(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.Exists(Predicate<ProcessThread>)\n- uid: System.Predicate`1\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Predicate{System.Diagnostics.ProcessThread}\n  parent: System\n  isExternal: false\n  name: Predicate<ProcessThread>\n  nameWithType: Predicate<ProcessThread>\n  fullName: System.Predicate<System.Diagnostics.ProcessThread>\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    nameWithType: Predicate\n    fullName: System.Predicate\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    nameWithType: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.ProcessThreadCollection.Find(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Find(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Find(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.Find(Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.FindAll(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindAll(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindAll(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindAll(Predicate<ProcessThread>)\n- uid: System.Collections.Generic.List{System.Diagnostics.ProcessThread}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<ProcessThread>\n  nameWithType: List<ProcessThread>\n  fullName: System.Collections.Generic.List<System.Diagnostics.ProcessThread>\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    nameWithType: List\n    fullName: System.Collections.Generic.List\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    nameWithType: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.ProcessThreadCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindIndex(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindIndex(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindIndex(Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindIndex(Int32, Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindIndex(Int32, Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindIndex(Int32, Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindIndex(Int32, Int32, Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindIndex(Int32, Int32, Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindIndex(Int32, Int32, Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.FindLast(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindLast(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindLast(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindLast(Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindLastIndex(Int32, Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindLastIndex(Int32, Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindLastIndex(Int32, Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindLastIndex(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindLastIndex(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindLastIndex(Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindLastIndex(Int32, Int32, Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.FindLastIndex(Int32, Int32, Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.FindLastIndex(Int32, Int32, Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.ForEach(System.Action{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ForEach(Action<ProcessThread>)\n  nameWithType: ProcessThreadCollection.ForEach(Action<ProcessThread>)\n  fullName: ProcessThreadCollection.ForEach(Action<ProcessThread>)\n- uid: System.Action`1\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Action{System.Diagnostics.ProcessThread}\n  parent: System\n  isExternal: false\n  name: Action<ProcessThread>\n  nameWithType: Action<ProcessThread>\n  fullName: System.Action<System.Diagnostics.ProcessThread>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    nameWithType: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.ProcessThreadCollection.GetEnumerator\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ProcessThreadCollection.GetEnumerator()\n  fullName: ProcessThreadCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Diagnostics.ProcessThreadCollection.GetRange(System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: GetRange(Int32, Int32)\n  nameWithType: ProcessThreadCollection.GetRange(Int32, Int32)\n  fullName: ProcessThreadCollection.GetRange(Int32, Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: IndexOf(ProcessThread)\n  nameWithType: ProcessThreadCollection.IndexOf(ProcessThread)\n  fullName: ProcessThreadCollection.IndexOf(ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: IndexOf(ProcessThread, Int32)\n  nameWithType: ProcessThreadCollection.IndexOf(ProcessThread, Int32)\n  fullName: ProcessThreadCollection.IndexOf(ProcessThread, Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: IndexOf(ProcessThread, Int32, Int32)\n  nameWithType: ProcessThreadCollection.IndexOf(ProcessThread, Int32, Int32)\n  fullName: ProcessThreadCollection.IndexOf(ProcessThread, Int32, Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Insert(Int32, ProcessThread)\n  nameWithType: ProcessThreadCollection.Insert(Int32, ProcessThread)\n  fullName: ProcessThreadCollection.Insert(Int32, ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: InsertRange(Int32, IEnumerable<ProcessThread>)\n  nameWithType: ProcessThreadCollection.InsertRange(Int32, IEnumerable<ProcessThread>)\n  fullName: ProcessThreadCollection.InsertRange(Int32, IEnumerable<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.Item(System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: ProcessThreadCollection.Item(Int32)\n  fullName: ProcessThreadCollection.Item(Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: LastIndexOf(ProcessThread)\n  nameWithType: ProcessThreadCollection.LastIndexOf(ProcessThread)\n  fullName: ProcessThreadCollection.LastIndexOf(ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: LastIndexOf(ProcessThread, Int32)\n  nameWithType: ProcessThreadCollection.LastIndexOf(ProcessThread, Int32)\n  fullName: ProcessThreadCollection.LastIndexOf(ProcessThread, Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: LastIndexOf(ProcessThread, Int32, Int32)\n  nameWithType: ProcessThreadCollection.LastIndexOf(ProcessThread, Int32, Int32)\n  fullName: ProcessThreadCollection.LastIndexOf(ProcessThread, Int32, Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Remove(ProcessThread)\n  nameWithType: ProcessThreadCollection.Remove(ProcessThread)\n  fullName: ProcessThreadCollection.Remove(ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: RemoveAll(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.RemoveAll(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.RemoveAll(Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.RemoveAt(System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: ProcessThreadCollection.RemoveAt(Int32)\n  fullName: ProcessThreadCollection.RemoveAt(Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.RemoveRange(System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: RemoveRange(Int32, Int32)\n  nameWithType: ProcessThreadCollection.RemoveRange(Int32, Int32)\n  fullName: ProcessThreadCollection.RemoveRange(Int32, Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.Reverse\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Reverse()\n  nameWithType: ProcessThreadCollection.Reverse()\n  fullName: ProcessThreadCollection.Reverse()\n- uid: System.Diagnostics.ProcessThreadCollection.Reverse(System.Int32,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Reverse(Int32, Int32)\n  nameWithType: ProcessThreadCollection.Reverse(Int32, Int32)\n  fullName: ProcessThreadCollection.Reverse(Int32, Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.Sort\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Sort()\n  nameWithType: ProcessThreadCollection.Sort()\n  fullName: ProcessThreadCollection.Sort()\n- uid: System.Diagnostics.ProcessThreadCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Sort(IComparer<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Sort(IComparer<ProcessThread>)\n  fullName: ProcessThreadCollection.Sort(IComparer<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.Sort(System.Comparison{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Sort(Comparison<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Sort(Comparison<ProcessThread>)\n  fullName: ProcessThreadCollection.Sort(Comparison<ProcessThread>)\n- uid: System.Comparison`1\n  name: Comparison<T>\n  nameWithType: Comparison<T>\n  fullName: System.Comparison<T>\n- uid: System.Comparison{System.Diagnostics.ProcessThread}\n  parent: System\n  isExternal: false\n  name: Comparison<ProcessThread>\n  nameWithType: Comparison<ProcessThread>\n  fullName: System.Comparison<System.Diagnostics.ProcessThread>\n  spec.csharp:\n  - uid: System.Comparison`1\n    name: Comparison\n    nameWithType: Comparison\n    fullName: System.Comparison\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    nameWithType: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.ProcessThreadCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Sort(Int32, Int32, IComparer<ProcessThread>)\n  nameWithType: ProcessThreadCollection.Sort(Int32, Int32, IComparer<ProcessThread>)\n  fullName: ProcessThreadCollection.Sort(Int32, Int32, IComparer<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.ToArray\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ToArray()\n  nameWithType: ProcessThreadCollection.ToArray()\n  fullName: ProcessThreadCollection.ToArray()\n- uid: System.Diagnostics.ProcessThreadCollection.TrimExcess\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: TrimExcess()\n  nameWithType: ProcessThreadCollection.TrimExcess()\n  fullName: ProcessThreadCollection.TrimExcess()\n- uid: System.Diagnostics.ProcessThreadCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessThread})\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: TrueForAll(Predicate<ProcessThread>)\n  nameWithType: ProcessThreadCollection.TrueForAll(Predicate<ProcessThread>)\n  fullName: ProcessThreadCollection.TrueForAll(Predicate<ProcessThread>)\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: ProcessThreadCollection.ICollection.CopyTo(Array, Int32)\n  fullName: ProcessThreadCollection.ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: ProcessThreadCollection.ICollection.IsSynchronized\n  fullName: ProcessThreadCollection.ICollection.IsSynchronized\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: ProcessThreadCollection.ICollection.SyncRoot\n  fullName: ProcessThreadCollection.ICollection.SyncRoot\n- uid: System.Diagnostics.ProcessThreadCollection.#ctor*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ProcessThreadCollection\n  nameWithType: ProcessThreadCollection.ProcessThreadCollection\n  fullName: ProcessThreadCollection.ProcessThreadCollection\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Add*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Add\n  nameWithType: ProcessThreadCollection.Add\n  fullName: ProcessThreadCollection.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.AddRange*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: AddRange\n  nameWithType: ProcessThreadCollection.AddRange\n  fullName: ProcessThreadCollection.AddRange\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.AsReadOnly*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: AsReadOnly\n  nameWithType: ProcessThreadCollection.AsReadOnly\n  fullName: ProcessThreadCollection.AsReadOnly\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.BinarySearch*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: BinarySearch\n  nameWithType: ProcessThreadCollection.BinarySearch\n  fullName: ProcessThreadCollection.BinarySearch\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Capacity*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Capacity\n  nameWithType: ProcessThreadCollection.Capacity\n  fullName: ProcessThreadCollection.Capacity\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Clear*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Clear\n  nameWithType: ProcessThreadCollection.Clear\n  fullName: ProcessThreadCollection.Clear\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Contains*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Contains\n  nameWithType: ProcessThreadCollection.Contains\n  fullName: ProcessThreadCollection.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.ConvertAll``1*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ConvertAll<TOutput>\n  nameWithType: ProcessThreadCollection.ConvertAll<TOutput>\n  fullName: ProcessThreadCollection.ConvertAll<TOutput>\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.CopyTo*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: ProcessThreadCollection.CopyTo\n  fullName: ProcessThreadCollection.CopyTo\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Count*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Count\n  nameWithType: ProcessThreadCollection.Count\n  fullName: ProcessThreadCollection.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Exists*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Exists\n  nameWithType: ProcessThreadCollection.Exists\n  fullName: ProcessThreadCollection.Exists\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Find*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Find\n  nameWithType: ProcessThreadCollection.Find\n  fullName: ProcessThreadCollection.Find\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindAll*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindAll\n  nameWithType: ProcessThreadCollection.FindAll\n  fullName: ProcessThreadCollection.FindAll\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindIndex*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindIndex\n  nameWithType: ProcessThreadCollection.FindIndex\n  fullName: ProcessThreadCollection.FindIndex\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindLast*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindLast\n  nameWithType: ProcessThreadCollection.FindLast\n  fullName: ProcessThreadCollection.FindLast\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.FindLastIndex*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: FindLastIndex\n  nameWithType: ProcessThreadCollection.FindLastIndex\n  fullName: ProcessThreadCollection.FindLastIndex\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.ForEach*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ForEach\n  nameWithType: ProcessThreadCollection.ForEach\n  fullName: ProcessThreadCollection.ForEach\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.GetEnumerator*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ProcessThreadCollection.GetEnumerator\n  fullName: ProcessThreadCollection.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.GetRange*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: GetRange\n  nameWithType: ProcessThreadCollection.GetRange\n  fullName: ProcessThreadCollection.GetRange\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.IndexOf*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: ProcessThreadCollection.IndexOf\n  fullName: ProcessThreadCollection.IndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Insert*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Insert\n  nameWithType: ProcessThreadCollection.Insert\n  fullName: ProcessThreadCollection.Insert\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.InsertRange*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: InsertRange\n  nameWithType: ProcessThreadCollection.InsertRange\n  fullName: ProcessThreadCollection.InsertRange\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Item*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Item\n  nameWithType: ProcessThreadCollection.Item\n  fullName: ProcessThreadCollection.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.LastIndexOf*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: LastIndexOf\n  nameWithType: ProcessThreadCollection.LastIndexOf\n  fullName: ProcessThreadCollection.LastIndexOf\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Remove*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Remove\n  nameWithType: ProcessThreadCollection.Remove\n  fullName: ProcessThreadCollection.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.RemoveAll*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: RemoveAll\n  nameWithType: ProcessThreadCollection.RemoveAll\n  fullName: ProcessThreadCollection.RemoveAll\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.RemoveAt*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: RemoveAt\n  nameWithType: ProcessThreadCollection.RemoveAt\n  fullName: ProcessThreadCollection.RemoveAt\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.RemoveRange*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: RemoveRange\n  nameWithType: ProcessThreadCollection.RemoveRange\n  fullName: ProcessThreadCollection.RemoveRange\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Reverse*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Reverse\n  nameWithType: ProcessThreadCollection.Reverse\n  fullName: ProcessThreadCollection.Reverse\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.Sort*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: Sort\n  nameWithType: ProcessThreadCollection.Sort\n  fullName: ProcessThreadCollection.Sort\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.ToArray*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: ToArray\n  nameWithType: ProcessThreadCollection.ToArray\n  fullName: ProcessThreadCollection.ToArray\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.TrimExcess*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: TrimExcess\n  nameWithType: ProcessThreadCollection.TrimExcess\n  fullName: ProcessThreadCollection.TrimExcess\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.TrueForAll*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: TrueForAll\n  nameWithType: ProcessThreadCollection.TrueForAll\n  fullName: ProcessThreadCollection.TrueForAll\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: ProcessThreadCollection.System.Collections.ICollection.CopyTo\n  fullName: ProcessThreadCollection.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ProcessThreadCollection.System.Collections.ICollection.IsSynchronized\n  fullName: ProcessThreadCollection.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.Diagnostics.ProcessThreadCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ProcessThreadCollection.System.Collections.ICollection.SyncRoot\n  fullName: ProcessThreadCollection.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessThreadCollection.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}