{"nodes":[{"content":"Provides methods that manage the lifetime and the model used for decoupled providers.  \n  \n Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.","nodes":[{"pos":[0,85],"content":"Provides methods that manage the lifetime and the model used for decoupled providers.","nodes":[{"content":"Provides methods that manage the lifetime and the model used for decoupled providers.","pos":[0,85]}]},{"pos":[92,408],"content":"Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.","nodes":[{"content":"Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.","pos":[0,193]},{"content":"The <bpt id=\"p1\">[</bpt>MI APIs<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx)</ept> should be used for all new development.","pos":[194,316],"source":" The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development."}]}],"pos":[1053,1466],"yaml":true},{"content":"Decoupled providers are hosted by an application. Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method. The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.  \n  \n In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method. These include the enumeration and bind methods. In this model, the application creates instances and publishes them. The application is responsible for ensuring that the key properties of the classes are respected. The application is also responsible for deleting instances.  \n  \n In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider. It calls into the application for this functionality and fails if it does not exist or is not implemented properly. The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.","nodes":[{"pos":[0,379],"content":"Decoupled providers are hosted by an application. Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method. The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.","nodes":[{"content":"Decoupled providers are hosted by an application. Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method. The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.","pos":[0,379],"nodes":[{"content":"Decoupled providers are hosted by an application.","pos":[0,49]},{"content":"Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.","pos":[50,175]},{"content":"The callback method uses the <ph id=\"ph1\">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph> methods.","pos":[176,379],"source":" The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods."}]}]},{"pos":[386,813],"content":"In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method. These include the enumeration and bind methods. In this model, the application creates instances and publishes them. The application is responsible for ensuring that the key properties of the classes are respected. The application is also responsible for deleting instances.","nodes":[{"content":"In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method. These include the enumeration and bind methods. In this model, the application creates instances and publishes them. The application is responsible for ensuring that the key properties of the classes are respected. The application is also responsible for deleting instances.","pos":[0,427],"nodes":[{"content":"In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.","pos":[0,152]},{"content":"These include the enumeration and bind methods.","pos":[153,200]},{"content":"In this model, the application creates instances and publishes them.","pos":[201,269]},{"content":"The application is responsible for ensuring that the key properties of the classes are respected.","pos":[270,367]},{"content":"The application is also responsible for deleting instances.","pos":[368,427]}]}]},{"pos":[820,1458],"content":"In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider. It calls into the application for this functionality and fails if it does not exist or is not implemented properly. The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.","nodes":[{"content":"In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider. It calls into the application for this functionality and fails if it does not exist or is not implemented properly. The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.","pos":[0,638],"nodes":[{"content":"In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.","pos":[0,197]},{"content":"It calls into the application for this functionality and fails if it does not exist or is not implemented properly.","pos":[198,313]},{"content":"The application registers the type of its WMI classes with the infrastructure by calling <ph id=\"ph1\">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph> and indicates that it no longer wants the WMI classes exposed by calling <ph id=\"ph2\">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph>.","pos":[314,638],"source":" The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>."}]}]}],"pos":[1477,2942],"yaml":true,"extradata":"MT"},{"content":"Makes an instance of a provider available within the WMI infrastructure.","nodes":[{"pos":[0,72],"content":"Makes an instance of a provider available within the WMI infrastructure.","nodes":[{"content":"Makes an instance of a provider available within the WMI infrastructure.","pos":[0,72]}]}],"pos":[5345,5418],"yaml":true},{"content":"An instance of the class that implements the provider to publish.","nodes":[{"pos":[0,65],"content":"An instance of the class that implements the provider to publish.","nodes":[{"content":"An instance of the class that implements the provider to publish.","pos":[0,65]}]}],"pos":[5561,5627],"yaml":true},{"content":"Registers an assembly with the WMI infrastructure.","nodes":[{"pos":[0,50],"content":"Registers an assembly with the WMI infrastructure.","nodes":[{"content":"Registers an assembly with the WMI infrastructure.","pos":[0,50]}]}],"pos":[6890,6941],"yaml":true},{"content":"The assembly to register.","nodes":[{"pos":[0,25],"content":"The assembly to register.","nodes":[{"content":"The assembly to register.","pos":[0,25]}]}],"pos":[7152,7178],"yaml":true},{"content":"Registers a class with the WMI infrastructure.","nodes":[{"pos":[0,46],"content":"Registers a class with the WMI infrastructure.","nodes":[{"content":"Registers a class with the WMI infrastructure.","pos":[0,46]}]}],"pos":[8369,8416],"yaml":true},{"content":"The type of the class.","nodes":[{"pos":[0,22],"content":"The type of the class.","nodes":[{"content":"The type of the class.","pos":[0,22]}]}],"pos":[8749,8772],"yaml":true},{"content":"Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.","nodes":[{"pos":[0,107],"content":"Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.","nodes":[{"content":"Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.","pos":[0,107]}]}],"pos":[9935,10043],"yaml":true},{"content":"An instance of the class that implements the provider to revoke.","nodes":[{"pos":[0,64],"content":"An instance of the class that implements the provider to revoke.","nodes":[{"content":"An instance of the class that implements the provider to revoke.","pos":[0,64]}]}],"pos":[10185,10250],"yaml":true},{"content":"Unregisters an assembly currently registered with the WMI infrastructure.","nodes":[{"pos":[0,73],"content":"Unregisters an assembly currently registered with the WMI infrastructure.","nodes":[{"content":"Unregisters an assembly currently registered with the WMI infrastructure.","pos":[0,73]}]}],"pos":[11524,11598],"yaml":true},{"content":"The registered assembly to unregister.","nodes":[{"pos":[0,38],"content":"The registered assembly to unregister.","nodes":[{"content":"The registered assembly to unregister.","pos":[0,38]}]}],"pos":[11811,11850],"yaml":true},{"content":"Unregisters a class registered with the WMI infrastructure.","nodes":[{"pos":[0,59],"content":"Unregisters a class registered with the WMI infrastructure.","nodes":[{"content":"Unregisters a class registered with the WMI infrastructure.","pos":[0,59]}]}],"pos":[13055,13115],"yaml":true},{"content":"The registered type to unregister.","nodes":[{"pos":[0,34],"content":"The registered type to unregister.","nodes":[{"content":"The registered type to unregister.","pos":[0,34]}]}],"pos":[13279,13314],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Management.Instrumentation.InstrumentationManager\n  commentId: T:System.Management.Instrumentation.InstrumentationManager\n  id: InstrumentationManager\n  children:\n  - System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)\n  - System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)\n  - System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)\n  - System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)\n  - System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)\n  - System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)\n  langs:\n  - csharp\n  name: InstrumentationManager\n  nameWithType: InstrumentationManager\n  fullName: System.Management.Instrumentation.InstrumentationManager\n  type: Class\n  assemblies:\n  - System.Management.Instrumentation\n  namespace: System.Management.Instrumentation\n  summary: \"Provides methods that manage the lifetime and the model used for decoupled providers.  \\n  \\n Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.\"\n  remarks: \"Decoupled providers are hosted by an application. Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method. The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.  \\n  \\n In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method. These include the enumeration and bind methods. In this model, the application creates instances and publishes them. The application is responsible for ensuring that the key properties of the classes are respected. The application is also responsible for deleting instances.  \\n  \\n In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider. It calls into the application for this functionality and fails if it does not exist or is not implemented properly. The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.\"\n  example:\n  - \"The following example demonstrates how to use the publish/revoke model. Two instances of the router class are created and published. They are later revoked.  \\n  \\n```  \\npublic class Sample_InstanceProvider  \\n{  \\npublic int Main (string[] args)   \\n{  \\nRouter r_one = new Router ();  \\nr_one.Name = \\\"one\\\";  \\nInstrumentationManager.Publish(r_one);  \\nRouter r_two = new Router ();  \\nr_two.Name = \\\"two\\\";  \\nInstrumentationManager.Publish(r_two);  \\n// ....  \\nInstrumentationManager.Revoke(r_one);  \\nInstrumentationManager.Revoke(r_two);  \\nreturn 0;  \\n}  \\n}  \\n```  \\n  \\n In the next example, the callback method of registration is used to expose the RouterNew class.  \\n  \\n```  \\npublic int MainNew(string[] args)   \\n{  \\n    InstrumentationManager.RegisterType(typeof(RouterNew));  \\n    // ....  \\n    InstrumentationManager.UnRegisterType(typeof(RouterNew));  \\n    return 0;  \\n}  \\n```\"\n  syntax:\n    content: public static class InstrumentationManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)\n  commentId: M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)\n  id: Publish(System.Object)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  langs:\n  - csharp\n  name: Publish(Object)\n  nameWithType: InstrumentationManager.Publish(Object)\n  fullName: InstrumentationManager.Publish(Object)\n  type: Method\n  assemblies:\n  - System.Management.Instrumentation\n  namespace: System.Management.Instrumentation\n  summary: Makes an instance of a provider available within the WMI infrastructure.\n  syntax:\n    content: public static void Publish (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An instance of the class that implements the provider to publish.\n  overload: System.Management.Instrumentation.InstrumentationManager.Publish*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)\n  commentId: M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)\n  id: RegisterAssembly(System.Reflection.Assembly)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  langs:\n  - csharp\n  name: RegisterAssembly(Assembly)\n  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)\n  fullName: InstrumentationManager.RegisterAssembly(Assembly)\n  type: Method\n  assemblies:\n  - System.Management.Instrumentation\n  namespace: System.Management.Instrumentation\n  summary: Registers an assembly with the WMI infrastructure.\n  syntax:\n    content: public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);\n    parameters:\n    - id: managementAssembly\n      type: System.Reflection.Assembly\n      description: The assembly to register.\n  overload: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)\n  commentId: M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)\n  id: RegisterType(System.Type)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  langs:\n  - csharp\n  name: RegisterType(Type)\n  nameWithType: InstrumentationManager.RegisterType(Type)\n  fullName: InstrumentationManager.RegisterType(Type)\n  type: Method\n  assemblies:\n  - System.Management.Instrumentation\n  namespace: System.Management.Instrumentation\n  summary: Registers a class with the WMI infrastructure.\n  remarks: ''\n  example:\n  - \"```  \\nstatic int Main(string[] args)  \\n{  \\n   InstrumentationManager.RegisterType(typeof(MySampleProvider));  \\n   return 0;  \\n}  \\n```\"\n  syntax:\n    content: public static void RegisterType (Type managementType);\n    parameters:\n    - id: managementType\n      type: System.Type\n      description: The type of the class.\n  overload: System.Management.Instrumentation.InstrumentationManager.RegisterType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)\n  commentId: M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)\n  id: Revoke(System.Object)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  langs:\n  - csharp\n  name: Revoke(Object)\n  nameWithType: InstrumentationManager.Revoke(Object)\n  fullName: InstrumentationManager.Revoke(Object)\n  type: Method\n  assemblies:\n  - System.Management.Instrumentation\n  namespace: System.Management.Instrumentation\n  summary: Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.\n  syntax:\n    content: public static void Revoke (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An instance of the class that implements the provider to revoke.\n  overload: System.Management.Instrumentation.InstrumentationManager.Revoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)\n  commentId: M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)\n  id: UnregisterAssembly(System.Reflection.Assembly)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  langs:\n  - csharp\n  name: UnregisterAssembly(Assembly)\n  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)\n  fullName: InstrumentationManager.UnregisterAssembly(Assembly)\n  type: Method\n  assemblies:\n  - System.Management.Instrumentation\n  namespace: System.Management.Instrumentation\n  summary: Unregisters an assembly currently registered with the WMI infrastructure.\n  syntax:\n    content: public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);\n    parameters:\n    - id: managementAssembly\n      type: System.Reflection.Assembly\n      description: The registered assembly to unregister.\n  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)\n  commentId: M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)\n  id: UnregisterType(System.Type)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  langs:\n  - csharp\n  name: UnregisterType(Type)\n  nameWithType: InstrumentationManager.UnregisterType(Type)\n  fullName: InstrumentationManager.UnregisterType(Type)\n  type: Method\n  assemblies:\n  - System.Management.Instrumentation\n  namespace: System.Management.Instrumentation\n  summary: Unregisters a class registered with the WMI infrastructure.\n  syntax:\n    content: public static void UnregisterType (Type managementType);\n    parameters:\n    - id: managementType\n      type: System.Type\n      description: The registered type to unregister.\n  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: Publish(Object)\n  nameWithType: InstrumentationManager.Publish(Object)\n  fullName: InstrumentationManager.Publish(Object)\n- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: RegisterAssembly(Assembly)\n  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)\n  fullName: InstrumentationManager.RegisterAssembly(Assembly)\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: RegisterType(Type)\n  nameWithType: InstrumentationManager.RegisterType(Type)\n  fullName: InstrumentationManager.RegisterType(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: Revoke(Object)\n  nameWithType: InstrumentationManager.Revoke(Object)\n  fullName: InstrumentationManager.Revoke(Object)\n- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: UnregisterAssembly(Assembly)\n  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)\n  fullName: InstrumentationManager.UnregisterAssembly(Assembly)\n- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: UnregisterType(Type)\n  nameWithType: InstrumentationManager.UnregisterType(Type)\n  fullName: InstrumentationManager.UnregisterType(Type)\n- uid: System.Management.Instrumentation.InstrumentationManager.Publish*\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: Publish\n  nameWithType: InstrumentationManager.Publish\n  fullName: InstrumentationManager.Publish\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: RegisterAssembly\n  nameWithType: InstrumentationManager.RegisterAssembly\n  fullName: InstrumentationManager.RegisterAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType*\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: RegisterType\n  nameWithType: InstrumentationManager.RegisterType\n  fullName: InstrumentationManager.RegisterType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n- uid: System.Management.Instrumentation.InstrumentationManager.Revoke*\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: Revoke\n  nameWithType: InstrumentationManager.Revoke\n  fullName: InstrumentationManager.Revoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: UnregisterAssembly\n  nameWithType: InstrumentationManager.UnregisterAssembly\n  fullName: InstrumentationManager.UnregisterAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType*\n  parent: System.Management.Instrumentation.InstrumentationManager\n  isExternal: false\n  name: UnregisterType\n  nameWithType: InstrumentationManager.UnregisterType\n  fullName: InstrumentationManager.UnregisterType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/InstrumentationManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}