{"nodes":[{"content":"Provides a managed wrapper for a process handle.","nodes":[{"pos":[0,48],"content":"Provides a managed wrapper for a process handle.","nodes":[{"content":"Provides a managed wrapper for a process handle.","pos":[0,48]}]}],"pos":[672,721],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> class from the specified handle, indicating whether to release the handle during the finalization phase.","nodes":[{"pos":[0,205],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"&gt;&lt;/xref&gt;</ph> class from the specified handle, indicating whether to release the handle during the finalization phase.","source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> class from the specified handle, indicating whether to release the handle during the finalization phase."}],"pos":[3178,3384],"yaml":true},{"content":"> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"pos":[2,528],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]}],"pos":[3395,3936],"yaml":true,"extradata":"MT"},{"content":"The handle to be wrapped.","nodes":[{"pos":[0,25],"content":"The handle to be wrapped.","nodes":[{"content":"The handle to be wrapped.","pos":[0,25]}]}],"pos":[4112,4138],"yaml":true},{"content":"`true` to reliably let <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> release the handle during the finalization phase; otherwise, `false`.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">`true`</ph> to reliably let <ph id=\"ph2\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"&gt;&lt;/xref&gt;</ph> release the handle during the finalization phase; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` to reliably let <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> release the handle during the finalization phase; otherwise, `false`."}],"pos":[4205,4367],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeProcessHandle\n  id: SafeProcessHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)\n  - Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid\n  - Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle\n  langs:\n  - csharp\n  name: SafeProcessHandle\n  nameWithType: SafeProcessHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  type: Class\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Provides a managed wrapper for a process handle.\n  syntax:\n    content: 'public sealed class SafeProcessHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid'\n  inheritance:\n  - System.Object\n  - System.Runtime.InteropServices.SafeHandle\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Runtime.InteropServices.SafeHandle.Close\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeProcessHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)\n  commentId: M:Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)\n  id: '#ctor(System.IntPtr,System.Boolean)'\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  langs:\n  - csharp\n  name: SafeProcessHandle(IntPtr, Boolean)\n  nameWithType: SafeProcessHandle.SafeProcessHandle(IntPtr, Boolean)\n  fullName: SafeProcessHandle.SafeProcessHandle(IntPtr, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> class from the specified handle, indicating whether to release the handle during the finalization phase.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.\n  syntax:\n    content: public SafeProcessHandle (IntPtr existingHandle, bool ownsHandle);\n    parameters:\n    - id: existingHandle\n      type: System.IntPtr\n      description: The handle to be wrapped.\n    - id: ownsHandle\n      type: System.Boolean\n      description: '`true` to reliably let <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> release the handle during the finalization phase; otherwise, `false`.'\n  overload: Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeProcessHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid\n  commentId: P:Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeProcessHandle.IsInvalid\n  fullName: SafeProcessHandle.IsInvalid\n  type: Property\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeProcessHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle\n  commentId: M:Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeProcessHandle.ReleaseHandle()\n  fullName: SafeProcessHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Process\n  - System\n  - netstandard\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeProcessHandle.xml\nreferences:\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  nameWithType: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: SafeProcessHandle(IntPtr, Boolean)\n  nameWithType: SafeProcessHandle.SafeProcessHandle(IntPtr, Boolean)\n  fullName: SafeProcessHandle.SafeProcessHandle(IntPtr, Boolean)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeProcessHandle.IsInvalid\n  fullName: SafeProcessHandle.IsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeProcessHandle.ReleaseHandle()\n  fullName: SafeProcessHandle.ReleaseHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: SafeProcessHandle\n  nameWithType: SafeProcessHandle.SafeProcessHandle\n  fullName: SafeProcessHandle.SafeProcessHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeProcessHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeProcessHandle.IsInvalid\n  fullName: SafeProcessHandle.IsInvalid\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeProcessHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeProcessHandle.ReleaseHandle\n  fullName: SafeProcessHandle.ReleaseHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeProcessHandle.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Close()\n  nameWithType: SafeHandle.Close()\n  fullName: SafeHandle.Close()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousAddRef(Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  fullName: SafeHandle.DangerousAddRef(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousGetHandle()\n  nameWithType: SafeHandle.DangerousGetHandle()\n  fullName: SafeHandle.DangerousGetHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousRelease()\n  nameWithType: SafeHandle.DangerousRelease()\n  fullName: SafeHandle.DangerousRelease()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: SafeHandle.Dispose()\n  fullName: SafeHandle.Dispose()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SafeHandle.Dispose(Boolean)\n  fullName: SafeHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: handle\n  nameWithType: SafeHandle.handle\n  fullName: SafeHandle.handle\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsClosed\n  nameWithType: SafeHandle.IsClosed\n  fullName: SafeHandle.IsClosed\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandle(IntPtr)\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  fullName: SafeHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  fullName: SafeHandle.SetHandleAsInvalid()\n"}