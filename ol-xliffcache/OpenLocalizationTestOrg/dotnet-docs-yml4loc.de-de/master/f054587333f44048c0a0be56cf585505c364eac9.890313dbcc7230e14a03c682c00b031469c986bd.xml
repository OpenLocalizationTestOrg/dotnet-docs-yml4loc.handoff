{"nodes":[{"content":"Provides support for type equivalence.","nodes":[{"pos":[0,38],"content":"Provides support for type equivalence.","nodes":[{"content":"Provides support for type equivalence.","pos":[0,38]}]}],"pos":[810,849],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.TypeIdentifierAttribute> attribute is primarily emitted by compilers. It serves two purposes:  \n  \n-   For all imported types, it indicates that the type is intended to be used for type equivalence.  \n  \n-   For types that don’t have GUIDs in their type library, it has a constructor that takes two strings (`scope` and `identifier`). These are combined into a GUID and become the key that is used for type equivalence.  \n  \n Type equivalence is discussed in the <xref:System.Type.IsEquivalentTo%2A?displayProperty=fullName> topic.","nodes":[{"pos":[0,134],"content":"The <xref:System.Runtime.InteropServices.TypeIdentifierAttribute> attribute is primarily emitted by compilers. It serves two purposes:","nodes":[{"content":"The <xref:System.Runtime.InteropServices.TypeIdentifierAttribute> attribute is primarily emitted by compilers. It serves two purposes:","pos":[0,134],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph> attribute is primarily emitted by compilers.","pos":[0,110],"source":"The <xref:System.Runtime.InteropServices.TypeIdentifierAttribute> attribute is primarily emitted by compilers."},{"content":"It serves two purposes:","pos":[111,134]}]}]},{"pos":[144,239],"content":"For all imported types, it indicates that the type is intended to be used for type equivalence.","nodes":[{"content":"For all imported types, it indicates that the type is intended to be used for type equivalence.","pos":[0,95]}]},{"pos":[249,460],"content":"For types that don’t have GUIDs in their type library, it has a constructor that takes two strings (`scope` and `identifier`). These are combined into a GUID and become the key that is used for type equivalence.","nodes":[{"content":"For types that don’t have GUIDs in their type library, it has a constructor that takes two strings (<ph id=\"ph1\">`scope`</ph> and <ph id=\"ph2\">`identifier`</ph>).","pos":[0,126],"source":"For types that don’t have GUIDs in their type library, it has a constructor that takes two strings (`scope` and `identifier`)."},{"content":"These are combined into a GUID and become the key that is used for type equivalence.","pos":[127,211]}]},{"pos":[467,572],"content":"Type equivalence is discussed in the <xref:System.Type.IsEquivalentTo%2A?displayProperty=fullName> topic.","nodes":[{"content":"Type equivalence is discussed in the <ph id=\"ph1\">&lt;xref:System.Type.IsEquivalentTo%2A?displayProperty=fullName&gt;</ph> topic.","pos":[0,105],"source":"Type equivalence is discussed in the <xref:System.Type.IsEquivalentTo%2A?displayProperty=fullName> topic."}]}],"pos":[860,1441],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute\"></xref> class.","nodes":[{"pos":[0,112],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute\"&gt;&lt;/xref&gt;</ph> class.","source":"Creates a new instance of the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute\"></xref> class."}],"pos":[7230,7343],"yaml":true},{"content":"This constructor overload does not accept parameters. Therefore, interfaces that have this attribute use the type's GUID and simple name to establish type equivalence.","nodes":[{"pos":[0,167],"content":"This constructor overload does not accept parameters. Therefore, interfaces that have this attribute use the type's GUID and simple name to establish type equivalence.","nodes":[{"content":"This constructor overload does not accept parameters. Therefore, interfaces that have this attribute use the type's GUID and simple name to establish type equivalence.","pos":[0,167],"nodes":[{"content":"This constructor overload does not accept parameters.","pos":[0,53]},{"content":"Therefore, interfaces that have this attribute use the type's GUID and simple name to establish type equivalence.","pos":[54,167]}]}]}],"pos":[7354,7522],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute\"></xref> class with the specified scope and identifier.","nodes":[{"pos":[0,152],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute\"&gt;&lt;/xref&gt;</ph> class with the specified scope and identifier.","source":"Creates a new instance of the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute\"></xref> class with the specified scope and identifier."}],"pos":[9432,9585],"yaml":true},{"content":"The `scope` and `identifier` parameters are used to establish type equivalence. They are combined into a GUID and become the key that is used for type equivalence. This constructor is particularly useful for types that do not have GUIDs in their type library.  \n  \n The <xref:System.Runtime.InteropServices.TypeIdentifierAttribute> class internally maintains the `scope` and `identifier` parameters as private members.","nodes":[{"pos":[0,259],"content":"The `scope` and `identifier` parameters are used to establish type equivalence. They are combined into a GUID and become the key that is used for type equivalence. This constructor is particularly useful for types that do not have GUIDs in their type library.","nodes":[{"content":"The <ph id=\"ph1\">`scope`</ph> and <ph id=\"ph2\">`identifier`</ph> parameters are used to establish type equivalence.","pos":[0,79],"source":"The `scope` and `identifier` parameters are used to establish type equivalence."},{"content":"They are combined into a GUID and become the key that is used for type equivalence.","pos":[80,163]},{"content":"This constructor is particularly useful for types that do not have GUIDs in their type library.","pos":[164,259]}]},{"pos":[266,418],"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.TypeIdentifierAttribute&gt;</ph> class internally maintains the <ph id=\"ph2\">`scope`</ph> and <ph id=\"ph3\">`identifier`</ph> parameters as private members.","source":"The <xref:System.Runtime.InteropServices.TypeIdentifierAttribute> class internally maintains the `scope` and `identifier` parameters as private members."}],"pos":[9596,10019],"yaml":true,"extradata":"MT"},{"content":"The first type equivalence string.","nodes":[{"pos":[0,34],"content":"The first type equivalence string.","nodes":[{"content":"The first type equivalence string.","pos":[0,34]}]}],"pos":[10185,10220],"yaml":true},{"content":"The second type equivalence string.","nodes":[{"pos":[0,35],"content":"The second type equivalence string.","nodes":[{"content":"The second type equivalence string.","pos":[0,35]}]}],"pos":[10286,10322],"yaml":true},{"content":"Gets the value of the <code>identifier</code> parameter that was passed to the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\"></xref> constructor.","nodes":[{"pos":[0,202],"content":"Gets the value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">identifier</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter that was passed to the <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\"&gt;&lt;/xref&gt;</ph> constructor.","source":"Gets the value of the <code>identifier</code> parameter that was passed to the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\"></xref> constructor."}],"pos":[11991,12194],"yaml":true},{"content":"The value of the constructor's <code>identifier</code> parameter.","nodes":[{"pos":[0,65],"content":"The value of the constructor's <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">identifier</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The value of the constructor's <code>identifier</code> parameter."}],"pos":[12308,12374],"yaml":true},{"content":"Gets the value of the <code>scope</code> parameter that was passed to the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\"></xref> constructor.","nodes":[{"pos":[0,197],"content":"Gets the value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scope</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter that was passed to the <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\"&gt;&lt;/xref&gt;</ph> constructor.","source":"Gets the value of the <code>scope</code> parameter that was passed to the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\"></xref> constructor."}],"pos":[14018,14216],"yaml":true},{"content":"The value of the constructor's <code>scope</code> parameter.","nodes":[{"pos":[0,60],"content":"The value of the constructor's <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scope</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The value of the constructor's <code>scope</code> parameter."}],"pos":[14325,14386],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute\n  commentId: T:System.Runtime.InteropServices.TypeIdentifierAttribute\n  id: TypeIdentifierAttribute\n  children:\n  - System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor\n  - System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\n  - System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier\n  - System.Runtime.InteropServices.TypeIdentifierAttribute.Scope\n  langs:\n  - csharp\n  name: TypeIdentifierAttribute\n  nameWithType: TypeIdentifierAttribute\n  fullName: System.Runtime.InteropServices.TypeIdentifierAttribute\n  type: Class\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Provides support for type equivalence.\n  remarks: \"The <xref:System.Runtime.InteropServices.TypeIdentifierAttribute> attribute is primarily emitted by compilers. It serves two purposes:  \\n  \\n-   For all imported types, it indicates that the type is intended to be used for type equivalence.  \\n  \\n-   For types that don’t have GUIDs in their type library, it has a constructor that takes two strings (`scope` and `identifier`). These are combined into a GUID and become the key that is used for type equivalence.  \\n  \\n Type equivalence is discussed in the <xref:System.Type.IsEquivalentTo%2A?displayProperty=fullName> topic.\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public sealed class TypeIdentifierAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeIdentifierAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor\n  commentId: M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor\n  id: '#ctor'\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  langs:\n  - csharp\n  name: TypeIdentifierAttribute()\n  nameWithType: TypeIdentifierAttribute.TypeIdentifierAttribute()\n  fullName: TypeIdentifierAttribute.TypeIdentifierAttribute()\n  type: Constructor\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Creates a new instance of the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute\"></xref> class.\n  remarks: This constructor overload does not accept parameters. Therefore, interfaces that have this attribute use the type's GUID and simple name to establish type equivalence.\n  syntax:\n    content: public TypeIdentifierAttribute ();\n    parameters: []\n  overload: System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeIdentifierAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\n  commentId: M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  langs:\n  - csharp\n  name: TypeIdentifierAttribute(String, String)\n  nameWithType: TypeIdentifierAttribute.TypeIdentifierAttribute(String, String)\n  fullName: TypeIdentifierAttribute.TypeIdentifierAttribute(String, String)\n  type: Constructor\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Creates a new instance of the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute\"></xref> class with the specified scope and identifier.\n  remarks: \"The `scope` and `identifier` parameters are used to establish type equivalence. They are combined into a GUID and become the key that is used for type equivalence. This constructor is particularly useful for types that do not have GUIDs in their type library.  \\n  \\n The <xref:System.Runtime.InteropServices.TypeIdentifierAttribute> class internally maintains the `scope` and `identifier` parameters as private members.\"\n  syntax:\n    content: public TypeIdentifierAttribute (string scope, string identifier);\n    parameters:\n    - id: scope\n      type: System.String\n      description: The first type equivalence string.\n    - id: identifier\n      type: System.String\n      description: The second type equivalence string.\n  overload: System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeIdentifierAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier\n  commentId: P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier\n  id: Identifier\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  langs:\n  - csharp\n  name: Identifier\n  nameWithType: TypeIdentifierAttribute.Identifier\n  fullName: TypeIdentifierAttribute.Identifier\n  type: Property\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Gets the value of the <code>identifier</code> parameter that was passed to the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\"></xref> constructor.\n  syntax:\n    content: public string Identifier { get; }\n    return:\n      type: System.String\n      description: The value of the constructor's <code>identifier</code> parameter.\n  overload: System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeIdentifierAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.Scope\n  commentId: P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope\n  id: Scope\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  langs:\n  - csharp\n  name: Scope\n  nameWithType: TypeIdentifierAttribute.Scope\n  fullName: TypeIdentifierAttribute.Scope\n  type: Property\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Gets the value of the <code>scope</code> parameter that was passed to the <xref href=\"System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\"></xref> constructor.\n  syntax:\n    content: public string Scope { get; }\n    return:\n      type: System.String\n      description: The value of the constructor's <code>scope</code> parameter.\n  overload: System.Runtime.InteropServices.TypeIdentifierAttribute.Scope*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeIdentifierAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  isExternal: false\n  name: TypeIdentifierAttribute()\n  nameWithType: TypeIdentifierAttribute.TypeIdentifierAttribute()\n  fullName: TypeIdentifierAttribute.TypeIdentifierAttribute()\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  isExternal: false\n  name: TypeIdentifierAttribute(String, String)\n  nameWithType: TypeIdentifierAttribute.TypeIdentifierAttribute(String, String)\n  fullName: TypeIdentifierAttribute.TypeIdentifierAttribute(String, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  isExternal: false\n  name: Identifier\n  nameWithType: TypeIdentifierAttribute.Identifier\n  fullName: TypeIdentifierAttribute.Identifier\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.Scope\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  isExternal: false\n  name: Scope\n  nameWithType: TypeIdentifierAttribute.Scope\n  fullName: TypeIdentifierAttribute.Scope\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor*\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  isExternal: false\n  name: TypeIdentifierAttribute\n  nameWithType: TypeIdentifierAttribute.TypeIdentifierAttribute\n  fullName: TypeIdentifierAttribute.TypeIdentifierAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeIdentifierAttribute.xml\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier*\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  isExternal: false\n  name: Identifier\n  nameWithType: TypeIdentifierAttribute.Identifier\n  fullName: TypeIdentifierAttribute.Identifier\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeIdentifierAttribute.xml\n- uid: System.Runtime.InteropServices.TypeIdentifierAttribute.Scope*\n  parent: System.Runtime.InteropServices.TypeIdentifierAttribute\n  isExternal: false\n  name: Scope\n  nameWithType: TypeIdentifierAttribute.Scope\n  fullName: TypeIdentifierAttribute.Scope\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeIdentifierAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}