### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.Marshal
  commentId: T:System.Runtime.InteropServices.Marshal
  id: Marshal
  children:
  - System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  - System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)
  - System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup
  - System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)
  - System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)
  - System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)
  - System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext
  - System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)
  - System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)
  - System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)
  - System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)
  - System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
  - System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
  - System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)
  - System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)
  - System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)
  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)
  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)
  - System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)
  - System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)
  - System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)
  - System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)
  - System.Runtime.InteropServices.Marshal.GetExceptionCode
  - System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)
  - System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetExceptionPointers
  - System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)
  - System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)
  - System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)
  - System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)
  - System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error
  - System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
  - System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)
  - System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)
  - System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  - System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)
  - System.Runtime.InteropServices.Marshal.GetLastWin32Error
  - System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)
  - System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)
  - System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)
  - System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)
  - System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)
  - System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)
  - System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  - System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  - System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)
  - System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)
  - System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  - System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)
  - System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)
  - System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)
  - System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)
  - System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.IsComObject(System.Object)
  - System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)
  - System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)
  - System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)
  - System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)
  - System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)
  - System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)
  - System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)
  - System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)
  - System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)
  - System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  - System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
  - System.Runtime.InteropServices.Marshal.ReleaseThreadCache
  - System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)
  - System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)
  - System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)
  - System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)
  - System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)
  - System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)
  - System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
  - System.Runtime.InteropServices.Marshal.SizeOf(System.Type)
  - System.Runtime.InteropServices.Marshal.SizeOf``1
  - System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
  - System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)
  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)
  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)
  - System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  - System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)
  - System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)
  - System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)
  - System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)
  - System.Runtime.InteropServices.Marshal.SystemDefaultCharSize
  - System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize
  - System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  - System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
  - System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)
  - System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)
  - System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  - System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)
  - System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)
  - System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)
  - System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)
  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)
  langs:
  - csharp
  name: Marshal
  nameWithType: Marshal
  fullName: System.Runtime.InteropServices.Marshal
  type: Class
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.
  remarks: "The `static` methods defined on the <xref:System.Runtime.InteropServices.Marshal> class are essential to working with unmanaged code. Most methods defined in this class are typically used by developers who want to provide a bridge between the managed and unmanaged programming models. For example, the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> method copies ANSI characters from a specified string (in the managed heap) to a buffer in the unmanaged heap. It also allocates the target heap of the right size.  \n  \n The common language runtime provides specific marshaling capabilities. For details on marshaling behavior, see [Interop Marshaling](~/docs/framework/interop/interop-marshaling.md).  \n  \n The `Read` and `Write` methods in the <xref:System.Runtime.InteropServices.Marshal> class support both aligned and unaligned access."
  example:
  - "The following example shows how to use various methods defined by the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cpp[Marshal#1](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#1)]\n [!code-csharp[Marshal#1](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#1)]\n [!code-vb[Marshal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#1)]"
  syntax:
    content: public static class Marshal
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  id: AddRef(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: AddRef(IntPtr)
  nameWithType: Marshal.AddRef(IntPtr)
  fullName: Marshal.AddRef(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Increments the reference count on the specified interface.
  remarks: "The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. After calling <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, you must decrement the reference count by using a method such as <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>. Do not rely on the return value of <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, as it can sometimes be unstable.  \n  \n You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer. You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.AddRef%2A> method on managed objects to obtain the COM interfaces represented by the managed object's COM callable wrapper. If you are not familiar with the details of this wrapper type, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md)."
  syntax:
    content: public static int AddRef (IntPtr pUnk);
    parameters:
    - id: pUnk
      type: System.IntPtr
      description: The interface reference count to increment.
    return:
      type: System.Int32
      description: The new value of the reference count on the <code>pUnk</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.AddRef*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  id: AllocCoTaskMem(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: AllocCoTaskMem(Int32)
  nameWithType: Marshal.AllocCoTaskMem(Int32)
  fullName: Marshal.AllocCoTaskMem(Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Allocates a block of memory of specified size from the COM task memory allocator.
  remarks: <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> is one of two memory allocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> is the other.) The initial memory content returned is undefined, and the allocated memory can be larger than the requested number of bytes. This method exposes the COM [CoTaskMemAlloc](http://go.microsoft.com/fwlink/?LinkId=148626) function, which is referred to as the COM task memory allocator.
  syntax:
    content: public static IntPtr AllocCoTaskMem (int cb);
    parameters:
    - id: cb
      type: System.Int32
      description: The size of the block of memory to be allocated.
    return:
      type: System.IntPtr
      description: An integer representing the address of the block of memory allocated. This memory must be released with <xref href="System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)"></xref>.
  overload: System.Runtime.InteropServices.Marshal.AllocCoTaskMem*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory to satisfy the request.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)
  id: AllocHGlobal(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: AllocHGlobal(Int32)
  nameWithType: Marshal.AllocHGlobal(Int32)
  fullName: Marshal.AllocHGlobal(Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Allocates memory from the unmanaged memory of the process by using the specified number of bytes.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkId=148628) function from Kernel32.dll.  \n  \n When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled."
  example:
  - "The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>method. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cpp[Marshal#4](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#4)]\n [!code-csharp[Marshal#4](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#4)]\n [!code-vb[Marshal#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#4)]"
  syntax:
    content: public static IntPtr AllocHGlobal (int cb);
    parameters:
    - id: cb
      type: System.Int32
      description: The required number of bytes in memory.
    return:
      type: System.IntPtr
      description: A pointer to the newly allocated memory. This memory must be released using the <xref href="System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"></xref> method.
  overload: System.Runtime.InteropServices.Marshal.AllocHGlobal*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory to satisfy the request.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  id: AllocHGlobal(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: AllocHGlobal(IntPtr)
  nameWithType: Marshal.AllocHGlobal(IntPtr)
  fullName: Marshal.AllocHGlobal(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkID=148628) function from Kernel32.dll.  \n  \n When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled.  \n  \n For example code, see <xref:System.Runtime.InteropServices.Marshal> and <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>."
  syntax:
    content: public static IntPtr AllocHGlobal (IntPtr cb);
    parameters:
    - id: cb
      type: System.IntPtr
      description: The required number of bytes in memory.
    return:
      type: System.IntPtr
      description: A pointer to the newly allocated memory. This memory must be released using the <xref href="System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"></xref> method.
  overload: System.Runtime.InteropServices.Marshal.AllocHGlobal*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory to satisfy the request.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup
  commentId: M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup
  id: AreComObjectsAvailableForCleanup
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: AreComObjectsAvailableForCleanup()
  nameWithType: Marshal.AreComObjectsAvailableForCleanup()
  fullName: Marshal.AreComObjectsAvailableForCleanup()
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.
  remarks: "If there are a lot of references between managed and native code with deep dependency graphs it can take a long time for all the objects to clean up. Each time a GC runs it will free up some number of RCWs, which will in turn release the underlying COM objects. Those COM objects will then release their managed references and make more objects available for cleanup the next time a GC runs, which starts the process over again.  \n  \n The <xref:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup%2A> method provides a way for the application to determine how many cycles of GC.Collect and GC.WaitForPendingFinalizers need to happen in order to clean everything up."
  syntax:
    content: public static bool AreComObjectsAvailableForCleanup ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if there are any RCWs available for cleanup; otherwise, `false`.'
  overload: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)
  id: BindToMoniker(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: BindToMoniker(String)
  nameWithType: Marshal.BindToMoniker(String)
  fullName: Marshal.BindToMoniker(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Gets an interface pointer identified by the specified moniker.
  remarks: <xref:System.Runtime.InteropServices.Marshal.BindToMoniker%2A> exposes the COM `BindToMoniker` method, which produces an object that you can cast to any COM interface you require. This method provides the same functionality as the `GetObject` method in Visual Basic 6.0 and [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)].
  syntax:
    content: public static object BindToMoniker (string monikerName);
    parameters:
    - id: monikerName
      type: System.String
      description: The moniker corresponding to the desired interface pointer.
    return:
      type: System.Object
      description: An object containing a reference to the interface pointer identified by the <code>monikerName</code> parameter. A moniker is a name, and in this case, the moniker is defined by an interface.
  overload: System.Runtime.InteropServices.Marshal.BindToMoniker*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: An unrecognized HRESULT was returned by the unmanaged `BindToMoniker` method.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)
  id: BufferToBSTR(System.Array,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: BufferToBSTR(Array, Int32)
  nameWithType: Marshal.BufferToBSTR(Array, Int32)
  fullName: Marshal.BufferToBSTR(Array, Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static IntPtr BufferToBSTR (Array ptr, int slen);
    parameters:
    - id: ptr
      type: System.Array
      description: ''
    - id: slen
      type: System.Int32
      description: ''
    return:
      type: System.IntPtr
      description: ''
  overload: System.Runtime.InteropServices.Marshal.BufferToBSTR*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)
  commentId: M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)
  id: ChangeWrapperHandleStrength(System.Object,System.Boolean)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ChangeWrapperHandleStrength(Object, Boolean)
  nameWithType: Marshal.ChangeWrapperHandleStrength(Object, Boolean)
  fullName: Marshal.ChangeWrapperHandleStrength(Object, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Changes the strength of an object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) (CCW) handle.
  remarks: <xref:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength%2A> is used for object pooling functionality and should never be called by user code directly.
  syntax:
    content: public static void ChangeWrapperHandleStrength (object otp, bool fIsWeak);
    parameters:
    - id: otp
      type: System.Object
      description: The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.
    - id: fIsWeak
      type: System.Boolean
      description: '`true` to change the strength of the handle on the <code>otp</code> parameter to weak, regardless of its reference count; `false` to reset the handle strength on <code>otp</code> to be reference counted.'
  overload: System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext
  commentId: M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext
  id: CleanupUnusedObjectsInCurrentContext
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: CleanupUnusedObjectsInCurrentContext()
  nameWithType: Marshal.CleanupUnusedObjectsInCurrentContext()
  fullName: Marshal.CleanupUnusedObjectsInCurrentContext()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Notifies the runtime to clean up all [Runtime Callable Wrappers](~/docs/framework/interop/runtime-callable-wrapper.md) (RCWs) allocated in the current context.
  remarks: "The interop system pumps messages while it attempts to clean up RCWs. This ensures that cleanup for single-threaded apartment (STA) RCWs happens in all applications, including applications that do not pump often enough. However, some applications that do pump appropriately are very sensitive to where pumping occurs. When the interop system pumps messages in these applications, in places that are unexpected, , the application can encounter reentrancy issues that are difficult to diagnose. Therefore, applications need to be able to control their own pumping for a particular STA and to control the clean-up of RCWs.  \n  \n However, developers often only control a subset of the threads in their application and thus cannot ensure that all threads are pumping appropriately.  \n  \n To solve this problem:  \n  \n1.  Use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=fullName> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per-thread basis. This allows developers to opt out of automatic clean-up, and the corresponding message pumping.  \n  \n2.  Use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A> method to notify the runtime to clean up all RCWs that are allocated in the current context. This companion method allows developers to precisely control when the runtime performs cleanup in the current context."
  syntax:
    content: public static void CleanupUnusedObjectsInCurrentContext ();
    parameters: []
  overload: System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(Single[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Single[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Single[], Int32, IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.
  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.
  syntax:
    content: public static void Copy (float[] source, int startIndex, IntPtr destination, int length);
    parameters:
    - id: source
      type: System.Single[]
      description: The one-dimensional array to copy from.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the source array where copying should start.
    - id: destination
      type: System.IntPtr
      description: The memory pointer to copy to.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> and <code>length</code> are not valid.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(IntPtr[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from a one-dimensional, managed <xref href="System.IntPtr"></xref> array to an unmanaged memory pointer.
  remarks: You can use this method to copy a subset of a one-dimensional managed <xref:System.IntPtr> array to an unmanaged C-style array.
  syntax:
    content: public static void Copy (IntPtr[] source, int startIndex, IntPtr destination, int length);
    parameters:
    - id: source
      type: System.IntPtr[]
      description: The one-dimensional array to copy from.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the source array where copying should start.
    - id: destination
      type: System.IntPtr
      description: The memory pointer to copy to.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(IntPtr, Single[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Single[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Single[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.
  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.
  syntax:
    content: public static void Copy (IntPtr source, float[] destination, int startIndex, int length);
    parameters:
    - id: source
      type: System.IntPtr
      description: The memory pointer to copy from.
    - id: destination
      type: System.Single[]
      description: The array to copy to.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the destination array where copying should start.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(IntPtr, Int64[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Int64[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Int64[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.
  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the`source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (IntPtr source, long[] destination, int startIndex, int length);
    parameters:
    - id: source
      type: System.IntPtr
      description: The memory pointer to copy from.
    - id: destination
      type: System.Int64[]
      description: The array to copy to.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the destination array where copying should start.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(IntPtr, Int32[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Int32[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Int32[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.
  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (IntPtr source, int[] destination, int startIndex, int length);
    parameters:
    - id: source
      type: System.IntPtr
      description: The memory pointer to copy from.
    - id: destination
      type: System.Int32[]
      description: The array to copy to.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the destination array where copying should start.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(IntPtr, Int16[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Int16[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Int16[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.
  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (IntPtr source, short[] destination, int startIndex, int length);
    parameters:
    - id: source
      type: System.IntPtr
      description: The memory pointer to copy from.
    - id: destination
      type: System.Int16[]
      description: The array to copy to.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the destination array where copying should start.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(IntPtr, Double[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Double[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Double[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.
  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (IntPtr source, double[] destination, int startIndex, int length);
    parameters:
    - id: source
      type: System.IntPtr
      description: The memory pointer to copy from.
    - id: destination
      type: System.Double[]
      description: The array to copy to.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the destination array where copying should start.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(IntPtr, IntPtr[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from an unmanaged memory pointer to a managed <xref href="System.IntPtr"></xref> array.
  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Therefore, the unmanaged data that corresponds to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling the <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName> method.
  syntax:
    content: public static void Copy (IntPtr source, IntPtr[] destination, int startIndex, int length);
    parameters:
    - id: source
      type: System.IntPtr
      description: The memory pointer to copy from.
    - id: destination
      type: System.IntPtr[]
      description: The array to copy to.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the destination array where copying should start.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(IntPtr, Byte[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Byte[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.
  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (IntPtr source, byte[] destination, int startIndex, int length);
    parameters:
    - id: source
      type: System.IntPtr
      description: The memory pointer to copy from.
    - id: destination
      type: System.Byte[]
      description: The array to copy to.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the destination array where copying should start.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(Int64[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Int64[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Int64[], Int32, IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.
  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (long[] source, int startIndex, IntPtr destination, int length);
    parameters:
    - id: source
      type: System.Int64[]
      description: The one-dimensional array to copy from.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the source array where copying should start.
    - id: destination
      type: System.IntPtr
      description: The memory pointer to copy to.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> and <code>length</code> are not valid.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(Int32[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Int32[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Int32[], Int32, IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.
  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (int[] source, int startIndex, IntPtr destination, int length);
    parameters:
    - id: source
      type: System.Int32[]
      description: The one-dimensional array to copy from.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the source array where copying should start.
    - id: destination
      type: System.IntPtr
      description: The memory pointer to copy to.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> and <code>length</code> are not valid.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>startIndex</code> or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(Int16[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Int16[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Int16[], Int32, IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.
  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (short[] source, int startIndex, IntPtr destination, int length);
    parameters:
    - id: source
      type: System.Int16[]
      description: The one-dimensional array to copy from.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the source array where copying should start.
    - id: destination
      type: System.IntPtr
      description: The memory pointer to copy to.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> and <code>length</code> are not valid.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(IntPtr, Char[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Char[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Char[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from an unmanaged memory pointer to a managed character array.
  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (IntPtr source, char[] destination, int startIndex, int length);
    parameters:
    - id: source
      type: System.IntPtr
      description: The memory pointer to copy from.
    - id: destination
      type: System.Char[]
      description: The array to copy to.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the destination array where copying should start.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(Double[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Double[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Double[], Int32, IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.
  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (double[] source, int startIndex, IntPtr destination, int length);
    parameters:
    - id: source
      type: System.Double[]
      description: The one-dimensional array to copy from.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the source array where copying should start.
    - id: destination
      type: System.IntPtr
      description: The memory pointer to copy to.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> and <code>length</code> are not valid.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(Char[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Char[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Char[], Int32, IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.
  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.
  example:
  - "The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (char[] source, int startIndex, IntPtr destination, int length);
    parameters:
    - id: source
      type: System.Char[]
      description: The one-dimensional array to copy from.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the source array where copying should start.
    - id: destination
      type: System.IntPtr
      description: The memory pointer to copy to.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> and <code>length</code> are not valid.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Copy(Byte[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Byte[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Byte[], Int32, IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.
  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.
  example:
  - "The following example copies an array to unmanaged memory by using the <xref:System.Runtime.InteropServices.Marshal.Copy%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.IntPtr%2CSystem.Int32%29> overload, and then copies the unmanaged array back to managed memory by using the <xref:System.Runtime.InteropServices.Marshal.Copy%28System.IntPtr%2CSystem.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>overload.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/vb/sample.vb#1)]"
  syntax:
    content: public static void Copy (byte[] source, int startIndex, IntPtr destination, int length);
    parameters:
    - id: source
      type: System.Byte[]
      description: The one-dimensional array to copy from.
    - id: startIndex
      type: System.Int32
      description: The zero-based index in the source array where copying should start.
    - id: destination
      type: System.IntPtr
      description: The memory pointer to copy to.
    - id: length
      type: System.Int32
      description: The number of array elements to copy.
  overload: System.Runtime.InteropServices.Marshal.Copy*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> and <code>length</code> are not valid.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)
  id: CreateAggregatedObject(System.IntPtr,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: CreateAggregatedObject(IntPtr, Object)
  nameWithType: Marshal.CreateAggregatedObject(IntPtr, Object)
  fullName: Marshal.CreateAggregatedObject(IntPtr, Object)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Aggregates a managed object with the specified COM object.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object with the specified outer pointer, and then returns an inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.
  syntax:
    content: public static IntPtr CreateAggregatedObject (IntPtr pOuter, object o);
    parameters:
    - id: pOuter
      type: System.IntPtr
      description: The outer `IUnknown` pointer.
    - id: o
      type: System.Object
      description: An object to aggregate.
    return:
      type: System.IntPtr
      description: The inner `IUnknown` pointer of the managed object.
  overload: System.Runtime.InteropServices.Marshal.CreateAggregatedObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>o</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)
  commentId: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)
  id: CreateAggregatedObject``1(System.IntPtr,``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: CreateAggregatedObject<T>(IntPtr, T)
  nameWithType: Marshal.CreateAggregatedObject<T>(IntPtr, T)
  fullName: Marshal.CreateAggregatedObject<T>(IntPtr, T)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Aggregates a managed object of the specified type with the specified COM object."
  remarks: The<xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object of a specified type with the specified outer pointer, and returns an inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.
  syntax:
    content: public static IntPtr CreateAggregatedObject<T> (IntPtr pOuter, T o);
    parameters:
    - id: pOuter
      type: System.IntPtr
      description: The outer [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer.
    - id: o
      type: T
      description: The managed object to aggregate.
    typeParameters:
    - id: T
      description: The type of the managed object to aggregate.
    return:
      type: System.IntPtr
      description: The inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.
  overload: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>o</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)
  id: CreateWrapperOfType(System.Object,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: CreateWrapperOfType(Object, Type)
  nameWithType: Marshal.CreateWrapperOfType(Object, Type)
  fullName: Marshal.CreateWrapperOfType(Object, Type)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Wraps the specified COM object in an object of the specified type.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%2A> converts one COM class type, typically the generic `__ComObject` type, to another COM class type. The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).  \n  \n Both the `t` and `o` parameters must be classes whose signatures are attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName>. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.  \n  \n Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \"Class\". For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`. Since `t` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the coclass interface.  \n  \n> [!NOTE]\n>  You lose the identity of the input COM object because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW."
  syntax:
    content: public static object CreateWrapperOfType (object o, Type t);
    parameters:
    - id: o
      type: System.Object
      description: The object to be wrapped.
    - id: t
      type: System.Type
      description: The type of wrapper to create.
    return:
      type: System.Object
      description: The newly wrapped object that is an instance of the desired type.
  overload: System.Runtime.InteropServices.Marshal.CreateWrapperOfType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>t</code> must derive from `__ComObject`.  \n  \n -or-  \n  \n <code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>t</code> parameter is `null`.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>o</code> cannot be converted to the destination type because it does not support all required interfaces.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)
  commentId: M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)
  id: CreateWrapperOfType``2(``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: CreateWrapperOfType<T,TWrapper>(T)
  nameWithType: Marshal.CreateWrapperOfType<T,TWrapper>(T)
  fullName: Marshal.CreateWrapperOfType<T,TWrapper>(T)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Wraps the specified COM object in an object of the specified type."
  remarks: "<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%60%602%28%60%600%29> converts a COM object of type `T` to the `TWrapper` COM class type. The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).  \n  \n Both the `T` generic type parameter and the `o` parameter must be classes whose signatures are attributed with the <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> attribute. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.  \n  \n Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \"Class\". For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`. Because`T` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the `coclass` interface.  \n  \n> [!NOTE]\n>  You lose the identity of the input COM object, because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW."
  syntax:
    content: public static TWrapper CreateWrapperOfType<T,TWrapper> (T o);
    parameters:
    - id: o
      type: T
      description: The object to be wrapped.
    typeParameters:
    - id: T
      description: The type of object to wrap.
    - id: TWrapper
      description: The type of object to return.
    return:
      type: TWrapper
      description: The newly wrapped object.
  overload: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>T</code> must derive from `__ComObject`.  \n  \n -or-  \n  \n <code>T</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>o</code> cannot be converted to the <code>TWrapper</code> because it does not support all required interfaces.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
  id: DestroyStructure(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: DestroyStructure(IntPtr, Type)
  nameWithType: Marshal.DestroyStructure(IntPtr, Type)
  fullName: Marshal.DestroyStructure(IntPtr, Type)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Frees all substructures that the specified unmanaged memory block points to.
  remarks: "You can use this method to free reference-type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value-type structures that contain value-type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.  \n  \n <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string.  \n  \n In addition to <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static void DestroyStructure (IntPtr ptr, Type structuretype);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: A pointer to an unmanaged block of memory.
    - id: structuretype
      type: System.Type
      description: Type of a formatted class. This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.DestroyStructure*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>structureType</code> has an automatic layout. Use sequential or explicit instead.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)
  id: DestroyStructure``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: DestroyStructure<T>(IntPtr)
  nameWithType: Marshal.DestroyStructure<T>(IntPtr)
  fullName: Marshal.DestroyStructure<T>(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Frees all substructures of a specified type that the specified unmanaged memory block points to."
  remarks: "You can use this method to free reference type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value type structures that contain value type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.  \n  \n <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string."
  syntax:
    content: public static void DestroyStructure<T> (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: A pointer to an unmanaged block of memory.
    typeParameters:
    - id: T
      description: The type of the formatted structure. This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.DestroyStructure``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>T</code> has an automatic layout. Use sequential or explicit instead.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
  id: FinalReleaseComObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: FinalReleaseComObject(Object)
  nameWithType: Marshal.FinalReleaseComObject(Object)
  fullName: Marshal.FinalReleaseComObject(Object)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Releases all references to a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) by setting its reference count to 0.
  remarks: "The <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method releases the managed reference to a COM object. Calling this method is equivalent to calling the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until it returns 0 (zero).  \n  \n When the reference count on the COM object becomes 0, the COM object is usually freed, although this depends on the COM object's implementation and is beyond the control of the runtime. However, the RCW can still exist, waiting to be garbage-collected.  \n  \n The COM object cannot be used after it has been separated from its underlying RCW. If you try to call a method on the RCW after its reference count becomes 0, a <xref:System.Runtime.InteropServices.InvalidComObjectException> will be thrown."
  syntax:
    content: public static int FinalReleaseComObject (object o);
    parameters:
    - id: o
      type: System.Object
      description: The RCW to be released.
    return:
      type: System.Int32
      description: The new value of the reference count of the RCW associated with the <code>o</code> parameter, which is 0 (zero) if the release is successful.
  overload: System.Runtime.InteropServices.Marshal.FinalReleaseComObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>o</code> is not a valid COM object.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>o</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
  id: FreeBSTR(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: FreeBSTR(IntPtr)
  nameWithType: Marshal.FreeBSTR(IntPtr)
  fullName: Marshal.FreeBSTR(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Frees a `BSTR` using the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) function.
  remarks: 'Like <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=fullName>, you can use this method to deallocate memory. <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) function, which frees memory allocated by any of the following unmanaged methods: `SysAllocString`, `SysAllocStringByteLen`, `SysAllocStringLen`, `SysReAllocString`, `SysReAllocStringLen`. You can call unmanaged methods such as these with platform invoke. For details, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).'
  syntax:
    content: public static void FreeBSTR (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address of the BSTR to be freed.
  overload: System.Runtime.InteropServices.Marshal.FreeBSTR*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  id: FreeCoTaskMem(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: FreeCoTaskMem(IntPtr)
  nameWithType: Marshal.FreeCoTaskMem(IntPtr)
  fullName: Marshal.FreeCoTaskMem(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Frees a block of memory allocated by the unmanaged COM task memory allocator.
  remarks: "You can use <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> to free any memory allocated by <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A>, or any equivalent unmanaged method. If the `ptr` parameter is `null`, the method does nothing.  \n  \n <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> exposes the COM [CoTaskMemFree](http://go.microsoft.com/fwlink/?LinkId=148638) function, which frees all bytes so that you can no longer use the memory that the `ptr` parameter points to.  \n  \n In addition to <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>."
  syntax:
    content: public static void FreeCoTaskMem (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address of the memory to be freed.
  overload: System.Runtime.InteropServices.Marshal.FreeCoTaskMem*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  id: FreeHGlobal(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: FreeHGlobal(IntPtr)
  nameWithType: Marshal.FreeHGlobal(IntPtr)
  fullName: Marshal.FreeHGlobal(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Frees memory previously allocated from the unmanaged memory of the process.
  remarks: "You can use <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> to free any memory from the global heap allocated by <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A>, or any equivalent unmanaged API method. If the `hglobal` parameter is <xref:System.IntPtr.Zero?displayProperty=fullName> the method does nothing.  \n  \n <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> exposes the [LocalFree](http://go.microsoft.com/fwlink/?LinkId=148640) function from Kernel32.DLL, which frees all bytes so that you can no longer use the memory pointed to by `hglobal`.  \n  \n In addition to <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation API methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>."
  example:
  - "The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> method. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cpp[Marshal#4](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#4)]\n [!code-csharp[Marshal#4](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#4)]\n [!code-vb[Marshal#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#4)]  \n  \n The following example demonstrates how to convert the contents of a managed <xref:System.String> class to unmanaged memory and then dispose of the unmanaged memory when done.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/CPP/stringtohglobalansi.cpp#1)]\n [!code-csharp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/cs/stringtohglobalansi.cs#1)]"
  syntax:
    content: public static void FreeHGlobal (IntPtr hglobal);
    parameters:
    - id: hglobal
      type: System.IntPtr
      description: The handle returned by the original matching call to <xref href="System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)"></xref>.
  overload: System.Runtime.InteropServices.Marshal.FreeHGlobal*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)
  id: GenerateGuidForType(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GenerateGuidForType(Type)
  nameWithType: Marshal.GenerateGuidForType(Type)
  fullName: Marshal.GenerateGuidForType(Type)
  type: Method
  assemblies:
  - mscorlib
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).
  remarks: If the type has a GUID in the metadata, it is returned. Otherwise, a GUID is automatically generated. You can use this method to programmatically determine the COM GUID for any managed type, including COM-invisible types. Class interfaces are the only exception because they do not correspond to a managed type. <xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A> provides the same functionality as the <xref:System.Type.GUID%2A?displayProperty=fullName> property.
  syntax:
    content: public static Guid GenerateGuidForType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type to generate a GUID for.
    return:
      type: System.Guid
      description: An identifier for the specified type.
  overload: System.Runtime.InteropServices.Marshal.GenerateGuidForType*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)
  id: GenerateProgIdForType(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GenerateProgIdForType(Type)
  nameWithType: Marshal.GenerateProgIdForType(Type)
  fullName: Marshal.GenerateProgIdForType(Type)
  type: Method
  assemblies:
  - mscorlib
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Returns a programmatic identifier (ProgID) for the specified type.
  remarks: If the type has a ProgID in the metadata, that ProgID is returned. Otherwise, a ProgID is generated based on the fully qualified name of the type.
  syntax:
    content: public static string GenerateProgIdForType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type to get a ProgID for.
    return:
      type: System.String
      description: The ProgID of the specified type.
  overload: System.Runtime.InteropServices.Marshal.GenerateProgIdForType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>type</code> parameter is not a class that can be create by COM. The class must be public, have a public default constructor, and be COM visible.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>type</code> parameter is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)
  id: GetActiveObject(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetActiveObject(String)
  nameWithType: Marshal.GetActiveObject(String)
  fullName: Marshal.GetActiveObject(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Obtains a running instance of the specified object from the running object table (ROT).
  remarks: "<xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> exposes the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx) function from OLEAUT32.DLL; however, the latter expects a class identifier (CLSID) instead of the programmatic identifier (`ProgID`) expected by this method. To obtain a running instance of a COM object without a registered `ProgID`, use platform invoke to define the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx) function. For a description of platform invoke, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).  \n  \n## ProgID and CLSID  \n Keys in the HKEY_CLASSES_ROOT subtree of the registry contain a variety of subkey types. Most of the subkeys are ProgIDs, which map a user-friendly string to a CLSID. Applications often use these human-readable strings instead of the numeric CLSIDs. Often, a component has a version-independent ProgID that is mapped to the latest version of the component that is installed on the system.  \n  \n Applications and components primarily use ProgIDs to retrieve their corresponding CLSIDs."
  example:
  - "The following example was run on a computer that was configured with a running instance of Microsoft Word. There were no instances of Microsoft Excel running.  \n  \n The example calls <xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> twice. The first call tries to retrieve a reference to an instance of Microsoft Word (an instance of the `Word.Application` object). The second call tries to retrieve a reference to an instance of Microsoft Excel (an instance of an `Excel.Application` object).  \n  \n The code retrieves a reference to an instance of Microsoft Word successfully. However, because Microsoft Excel is not running, the attempt to retrieve the second object raises a <xref:System.Runtime.InteropServices.COMException>.  \n  \n [!code-csharp[System.Runtime.InteropServices.Marshal.GetActiveObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.marshal.getactiveobject/cs/marshal.getactiveobject.cs#1)]\n [!code-vb[System.Runtime.InteropServices.Marshal.GetActiveObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.marshal.getactiveobject/vb/marshal.getactiveobject.vb#1)]"
  syntax:
    content: public static object GetActiveObject (string progID);
    parameters:
    - id: progID
      type: System.String
      description: The programmatic identifier (ProgID) of the object that was requested.
    return:
      type: System.Object
      description: The object that was requested; otherwise `null`. You can cast this object to any COM interface that it supports.
  overload: System.Runtime.InteropServices.Marshal.GetActiveObject*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: The object was not found.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  id: GetComInterfaceForObject(System.Object,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetComInterfaceForObject(Object, Type)
  nameWithType: Marshal.GetComInterfaceForObject(Object, Type)
  fullName: Marshal.GetComInterfaceForObject(Object, Type)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.
  remarks: "This method returns an interface pointer that represents the requested interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.  \n  \n <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Although less common, you can use this method on a managed object to obtain a pointer to the object's COM callable wrapper. For example, you can use <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>. You cannot obtain a pointer to a class interface since a class interface lacks the corresponding type to pass to the second parameter (`t`). Instead, use <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to invoke the members on the default interface of the COM callable wrapper, which is usually an auto-dispatch class interface.  \n  \n The <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.  \n  \n For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics."
  syntax:
    content: public static IntPtr GetComInterfaceForObject (object o, Type T);
    parameters:
    - id: o
      type: System.Object
      description: The object that provides the interface.
    - id: T
      type: System.Type
      description: The type of interface that is requested.
    return:
      type: System.IntPtr
      description: The interface pointer that represents the specified interface for the object.
  overload: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>T</code> parameter is not an interface.  \n  \n -or-  \n  \n The type is not visible to COM.  \n  \n -or-  \n  \n The <code>T</code> parameter is a generic type."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: The <code>o</code> parameter does not support the requested interface.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>o</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>T</code> parameter is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
  id: GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)
  nameWithType: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)
  fullName: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.
  remarks: <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29>lets you specify whether to apply query interface customization. Use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> overload to apply query interface customization by default.
  syntax:
    content: public static IntPtr GetComInterfaceForObject (object o, Type T, System.Runtime.InteropServices.CustomQueryInterfaceMode mode);
    parameters:
    - id: o
      type: System.Object
      description: The object that provides the interface.
    - id: T
      type: System.Type
      description: The type of interface that is requested.
    - id: mode
      type: System.Runtime.InteropServices.CustomQueryInterfaceMode
      description: One of the enumeration values that indicates whether to apply an `IUnknown::QueryInterface` customization that is supplied by an <xref href="System.Runtime.InteropServices.ICustomQueryInterface"></xref>.
    return:
      type: System.IntPtr
      description: The interface pointer that represents the interface for the object.
  overload: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>T</code> parameter is not an interface.  \n  \n -or-  \n  \n The type is not visible to COM.  \n  \n -or-  \n  \n The <code>T</code> parameter is a generic type."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: The object <code>o</code> does not support the requested interface.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>o</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>T</code> parameter is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)
  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)
  id: GetComInterfaceForObject``2(``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetComInterfaceForObject<T,TInterface>(T)
  nameWithType: Marshal.GetComInterfaceForObject<T,TInterface>(T)
  fullName: Marshal.GetComInterfaceForObject<T,TInterface>(T)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default."
  remarks: "This method returns an interface pointer that represents the `TInterface` interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use the <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>method to decrement the reference count when you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.  \n  \n <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. You can also use this method on a managed object to obtain a pointer to the object's COM callable wrapper, although this is less common. For example, you can use<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>.  \n  \n The<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.  \n  \n For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics."
  syntax:
    content: public static IntPtr GetComInterfaceForObject<T,TInterface> (T o);
    parameters:
    - id: o
      type: T
      description: The object that provides the interface.
    typeParameters:
    - id: T
      description: The type of <code>o</code>.
    - id: TInterface
      description: The type of interface to return.
    return:
      type: System.IntPtr
      description: The interface pointer that represents the <code>TInterface</code> interface.
  overload: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>TInterface</code> parameter is not an interface.  \n  \n -or-  \n  \n The type is not visible to COM.  \n  \n -or-  \n  \n The <code>T</code> parameter is an open generic type."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: The <code>o</code> parameter does not support the <code>TInterface</code> interface.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>o</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)
  id: GetComInterfaceForObjectInContext(System.Object,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetComInterfaceForObjectInContext(Object, Type)
  nameWithType: Marshal.GetComInterfaceForObjectInContext(Object, Type)
  fullName: Marshal.GetComInterfaceForObjectInContext(Object, Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Returns an interface pointer that represents the specified interface for an object, if the caller is in the same context as that object.
  remarks: This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A> except that it returns `null` if the caller is not in the same context as the object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.
  syntax:
    content: public static IntPtr GetComInterfaceForObjectInContext (object o, Type t);
    parameters:
    - id: o
      type: System.Object
      description: The object that provides the interface.
    - id: t
      type: System.Type
      description: The type of interface that is requested.
    return:
      type: System.IntPtr
      description: The interface pointer specified by <code>t</code> that represents the interface for the specified object, or `null` if the caller is not in the same context as the object.
  overload: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>t</code> is not an interface.  \n  \n -or-  \n  \n The type is not visible to COM."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>o</code> does not support the requested interface.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>o</code> is `null`.  \n  \n -or-  \n  \n <code>t</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)
  id: GetComObjectData(System.Object,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetComObjectData(Object, Object)
  nameWithType: Marshal.GetComObjectData(Object, Object)
  fullName: Marshal.GetComObjectData(Object, Object)
  type: Method
  assemblies:
  - mscorlib
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Retrieves data that is referenced by the specified key from the specified COM object.
  remarks: All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) have an associated hash table, which <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A> retrieves. <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A?displayProperty=fullName> adds data to the hash table. You should never have to call either method from your code.
  syntax:
    content: public static object GetComObjectData (object obj, object key);
    parameters:
    - id: obj
      type: System.Object
      description: The COM object that contains the data that you want.
    - id: key
      type: System.Object
      description: The key in the internal hash table of <code>obj</code> to retrieve the data from.
    return:
      type: System.Object
      description: The data represented by the <code>key</code> parameter in the internal hash table of the <code>obj</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.GetComObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>obj</code> is `null`.  \n  \n -or-  \n  \n <code>key</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>obj</code> is not a COM object.  \n  \n -or-  \n  \n <code>obj</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)
  commentId: M:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)
  id: GetComSlotForMethodInfo(System.Reflection.MemberInfo)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetComSlotForMethodInfo(MemberInfo)
  nameWithType: Marshal.GetComSlotForMethodInfo(MemberInfo)
  fullName: Marshal.GetComSlotForMethodInfo(MemberInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the virtual function table (v-table or VTBL) slot for a specified <xref href="System.Reflection.MemberInfo"></xref> type when that type is exposed to COM.
  remarks: "The zero-based slot number returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7. <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName>.  \n  \n You can use this method to retrieve slot numbers for members of interfaces that are not visible from COM and for members of private interfaces. The slot numbers returned correspond to the v-table numbers that would be reserved if the type was exposed to COM. COM-invisible members actually occupy a slot in an exposed v-table, even though the COM client cannot use the slot. You cannot use <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> on a class interface by passing <xref:System.Reflection.MemberInfo> from a class. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024)."
  syntax:
    content: public static int GetComSlotForMethodInfo (System.Reflection.MemberInfo m);
    parameters:
    - id: m
      type: System.Reflection.MemberInfo
      description: An object that represents an interface method.
    return:
      type: System.Int32
      description: The VTBL slot <code>m</code> identifier when it is exposed to COM.
  overload: System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>m</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>m</code> parameter is not a <xref href=\"System.Reflection.MemberInfo\"></xref> object.  \n  \n -or-  \n  \n The <code>m</code> parameter is not an interface method."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)
  id: GetDelegateForFunctionPointer(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetDelegateForFunctionPointer(IntPtr, Type)
  nameWithType: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)
  fullName: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Converts an unmanaged function pointer to a delegate.
  remarks: "In versions 1.0 and 1.1 of the .NET Framework, it was possible to pass a delegate representing a managed method to unmanaged code as a function pointer, allowing the unmanaged code to call the managed method through the function pointer. It was also possible for the unmanaged code to pass that function pointer back to the managed code, and the pointer was resolved properly to the underlying managed method.  \n  \n In the .NET Framework 2.0 and later versions, you can use the <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> and <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> methods to marshal delegates in both directions. With <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>, `ptr` is imported as a <xref:System.IntPtr?displayProperty=fullName>. A <xref:System.IntPtr?displayProperty=fullName> can be obtained for a managed delegate by calling <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> and passed as a parameter; it can then be called from inside the unmanaged method. Note that the parameter marshaler can also marshal function pointers to delegates in the .NET Framework 2.0 and later versions.  \n  \n The <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> method has the following restrictions:  \n  \n-   Generics are not supported in interop scenarios.  \n  \n-   You cannot pass an invalid function pointer to this method.  \n  \n-   You can use this method only for pure unmanaged function pointers.  \n  \n-   You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.  \n  \n-   You cannot use this method to create a delegate from a function pointer to another managed delegate."
  syntax:
    content: public static Delegate GetDelegateForFunctionPointer (IntPtr ptr, Type t);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The unmanaged function pointer to be converted.
    - id: t
      type: System.Type
      description: The type of the delegate to be returned.
    return:
      type: System.Delegate
      description: A delegate instance that can be cast to the appropriate delegate type.
  overload: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>t</code> parameter is not a delegate or is generic.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>ptr</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>t</code> parameter is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)
  id: GetDelegateForFunctionPointer``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetDelegateForFunctionPointer<TDelegate>(IntPtr)
  nameWithType: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)
  fullName: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts an unmanaged function pointer to a delegate of a specified type."
  remarks: "You can use the<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> and<xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%60%601%28%60%600%29>methods to marshal delegates in both directions.  \n  \n The<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> method has the following restrictions:  \n  \n-   You cannot pass an invalid function pointer to this method.  \n  \n-   You can use this method only for pure unmanaged function pointers.  \n  \n-   You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.  \n  \n-   You cannot use this method to create a delegate from a function pointer to another managed delegate."
  syntax:
    content: public static TDelegate GetDelegateForFunctionPointer<TDelegate> (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The unmanaged function pointer to convert.
    typeParameters:
    - id: TDelegate
      description: The type of the delegate to return.
    return:
      type: TDelegate
      description: A instance of the specified delegate type.
  overload: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>TDelegate</code> generic parameter is not a delegate, or it is an open generic type.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>ptr</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)
  id: GetEndComSlot(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetEndComSlot(Type)
  nameWithType: Marshal.GetEndComSlot(Type)
  fullName: Marshal.GetEndComSlot(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.
  remarks: This method returns the zero-based, v-table number for an interface or a class. When used on a class, the slot number returned refers to the class interface for the class. If the class interface is auto-dual, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).
  syntax:
    content: public static int GetEndComSlot (Type t);
    parameters:
    - id: t
      type: System.Type
      description: A type that represents an interface or class.
    return:
      type: System.Int32
      description: The last VTBL slot of the interface when exposed to COM. If the <code>t</code> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.
  overload: System.Runtime.InteropServices.Marshal.GetEndComSlot*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetExceptionCode
  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionCode
  id: GetExceptionCode
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetExceptionCode()
  nameWithType: Marshal.GetExceptionCode()
  fullName: Marshal.GetExceptionCode()
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Retrieves a code that identifies the type of the exception that occurred.
  remarks: <xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A> is exposed for compiler support of structured exception handling (SEH) only. If this method is called before an exception is thrown, it returns 0x0.
  syntax:
    content: public static int GetExceptionCode ();
    parameters: []
    return:
      type: System.Int32
      description: The type of the exception.
  overload: System.Runtime.InteropServices.Marshal.GetExceptionCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)
  id: GetExceptionForHR(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetExceptionForHR(Int32)
  nameWithType: Marshal.GetExceptionForHR(Int32)
  fullName: Marshal.GetExceptionForHR(Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Converts the specified HRESULT error code to a corresponding <xref href="System.Exception"></xref> object.
  remarks: "Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception.  \n  \n The current [IErrorInfo](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface is used to construct the exception.  \n  \n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)."
  syntax:
    content: public static Exception GetExceptionForHR (int errorCode);
    parameters:
    - id: errorCode
      type: System.Int32
      description: The HRESULT to be converted.
    return:
      type: System.Exception
      description: An object that represents the converted HRESULT.
  overload: System.Runtime.InteropServices.Marshal.GetExceptionForHR*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)
  id: GetExceptionForHR(System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetExceptionForHR(Int32, IntPtr)
  nameWithType: Marshal.GetExceptionForHR(Int32, IntPtr)
  fullName: Marshal.GetExceptionForHR(Int32, IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Converts the specified HRESULT error code to a corresponding <xref href="System.Exception"></xref> object, with additional error information passed in an [IErrorInfo](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface for the exception object.
  remarks: "Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception (thus avoiding the corresponding performance overhead). The `errorInfo` parameter supplies additional information about the error, such as its textual description and the globally unique identifier (GUID) for the interface that defined the error.  \n  \n Use this method overload if you have custom error information that you have to supply in the conversion.  \n  \n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)."
  syntax:
    content: public static Exception GetExceptionForHR (int errorCode, IntPtr errorInfo);
    parameters:
    - id: errorCode
      type: System.Int32
      description: The HRESULT to be converted.
    - id: errorInfo
      type: System.IntPtr
      description: A pointer to the `IErrorInfo` interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current `IErrorInfo` interface, or <code>IntPtr(-1)</code> to ignore the current `IErrorInfo` interface and construct the exception just from the error code.
    return:
      type: System.Exception
      description: An object that represents the converted HRESULT and information obtained from <code>errorInfo</code>.
  overload: System.Runtime.InteropServices.Marshal.GetExceptionForHR*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetExceptionPointers
  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionPointers
  id: GetExceptionPointers
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetExceptionPointers()
  nameWithType: Marshal.GetExceptionPointers()
  fullName: Marshal.GetExceptionPointers()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.
  remarks: <xref:System.Runtime.InteropServices.Marshal.GetExceptionPointers%2A> is exposed for compiler support of structured exception handling (SEH) only.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static IntPtr GetExceptionPointers ();
    parameters: []
    return:
      type: System.IntPtr
      description: A pointer to an [EXCEPTION_POINTERS](http://go.microsoft.com/fwlink/?LinkId=148648) structure.
  overload: System.Runtime.InteropServices.Marshal.GetExceptionPointers*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)
  commentId: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)
  id: GetFunctionPointerForDelegate(System.Delegate)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetFunctionPointerForDelegate(Delegate)
  nameWithType: Marshal.GetFunctionPointerForDelegate(Delegate)
  fullName: Marshal.GetFunctionPointerForDelegate(Delegate)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Converts a delegate into a function pointer that is callable from unmanaged code.
  remarks: "The delegate `d` is converted to a function pointer that can be passed to unmanaged code using the [__stdcall](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention.  \n  \n You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code."
  syntax:
    content: public static IntPtr GetFunctionPointerForDelegate (Delegate d);
    parameters:
    - id: d
      type: System.Delegate
      description: The delegate to be passed to unmanaged code.
    return:
      type: System.IntPtr
      description: A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.
  overload: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>d</code> parameter is a generic type.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>d</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)
  commentId: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)
  id: GetFunctionPointerForDelegate``1(``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetFunctionPointerForDelegate<TDelegate>(TDelegate)
  nameWithType: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)
  fullName: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts a delegate of a specified type to a function pointer that is callable from unmanaged code."
  remarks: "The delegate `d` is converted to a function pointer that can be passed to unmanaged code by using the [__stdcall](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention.  \n  \n You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code."
  syntax:
    content: public static IntPtr GetFunctionPointerForDelegate<TDelegate> (TDelegate d);
    parameters:
    - id: d
      type: TDelegate
      description: The delegate to be passed to unmanaged code.
    typeParameters:
    - id: TDelegate
      description: The type of delegate to convert.
    return:
      type: System.IntPtr
      description: A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.
  overload: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>d</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)
  commentId: M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)
  id: GetHINSTANCE(System.Reflection.Module)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetHINSTANCE(Module)
  nameWithType: Marshal.GetHINSTANCE(Module)
  fullName: Marshal.GetHINSTANCE(Module)
  type: Method
  assemblies:
  - mscorlib
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Returns the instance handle (HINSTANCE) for the specified module.
  remarks: When dynamic or in-memory, modules do not have an HINSTANCE.
  syntax:
    content: public static IntPtr GetHINSTANCE (System.Reflection.Module m);
    parameters:
    - id: m
      type: System.Reflection.Module
      description: The module whose HINSTANCE is desired.
    return:
      type: System.IntPtr
      description: The HINSTANCE for <code>m</code>; or -1 if the module does not have an HINSTANCE.
  overload: System.Runtime.InteropServices.Marshal.GetHINSTANCE*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>m</code> parameter is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)
  commentId: M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)
  id: GetHRForException(System.Exception)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetHRForException(Exception)
  nameWithType: Marshal.GetHRForException(Exception)
  fullName: Marshal.GetHRForException(Exception)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Converts the specified exception to an HRESULT.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> also sets up an [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface for the exception that can be obtained by calling the COM GetErrorInfoNEEDGUID function. You can use this function to return an HRESULT value on a managed class implementation of a COM interface where you apply the <xref:System.Runtime.InteropServices.PreserveSigAttribute> attribute. Have the attributed method catch all exceptions and use the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method to return the appropriate HRESULT value. Allowing an exception to propagate outside the method produces incorrect behavior. (In fact, the common language runtime fails to pass an exception to a COM client that calls such a method through a v-table.)  \n  \n Note that the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method sets the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread. This can cause unexpected results for methods like the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> methods that default to using the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) of the current thread if it is set."
  syntax:
    content: public static int GetHRForException (Exception e);
    parameters:
    - id: e
      type: System.Exception
      description: The exception to convert to an HRESULT.
    return:
      type: System.Int32
      description: The HRESULT mapped to the supplied exception.
  overload: System.Runtime.InteropServices.Marshal.GetHRForException*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error
  commentId: M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error
  id: GetHRForLastWin32Error
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetHRForLastWin32Error()
  nameWithType: Marshal.GetHRForLastWin32Error()
  fullName: Marshal.GetHRForLastWin32Error()
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <xref href="System.Runtime.InteropServices.Marshal"></xref>.
  remarks: 'The target function must have had the `setLastError` metadata flag set. For example, the `SetLastError` field of the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> must be `true`. The process for setting this flag depends on the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`.'
  example:
  - "The following example demonstrates how to retrieve an HRESULT corresponding to a Win32 error code using the <xref:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error%2A> method.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.GetHRForLastWin32Error#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetHRForLastWin32Error/cs/example.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.GetHRForLastWin32Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetHRForLastWin32Error/vb/example.vb#1)]"
  syntax:
    content: public static int GetHRForLastWin32Error ();
    parameters: []
    return:
      type: System.Int32
      description: The HRESULT corresponding to the last Win32 error code.
  overload: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
  id: GetIDispatchForObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetIDispatchForObject(Object)
  nameWithType: Marshal.GetIDispatchForObject(Object)
  fullName: Marshal.GetIDispatchForObject(Object)
  type: Method
  assemblies:
  - mscorlib
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Returns an [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface from a managed object.
  remarks: "In managed code, you seldom work directly with the `IDispatch` interface. However, <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer.  \n  \n You can also use this method on a managed object to obtain an interface pointer to the COM callable wrapper for the object. For additional information, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md)."
  syntax:
    content: public static IntPtr GetIDispatchForObject (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object whose `IDispatch` interface is requested.
    return:
      type: System.IntPtr
      description: The `IDispatch` pointer for the <code>o</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.GetIDispatchForObject*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>o</code> does not support the requested interface.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)
  id: GetIDispatchForObjectInContext(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetIDispatchForObjectInContext(Object)
  nameWithType: Marshal.GetIDispatchForObjectInContext(Object)
  fullName: Marshal.GetIDispatchForObjectInContext(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Returns an [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface pointer from a managed object, if the caller is in the same context as that object.
  remarks: This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> except that it returns `null` if the caller is not in the same context as the object.
  syntax:
    content: public static IntPtr GetIDispatchForObjectInContext (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object whose `IDispatch` interface is requested.
    return:
      type: System.IntPtr
      description: The `IDispatch` interface pointer for the specified object, or `null` if the caller is not in the same context as the specified object.
  overload: System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>o</code> does not support the requested interface.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>o</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)
  id: GetITypeInfoForType(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetITypeInfoForType(Type)
  nameWithType: Marshal.GetITypeInfoForType(Type)
  fullName: Marshal.GetITypeInfoForType(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Returns a <xref href="System.Runtime.InteropServices.ComTypes.ITypeInfo"></xref> interface from a managed type.
  remarks: This method returns a pointer to an `ITypeInfo` implementation that is based on the original type. Calling an object with <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler.
  example:
  - "The following example demonstrates how to retrieve a pointer to the `ITypeInfo` interface for a type using the <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> method.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.GetITypeInfoForType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetITypeInfoForType/cs/example.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.GetITypeInfoForType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetITypeInfoForType/vb/example.vb#1)]"
  syntax:
    content: public static IntPtr GetITypeInfoForType (Type t);
    parameters:
    - id: t
      type: System.Type
      description: The type whose `ITypeInfo` interface is being requested.
    return:
      type: System.IntPtr
      description: A pointer to the `ITypeInfo` interface for the <code>t</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.GetITypeInfoForType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>t</code> is not a visible type to COM.  \n  \n -or-  \n  \n <code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type."
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: A type library is registered for the assembly that contains the type, but the type definition cannot be found.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  id: GetIUnknownForObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetIUnknownForObject(Object)
  nameWithType: Marshal.GetIUnknownForObject(Object)
  fullName: Marshal.GetIUnknownForObject(Object)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface from a managed object.
  remarks: "In managed code, you seldom work directly with the `IUnknown` interface. However, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A?displayProperty=fullName> method.  \n  \n You can also use this method on a managed object to obtain an interface pointer to the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) for the object."
  example:
  - "The following example demonstrates how to retrieve an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface for a managed object using the <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> method.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/cs/example.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/vb/example.vb#1)]"
  syntax:
    content: public static IntPtr GetIUnknownForObject (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object whose `IUnknown` interface is requested.
    return:
      type: System.IntPtr
      description: The `IUnknown` pointer for the <code>o</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.GetIUnknownForObject*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)
  id: GetIUnknownForObjectInContext(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetIUnknownForObjectInContext(Object)
  nameWithType: Marshal.GetIUnknownForObjectInContext(Object)
  fullName: Marshal.GetIUnknownForObjectInContext(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Returns an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface from a managed object, if the caller is in the same context as that object.
  remarks: This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> except that it returns `null` if the caller is not in the same context as the object.
  example:
  - "The following example demonstrates how to retrieve an `IUnknown` interface for a managed object using the <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext%2A> method.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release/cs/example.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release/vb/example.vb#1)]"
  syntax:
    content: public static IntPtr GetIUnknownForObjectInContext (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object whose `IUnknown` interface is requested.
    return:
      type: System.IntPtr
      description: The `IUnknown` pointer for the specified object, or `null` if the caller is not in the same context as the specified object.
  overload: System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetLastWin32Error
  commentId: M:System.Runtime.InteropServices.Marshal.GetLastWin32Error
  id: GetLastWin32Error
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetLastWin32Error()
  nameWithType: Marshal.GetLastWin32Error()
  fullName: Marshal.GetLastWin32Error()
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <xref href="System.Runtime.InteropServices.DllImportAttribute.SetLastError"></xref> flag set.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> exposes the Win32 [GetLastError](http://go.microsoft.com/fwlink/?LinkId=148657) function from Kernel32.DLL. This method exists because it is not safe to make a direct platform invoke call to `GetLastError` to obtain this information. If you want to access this error code, you must call <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> instead of writing your own platform invoke definition for `GetLastError` and calling it. The common language runtime can make internal calls to APIs that overwrite the `GetLastError` maintained by the operating system.  \n  \n You can use this method to obtain error codes only if you apply the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> to the method signature and set the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field to`true`. The process for this varies depending upon the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`."
  example:
  - "The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>method. The example first demonstrates calling the method with no error present and then demonstrates calling the method with an error present.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.GetLastWin32Error#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetLastWin32Error/cs/example.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.GetLastWin32Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetLastWin32Error/vb/example.vb#1)]"
  syntax:
    content: public static int GetLastWin32Error ();
    parameters: []
    return:
      type: System.Int32
      description: The last error code set by a call to the Win32 [SetLastError](http://go.microsoft.com/fwlink/?LinkId=148656) function.
  overload: System.Runtime.InteropServices.Marshal.GetLastWin32Error*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  id: GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)
  nameWithType: Marshal.GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)
  fullName: Marshal.GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Gets a pointer to a runtime-generated function that marshals a call from managed to unmanaged code.
  remarks: <xref:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr%2A> is exposed for compiler support only.
  syntax:
    content: >-
      [System.Obsolete("This method has been deprecated")]

      public static IntPtr GetManagedThunkForUnmanagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);
    parameters:
    - id: pfnMethodToWrap
      type: System.IntPtr
      description: A pointer to the method to marshal.
    - id: pbSignature
      type: System.IntPtr
      description: A pointer to the method signature.
    - id: cbSignature
      type: System.Int32
      description: The number of bytes in <code>pbSignature</code>.
    return:
      type: System.IntPtr
      description: A pointer to the function that will marshal a call from the <code>pfnMethodToWrap</code> parameter to unmanaged code.
  overload: System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)
  commentId: M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)
  id: GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetMethodInfoForComSlot(Type, Int32, ComMemberType)
  nameWithType: Marshal.GetMethodInfoForComSlot(Type, Int32, ComMemberType)
  fullName: Marshal.GetMethodInfoForComSlot(Type, Int32, ComMemberType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves a <xref href="System.Reflection.MemberInfo"></xref> object for the specified virtual function table (v-table or VTBL) slot.
  remarks: "The return value may be a <xref:System.Reflection.FieldInfo>, <xref:System.Reflection.MethodInfo>, or <xref:System.Reflection.PropertyInfo> object. The return value depends on the type of managed member that exists in the given COM slot (hence the generalized return type <xref:System.Reflection.MemberInfo> from which all three derive).  \n  \n The zero-based slot number that is returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7. <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A?displayProperty=fullName>. You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> to pass slots within a specified range.  \n  \n The `memberType` parameter is important only on return. It contains the type of the COM member (a regular method or a property accessor) that corresponds to the returned <xref:System.Reflection.MemberInfo> object."
  syntax:
    content: public static System.Reflection.MemberInfo GetMethodInfoForComSlot (Type t, int slot, ref System.Runtime.InteropServices.ComMemberType memberType);
    parameters:
    - id: t
      type: System.Type
      description: The type for which the <xref href="System.Reflection.MemberInfo"></xref> is to be retrieved.
    - id: slot
      type: System.Int32
      description: The VTBL slot.
    - id: memberType
      type: System.Runtime.InteropServices.ComMemberType
      description: On successful return, one of the enumeration values that specifies the type of the member.
    return:
      type: System.Reflection.MemberInfo
      description: The object that represents the member at the specified VTBL slot.
  overload: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>t</code> is not visible from COM.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
  id: GetNativeVariantForObject(System.Object,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetNativeVariantForObject(Object, IntPtr)
  nameWithType: Marshal.GetNativeVariantForObject(Object, IntPtr)
  fullName: Marshal.GetNativeVariantForObject(Object, IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Converts an object to a COM VARIANT.
  remarks: The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls the [VariantInit](https://msdn.microsoft.com/library/ms221402\(v=vs.85\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.
  syntax:
    content: public static void GetNativeVariantForObject (object obj, IntPtr pDstNativeVariant);
    parameters:
    - id: obj
      type: System.Object
      description: The object for which to get a COM VARIANT.
    - id: pDstNativeVariant
      type: System.IntPtr
      description: A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>obj</code> parameter is a generic type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)
  id: GetNativeVariantForObject``1(``0,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetNativeVariantForObject<T>(T, IntPtr)
  nameWithType: Marshal.GetNativeVariantForObject<T>(T, IntPtr)
  fullName: Marshal.GetNativeVariantForObject<T>(T, IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts an object of a specified type to a COM VARIANT."
  remarks: The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls [VariantInit](https://msdn.microsoft.com/library/ms221402\(v=vs.85\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.
  syntax:
    content: public static void GetNativeVariantForObject<T> (T obj, IntPtr pDstNativeVariant);
    parameters:
    - id: obj
      type: T
      description: The object for which to get a COM VARIANT.
    - id: pDstNativeVariant
      type: System.IntPtr
      description: A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter.
    typeParameters:
    - id: T
      description: The type of the object to convert.
  overload: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  id: GetObjectForIUnknown(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetObjectForIUnknown(IntPtr)
  nameWithType: Marshal.GetObjectForIUnknown(IntPtr)
  fullName: Marshal.GetObjectForIUnknown(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns an instance of a type that represents a COM object by a pointer to its [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface.
  remarks: "This method wraps `IUnknown` in a managed object. This has the effect of incrementing the reference count of the COM component. The reference count will be decremented when the runtime performs garbage collection on the managed object that represents the COM object.  \n  \n The `pUnk` parameter represents an `IUnknown` interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method. The object returned by <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), which the common language runtime manages as it does any other managed object. The type of this wrapper is often a generic `System.__ComObject` type, which is a hidden type used when the wrapper type is ambiguous. You can still make late-bound calls to such a generic type as long as the COM object implements the [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface. Likewise, you can cast the returned object to an appropriate COM interface.  \n  \n For an object to be wrapped with a specific managed class type (and not a generic wrapper type), you must adhere to the following requirements:  \n  \n-   Implement the [IProvideClassInfo](http://go.microsoft.com/fwlink/?LinkID=148012) interface for the COM object.  \n  \n-   Register the containing assembly with the [Regasm.exe (Assembly Registration Tool)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md).  \n  \n Alternatively, you can avoid these requirements and still get an object that is wrapped with a specific managed class type by using the <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A?displayProperty=fullName> method."
  syntax:
    content: public static object GetObjectForIUnknown (IntPtr pUnk);
    parameters:
    - id: pUnk
      type: System.IntPtr
      description: A pointer to the `IUnknown` interface.
    return:
      type: System.Object
      description: An object that represents the specified unmanaged COM object.
  overload: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)
  id: GetObjectForNativeVariant(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetObjectForNativeVariant(IntPtr)
  nameWithType: Marshal.GetObjectForNativeVariant(IntPtr)
  fullName: Marshal.GetObjectForNativeVariant(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Converts a COM VARIANT to an object.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns a managed object that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.  \n  \n <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A?displayProperty=fullName>.  \n  \n When the VARIANT type is VT_ERROR, <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns an object of type `Int32` instead of `UInt32`."
  syntax:
    content: public static object GetObjectForNativeVariant (IntPtr pSrcNativeVariant);
    parameters:
    - id: pSrcNativeVariant
      type: System.IntPtr
      description: A pointer to a COM VARIANT.
    return:
      type: System.Object
      description: An object that corresponds to the <code>pSrcNativeVariant</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant*
  exceptions:
  - type: System.Runtime.InteropServices.InvalidOleVariantTypeException
    commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException
    description: <code>pSrcNativeVariant</code> is not a valid VARIANT type.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>pSrcNativeVariant</code> has an unsupported type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)
  id: GetObjectForNativeVariant``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetObjectForNativeVariant<T>(IntPtr)
  nameWithType: Marshal.GetObjectForNativeVariant<T>(IntPtr)
  fullName: Marshal.GetObjectForNativeVariant<T>(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts a COM VARIANT to an object of a specified type."
  remarks: "<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> returns a managed object of type `T` that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.  \n  \n <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> provides the opposite functionality of<xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%60%601%28%60%600%2CSystem.IntPtr%29>."
  syntax:
    content: public static T GetObjectForNativeVariant<T> (IntPtr pSrcNativeVariant);
    parameters:
    - id: pSrcNativeVariant
      type: System.IntPtr
      description: A pointer to a COM VARIANT.
    typeParameters:
    - id: T
      description: The type to which to convert the COM VARIANT.
    return:
      type: T
      description: An object of the specified type that corresponds to the <code>pSrcNativeVariant</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1*
  exceptions:
  - type: System.Runtime.InteropServices.InvalidOleVariantTypeException
    commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException
    description: <code>pSrcNativeVariant</code> is not a valid VARIANT type.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>pSrcNativeVariant</code> has an unsupported type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)
  id: GetObjectsForNativeVariants(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetObjectsForNativeVariants(IntPtr, Int32)
  nameWithType: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)
  fullName: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Converts an array of COM [VARIANTs](http://go.microsoft.com/fwlink/?LinkId=148670) to an array of objects.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%2A> returns an array of managed objects that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the `cVars` parameter is 0.  \n  \n The object array (the return value) gets garbage collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore it is your responsibility to free them as appropriate."
  syntax:
    content: public static object[] GetObjectsForNativeVariants (IntPtr aSrcNativeVariant, int cVars);
    parameters:
    - id: aSrcNativeVariant
      type: System.IntPtr
      description: A pointer to the first element of an array of COM VARIANTs.
    - id: cVars
      type: System.Int32
      description: The count of COM VARIANTs in <code>aSrcNativeVariant</code>.
    return:
      type: System.Object[]
      description: An object array that corresponds to <code>aSrcNativeVariant</code>.
  overload: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>cVars</code> is a negative number.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)
  id: GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetObjectsForNativeVariants<T>(IntPtr, Int32)
  nameWithType: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)
  fullName: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts an array of COM VARIANTs to an array of a specified type."
  remarks: "<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%60%601%28System.IntPtr%2CSystem.Int32%29> returns an array of `T` that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the `cVars` parameter is 0.  \n  \n The returned array is garbage-collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore, it is your responsibility to free them as appropriate."
  syntax:
    content: public static T[] GetObjectsForNativeVariants<T> (IntPtr aSrcNativeVariant, int cVars);
    parameters:
    - id: aSrcNativeVariant
      type: System.IntPtr
      description: A pointer to the first element of an array of COM VARIANTs.
    - id: cVars
      type: System.Int32
      description: The count of COM VARIANTs in <code>aSrcNativeVariant</code>.
    typeParameters:
    - id: T
      description: The type of the array to return.
    return:
      type: T[]
      description: An array of <code>T</code> objects that corresponds to <code>aSrcNativeVariant</code>.
  overload: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>cVars</code> is a negative number.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)
  id: GetStartComSlot(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetStartComSlot(Type)
  nameWithType: Marshal.GetStartComSlot(Type)
  fullName: Marshal.GetStartComSlot(Type)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.
  remarks: This method returns the zero-based v-table number for an interface or a class. When used on a class, the slot number that is returned refers to the class interface for the class. If the class interface is auto-dispatch, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).
  syntax:
    content: public static int GetStartComSlot (Type t);
    parameters:
    - id: t
      type: System.Type
      description: A type that represents an interface.
    return:
      type: System.Int32
      description: The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003), and 7 if the interface is based on [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5).
  overload: System.Runtime.InteropServices.Marshal.GetStartComSlot*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>t</code> is not visible from COM.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)
  id: GetThreadFromFiberCookie(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetThreadFromFiberCookie(Int32)
  nameWithType: Marshal.GetThreadFromFiberCookie(Int32)
  fullName: Marshal.GetThreadFromFiberCookie(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Converts a fiber cookie into the corresponding <xref href="System.Threading.Thread"></xref> instance.
  remarks: Fiber cookies are opaque tokens that are used by the host when alerting the common language runtime to its fiber-scheduling decisions. They consist of a stack and register context.
  syntax:
    content: >-
      [System.Obsolete("This method has been deprecated")]

      public static System.Threading.Thread GetThreadFromFiberCookie (int cookie);
    parameters:
    - id: cookie
      type: System.Int32
      description: An integer that represents a fiber cookie.
    return:
      type: System.Threading.Thread
      description: A thread that corresponds to the <code>cookie</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>cookie</code> parameter is 0.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)
  id: GetTypedObjectForIUnknown(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypedObjectForIUnknown(IntPtr, Type)
  nameWithType: Marshal.GetTypedObjectForIUnknown(IntPtr, Type)
  fullName: Marshal.GetTypedObjectForIUnknown(IntPtr, Type)
  type: Method
  assemblies:
  - mscorlib
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Returns a managed object of a specified type that represents a COM object.
  remarks: "The `t` parameter must be either a COM-imported type or a subtype of a COM-imported type. In addition, `t` must be a type whose metadata was imported by the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool. This type must be a class and not an associated coclass interface, which carries the name of the COM class. For example, if Tlbimp.exe imports `Myclass` as a class called `MyclassClass` and as a coclass interface called `Myclass`, you must use `MyclassClass` (not `Myclass`) with this method. For additional information about imported classes and coclass interfaces, see [Imported Type Conversion](http://msdn.microsoft.com/en-us/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3).  \n  \n If an object has already been obtained for the `pUnk` parameter, `t` is ignored and the existing object is returned. `pUnk` represents an[IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method. The object returned by <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW), which the common language runtime manages as it does any other managed object."
  syntax:
    content: public static object GetTypedObjectForIUnknown (IntPtr pUnk, Type t);
    parameters:
    - id: pUnk
      type: System.IntPtr
      description: A pointer to the `IUnknown` interface of the unmanaged object.
    - id: t
      type: System.Type
      description: The type of the requested managed class.
    return:
      type: System.Object
      description: An instance of the class corresponding to the <xref href="System.Type"></xref> object that represents the requested unmanaged COM object.
  overload: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>t</code> is not attributed with <xref href=\"System.Runtime.InteropServices.ComImportAttribute\"></xref>.  \n  \n -or-  \n  \n <code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)
  id: GetTypeForITypeInfo(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeForITypeInfo(IntPtr)
  nameWithType: Marshal.GetTypeForITypeInfo(IntPtr)
  fullName: Marshal.GetTypeForITypeInfo(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Converts an unmanaged [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object into a managed <xref href="System.Type"></xref> object.
  remarks: <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> returns a <xref:System.Type?displayProperty=fullName> instance that is based on the original type. You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool uses the custom marshaler to translate `ITypeInfo` parameters to <xref:System.Type?displayProperty=fullName> parameters. However, if you obtain an `ITypeInfo` interface by some means other than Tlbimp.exe, you can use <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> to manually perform the same translation.
  syntax:
    content: public static Type GetTypeForITypeInfo (IntPtr piTypeInfo);
    parameters:
    - id: piTypeInfo
      type: System.IntPtr
      description: The `ITypeInfo` interface to marshal.
    return:
      type: System.Type
      description: A managed type that represents the unmanaged `ITypeInfo` object.
  overload: System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)
  id: GetTypeFromCLSID(System.Guid)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeFromCLSID(Guid)
  nameWithType: Marshal.GetTypeFromCLSID(Guid)
  fullName: Marshal.GetTypeFromCLSID(Guid)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns the type associated with the specified class identifier (CLSID).
  syntax:
    content: public static Type GetTypeFromCLSID (Guid clsid);
    parameters:
    - id: clsid
      type: System.Guid
      description: The CLSID of the type to return.
    return:
      type: System.Type
      description: '`System.__ComObject` regardless of whether the CLSID is valid.'
  overload: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)
  id: GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeInfoName(UCOMITypeInfo)
  nameWithType: Marshal.GetTypeInfoName(UCOMITypeInfo)
  fullName: Marshal.GetTypeInfoName(UCOMITypeInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the name of the type represented by an [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object.
  remarks: You can also retrieve the name of the type represented by an `ITypeInfo` object by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.
  syntax:
    content: >-
      [System.Obsolete]

      public static string GetTypeInfoName (System.Runtime.InteropServices.UCOMITypeInfo pTI);
    parameters:
    - id: pTI
      type: System.Runtime.InteropServices.UCOMITypeInfo
      description: An object that represents an `ITypeInfo` pointer.
    return:
      type: System.String
      description: The name of the type that the <code>pTI</code> parameter points to.
  overload: System.Runtime.InteropServices.Marshal.GetTypeInfoName*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  id: GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeInfoName(ITypeInfo)
  nameWithType: Marshal.GetTypeInfoName(ITypeInfo)
  fullName: Marshal.GetTypeInfoName(ITypeInfo)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Retrieves the name of the type represented by an [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object.
  remarks: You can also retrieve the name of the type represented by an `ITypeInfo` by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.
  syntax:
    content: public static string GetTypeInfoName (System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo);
    parameters:
    - id: typeInfo
      type: System.Runtime.InteropServices.ComTypes.ITypeInfo
      description: An object that represents an `ITypeInfo` pointer.
    return:
      type: System.String
      description: The name of the type that the <code>typeInfo</code> parameter points to.
  overload: System.Runtime.InteropServices.Marshal.GetTypeInfoName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>typeInfo</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  id: GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeLibGuid(ITypeLib)
  nameWithType: Marshal.GetTypeLibGuid(ITypeLib)
  fullName: Marshal.GetTypeLibGuid(ITypeLib)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the library identifier (LIBID) of a type library.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.  \n  \n For more information about library identifiers, see [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86)."
  syntax:
    content: public static Guid GetTypeLibGuid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);
    parameters:
    - id: typelib
      type: System.Runtime.InteropServices.ComTypes.ITypeLib
      description: The type library whose LIBID is to be retrieved.
    return:
      type: System.Guid
      description: The LIBID of the specified type library.
  overload: System.Runtime.InteropServices.Marshal.GetTypeLibGuid*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)
  id: GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeLibGuid(UCOMITypeLib)
  nameWithType: Marshal.GetTypeLibGuid(UCOMITypeLib)
  fullName: Marshal.GetTypeLibGuid(UCOMITypeLib)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the library identifier (LIBID) of a type library.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.  \n  \n For more information about library identifiers, see [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86)."
  syntax:
    content: >-
      [System.Obsolete]

      public static Guid GetTypeLibGuid (System.Runtime.InteropServices.UCOMITypeLib pTLB);
    parameters:
    - id: pTLB
      type: System.Runtime.InteropServices.UCOMITypeLib
      description: The type library whose LIBID is to be retrieved.
    return:
      type: System.Guid
      description: The LIBID of the type library that the <code>pTLB</code> parameter points to.
  overload: System.Runtime.InteropServices.Marshal.GetTypeLibGuid*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)
  id: GetTypeLibGuidForAssembly(System.Reflection.Assembly)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeLibGuidForAssembly(Assembly)
  nameWithType: Marshal.GetTypeLibGuidForAssembly(Assembly)
  fullName: Marshal.GetTypeLibGuidForAssembly(Assembly)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the library identifier (LIBID) that is assigned to a type library when it was exported from the specified assembly.
  remarks: "When assemblies are exported to type libraries, the type library is assigned a LIBID. You can set the LIBID explicitly by applying the <xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=fullName> at the assembly level, or it can be generated automatically. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool calculates a LIBID value based on the identity of the assembly. <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> returns the LIBID that is associated with the <xref:System.Runtime.InteropServices.GuidAttribute>, if the attribute is applied. Otherwise, <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A> returns the calculated value. Alternatively, you can use the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> method to extract the actual LIBID from an existing type library.  \n  \n See the [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86) topic for more information about library identifiers."
  syntax:
    content: public static Guid GetTypeLibGuidForAssembly (System.Reflection.Assembly asm);
    parameters:
    - id: asm
      type: System.Reflection.Assembly
      description: The assembly from which the type library was exported.
    return:
      type: System.Guid
      description: The LIBID that is assigned to a type library when it is exported from the specified assembly.
  overload: System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asm</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  id: GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeLibLcid(ITypeLib)
  nameWithType: Marshal.GetTypeLibLcid(ITypeLib)
  fullName: Marshal.GetTypeLibLcid(ITypeLib)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the LCID of a type library.
  syntax:
    content: public static int GetTypeLibLcid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);
    parameters:
    - id: typelib
      type: System.Runtime.InteropServices.ComTypes.ITypeLib
      description: The type library whose LCID is to be retrieved.
    return:
      type: System.Int32
      description: The LCID of the type library that the <code>typelib</code> parameter points to.
  overload: System.Runtime.InteropServices.Marshal.GetTypeLibLcid*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)
  id: GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeLibLcid(UCOMITypeLib)
  nameWithType: Marshal.GetTypeLibLcid(UCOMITypeLib)
  fullName: Marshal.GetTypeLibLcid(UCOMITypeLib)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the LCID of a type library.
  syntax:
    content: >-
      [System.Obsolete]

      public static int GetTypeLibLcid (System.Runtime.InteropServices.UCOMITypeLib pTLB);
    parameters:
    - id: pTLB
      type: System.Runtime.InteropServices.UCOMITypeLib
      description: The type library whose LCID is to be retrieved.
    return:
      type: System.Int32
      description: The LCID of the type library that the <code>pTLB</code> parameter points to.
  overload: System.Runtime.InteropServices.Marshal.GetTypeLibLcid*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)
  id: GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeLibName(ITypeLib)
  nameWithType: Marshal.GetTypeLibName(ITypeLib)
  fullName: Marshal.GetTypeLibName(ITypeLib)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the name of a type library.
  remarks: "The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.  \n  \n You can also retrieve the type library name by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter."
  syntax:
    content: public static string GetTypeLibName (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);
    parameters:
    - id: typelib
      type: System.Runtime.InteropServices.ComTypes.ITypeLib
      description: The type library whose name is to be retrieved.
    return:
      type: System.String
      description: The name of the type library that the <code>typelib</code> parameter points to.
  overload: System.Runtime.InteropServices.Marshal.GetTypeLibName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>typelib</code> parameter is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)
  id: GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeLibName(UCOMITypeLib)
  nameWithType: Marshal.GetTypeLibName(UCOMITypeLib)
  fullName: Marshal.GetTypeLibName(UCOMITypeLib)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the name of a type library.
  remarks: "The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.  \n  \n You can also retrieve the type library name by calling the<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter."
  syntax:
    content: >-
      [System.Obsolete]

      public static string GetTypeLibName (System.Runtime.InteropServices.UCOMITypeLib pTLB);
    parameters:
    - id: pTLB
      type: System.Runtime.InteropServices.UCOMITypeLib
      description: The type library whose name is to be retrieved.
    return:
      type: System.String
      description: The name of the type library that the <code>pTLB</code> parameter points to.
  overload: System.Runtime.InteropServices.Marshal.GetTypeLibName*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)
  id: GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetTypeLibVersionForAssembly(Assembly, Int32, Int32)
  nameWithType: Marshal.GetTypeLibVersionForAssembly(Assembly, Int32, Int32)
  fullName: Marshal.GetTypeLibVersionForAssembly(Assembly, Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Retrieves the version number of a type library that will be exported from the specified assembly.
  remarks: "Before exporting an assembly by using <xref:System.Runtime.InteropServices.TypeLibExporterFlags> with the `CallerResolvedReferences` value, you can use this method to retrieve the type library version from the assembly.  \n  \n If you do not apply the <xref:System.Runtime.InteropServices.TypeLibVersionAttribute> attribute to an exported assembly to explicitly control the version number of the generated type library, the type library will have the same version number as the assembly."
  syntax:
    content: public static void GetTypeLibVersionForAssembly (System.Reflection.Assembly inputAssembly, out int majorVersion, out int minorVersion);
    parameters:
    - id: inputAssembly
      type: System.Reflection.Assembly
      description: A managed assembly.
    - id: majorVersion
      type: System.Int32
      description: The major version number.
    - id: minorVersion
      type: System.Int32
      description: The minor version number.
  overload: System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inputAssembly</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)
  id: GetUniqueObjectForIUnknown(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetUniqueObjectForIUnknown(IntPtr)
  nameWithType: Marshal.GetUniqueObjectForIUnknown(IntPtr)
  fullName: Marshal.GetUniqueObjectForIUnknown(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Creates a unique [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) object for a given [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown%2A> method ensures that you receive a unique RCW, because it does not match an `IUnknown` pointer to an existing object. Use this method when you have to create a unique RCW that is not impacted by other code that calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method.
  syntax:
    content: public static object GetUniqueObjectForIUnknown (IntPtr unknown);
    parameters:
    - id: unknown
      type: System.IntPtr
      description: A managed pointer to an `IUnknown` interface.
    return:
      type: System.Object
      description: A unique RCW for the specified `IUnknown` interface.
  overload: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  id: GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)
  nameWithType: Marshal.GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)
  fullName: Marshal.GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Gets a pointer to a runtime-generated function that marshals a call from unmanaged to managed code.
  remarks: <xref:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr%2A> is exposed for compiler support only.
  syntax:
    content: >-
      [System.Obsolete("This method has been deprecated")]

      public static IntPtr GetUnmanagedThunkForManagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);
    parameters:
    - id: pfnMethodToWrap
      type: System.IntPtr
      description: A pointer to the method to marshal.
    - id: pbSignature
      type: System.IntPtr
      description: A pointer to the method signature.
    - id: cbSignature
      type: System.Int32
      description: The number of bytes in <code>pbSignature</code>.
    return:
      type: System.IntPtr
      description: A pointer to a function that will marshal a call from <code>pfnMethodToWrap</code> to managed code.
  overload: System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.IsComObject(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)
  id: IsComObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: IsComObject(Object)
  nameWithType: Marshal.IsComObject(Object)
  fullName: Marshal.IsComObject(Object)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Indicates whether a specified object represents a COM object.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.IsComObject%2A> returns `true` if the class type of the instance is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> or if it derives directly or indirectly from a class attributed with <xref:System.Runtime.InteropServices.ComImportAttribute>. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library.  \n  \n Two other methods also determine whether a specified object represents a COM object, but the requirements for returning `true` differ from this method's requirements. <xref:System.Type.IsImport%2A?displayProperty=fullName> returns `true` if the class (or interface) is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> directly; it does not return `true` for derived types. <xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A?displayProperty=fullName> returns `true` if the type is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> or derives from a type with the same GUID."
  syntax:
    content: public static bool IsComObject (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object to check.
    return:
      type: System.Boolean
      description: '`true` if the <code>o</code> parameter is a COM type; otherwise, `false`.'
  overload: System.Runtime.InteropServices.Marshal.IsComObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>o</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)
  id: IsTypeVisibleFromCom(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: IsTypeVisibleFromCom(Type)
  nameWithType: Marshal.IsTypeVisibleFromCom(Type)
  fullName: Marshal.IsTypeVisibleFromCom(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Indicates whether a type is visible to COM clients.
  remarks: <xref:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom%2A> enables you to check for COM visibility in one step. Types that are not visible cannot be used from COM. A type is visible if it is `public` and not hidden with the <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName>.
  syntax:
    content: public static bool IsTypeVisibleFromCom (Type t);
    parameters:
    - id: t
      type: System.Type
      description: The type to check for COM visibility.
    return:
      type: System.Boolean
      description: '`true` if the type is visible to COM; otherwise, `false`.'
  overload: System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)
  commentId: M:System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)
  id: NumParamBytes(System.Reflection.MethodInfo)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: NumParamBytes(MethodInfo)
  nameWithType: Marshal.NumParamBytes(MethodInfo)
  fullName: Marshal.NumParamBytes(MethodInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Calculates the number of bytes in unmanaged memory that are required to hold the parameters for the specified method.
  remarks: "The <xref:System.Runtime.InteropServices.Marshal.NumParamBytes%2A> method returns the stack size (in bytes) needed to represent the parameters of a method signature in unmanaged memory.  \n  \n Note that the return value of this method is platform-dependent. For example, a signature with a single integer parameter returns a value of 4 on 32-bit platforms and a value of 8 on 64-bit platforms."
  syntax:
    content: public static int NumParamBytes (System.Reflection.MethodInfo m);
    parameters:
    - id: m
      type: System.Reflection.MethodInfo
      description: The method to be checked.
    return:
      type: System.Int32
      description: The number of bytes required to represent the method parameters in unmanaged memory.
  overload: System.Runtime.InteropServices.Marshal.NumParamBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>m</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>m</code> parameter is not a <xref href="System.Reflection.MethodInfo"></xref> object.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)
  id: OffsetOf(System.Type,System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: OffsetOf(Type, String)
  nameWithType: Marshal.OffsetOf(Type, String)
  fullName: Marshal.OffsetOf(Type, String)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns the field offset of the unmanaged form of the managed class.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The `t` parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> method. For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a).  \n  \n> [!NOTE]\n>  Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields."
  syntax:
    content: public static IntPtr OffsetOf (Type t, string fieldName);
    parameters:
    - id: t
      type: System.Type
      description: A value type or formatted reference type that specifies the managed class. You must apply the <xref href="System.Runtime.InteropServices.StructLayoutAttribute"></xref> to the class.
    - id: fieldName
      type: System.String
      description: The field within the <code>t</code> parameter.
    return:
      type: System.IntPtr
      description: The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke.
  overload: System.Runtime.InteropServices.Marshal.OffsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>t</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)
  id: OffsetOf``1(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: OffsetOf<T>(String)
  nameWithType: Marshal.OffsetOf<T>(String)
  fullName: Marshal.OffsetOf<T>(String)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Returns the field offset of the unmanaged form of a specified managed class."
  remarks: "<xref:System.Runtime.InteropServices.Marshal.OffsetOf%60%601%28System.String%29> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The `T` generic type parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method. For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a).  \n  \n> [!NOTE]\n>  Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields."
  syntax:
    content: public static IntPtr OffsetOf<T> (string fieldName);
    parameters:
    - id: fieldName
      type: System.String
      description: The name of the field in the <code>T</code> type.
    typeParameters:
    - id: T
      description: A managed value type or formatted reference type. You must apply the <xref href="System.Runtime.InteropServices.StructLayoutAttribute"></xref> attribute to the class.
    return:
      type: System.IntPtr
      description: The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke.
  overload: System.Runtime.InteropServices.Marshal.OffsetOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)
  commentId: M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)
  id: Prelink(System.Reflection.MethodInfo)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Prelink(MethodInfo)
  nameWithType: Marshal.Prelink(MethodInfo)
  fullName: Marshal.Prelink(MethodInfo)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Executes one-time method setup tasks without calling the method.
  remarks: "Setup tasks provide early initialization and are performed automatically when the target method is invoked. First-time tasks include the following:  \n  \n-   Verifying that the platform invoke metadata is correctly formatted.  \n  \n-   Verifying that all the managed types are valid parameters of platform invoke functions.  \n  \n-   Locating and loading the unmanaged DLL into the process.  \n  \n-   Locating the entry point in the process.  \n  \n Calling <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> on a method outside of platform invoke has no effect. To execute setup tasks on all platform invoke methods in a type, use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=fullName>."
  syntax:
    content: public static void Prelink (System.Reflection.MethodInfo m);
    parameters:
    - id: m
      type: System.Reflection.MethodInfo
      description: The method to be checked.
  overload: System.Runtime.InteropServices.Marshal.Prelink*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>m</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>m</code> parameter is not a <xref href="System.Reflection.MethodInfo"></xref> object.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)
  id: PrelinkAll(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PrelinkAll(Type)
  nameWithType: Marshal.PrelinkAll(Type)
  fullName: Marshal.PrelinkAll(Type)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Performs a pre-link check for all methods on a class.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> method invokes <xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=fullName> on every method for a given type. <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> executes one-time method setup tasks without calling each method. You can use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> only for platform invoke calls.
  syntax:
    content: public static void PrelinkAll (Type c);
    parameters:
    - id: c
      type: System.Type
      description: The class whose methods are to be checked.
  overload: System.Runtime.InteropServices.Marshal.PrelinkAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>c</code> parameter is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  id: PtrToStringAnsi(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStringAnsi(IntPtr)
  nameWithType: Marshal.PtrToStringAnsi(IntPtr)
  fullName: Marshal.PtrToStringAnsi(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies all characters up to the first null character from an unmanaged ANSI string to a managed <xref href="System.String"></xref>, and widens each ANSI character to Unicode.
  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.
  example:
  - "The following example uses the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> method to create a managed string from an unmanaged `char` array.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr/cpp/sample.cpp#1)]"
  syntax:
    content: public static string PtrToStringAnsi (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address of the first character of the unmanaged string.
    return:
      type: System.String
      description: A managed string that holds a copy of the unmanaged ANSI string. If <code>ptr</code> is `null`, the method returns a null string.
  overload: System.Runtime.InteropServices.Marshal.PtrToStringAnsi*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)
  id: PtrToStringAnsi(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStringAnsi(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringAnsi(IntPtr, Int32)
  fullName: Marshal.PtrToStringAnsi(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Allocates a managed <xref href="System.String"></xref>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.
  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.
  example:
  - "The following example uses the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> method to create a managed string from an unmanaged`char` array.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr-int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr-int/cpp/sample.cpp#1)]"
  syntax:
    content: public static string PtrToStringAnsi (IntPtr ptr, int len);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address of the first character of the unmanaged string.
    - id: len
      type: System.Int32
      description: The byte count of the input string to copy.
    return:
      type: System.String
      description: A managed string that holds a copy of the native ANSI string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.
  overload: System.Runtime.InteropServices.Marshal.PtrToStringAnsi*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>len</code> is less than zero.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)
  id: PtrToStringAuto(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStringAuto(IntPtr)
  nameWithType: Marshal.PtrToStringAuto(IntPtr)
  fullName: Marshal.PtrToStringAuto(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Allocates a managed <xref href="System.String"></xref> and copies all characters up to the first null character from a string stored in unmanaged memory into it.
  remarks: "If the current platform is Unicode, each ANSI character is widened to a Unicode character and this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>. Otherwise, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>.  \n  \n <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName> methods."
  syntax:
    content: public static string PtrToStringAuto (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "For Unicode platforms, the address of the first Unicode character.  \n  \n -or-  \n  \n For ANSI plaforms, the address of the first ANSI character."
    return:
      type: System.String
      description: A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.
  overload: System.Runtime.InteropServices.Marshal.PtrToStringAuto*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)
  id: PtrToStringAuto(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStringAuto(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringAuto(IntPtr, Int32)
  fullName: Marshal.PtrToStringAuto(IntPtr, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Allocates a managed <xref href="System.String"></xref> and copies the specified number of characters from a string stored in unmanaged memory into it.
  remarks: "On Unicode platforms, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>; on ANSI platforms, it calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>. No transformations are done before these methods are called.  \n  \n <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName>."
  syntax:
    content: public static string PtrToStringAuto (IntPtr ptr, int len);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "For Unicode platforms, the address of the first Unicode character.  \n  \n -or-  \n  \n For ANSI plaforms, the address of the first ANSI character."
    - id: len
      type: System.Int32
      description: The number of characters to copy.
    return:
      type: System.String
      description: A managed string that holds a copy of the native string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.
  overload: System.Runtime.InteropServices.Marshal.PtrToStringAuto*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>len</code> is less than zero.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
  id: PtrToStringBSTR(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStringBSTR(IntPtr)
  nameWithType: Marshal.PtrToStringBSTR(IntPtr)
  fullName: Marshal.PtrToStringBSTR(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Allocates a managed <xref href="System.String"></xref> and copies a [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\(v=vs.85\).aspx) stored in unmanaged memory into it.
  remarks: "Call this method only on strings that were allocated with the unmanaged [SysAllocString](https://msdn.microsoft.com/library/ms221458\\(v=vs.85\\).aspx) and [SysAllocStringLen](https://msdn.microsoft.com/library/ms221639\\(v=vs.85\\).aspx) functions.  \n  \n <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=fullName> method."
  syntax:
    content: public static string PtrToStringBSTR (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address of the first character of the unmanaged string.
    return:
      type: System.String
      description: A managed string that holds a copy of the unmanaged string.
  overload: System.Runtime.InteropServices.Marshal.PtrToStringBSTR*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>ptr</code> equals <xref href="System.IntPtr.Zero"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)
  id: PtrToStringUni(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStringUni(IntPtr)
  nameWithType: Marshal.PtrToStringUni(IntPtr)
  fullName: Marshal.PtrToStringUni(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Allocates a managed <xref href="System.String"></xref> and copies all characters up to the first null character from an unmanaged Unicode string into it.
  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.
  syntax:
    content: public static string PtrToStringUni (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address of the first character of the unmanaged string.
    return:
      type: System.String
      description: A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.
  overload: System.Runtime.InteropServices.Marshal.PtrToStringUni*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
  id: PtrToStringUni(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStringUni(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringUni(IntPtr, Int32)
  fullName: Marshal.PtrToStringUni(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Allocates a managed <xref href="System.String"></xref> and copies a specified number of characters from an unmanaged Unicode string into it.
  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.
  syntax:
    content: public static string PtrToStringUni (IntPtr ptr, int len);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address of the first character of the unmanaged string.
    - id: len
      type: System.Int32
      description: The number of Unicode characters to copy.
    return:
      type: System.String
      description: A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.
  overload: System.Runtime.InteropServices.Marshal.PtrToStringUni*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)
  id: PtrToStringUTF8(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStringUTF8(IntPtr)
  nameWithType: Marshal.PtrToStringUTF8(IntPtr)
  fullName: Marshal.PtrToStringUTF8(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static string PtrToStringUTF8 (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: ''
    return:
      type: System.String
      description: ''
  overload: System.Runtime.InteropServices.Marshal.PtrToStringUTF8*
  exceptions: []
  version:
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)
  id: PtrToStringUTF8(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStringUTF8(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringUTF8(IntPtr, Int32)
  fullName: Marshal.PtrToStringUTF8(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static string PtrToStringUTF8 (IntPtr ptr, int byteLen);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: ''
    - id: byteLen
      type: System.Int32
      description: ''
    return:
      type: System.String
      description: ''
  overload: System.Runtime.InteropServices.Marshal.PtrToStringUTF8*
  exceptions: []
  version:
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)
  id: PtrToStructure(System.IntPtr,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStructure(IntPtr, Object)
  nameWithType: Marshal.PtrToStructure(IntPtr, Object)
  fullName: Marshal.PtrToStructure(IntPtr, Object)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Marshals data from an unmanaged block of memory to a managed object.
  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You cannot use this overload method with value types.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static void PtrToStructure (IntPtr ptr, object structure);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: A pointer to an unmanaged block of memory.
    - id: structure
      type: System.Object
      description: The object to which the data is to be copied. This must be an instance of a formatted class.
  overload: System.Runtime.InteropServices.Marshal.PtrToStructure*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Structure layout is not sequential or explicit.  \n  \n -or-  \n  \n Structure is a boxed value type."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)
  id: PtrToStructure(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStructure(IntPtr, Type)
  nameWithType: Marshal.PtrToStructure(IntPtr, Type)
  fullName: Marshal.PtrToStructure(IntPtr, Type)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.
  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You can pass a value type to this overload method. In this case, the returned object is a boxed instance.
  example:
  - "The following example creates a managed structure, transfers it to unmanaged memory, and then transfers it back to managed memory using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]  \n  \n The following example demonstrates how to marshal an unmanaged block of memory to a managed structure using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  \n  \n> [!IMPORTANT]\n>  This code assumes 32-bit compilation. Before using a 64-bit compiler, replace <xref:System.IntPtr.ToInt32%2A?displayProperty=fullName> with <xref:System.IntPtr.ToInt64%2A?displayProperty=fullName>.  \n  \n [!code-cpp[PtrToStructure#1](~/samples/snippets/cpp/VS_Snippets_CLR/PtrToStructure/CPP/pts.cpp#1)]\n [!code-csharp[PtrToStructure#1](~/samples/snippets/csharp/VS_Snippets_CLR/PtrToStructure/CS/pts.cs#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static object PtrToStructure (IntPtr ptr, Type structureType);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: A pointer to an unmanaged block of memory.
    - id: structureType
      type: System.Type
      description: The type of object to be created. This object must represent a formatted class or a structure.
    return:
      type: System.Object
      description: A managed object containing the data pointed to by the <code>ptr</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.PtrToStructure*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>structureType</code> parameter layout is not sequential or explicit.  \n  \n -or-  \n  \n The <code>structureType</code> parameter is a generic type."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>structureType</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: The class specified by <code>structureType</code> does not have an accessible default constructor.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)
  id: PtrToStructure``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStructure<T>(IntPtr)
  nameWithType: Marshal.PtrToStructure<T>(IntPtr)
  fullName: Marshal.PtrToStructure<T>(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter."
  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr?displayProperty=fullName> values. You can pass a value type to this method overload.
  syntax:
    content: public static T PtrToStructure<T> (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: A pointer to an unmanaged block of memory.
    typeParameters:
    - id: T
      description: The type of the object to which the data is to be copied. This must be a formatted class or a structure.
    return:
      type: T
      description: A managed object that contains the data that the <code>ptr</code> parameter points to.
  overload: System.Runtime.InteropServices.Marshal.PtrToStructure``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The layout of <code>T</code> is not sequential or explicit.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: The class specified by <code>T</code> does not have an accessible default constructor.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)
  id: PtrToStructure``1(System.IntPtr,``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: PtrToStructure<T>(IntPtr, T)
  nameWithType: Marshal.PtrToStructure<T>(IntPtr, T)
  fullName: Marshal.PtrToStructure<T>(IntPtr, T)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Marshals data from an unmanaged block of memory to a managed object of the specified type."
  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr> values. You cannot use this method overload with value types.
  syntax:
    content: public static void PtrToStructure<T> (IntPtr ptr, T structure);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: A pointer to an unmanaged block of memory.
    - id: structure
      type: T
      description: The object to which the data is to be copied.
    typeParameters:
    - id: T
      description: The type of <code>structure</code>. This must be a formatted class.
  overload: System.Runtime.InteropServices.Marshal.PtrToStructure``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Structure layout is not sequential or explicit.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  commentId: M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  id: QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: QueryInterface(IntPtr, Guid, IntPtr)
  nameWithType: Marshal.QueryInterface(IntPtr, Guid, IntPtr)
  fullName: Marshal.QueryInterface(IntPtr, Guid, IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Requests a pointer to a specified interface from a COM object.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.QueryInterface%2A> method exposes the [IUnknown::QueryInterface](http://go.microsoft.com/fwlink/?LinkID=144867) method of a COM object, which attempts to obtain a specific interface pointer. Using `QueryInterface` on a COM object is the same as performing a cast operation in managed code. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. To obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer, you can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName>.
  syntax:
    content: public static int QueryInterface (IntPtr pUnk, ref Guid iid, out IntPtr ppv);
    parameters:
    - id: pUnk
      type: System.IntPtr
      description: The interface to be queried.
    - id: iid
      type: System.Guid
      description: The interface identifier (IID) of the requested interface.
    - id: ppv
      type: System.IntPtr
      description: When this method returns, contains a reference to the returned interface.
    return:
      type: System.Int32
      description: An HRESULT that indicates the success or failure of the call.
  overload: System.Runtime.InteropServices.Marshal.QueryInterface*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)
  id: ReadByte(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadByte(IntPtr, Int32)
  nameWithType: Marshal.ReadByte(IntPtr, Int32)
  fullName: Marshal.ReadByte(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a single byte at a given offset (or index) from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#3)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#3)]  \n  \n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> method to read the value of an unmanaged character.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.ReadByte-IntPtr-int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte-IntPtr-int/cpp/sample.cpp#1)]"
  syntax:
    content: public static byte ReadByte (IntPtr ptr, int ofs);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory from which to read.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.Byte
      description: The byte read from unmanaged memory at the given offset.
  overload: System.Runtime.InteropServices.Marshal.ReadByte*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  id: ReadByte(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadByte(Object, Int32)
  nameWithType: Marshal.ReadByte(Object, Int32)
  fullName: Marshal.ReadByte(Object, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a single byte at a given offset (or index) from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  syntax:
    content: public static byte ReadByte (object ptr, int ofs);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the source object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.Byte
      description: The byte read from unmanaged memory at the given offset.
  overload: System.Runtime.InteropServices.Marshal.ReadByte*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)
  id: ReadByte(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadByte(IntPtr)
  nameWithType: Marshal.ReadByte(IntPtr)
  fullName: Marshal.ReadByte(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a single byte from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example creates a block of unmanaged memory, writes a byte to the unmanaged memory, reads the byte back from unmanaged memory, and then disposes the unmanaged memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/cs/example.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/vb/example.vb#1)]  \n  \n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> method to read the value of an unmanaged character.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.ReadByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte/cpp/sample.cpp#1)]"
  syntax:
    content: public static byte ReadByte (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory from which to read.
    return:
      type: System.Byte
      description: The byte read from unmanaged memory.
  overload: System.Runtime.InteropServices.Marshal.ReadByte*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)
  id: ReadInt16(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadInt16(IntPtr)
  nameWithType: Marshal.ReadInt16(IntPtr)
  fullName: Marshal.ReadInt16(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a 16-bit signed integer from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int16` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  \n  \n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> method to read the value of an unmanaged `short` variable.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt16#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt16/cpp/sample.cpp#1)]"
  syntax:
    content: public static short ReadInt16 (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory from which to read.
    return:
      type: System.Int16
      description: The 16-bit signed integer read from unmanaged memory.
  overload: System.Runtime.InteropServices.Marshal.ReadInt16*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)
  id: ReadInt16(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadInt16(IntPtr, Int32)
  nameWithType: Marshal.ReadInt16(IntPtr, Int32)
  fullName: Marshal.ReadInt16(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a 16-bit signed integer at a given offset from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  \n  \n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> method to read the value of an unmanaged `short` variable.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt16-IntPtr-Int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt16-IntPtr-Int/cpp/sample.cpp#1)]"
  syntax:
    content: public static short ReadInt16 (IntPtr ptr, int ofs);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory from which to read.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.Int16
      description: The 16-bit signed integer read from unmanaged memory at the given offset.
  overload: System.Runtime.InteropServices.Marshal.ReadInt16*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)
  id: ReadInt16(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadInt16(Object, Int32)
  nameWithType: Marshal.ReadInt16(Object, Int32)
  fullName: Marshal.ReadInt16(Object, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a 16-bit signed integer at a given offset from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  syntax:
    content: public static short ReadInt16 (object ptr, int ofs);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the source object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.Int16
      description: The 16-bit signed integer read from unmanaged memory at the given offset.
  overload: System.Runtime.InteropServices.Marshal.ReadInt16*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)
  id: ReadInt32(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadInt32(IntPtr)
  nameWithType: Marshal.ReadInt32(IntPtr)
  fullName: Marshal.ReadInt32(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a 32-bit signed integer from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int32` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  \n  \n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> method to read the value of an unmanaged `int` variable.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt32#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt32/cpp/sample.cpp#1)]"
  syntax:
    content: public static int ReadInt32 (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory from which to read.
    return:
      type: System.Int32
      description: The 32-bit signed integer read from unmanaged memory.
  overload: System.Runtime.InteropServices.Marshal.ReadInt32*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)
  id: ReadInt32(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadInt32(IntPtr, Int32)
  nameWithType: Marshal.ReadInt32(IntPtr, Int32)
  fullName: Marshal.ReadInt32(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a 32-bit signed integer at a given offset from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A>methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  \n  \n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> method to read the value of an unmanaged `int` variable.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt32-IntPtr-Int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt32-IntPtr-Int/cpp/sample.cpp#1)]"
  syntax:
    content: public static int ReadInt32 (IntPtr ptr, int ofs);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory from which to read.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.Int32
      description: The 32-bit signed integer read from unmanaged memory.
  overload: System.Runtime.InteropServices.Marshal.ReadInt32*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)
  id: ReadInt32(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadInt32(Object, Int32)
  nameWithType: Marshal.ReadInt32(Object, Int32)
  fullName: Marshal.ReadInt32(Object, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a 32-bit signed integer at a given offset from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  syntax:
    content: public static int ReadInt32 (object ptr, int ofs);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the source object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.Int32
      description: The 32-bit signed integer read from unmanaged memory at the given offset.
  overload: System.Runtime.InteropServices.Marshal.ReadInt32*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)
  id: ReadInt64(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadInt64(IntPtr)
  nameWithType: Marshal.ReadInt64(IntPtr)
  fullName: Marshal.ReadInt64(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a 64-bit signed integer from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int64` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  \n  \n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> method to read the value of an unmanaged `__int64` variable.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt64/cpp/sample.cpp#1)]"
  syntax:
    content: public static long ReadInt64 (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory from which to read.
    return:
      type: System.Int64
      description: The 64-bit signed integer read from unmanaged memory.
  overload: System.Runtime.InteropServices.Marshal.ReadInt64*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)
  id: ReadInt64(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadInt64(IntPtr, Int32)
  nameWithType: Marshal.ReadInt64(IntPtr, Int32)
  fullName: Marshal.ReadInt64(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a 64-bit signed integer at a given offset from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  \n  \n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> method to read the value of an unmanaged `__int64` variable.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt64-IntPtr-Int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt64-IntPtr-Int/cpp/sample.cpp#1)]"
  syntax:
    content: public static long ReadInt64 (IntPtr ptr, int ofs);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory from which to read.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.Int64
      description: The 64-bit signed integer read from unmanaged memory at the given offset.
  overload: System.Runtime.InteropServices.Marshal.ReadInt64*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)
  id: ReadInt64(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadInt64(Object, Int32)
  nameWithType: Marshal.ReadInt64(Object, Int32)
  fullName: Marshal.ReadInt64(Object, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a 64-bit signed integer at a given offset from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  syntax:
    content: public static long ReadInt64 (object ptr, int ofs);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the source object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.Int64
      description: The 64-bit signed integer read from unmanaged memory at the given offset.
  overload: System.Runtime.InteropServices.Marshal.ReadInt64*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)
  id: ReadIntPtr(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadIntPtr(IntPtr, Int32)
  nameWithType: Marshal.ReadIntPtr(IntPtr, Int32)
  fullName: Marshal.ReadIntPtr(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a processor native sized integer at a given offset from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]"
  syntax:
    content: public static IntPtr ReadIntPtr (IntPtr ptr, int ofs);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory from which to read.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.IntPtr
      description: The integer read from unmanaged memory at the given offset.
  overload: System.Runtime.InteropServices.Marshal.ReadIntPtr*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)
  id: ReadIntPtr(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadIntPtr(Object, Int32)
  nameWithType: Marshal.ReadIntPtr(Object, Int32)
  fullName: Marshal.ReadIntPtr(Object, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a processor native sized integer from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  syntax:
    content: public static IntPtr ReadIntPtr (object ptr, int ofs);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the source object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.
    return:
      type: System.IntPtr
      description: The integer read from unmanaged memory at the given offset.
  overload: System.Runtime.InteropServices.Marshal.ReadIntPtr*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)
  id: ReadIntPtr(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReadIntPtr(IntPtr)
  nameWithType: Marshal.ReadIntPtr(IntPtr)
  fullName: Marshal.ReadIntPtr(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a processor native-sized integer from unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]"
  syntax:
    content: public static IntPtr ReadIntPtr (IntPtr ptr);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory from which to read.
    return:
      type: System.IntPtr
      description: The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.
  overload: System.Runtime.InteropServices.Marshal.ReadIntPtr*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
  id: ReAllocCoTaskMem(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReAllocCoTaskMem(IntPtr, Int32)
  nameWithType: Marshal.ReAllocCoTaskMem(IntPtr, Int32)
  fullName: Marshal.ReAllocCoTaskMem(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Resizes a block of memory previously allocated with <xref href="System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"></xref>.
  remarks: <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A> is one of two memory reallocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is the other.) The beginning of the reallocated memory content is the same as the original content; however, the entire memory block can be in a different location. This method exposes the COM [CoTaskMemRealloc](http://go.microsoft.com/fwlink/?LinkId=148778) function, which is referred to as the COM task memory allocator.
  syntax:
    content: public static IntPtr ReAllocCoTaskMem (IntPtr pv, int cb);
    parameters:
    - id: pv
      type: System.IntPtr
      description: A pointer to memory allocated with <xref href="System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)"></xref>.
    - id: cb
      type: System.Int32
      description: The new size of the allocated block.
    return:
      type: System.IntPtr
      description: An integer representing the address of the reallocated block of memory. This memory must be released with <xref href="System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)"></xref>.
  overload: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory to satisfy the request.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
  id: ReAllocHGlobal(System.IntPtr,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReAllocHGlobal(IntPtr, IntPtr)
  nameWithType: Marshal.ReAllocHGlobal(IntPtr, IntPtr)
  fullName: Marshal.ReAllocHGlobal(IntPtr, IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Resizes a block of memory previously allocated with <xref href="System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)"></xref>.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is one of two memory reallocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=fullName> is the other.)  \n  \n This method exposes the Win32 [GlobalReAlloc](http://go.microsoft.com/fwlink/?LinkId=148780) function from Kernel32.dll. The returned pointer can differ from the original. If it is different, the contents of the original memory block have been copied to the new block, and the original memory block has been freed."
  syntax:
    content: public static IntPtr ReAllocHGlobal (IntPtr pv, IntPtr cb);
    parameters:
    - id: pv
      type: System.IntPtr
      description: A pointer to memory allocated with <xref href="System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)"></xref>.
    - id: cb
      type: System.IntPtr
      description: The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <xref href="System.IntPtr"></xref>. If you pass a pointer, it is treated as a size.
    return:
      type: System.IntPtr
      description: A pointer to the reallocated memory. This memory must be released using <xref href="System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"></xref>.
  overload: System.Runtime.InteropServices.Marshal.ReAllocHGlobal*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory to satisfy the request.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  id: Release(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: Release(IntPtr)
  nameWithType: Marshal.Release(IntPtr)
  fullName: Marshal.Release(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Decrements the reference count on the specified interface.
  remarks: "The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. Use this value only for testing purposes. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. Only programs that call <xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=fullName> should call <xref:System.Runtime.InteropServices.Marshal.Release%2A>. Calling <xref:System.Runtime.InteropServices.Marshal.Release%2A> after the reference count has reached zero causes undefined behavior.  \n  \n You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer to release. You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.Release%2A> method on managed objects to release the COM interfaces represented by the managed object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md)."
  example:
  - "The following example demonstrates how to retrieve an `IUnknown` interface for a managed object using the <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> method. The example then releases the interface pointer by calling the <xref:System.Runtime.InteropServices.Marshal.Release%2A> method.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/cs/example.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/vb/example.vb#1)]"
  syntax:
    content: public static int Release (IntPtr pUnk);
    parameters:
    - id: pUnk
      type: System.IntPtr
      description: The interface to release.
    return:
      type: System.Int32
      description: The new value of the reference count on the interface specified by the <code>pUnk</code> parameter.
  overload: System.Runtime.InteropServices.Marshal.Release*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
  id: ReleaseComObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReleaseComObject(Object)
  nameWithType: Marshal.ReleaseComObject(Object)
  fullName: Marshal.ReleaseComObject(Object)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Decrements the reference count of the [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) associated with the specified COM object.
  remarks: "This method is used to explicitly control the lifetime of a COM object used from managed code. You should use this method to free the underlying COM object that holds references to resources in a timely manner or when objects must be freed in a specific order.  \n  \n Every time a COM interface pointer enters the common language runtime (CLR), it is wrapped in an RCW.  \n  \n The RCW has a reference count that is incremented every time a COM interface pointer is mapped to it. The <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method decrements the reference count of an RCW. When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <xref:System.NullReferenceException?displayProperty=fullName> if you attempt to use the object further. If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> returns the number of remaining references.  \n  \n This method enables you to force an RCW reference count release so that it occurs precisely when you want it to. However, improper use of <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> may cause your application to fail, or may cause an access violation.  \n  \n Consider a scenario in which managed code in an application domain is holding onto an RCW that represents a COM component. If you call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the RCW, the managed code will be unable to access the RCW and will raise an <xref:System.Runtime.InteropServices.InvalidComObjectException> exception.  \n  \n A more serious error may occur if a call to the RCW is executing when the RCW is released. In this case, there is a good chance that the thread making the call will cause an access violation. However, process memory may become corrupted, and the process may continue to run until it fails for reasons that are very difficult to debug.  \n  \n This risk is compounded when the COM component that is being used is a singleton, for the following reason: The CLR activates COM components by calling the COM [CoCreateInstance](http://go.microsoft.com/fwlink/?LinkID=142894) function, which returns the same interface pointer every time it is called for singleton COM components. Thus, separate and independent pieces of managed code in an application domain can be using the same RCW for a singleton COM component, and if either one calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the COM component, the other will be broken.  \n  \n Therefore, use the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> only if it is absolutely required. If you want to call this method to ensure that a COM component is released at a determined time, consider using the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method instead. <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> will release the underlying COM component regardless of how many times it has re-entered the CLR. The internal reference count of the RCW is incremented by one every time the COM component re-enters the CLR. Therefore, you could call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until the value returned is zero. This achieves the same result as the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method."
  syntax:
    content: public static int ReleaseComObject (object o);
    parameters:
    - id: o
      type: System.Object
      description: The COM object to release.
    return:
      type: System.Int32
      description: The new value of the reference count of the RCW associated with <code>o</code>. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.
  overload: System.Runtime.InteropServices.Marshal.ReleaseComObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>o</code> is not a valid COM object.
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: <code>o</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ReleaseThreadCache
  commentId: M:System.Runtime.InteropServices.Marshal.ReleaseThreadCache
  id: ReleaseThreadCache
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ReleaseThreadCache()
  nameWithType: Marshal.ReleaseThreadCache()
  fullName: Marshal.ReleaseThreadCache()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Releases the thread cache.
  syntax:
    content: >-
      [System.Obsolete]

      public static void ReleaseThreadCache ();
    parameters: []
  overload: System.Runtime.InteropServices.Marshal.ReleaseThreadCache*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)
  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)
  id: SecureStringToBSTR(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SecureStringToBSTR(SecureString)
  nameWithType: Marshal.SecureStringToBSTR(SecureString)
  fullName: Marshal.SecureStringToBSTR(SecureString)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Allocates an unmanaged [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\(v=vs.85\).aspx) and copies the contents of a managed <xref href="System.Security.SecureString"></xref> object into it.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method.
  syntax:
    content: public static IntPtr SecureStringToBSTR (System.Security.SecureString s);
    parameters:
    - id: s
      type: System.Security.SecureString
      description: The managed object to copy.
    return:
      type: System.IntPtr
      description: The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.
  overload: System.Runtime.InteropServices.Marshal.SecureStringToBSTR*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>s</code> parameter is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current computer is not running Windows 2000 Service Pack 3 or later.
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)
  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)
  id: SecureStringToCoTaskMemAnsi(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SecureStringToCoTaskMemAnsi(SecureString)
  nameWithType: Marshal.SecureStringToCoTaskMemAnsi(SecureString)
  fullName: Marshal.SecureStringToCoTaskMemAnsi(SecureString)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.Security.SecureString"></xref> object to a block of memory allocated from the unmanaged COM task allocator.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>. The characters of the string are copied as ANSI characters.
  example:
  - "The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method to zero out and dispose the unmanaged block.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/vb/sample.vb#1)]"
  syntax:
    content: public static IntPtr SecureStringToCoTaskMemAnsi (System.Security.SecureString s);
    parameters:
    - id: s
      type: System.Security.SecureString
      description: The managed object to copy.
    return:
      type: System.IntPtr
      description: The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.
  overload: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>s</code> parameter is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current computer is not running Windows 2000 Service Pack 3 or later.
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)
  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)
  id: SecureStringToCoTaskMemUnicode(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SecureStringToCoTaskMemUnicode(SecureString)
  nameWithType: Marshal.SecureStringToCoTaskMemUnicode(SecureString)
  fullName: Marshal.SecureStringToCoTaskMemUnicode(SecureString)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.Security.SecureString"></xref> object to a block of memory allocated from the unmanaged COM task allocator.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method. The characters of the string are copied as Unicode characters.
  example:
  - "The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method to zero out and dispose the unmanaged block.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode/vb/sample.vb#1)]"
  syntax:
    content: public static IntPtr SecureStringToCoTaskMemUnicode (System.Security.SecureString s);
    parameters:
    - id: s
      type: System.Security.SecureString
      description: The managed object to copy.
    return:
      type: System.IntPtr
      description: The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.
  overload: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>s</code> parameter is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current computer is not running Windows 2000 Service Pack 3 or later.
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)
  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)
  id: SecureStringToGlobalAllocAnsi(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SecureStringToGlobalAllocAnsi(SecureString)
  nameWithType: Marshal.SecureStringToGlobalAllocAnsi(SecureString)
  fullName: Marshal.SecureStringToGlobalAllocAnsi(SecureString)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.Security.SecureString"></xref> into unmanaged memory, converting into ANSI format as it copies.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method.
  example:
  - "The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method to zero out and dispose the unmanaged block.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/CS/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/VB/sample.vb#1)]"
  syntax:
    content: public static IntPtr SecureStringToGlobalAllocAnsi (System.Security.SecureString s);
    parameters:
    - id: s
      type: System.Security.SecureString
      description: The managed object to copy.
    return:
      type: System.IntPtr
      description: The address, in unmanaged memory, to where the <code>s</code> parameter was copied, or 0 if a null object was supplied.
  overload: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>s</code> parameter is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current computer is not running Windows 2000 Service Pack 3 or later.
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)
  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)
  id: SecureStringToGlobalAllocUnicode(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SecureStringToGlobalAllocUnicode(SecureString)
  nameWithType: Marshal.SecureStringToGlobalAllocUnicode(SecureString)
  fullName: Marshal.SecureStringToGlobalAllocUnicode(SecureString)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.Security.SecureString"></xref> object into unmanaged memory.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method.
  example:
  - "The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method with the unmanaged `LogonUser` function to perform impersonation with the <xref:System.Security.SecureString> class. The example then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method to zero out and free the unmanaged string reference.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/CS/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/VB/sample.vb#1)]"
  syntax:
    content: public static IntPtr SecureStringToGlobalAllocUnicode (System.Security.SecureString s);
    parameters:
    - id: s
      type: System.Security.SecureString
      description: The managed object to copy.
    return:
      type: System.IntPtr
      description: The address, in unmanaged memory, where <code>s</code> was copied, or 0 if <code>s</code> is a <xref href="System.Security.SecureString"></xref> object whose length is 0.
  overload: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>s</code> parameter is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current computer is not running Windows 2000 Service Pack 3 or later.
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)
  id: SetComObjectData(System.Object,System.Object,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SetComObjectData(Object, Object, Object)
  nameWithType: Marshal.SetComObjectData(Object, Object, Object)
  fullName: Marshal.SetComObjectData(Object, Object, Object)
  type: Method
  assemblies:
  - mscorlib
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Sets data referenced by the specified key in the specified COM object.
  remarks: All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) have an associated hash table, to which <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A> adds data. <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A?displayProperty=fullName> retrieves data from the hash table. You should never have to call either method from your code.
  syntax:
    content: public static bool SetComObjectData (object obj, object key, object data);
    parameters:
    - id: obj
      type: System.Object
      description: The COM object in which to store the data.
    - id: key
      type: System.Object
      description: The key in the internal hash table of the COM object in which to store the data.
    - id: data
      type: System.Object
      description: The data to set.
    return:
      type: System.Boolean
      description: '`true` if the data was set successfully; otherwise, `false`.'
  overload: System.Runtime.InteropServices.Marshal.SetComObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>obj</code> is `null`.  \n  \n -or-  \n  \n <code>key</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>obj</code> is not a COM object.  \n  \n -or-  \n  \n <code>obj</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
  id: SizeOf(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SizeOf(Object)
  nameWithType: Marshal.SizeOf(Object)
  fullName: Marshal.SizeOf(Object)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns the unmanaged size of an object in bytes.
  remarks: "This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.  \n  \n The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.  \n  \n You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method to determine how much unmanaged memory to allocate using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods."
  example:
  - "The following example creates a managed structure, transfers it to unmanaged memory, and then transfers it back to managed memory. This example uses the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method to determine how much unmanaged memory to allocate.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static int SizeOf (object structure);
    parameters:
    - id: structure
      type: System.Object
      description: The object whose size is to be returned.
    return:
      type: System.Int32
      description: The size of the specified object in unmanaged code.
  overload: System.Runtime.InteropServices.Marshal.SizeOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>structure</code> parameter is `null`.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)
  id: SizeOf(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SizeOf(Type)
  nameWithType: Marshal.SizeOf(Type)
  fullName: Marshal.SizeOf(Type)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Returns the size of an unmanaged type in bytes.
  remarks: "You can use this method when you do not have a structure. The layout must be sequential or explicit.  \n  \n The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class."
  example:
  - "The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cpp[Marshal#3](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#3)]\n [!code-csharp[Marshal#3](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#3)]\n [!code-vb[Marshal#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#3)]"
  syntax:
    content: public static int SizeOf (Type t);
    parameters:
    - id: t
      type: System.Type
      description: The type whose size is to be returned.
    return:
      type: System.Int32
      description: The size of the specified type in unmanaged code.
  overload: System.Runtime.InteropServices.Marshal.SizeOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>t</code> parameter is a generic type.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>t</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SizeOf``1
  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1
  id: SizeOf``1
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SizeOf<T>()
  nameWithType: Marshal.SizeOf<T>()
  fullName: Marshal.SizeOf<T>()
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Returns the size of an unmanaged type in bytes."
  remarks: "You can use this method when you do not have a structure. The layout must be sequential or explicit.  \n  \n The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class."
  syntax:
    content: public static int SizeOf<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type whose size is to be returned.
    return:
      type: System.Int32
      description: The size, in bytes, of the type that is specified by the <code>T</code> generic type parameter.
  overload: System.Runtime.InteropServices.Marshal.SizeOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
  id: SizeOf``1(``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SizeOf<T>(T)
  nameWithType: Marshal.SizeOf<T>(T)
  fullName: Marshal.SizeOf<T>(T)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Returns the unmanaged size of an object of a specified type in bytes."
  remarks: "This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.  \n  \n The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.  \n  \n You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method to determine how much unmanaged memory to allocate by using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods."
  syntax:
    content: public static int SizeOf<T> (T structure);
    parameters:
    - id: structure
      type: T
      description: The object whose size is to be returned.
    typeParameters:
    - id: T
      description: The type of the <code>structure</code> parameter.
    return:
      type: System.Int32
      description: The size, in bytes, of the specified object in unmanaged code.
  overload: System.Runtime.InteropServices.Marshal.SizeOf``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>structure</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
  id: StringToBSTR(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StringToBSTR(String)
  nameWithType: Marshal.StringToBSTR(String)
  fullName: Marshal.StringToBSTR(String)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Allocates a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) and copies the contents of a managed <xref href="System.String"></xref> into it.
  remarks: <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A?displayProperty=fullName>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A?displayProperty=fullName>.
  syntax:
    content: public static IntPtr StringToBSTR (string s);
    parameters:
    - id: s
      type: System.String
      description: The managed string to be copied.
    return:
      type: System.IntPtr
      description: An unmanaged pointer to the `BSTR`, or 0 if <code>s</code> is null.
  overload: System.Runtime.InteropServices.Marshal.StringToBSTR*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length for <code>s</code> is out of range.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  id: StringToCoTaskMemAnsi(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StringToCoTaskMemAnsi(String)
  nameWithType: Marshal.StringToCoTaskMemAnsi(String)
  fullName: Marshal.StringToCoTaskMemAnsi(String)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.String"></xref> to a block of memory allocated from the unmanaged COM task allocator.
  remarks: <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>. The characters of the string are copied as ANSI characters.
  syntax:
    content: public static IntPtr StringToCoTaskMemAnsi (string s);
    parameters:
    - id: s
      type: System.String
      description: A managed string to be copied.
    return:
      type: System.IntPtr
      description: An integer representing a pointer to the block of memory allocated for the string, or 0 if <code>s</code> is `null`.
  overload: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>s</code> parameter exceeds the maximum length allowed by the operating system.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)
  id: StringToCoTaskMemAuto(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StringToCoTaskMemAuto(String)
  nameWithType: Marshal.StringToCoTaskMemAuto(String)
  fullName: Marshal.StringToCoTaskMemAuto(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.String"></xref> to a block of memory allocated from the unmanaged COM task allocator.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.  \n  \n The characters of the string are copied as either ANSI or Unicode characters, depending on the operating system where the code is executing. On Windows 98, the characters are copied as ANSI characters. On Windows NT 4.0, Windows 2000, Windows XP, and the Windows Server 2003 family, the characters are copied as Unicode characters."
  syntax:
    content: public static IntPtr StringToCoTaskMemAuto (string s);
    parameters:
    - id: s
      type: System.String
      description: A managed string to be copied.
    return:
      type: System.IntPtr
      description: The allocated memory block, or 0 if <code>s</code> is `null`.
  overload: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length for <code>s</code> is out of range.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)
  id: StringToCoTaskMemUni(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StringToCoTaskMemUni(String)
  nameWithType: Marshal.StringToCoTaskMemUni(String)
  fullName: Marshal.StringToCoTaskMemUni(String)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.String"></xref> to a block of memory allocated from the unmanaged COM task allocator.
  remarks: <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>. The characters of the string are copied as Unicode characters.
  syntax:
    content: public static IntPtr StringToCoTaskMemUni (string s);
    parameters:
    - id: s
      type: System.String
      description: A managed string to be copied.
    return:
      type: System.IntPtr
      description: An integer representing a pointer to the block of memory allocated for the string, or 0 if s is `null`.
  overload: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>s</code> parameter exceeds the maximum length allowed by the operating system.
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)
  id: StringToCoTaskMemUTF8(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StringToCoTaskMemUTF8(String)
  nameWithType: Marshal.StringToCoTaskMemUTF8(String)
  fullName: Marshal.StringToCoTaskMemUTF8(String)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static IntPtr StringToCoTaskMemUTF8 (string s);
    parameters:
    - id: s
      type: System.String
      description: ''
    return:
      type: System.IntPtr
      description: ''
  overload: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8*
  exceptions: []
  version:
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  id: StringToHGlobalAnsi(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StringToHGlobalAnsi(String)
  nameWithType: Marshal.StringToHGlobalAnsi(String)
  fullName: Marshal.StringToHGlobalAnsi(String)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.String"></xref> into unmanaged memory, converting into ANSI format as it copies.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>.  \n  \n This method copies embedded null characters, and includes a terminating null character."
  example:
  - "The following example demonstrates how to convert the contents of a managed <xref:System.String> class to unmanaged memory and then dispose of the unmanaged memory when done.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/CPP/stringtohglobalansi.cpp#1)]\n [!code-csharp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/cs/stringtohglobalansi.cs#1)]"
  syntax:
    content: public static IntPtr StringToHGlobalAnsi (string s);
    parameters:
    - id: s
      type: System.String
      description: A managed string to be copied.
    return:
      type: System.IntPtr
      description: The address, in unmanaged memory, to where <code>s</code> was copied, or 0 if <code>s</code> is `null`.
  overload: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>s</code> parameter exceeds the maximum length allowed by the operating system.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)
  id: StringToHGlobalAuto(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StringToHGlobalAuto(String)
  nameWithType: Marshal.StringToHGlobalAuto(String)
  fullName: Marshal.StringToHGlobalAuto(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.String"></xref> into unmanaged memory, converting into ANSI format if required.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.  \n  \n This method copies embedded null characters, and includes a terminating null character."
  example:
  - "The following example demonstrates how to convert the contents of a managed <xref:System.String> class to unmanaged memory and then dispose of the unmanaged memory when done.  \n  \n [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAuto#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAuto/CPP/sample.cpp#1)]"
  syntax:
    content: public static IntPtr StringToHGlobalAuto (string s);
    parameters:
    - id: s
      type: System.String
      description: A managed string to be copied.
    return:
      type: System.IntPtr
      description: The address, in unmanaged memory, to where the string was copied, or 0 if <code>s</code> is `null`.
  overload: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)
  id: StringToHGlobalUni(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StringToHGlobalUni(String)
  nameWithType: Marshal.StringToHGlobalUni(String)
  fullName: Marshal.StringToHGlobalUni(String)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Copies the contents of a managed <xref href="System.String"></xref> into unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>.  \n  \n This method copies embedded null characters, and includes a terminating null character."
  syntax:
    content: public static IntPtr StringToHGlobalUni (string s);
    parameters:
    - id: s
      type: System.String
      description: A managed string to be copied.
    return:
      type: System.IntPtr
      description: The address, in unmanaged memory, to where the <code>s</code> was copied, or 0 if <code>s</code> is `null`.
  overload: System.Runtime.InteropServices.Marshal.StringToHGlobalUni*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: The method could not allocate enough native heap memory.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>s</code> parameter exceeds the maximum length allowed by the operating system.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)
  commentId: M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)
  id: StructureToPtr(System.Object,System.IntPtr,System.Boolean)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StructureToPtr(Object, IntPtr, Boolean)
  nameWithType: Marshal.StructureToPtr(Object, IntPtr, Boolean)
  fullName: Marshal.StructureToPtr(Object, IntPtr, Boolean)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Marshals data from a managed object to an unmanaged block of memory.
  remarks: "If `structure` is a value type, it can be boxed or unboxed. If it is boxed, it is unboxed before copying.  \n  \n A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>.  \n  \n <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to. If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A?displayProperty=fullName>method before you free the memory block.  \n  \n If you use the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance. Otherwise, the managed reference typesand unmanaged copies are effectively leaked.  \n  \n The overall pattern for using <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> is as follows:  \n  \n1.  On the first call to the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear.  \n  \n    > [!IMPORTANT]\n    >  Specify `true` for `fDeleteOld` only if the block contains valid data.  \n  \n2.  If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents.  \n  \n3.  If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.  \n  \n> [!NOTE]\n>  To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md)."
  example:
  - "The following example creates a managed structure, transfers it to unmanaged memory using the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method, and then transfers it back to managed memory using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static void StructureToPtr (object structure, IntPtr ptr, bool fDeleteOld);
    parameters:
    - id: structure
      type: System.Object
      description: A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.
    - id: ptr
      type: System.IntPtr
      description: A pointer to an unmanaged block of memory, which must be allocated before this method is called.
    - id: fDeleteOld
      type: System.Boolean
      description: '`true` to call the <xref href="System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)"></xref> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing `false` when the memory block already contains data can lead to a memory leak.'
  overload: System.Runtime.InteropServices.Marshal.StructureToPtr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>structure</code> is a reference type that is not a formatted class.  \n  \n -or-  \n  \n <code>structure</code> is a generic type."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)
  commentId: M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)
  id: StructureToPtr``1(``0,System.IntPtr,System.Boolean)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: StructureToPtr<T>(T, IntPtr, Boolean)
  nameWithType: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)
  fullName: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Marshals data from a managed object of a specified type to an unmanaged block of memory."
  remarks: "A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>.  \n  \n <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to. If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%60%601%28System.IntPtr%29> method before you free the memory block.  \n  \n If you use the<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance. Otherwise, the managed reference types and unmanaged copies are effectively leaked.  \n  \n The overall pattern for using<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> is as follows:  \n  \n1.  On the first call to the<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear.  \n  \n    > [!IMPORTANT]\n    >  Specify `true` for `fDeleteOld` only if the block contains valid data.  \n  \n2.  If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents.  \n  \n3.  If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.  \n  \n> [!NOTE]\n>  To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md)."
  syntax:
    content: public static void StructureToPtr<T> (T structure, IntPtr ptr, bool fDeleteOld);
    parameters:
    - id: structure
      type: T
      description: A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.
    - id: ptr
      type: System.IntPtr
      description: A pointer to an unmanaged block of memory, which must be allocated before this method is called.
    - id: fDeleteOld
      type: System.Boolean
      description: '`true` to call the <xref href="System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)"></xref> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing `false` when the memory block already contains data can lead to a memory leak.'
    typeParameters:
    - id: T
      description: The type of the managed object.
  overload: System.Runtime.InteropServices.Marshal.StructureToPtr``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>structure</code> is a reference type that is not a formatted class.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SystemDefaultCharSize
  commentId: F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize
  id: SystemDefaultCharSize
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SystemDefaultCharSize
  nameWithType: Marshal.SystemDefaultCharSize
  fullName: Marshal.SystemDefaultCharSize
  type: Field
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.
  remarks: ''
  example:
  - "The following example demonstrates the <xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize> field. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cpp[Marshal#2](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#2)]\n [!code-csharp[Marshal#2](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#2)]\n [!code-vb[Marshal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#2)]"
  syntax:
    content: public static readonly int SystemDefaultCharSize;
    return:
      type: System.Int32
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize
  commentId: F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize
  id: SystemMaxDBCSCharSize
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: SystemMaxDBCSCharSize
  nameWithType: Marshal.SystemMaxDBCSCharSize
  fullName: Marshal.SystemMaxDBCSCharSize
  type: Field
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.
  remarks: ''
  example:
  - "The following example demonstrates the <xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize> field. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cpp[Marshal#2](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#2)]\n [!code-csharp[Marshal#2](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#2)]\n [!code-vb[Marshal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#2)]"
  syntax:
    content: public static readonly int SystemMaxDBCSCharSize;
    return:
      type: System.Int32
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  id: ThrowExceptionForHR(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ThrowExceptionForHR(Int32)
  nameWithType: Marshal.ThrowExceptionForHR(Int32)
  fullName: Marshal.ThrowExceptionForHR(Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Throws an exception with a specific failure HRESULT value.
  remarks: "This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.  \n  \n Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%28System.Int32%29> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread if one is set. When this happens, the `errorCode` parameter is ignored.  \n  \n Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it. Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException>, initializes the error code field with the HRESULT, and throws that exception. When <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> is invoked, it attempts to retrieve extra information regarding the error by using the unmanaged [GetErrorInfo](https://msdn.microsoft.com/library/ms221032\\(v=vs.85\\).aspx) function.  \n  \n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).  \n  \n Occasionally, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> might return an exception from a previous COM call. In this case, you can use the following workaround and pass `IntPtr(-1)` as the second parameter (`errorInfo`):  \n  \n```  \n[SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]  \npublic static void ThrowExceptionForHR(interrorCode,IntPtrerrorInfo)  \n```"
  syntax:
    content: public static void ThrowExceptionForHR (int errorCode);
    parameters:
    - id: errorCode
      type: System.Int32
      description: The HRESULT corresponding to the desired exception.
  overload: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)
  id: ThrowExceptionForHR(System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ThrowExceptionForHR(Int32, IntPtr)
  nameWithType: Marshal.ThrowExceptionForHR(Int32, IntPtr)
  fullName: Marshal.ThrowExceptionForHR(Int32, IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Throws an exception with a specific failure HRESULT, based on the specified [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface.
  remarks: "This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.  \n  \n The <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method releases the `errorInfo` parameter, decreasing the COM reference count of the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface.  \n  \n Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread if one is set. When this happens, the `errorCode` parameter is ignored.  \n  \n Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it. Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException?displayProperty=fullName>, initializes the error code field with the HRESULT, and throws that exception. The `errorInfo` parameter is used to retrieve extra information regarding the error.  \n  \n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)."
  syntax:
    content: public static void ThrowExceptionForHR (int errorCode, IntPtr errorInfo);
    parameters:
    - id: errorCode
      type: System.Int32
      description: The HRESULT corresponding to the desired exception.
    - id: errorInfo
      type: System.IntPtr
      description: A pointer to the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface, or <code>IntPtr(-1)</code> to ignore the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) interface and construct the exception just from the error code.
  overload: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
  id: UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: UnsafeAddrOfPinnedArrayElement(Array, Int32)
  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)
  fullName: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Gets the address of the element at the specified index inside the specified array.
  remarks: The array must be pinned using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.
  syntax:
    content: public static IntPtr UnsafeAddrOfPinnedArrayElement (Array arr, int index);
    parameters:
    - id: arr
      type: System.Array
      description: The array that contains the desired element.
    - id: index
      type: System.Int32
      description: The index in the <code>arr</code> parameter of the desired element.
    return:
      type: System.IntPtr
      description: The address of <code>index</code> inside <code>arr</code>.
  overload: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)
  id: UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)
  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)
  fullName: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: "[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Gets the address of the element at the specified index in an array of a specified type."
  remarks: The array must be pinned by using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.
  syntax:
    content: public static IntPtr UnsafeAddrOfPinnedArrayElement<T> (T[] arr, int index);
    parameters:
    - id: arr
      type: T[]
      description: The array that contains the desired element.
    - id: index
      type: System.Int32
      description: The index of the desired element in the <code>arr</code> array.
    typeParameters:
    - id: T
      description: The type of the array.
    return:
      type: System.IntPtr
      description: The address of <code>index</code> in <code>arr</code>.
  overload: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)
  id: WriteByte(System.Object,System.Int32,System.Byte)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteByte(Object, Int32, Byte)
  nameWithType: Marshal.WriteByte(Object, Int32, Byte)
  fullName: Marshal.WriteByte(Object, Int32, Byte)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a single byte value to unmanaged memory at a specified offset.
  remarks: <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.
  syntax:
    content: public static void WriteByte (object ptr, int ofs, byte val);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the target object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Byte
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteByte*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  id: WriteByte(System.IntPtr,System.Int32,System.Byte)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteByte(IntPtr, Int32, Byte)
  nameWithType: Marshal.WriteByte(IntPtr, Int32, Byte)
  fullName: Marshal.WriteByte(IntPtr, Int32, Byte)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a single byte value to unmanaged memory at a specified offset.
  remarks: <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#3)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#3)]"
  syntax:
    content: public static void WriteByte (IntPtr ptr, int ofs, byte val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory to write to.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Byte
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteByte*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)
  id: WriteByte(System.IntPtr,System.Byte)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteByte(IntPtr, Byte)
  nameWithType: Marshal.WriteByte(IntPtr, Byte)
  fullName: Marshal.WriteByte(IntPtr, Byte)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a single byte value to unmanaged memory.
  remarks: <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.
  example:
  - "The following example creates a block of unmanaged memory, writes a byte to the unmanaged memory, reads the byte back from unmanaged memory, and then disposes the unmanaged memory.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/cs/example.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/vb/example.vb#1)]"
  syntax:
    content: public static void WriteByte (IntPtr ptr, byte val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory to write to.
    - id: val
      type: System.Byte
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteByte*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)
  id: WriteInt16(System.IntPtr,System.Char)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt16(IntPtr, Char)
  nameWithType: Marshal.WriteInt16(IntPtr, Char)
  fullName: Marshal.WriteInt16(IntPtr, Char)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a character as a 16-bit integer value to unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]"
  syntax:
    content: public static void WriteInt16 (IntPtr ptr, char val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory to write to.
    - id: val
      type: System.Char
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt16*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)
  id: WriteInt16(System.IntPtr,System.Int16)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt16(IntPtr, Int16)
  nameWithType: Marshal.WriteInt16(IntPtr, Int16)
  fullName: Marshal.WriteInt16(IntPtr, Int16)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 16-bit integer value to unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A>methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]"
  syntax:
    content: public static void WriteInt16 (IntPtr ptr, short val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory to write to.
    - id: val
      type: System.Int16
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt16*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)
  id: WriteInt16(System.IntPtr,System.Int32,System.Char)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt16(IntPtr, Int32, Char)
  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Char)
  fullName: Marshal.WriteInt16(IntPtr, Int32, Char)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 16-bit signed integer value to unmanaged memory at a specified offset.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]"
  syntax:
    content: public static void WriteInt16 (IntPtr ptr, int ofs, char val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in the native heap to write to.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Char
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt16*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)
  id: WriteInt16(System.IntPtr,System.Int32,System.Int16)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt16(IntPtr, Int32, Int16)
  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Int16)
  fullName: Marshal.WriteInt16(IntPtr, Int32, Int16)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 16-bit signed integer value into unmanaged memory at a specified offset.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]"
  syntax:
    content: public static void WriteInt16 (IntPtr ptr, int ofs, short val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory to write to.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Int16
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt16*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)
  id: WriteInt16(System.Object,System.Int32,System.Char)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt16(Object, Int32, Char)
  nameWithType: Marshal.WriteInt16(Object, Int32, Char)
  fullName: Marshal.WriteInt16(Object, Int32, Char)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 16-bit signed integer value to unmanaged memory at a specified offset.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  syntax:
    content: public static void WriteInt16 (object ptr, int ofs, char val);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the target object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Char
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt16*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)
  id: WriteInt16(System.Object,System.Int32,System.Int16)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt16(Object, Int32, Int16)
  nameWithType: Marshal.WriteInt16(Object, Int32, Int16)
  fullName: Marshal.WriteInt16(Object, Int32, Int16)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 16-bit signed integer value to unmanaged memory at a specified offset.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  syntax:
    content: public static void WriteInt16 (object ptr, int ofs, short val);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the target object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Int16
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt16*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)
  id: WriteInt32(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt32(IntPtr, Int32)
  nameWithType: Marshal.WriteInt32(IntPtr, Int32)
  fullName: Marshal.WriteInt32(IntPtr, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 32-bit signed integer value to unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]"
  syntax:
    content: public static void WriteInt32 (IntPtr ptr, int val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory to write to.
    - id: val
      type: System.Int32
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt32*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)
  id: WriteInt32(System.IntPtr,System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt32(IntPtr, Int32, Int32)
  nameWithType: Marshal.WriteInt32(IntPtr, Int32, Int32)
  fullName: Marshal.WriteInt32(IntPtr, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 32-bit signed integer value into unmanaged memory at a specified offset.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]"
  syntax:
    content: public static void WriteInt32 (IntPtr ptr, int ofs, int val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory to write to.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Int32
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt32*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)
  id: WriteInt32(System.Object,System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt32(Object, Int32, Int32)
  nameWithType: Marshal.WriteInt32(Object, Int32, Int32)
  fullName: Marshal.WriteInt32(Object, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 32-bit signed integer value to unmanaged memory at a specified offset.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  syntax:
    content: public static void WriteInt32 (object ptr, int ofs, int val);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the target object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Int32
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt32*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)
  id: WriteInt64(System.Object,System.Int32,System.Int64)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt64(Object, Int32, Int64)
  nameWithType: Marshal.WriteInt64(Object, Int32, Int64)
  fullName: Marshal.WriteInt64(Object, Int32, Int64)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 64-bit signed integer value to unmanaged memory at a specified offset.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  syntax:
    content: public static void WriteInt64 (object ptr, int ofs, long val);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the target object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Int64
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt64*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)
  id: WriteInt64(System.IntPtr,System.Int64)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt64(IntPtr, Int64)
  nameWithType: Marshal.WriteInt64(IntPtr, Int64)
  fullName: Marshal.WriteInt64(IntPtr, Int64)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 64-bit signed integer value to unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]"
  syntax:
    content: public static void WriteInt64 (IntPtr ptr, long val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory to write to.
    - id: val
      type: System.Int64
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt64*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)
  id: WriteInt64(System.IntPtr,System.Int32,System.Int64)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteInt64(IntPtr, Int32, Int64)
  nameWithType: Marshal.WriteInt64(IntPtr, Int32, Int64)
  fullName: Marshal.WriteInt64(IntPtr, Int32, Int64)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a 64-bit signed integer value to unmanaged memory at a specified offset.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]"
  syntax:
    content: public static void WriteInt64 (IntPtr ptr, int ofs, long val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory to write.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.Int64
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteInt64*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)
  id: WriteIntPtr(System.IntPtr,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteIntPtr(IntPtr, IntPtr)
  nameWithType: Marshal.WriteIntPtr(IntPtr, IntPtr)
  fullName: Marshal.WriteIntPtr(IntPtr, IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a processor native sized integer value into unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]"
  syntax:
    content: public static void WriteIntPtr (IntPtr ptr, IntPtr val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The address in unmanaged memory to write to.
    - id: val
      type: System.IntPtr
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteIntPtr*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
  id: WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteIntPtr(IntPtr, Int32, IntPtr)
  nameWithType: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)
  fullName: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a processor native-sized integer value to unmanaged memory at a specified offset.
  remarks: "This method writes a 32 bit integer on 32 bit systems, and a 64 bit integer on 64 bit systems.  \n  \n <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  example:
  - "The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.  \n  \n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]"
  syntax:
    content: public static void WriteIntPtr (IntPtr ptr, int ofs, IntPtr val);
    parameters:
    - id: ptr
      type: System.IntPtr
      description: The base address in unmanaged memory to write to.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.IntPtr
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteIntPtr*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)
  id: WriteIntPtr(System.Object,System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: WriteIntPtr(Object, Int32, IntPtr)
  nameWithType: Marshal.WriteIntPtr(Object, Int32, IntPtr)
  fullName: Marshal.WriteIntPtr(Object, Int32, IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a processor native sized integer value to unmanaged memory.
  remarks: "<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported."
  syntax:
    content: public static void WriteIntPtr (object ptr, int ofs, IntPtr val);
    parameters:
    - id: ptr
      type: System.Object
      description: The base address in unmanaged memory of the target object.
    - id: ofs
      type: System.Int32
      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.
    - id: val
      type: System.IntPtr
      description: The value to write.
  overload: System.Runtime.InteropServices.Marshal.WriteIntPtr*
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>ptr</code> is an <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> object. This method does not accept <xref href="System.Runtime.InteropServices.ArrayWithOffset"></xref> parameters.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)
  id: ZeroFreeBSTR(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ZeroFreeBSTR(IntPtr)
  nameWithType: Marshal.ZeroFreeBSTR(IntPtr)
  fullName: Marshal.ZeroFreeBSTR(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Frees a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) pointer that was allocated using the <xref href="System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)"></xref> method.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method first sets the contents of the BSTR to zero, and then frees the BSTR.
  syntax:
    content: public static void ZeroFreeBSTR (IntPtr s);
    parameters:
    - id: s
      type: System.IntPtr
      description: The address of the `BSTR` to free.
  overload: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)
  id: ZeroFreeCoTaskMemAnsi(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ZeroFreeCoTaskMemAnsi(IntPtr)
  nameWithType: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)
  fullName: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Frees an unmanaged string pointer that was allocated using the <xref href="System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)"></xref> method.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method.
  example:
  - "The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method to zero out and dispose the unmanaged block.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/cs/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/vb/sample.vb#1)]"
  syntax:
    content: public static void ZeroFreeCoTaskMemAnsi (IntPtr s);
    parameters:
    - id: s
      type: System.IntPtr
      description: The address of the unmanaged string to free.
  overload: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)
  id: ZeroFreeCoTaskMemUnicode(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ZeroFreeCoTaskMemUnicode(IntPtr)
  nameWithType: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)
  fullName: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Frees an unmanaged string pointer that was allocated using the <xref href="System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)"></xref> method.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method.
  syntax:
    content: public static void ZeroFreeCoTaskMemUnicode (IntPtr s);
    parameters:
    - id: s
      type: System.IntPtr
      description: The address of the unmanaged string to free.
  overload: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)
  id: ZeroFreeCoTaskMemUTF8(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ZeroFreeCoTaskMemUTF8(IntPtr)
  nameWithType: Marshal.ZeroFreeCoTaskMemUTF8(IntPtr)
  fullName: Marshal.ZeroFreeCoTaskMemUTF8(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: public static void ZeroFreeCoTaskMemUTF8 (IntPtr s);
    parameters:
    - id: s
      type: System.IntPtr
      description: ''
  overload: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8*
  exceptions: []
  version:
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)
  id: ZeroFreeGlobalAllocAnsi(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ZeroFreeGlobalAllocAnsi(IntPtr)
  nameWithType: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)
  fullName: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Frees an unmanaged string pointer that was allocated using the <xref href="System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)"></xref> method.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method.
  example:
  - "The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method to zero out and dispose the unmanaged block.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/CS/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/VB/sample.vb#1)]"
  syntax:
    content: public static void ZeroFreeGlobalAllocAnsi (IntPtr s);
    parameters:
    - id: s
      type: System.IntPtr
      description: The address of the unmanaged string to free.
  overload: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)
  id: ZeroFreeGlobalAllocUnicode(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  name: ZeroFreeGlobalAllocUnicode(IntPtr)
  nameWithType: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)
  fullName: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Frees an unmanaged string pointer that was allocated using the <xref href="System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)"></xref> method.
  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method.
  example:
  - "The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method with the unmanaged `LogonUser` function to perform impersonation with the <xref:System.Security.SecureString> class. The example then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method to zero out and free the unmanaged string reference.  \n  \n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/CS/sample.cs#1)]\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/VB/sample.vb#1)]"
  syntax:
    content: public static void ZeroFreeGlobalAllocUnicode (IntPtr s);
    parameters:
    - id: s
      type: System.IntPtr
      description: The address of the unmanaged string to free.
  overload: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.OutOfMemoryException
  parent: System
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.Runtime.InteropServices.COMException
  parent: System.Runtime.InteropServices
  isExternal: false
  name: COMException
  nameWithType: COMException
  fullName: System.Runtime.InteropServices.COMException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  parent: System
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.Runtime.InteropServices.InvalidOleVariantTypeException
  parent: System.Runtime.InteropServices
  isExternal: false
  name: InvalidOleVariantTypeException
  nameWithType: InvalidOleVariantTypeException
  fullName: System.Runtime.InteropServices.InvalidOleVariantTypeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.MissingMethodException
  parent: System
  isExternal: false
  name: MissingMethodException
  nameWithType: MissingMethodException
  fullName: System.MissingMethodException
- uid: System.AccessViolationException
  parent: System
  isExternal: false
  name: AccessViolationException
  nameWithType: AccessViolationException
  fullName: System.AccessViolationException
- uid: System.NullReferenceException
  parent: System
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
- uid: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: AddRef(IntPtr)
  nameWithType: Marshal.AddRef(IntPtr)
  fullName: Marshal.AddRef(IntPtr)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: AllocCoTaskMem(Int32)
  nameWithType: Marshal.AllocCoTaskMem(Int32)
  fullName: Marshal.AllocCoTaskMem(Int32)
- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: AllocHGlobal(Int32)
  nameWithType: Marshal.AllocHGlobal(Int32)
  fullName: Marshal.AllocHGlobal(Int32)
- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: AllocHGlobal(IntPtr)
  nameWithType: Marshal.AllocHGlobal(IntPtr)
  fullName: Marshal.AllocHGlobal(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: AreComObjectsAvailableForCleanup()
  nameWithType: Marshal.AreComObjectsAvailableForCleanup()
  fullName: Marshal.AreComObjectsAvailableForCleanup()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: BindToMoniker(String)
  nameWithType: Marshal.BindToMoniker(String)
  fullName: Marshal.BindToMoniker(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: BufferToBSTR(Array, Int32)
  nameWithType: Marshal.BufferToBSTR(Array, Int32)
  fullName: Marshal.BufferToBSTR(Array, Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ChangeWrapperHandleStrength(Object, Boolean)
  nameWithType: Marshal.ChangeWrapperHandleStrength(Object, Boolean)
  fullName: Marshal.ChangeWrapperHandleStrength(Object, Boolean)
- uid: System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CleanupUnusedObjectsInCurrentContext()
  nameWithType: Marshal.CleanupUnusedObjectsInCurrentContext()
  fullName: Marshal.CleanupUnusedObjectsInCurrentContext()
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(Single[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Single[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Single[], Int32, IntPtr, Int32)
- uid: System.Single
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single[]
  parent: System
  isExternal: false
  name: Single[]
  nameWithType: Single[]
  fullName: System.Single[]
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(IntPtr[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)
- uid: System.IntPtr[]
  parent: System
  isExternal: false
  name: IntPtr[]
  nameWithType: IntPtr[]
  fullName: System.IntPtr[]
  spec.csharp:
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(IntPtr, Single[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Single[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Single[], Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(IntPtr, Int64[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Int64[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Int64[], Int32, Int32)
- uid: System.Int64
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64[]
  parent: System
  isExternal: false
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(IntPtr, Int32[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Int32[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Int32[], Int32, Int32)
- uid: System.Int32[]
  parent: System
  isExternal: false
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(IntPtr, Int16[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Int16[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Int16[], Int32, Int32)
- uid: System.Int16
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int16[]
  parent: System
  isExternal: false
  name: Int16[]
  nameWithType: Int16[]
  fullName: System.Int16[]
  spec.csharp:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(IntPtr, Double[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Double[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Double[], Int32, Int32)
- uid: System.Double
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double[]
  parent: System
  isExternal: false
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(IntPtr, IntPtr[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(IntPtr, Byte[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Byte[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Byte[], Int32, Int32)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(Int64[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Int64[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Int64[], Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(Int32[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Int32[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Int32[], Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(Int16[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Int16[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Int16[], Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(IntPtr, Char[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Char[], Int32, Int32)
  fullName: Marshal.Copy(IntPtr, Char[], Int32, Int32)
- uid: System.Char
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char[]
  parent: System
  isExternal: false
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(Double[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Double[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Double[], Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(Char[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Char[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Char[], Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy(Byte[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Byte[], Int32, IntPtr, Int32)
  fullName: Marshal.Copy(Byte[], Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CreateAggregatedObject(IntPtr, Object)
  nameWithType: Marshal.CreateAggregatedObject(IntPtr, Object)
  fullName: Marshal.CreateAggregatedObject(IntPtr, Object)
- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CreateAggregatedObject<T>(IntPtr, T)
  nameWithType: Marshal.CreateAggregatedObject<T>(IntPtr, T)
  fullName: Marshal.CreateAggregatedObject<T>(IntPtr, T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CreateWrapperOfType(Object, Type)
  nameWithType: Marshal.CreateWrapperOfType(Object, Type)
  fullName: Marshal.CreateWrapperOfType(Object, Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CreateWrapperOfType<T,TWrapper>(T)
  nameWithType: Marshal.CreateWrapperOfType<T,TWrapper>(T)
  fullName: Marshal.CreateWrapperOfType<T,TWrapper>(T)
- uid: TWrapper
  isExternal: true
  name: TWrapper
  nameWithType: TWrapper
  fullName: TWrapper
- uid: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: DestroyStructure(IntPtr, Type)
  nameWithType: Marshal.DestroyStructure(IntPtr, Type)
  fullName: Marshal.DestroyStructure(IntPtr, Type)
- uid: System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: DestroyStructure<T>(IntPtr)
  nameWithType: Marshal.DestroyStructure<T>(IntPtr)
  fullName: Marshal.DestroyStructure<T>(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: FinalReleaseComObject(Object)
  nameWithType: Marshal.FinalReleaseComObject(Object)
  fullName: Marshal.FinalReleaseComObject(Object)
- uid: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: FreeBSTR(IntPtr)
  nameWithType: Marshal.FreeBSTR(IntPtr)
  fullName: Marshal.FreeBSTR(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: FreeCoTaskMem(IntPtr)
  nameWithType: Marshal.FreeCoTaskMem(IntPtr)
  fullName: Marshal.FreeCoTaskMem(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: FreeHGlobal(IntPtr)
  nameWithType: Marshal.FreeHGlobal(IntPtr)
  fullName: Marshal.FreeHGlobal(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GenerateGuidForType(Type)
  nameWithType: Marshal.GenerateGuidForType(Type)
  fullName: Marshal.GenerateGuidForType(Type)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GenerateProgIdForType(Type)
  nameWithType: Marshal.GenerateProgIdForType(Type)
  fullName: Marshal.GenerateProgIdForType(Type)
- uid: System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetActiveObject(String)
  nameWithType: Marshal.GetActiveObject(String)
  fullName: Marshal.GetActiveObject(String)
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComInterfaceForObject(Object, Type)
  nameWithType: Marshal.GetComInterfaceForObject(Object, Type)
  fullName: Marshal.GetComInterfaceForObject(Object, Type)
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)
  nameWithType: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)
  fullName: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)
- uid: System.Runtime.InteropServices.CustomQueryInterfaceMode
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CustomQueryInterfaceMode
  nameWithType: CustomQueryInterfaceMode
  fullName: System.Runtime.InteropServices.CustomQueryInterfaceMode
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComInterfaceForObject<T,TInterface>(T)
  nameWithType: Marshal.GetComInterfaceForObject<T,TInterface>(T)
  fullName: Marshal.GetComInterfaceForObject<T,TInterface>(T)
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComInterfaceForObjectInContext(Object, Type)
  nameWithType: Marshal.GetComInterfaceForObjectInContext(Object, Type)
  fullName: Marshal.GetComInterfaceForObjectInContext(Object, Type)
- uid: System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComObjectData(Object, Object)
  nameWithType: Marshal.GetComObjectData(Object, Object)
  fullName: Marshal.GetComObjectData(Object, Object)
- uid: System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComSlotForMethodInfo(MemberInfo)
  nameWithType: Marshal.GetComSlotForMethodInfo(MemberInfo)
  fullName: Marshal.GetComSlotForMethodInfo(MemberInfo)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetDelegateForFunctionPointer(IntPtr, Type)
  nameWithType: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)
  fullName: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetDelegateForFunctionPointer<TDelegate>(IntPtr)
  nameWithType: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)
  fullName: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)
- uid: TDelegate
  isExternal: true
  name: TDelegate
  nameWithType: TDelegate
  fullName: TDelegate
- uid: System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetEndComSlot(Type)
  nameWithType: Marshal.GetEndComSlot(Type)
  fullName: Marshal.GetEndComSlot(Type)
- uid: System.Runtime.InteropServices.Marshal.GetExceptionCode
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetExceptionCode()
  nameWithType: Marshal.GetExceptionCode()
  fullName: Marshal.GetExceptionCode()
- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetExceptionForHR(Int32)
  nameWithType: Marshal.GetExceptionForHR(Int32)
  fullName: Marshal.GetExceptionForHR(Int32)
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetExceptionForHR(Int32, IntPtr)
  nameWithType: Marshal.GetExceptionForHR(Int32, IntPtr)
  fullName: Marshal.GetExceptionForHR(Int32, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetExceptionPointers
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetExceptionPointers()
  nameWithType: Marshal.GetExceptionPointers()
  fullName: Marshal.GetExceptionPointers()
- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetFunctionPointerForDelegate(Delegate)
  nameWithType: Marshal.GetFunctionPointerForDelegate(Delegate)
  fullName: Marshal.GetFunctionPointerForDelegate(Delegate)
- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetFunctionPointerForDelegate<TDelegate>(TDelegate)
  nameWithType: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)
  fullName: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)
- uid: System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetHINSTANCE(Module)
  nameWithType: Marshal.GetHINSTANCE(Module)
  fullName: Marshal.GetHINSTANCE(Module)
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetHRForException(Exception)
  nameWithType: Marshal.GetHRForException(Exception)
  fullName: Marshal.GetHRForException(Exception)
- uid: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetHRForLastWin32Error()
  nameWithType: Marshal.GetHRForLastWin32Error()
  fullName: Marshal.GetHRForLastWin32Error()
- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetIDispatchForObject(Object)
  nameWithType: Marshal.GetIDispatchForObject(Object)
  fullName: Marshal.GetIDispatchForObject(Object)
- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetIDispatchForObjectInContext(Object)
  nameWithType: Marshal.GetIDispatchForObjectInContext(Object)
  fullName: Marshal.GetIDispatchForObjectInContext(Object)
- uid: System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetITypeInfoForType(Type)
  nameWithType: Marshal.GetITypeInfoForType(Type)
  fullName: Marshal.GetITypeInfoForType(Type)
- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetIUnknownForObject(Object)
  nameWithType: Marshal.GetIUnknownForObject(Object)
  fullName: Marshal.GetIUnknownForObject(Object)
- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetIUnknownForObjectInContext(Object)
  nameWithType: Marshal.GetIUnknownForObjectInContext(Object)
  fullName: Marshal.GetIUnknownForObjectInContext(Object)
- uid: System.Runtime.InteropServices.Marshal.GetLastWin32Error
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetLastWin32Error()
  nameWithType: Marshal.GetLastWin32Error()
  fullName: Marshal.GetLastWin32Error()
- uid: System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)
  nameWithType: Marshal.GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)
  fullName: Marshal.GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetMethodInfoForComSlot(Type, Int32, ComMemberType)
  nameWithType: Marshal.GetMethodInfoForComSlot(Type, Int32, ComMemberType)
  fullName: Marshal.GetMethodInfoForComSlot(Type, Int32, ComMemberType)
- uid: System.Runtime.InteropServices.ComMemberType
  parent: System.Runtime.InteropServices
  isExternal: false
  name: ComMemberType
  nameWithType: ComMemberType
  fullName: System.Runtime.InteropServices.ComMemberType
- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetNativeVariantForObject(Object, IntPtr)
  nameWithType: Marshal.GetNativeVariantForObject(Object, IntPtr)
  fullName: Marshal.GetNativeVariantForObject(Object, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetNativeVariantForObject<T>(T, IntPtr)
  nameWithType: Marshal.GetNativeVariantForObject<T>(T, IntPtr)
  fullName: Marshal.GetNativeVariantForObject<T>(T, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectForIUnknown(IntPtr)
  nameWithType: Marshal.GetObjectForIUnknown(IntPtr)
  fullName: Marshal.GetObjectForIUnknown(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectForNativeVariant(IntPtr)
  nameWithType: Marshal.GetObjectForNativeVariant(IntPtr)
  fullName: Marshal.GetObjectForNativeVariant(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectForNativeVariant<T>(IntPtr)
  nameWithType: Marshal.GetObjectForNativeVariant<T>(IntPtr)
  fullName: Marshal.GetObjectForNativeVariant<T>(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectsForNativeVariants(IntPtr, Int32)
  nameWithType: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)
  fullName: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectsForNativeVariants<T>(IntPtr, Int32)
  nameWithType: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)
  fullName: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetStartComSlot(Type)
  nameWithType: Marshal.GetStartComSlot(Type)
  fullName: Marshal.GetStartComSlot(Type)
- uid: System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetThreadFromFiberCookie(Int32)
  nameWithType: Marshal.GetThreadFromFiberCookie(Int32)
  fullName: Marshal.GetThreadFromFiberCookie(Int32)
- uid: System.Threading.Thread
  parent: System.Threading
  isExternal: false
  name: Thread
  nameWithType: Thread
  fullName: System.Threading.Thread
- uid: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypedObjectForIUnknown(IntPtr, Type)
  nameWithType: Marshal.GetTypedObjectForIUnknown(IntPtr, Type)
  fullName: Marshal.GetTypedObjectForIUnknown(IntPtr, Type)
- uid: System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeForITypeInfo(IntPtr)
  nameWithType: Marshal.GetTypeForITypeInfo(IntPtr)
  fullName: Marshal.GetTypeForITypeInfo(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeFromCLSID(Guid)
  nameWithType: Marshal.GetTypeFromCLSID(Guid)
  fullName: Marshal.GetTypeFromCLSID(Guid)
- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeInfoName(UCOMITypeInfo)
  nameWithType: Marshal.GetTypeInfoName(UCOMITypeInfo)
  fullName: Marshal.GetTypeInfoName(UCOMITypeInfo)
- uid: System.Runtime.InteropServices.UCOMITypeInfo
  parent: System.Runtime.InteropServices
  isExternal: false
  name: UCOMITypeInfo
  nameWithType: UCOMITypeInfo
  fullName: System.Runtime.InteropServices.UCOMITypeInfo
- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeInfoName(ITypeInfo)
  nameWithType: Marshal.GetTypeInfoName(ITypeInfo)
  fullName: Marshal.GetTypeInfoName(ITypeInfo)
- uid: System.Runtime.InteropServices.ComTypes.ITypeInfo
  parent: System.Runtime.InteropServices.ComTypes
  isExternal: false
  name: ITypeInfo
  nameWithType: ITypeInfo
  fullName: System.Runtime.InteropServices.ComTypes.ITypeInfo
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibGuid(ITypeLib)
  nameWithType: Marshal.GetTypeLibGuid(ITypeLib)
  fullName: Marshal.GetTypeLibGuid(ITypeLib)
- uid: System.Runtime.InteropServices.ComTypes.ITypeLib
  parent: System.Runtime.InteropServices.ComTypes
  isExternal: false
  name: ITypeLib
  nameWithType: ITypeLib
  fullName: System.Runtime.InteropServices.ComTypes.ITypeLib
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibGuid(UCOMITypeLib)
  nameWithType: Marshal.GetTypeLibGuid(UCOMITypeLib)
  fullName: Marshal.GetTypeLibGuid(UCOMITypeLib)
- uid: System.Runtime.InteropServices.UCOMITypeLib
  parent: System.Runtime.InteropServices
  isExternal: false
  name: UCOMITypeLib
  nameWithType: UCOMITypeLib
  fullName: System.Runtime.InteropServices.UCOMITypeLib
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibGuidForAssembly(Assembly)
  nameWithType: Marshal.GetTypeLibGuidForAssembly(Assembly)
  fullName: Marshal.GetTypeLibGuidForAssembly(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibLcid(ITypeLib)
  nameWithType: Marshal.GetTypeLibLcid(ITypeLib)
  fullName: Marshal.GetTypeLibLcid(ITypeLib)
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibLcid(UCOMITypeLib)
  nameWithType: Marshal.GetTypeLibLcid(UCOMITypeLib)
  fullName: Marshal.GetTypeLibLcid(UCOMITypeLib)
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibName(ITypeLib)
  nameWithType: Marshal.GetTypeLibName(ITypeLib)
  fullName: Marshal.GetTypeLibName(ITypeLib)
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibName(UCOMITypeLib)
  nameWithType: Marshal.GetTypeLibName(UCOMITypeLib)
  fullName: Marshal.GetTypeLibName(UCOMITypeLib)
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibVersionForAssembly(Assembly, Int32, Int32)
  nameWithType: Marshal.GetTypeLibVersionForAssembly(Assembly, Int32, Int32)
  fullName: Marshal.GetTypeLibVersionForAssembly(Assembly, Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetUniqueObjectForIUnknown(IntPtr)
  nameWithType: Marshal.GetUniqueObjectForIUnknown(IntPtr)
  fullName: Marshal.GetUniqueObjectForIUnknown(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)
  nameWithType: Marshal.GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)
  fullName: Marshal.GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.IsComObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: IsComObject(Object)
  nameWithType: Marshal.IsComObject(Object)
  fullName: Marshal.IsComObject(Object)
- uid: System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: IsTypeVisibleFromCom(Type)
  nameWithType: Marshal.IsTypeVisibleFromCom(Type)
  fullName: Marshal.IsTypeVisibleFromCom(Type)
- uid: System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: NumParamBytes(MethodInfo)
  nameWithType: Marshal.NumParamBytes(MethodInfo)
  fullName: Marshal.NumParamBytes(MethodInfo)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: OffsetOf(Type, String)
  nameWithType: Marshal.OffsetOf(Type, String)
  fullName: Marshal.OffsetOf(Type, String)
- uid: System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: OffsetOf<T>(String)
  nameWithType: Marshal.OffsetOf<T>(String)
  fullName: Marshal.OffsetOf<T>(String)
- uid: System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Prelink(MethodInfo)
  nameWithType: Marshal.Prelink(MethodInfo)
  fullName: Marshal.Prelink(MethodInfo)
- uid: System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PrelinkAll(Type)
  nameWithType: Marshal.PrelinkAll(Type)
  fullName: Marshal.PrelinkAll(Type)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringAnsi(IntPtr)
  nameWithType: Marshal.PtrToStringAnsi(IntPtr)
  fullName: Marshal.PtrToStringAnsi(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringAnsi(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringAnsi(IntPtr, Int32)
  fullName: Marshal.PtrToStringAnsi(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringAuto(IntPtr)
  nameWithType: Marshal.PtrToStringAuto(IntPtr)
  fullName: Marshal.PtrToStringAuto(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringAuto(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringAuto(IntPtr, Int32)
  fullName: Marshal.PtrToStringAuto(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringBSTR(IntPtr)
  nameWithType: Marshal.PtrToStringBSTR(IntPtr)
  fullName: Marshal.PtrToStringBSTR(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringUni(IntPtr)
  nameWithType: Marshal.PtrToStringUni(IntPtr)
  fullName: Marshal.PtrToStringUni(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringUni(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringUni(IntPtr, Int32)
  fullName: Marshal.PtrToStringUni(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringUTF8(IntPtr)
  nameWithType: Marshal.PtrToStringUTF8(IntPtr)
  fullName: Marshal.PtrToStringUTF8(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringUTF8(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringUTF8(IntPtr, Int32)
  fullName: Marshal.PtrToStringUTF8(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStructure(IntPtr, Object)
  nameWithType: Marshal.PtrToStructure(IntPtr, Object)
  fullName: Marshal.PtrToStructure(IntPtr, Object)
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStructure(IntPtr, Type)
  nameWithType: Marshal.PtrToStructure(IntPtr, Type)
  fullName: Marshal.PtrToStructure(IntPtr, Type)
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStructure<T>(IntPtr)
  nameWithType: Marshal.PtrToStructure<T>(IntPtr)
  fullName: Marshal.PtrToStructure<T>(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStructure<T>(IntPtr, T)
  nameWithType: Marshal.PtrToStructure<T>(IntPtr, T)
  fullName: Marshal.PtrToStructure<T>(IntPtr, T)
- uid: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: QueryInterface(IntPtr, Guid, IntPtr)
  nameWithType: Marshal.QueryInterface(IntPtr, Guid, IntPtr)
  fullName: Marshal.QueryInterface(IntPtr, Guid, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadByte(IntPtr, Int32)
  nameWithType: Marshal.ReadByte(IntPtr, Int32)
  fullName: Marshal.ReadByte(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadByte(Object, Int32)
  nameWithType: Marshal.ReadByte(Object, Int32)
  fullName: Marshal.ReadByte(Object, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadByte(IntPtr)
  nameWithType: Marshal.ReadByte(IntPtr)
  fullName: Marshal.ReadByte(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt16(IntPtr)
  nameWithType: Marshal.ReadInt16(IntPtr)
  fullName: Marshal.ReadInt16(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt16(IntPtr, Int32)
  nameWithType: Marshal.ReadInt16(IntPtr, Int32)
  fullName: Marshal.ReadInt16(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt16(Object, Int32)
  nameWithType: Marshal.ReadInt16(Object, Int32)
  fullName: Marshal.ReadInt16(Object, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt32(IntPtr)
  nameWithType: Marshal.ReadInt32(IntPtr)
  fullName: Marshal.ReadInt32(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt32(IntPtr, Int32)
  nameWithType: Marshal.ReadInt32(IntPtr, Int32)
  fullName: Marshal.ReadInt32(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt32(Object, Int32)
  nameWithType: Marshal.ReadInt32(Object, Int32)
  fullName: Marshal.ReadInt32(Object, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt64(IntPtr)
  nameWithType: Marshal.ReadInt64(IntPtr)
  fullName: Marshal.ReadInt64(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt64(IntPtr, Int32)
  nameWithType: Marshal.ReadInt64(IntPtr, Int32)
  fullName: Marshal.ReadInt64(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt64(Object, Int32)
  nameWithType: Marshal.ReadInt64(Object, Int32)
  fullName: Marshal.ReadInt64(Object, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadIntPtr(IntPtr, Int32)
  nameWithType: Marshal.ReadIntPtr(IntPtr, Int32)
  fullName: Marshal.ReadIntPtr(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadIntPtr(Object, Int32)
  nameWithType: Marshal.ReadIntPtr(Object, Int32)
  fullName: Marshal.ReadIntPtr(Object, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadIntPtr(IntPtr)
  nameWithType: Marshal.ReadIntPtr(IntPtr)
  fullName: Marshal.ReadIntPtr(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReAllocCoTaskMem(IntPtr, Int32)
  nameWithType: Marshal.ReAllocCoTaskMem(IntPtr, Int32)
  fullName: Marshal.ReAllocCoTaskMem(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReAllocHGlobal(IntPtr, IntPtr)
  nameWithType: Marshal.ReAllocHGlobal(IntPtr, IntPtr)
  fullName: Marshal.ReAllocHGlobal(IntPtr, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Release(IntPtr)
  nameWithType: Marshal.Release(IntPtr)
  fullName: Marshal.Release(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReleaseComObject(Object)
  nameWithType: Marshal.ReleaseComObject(Object)
  fullName: Marshal.ReleaseComObject(Object)
- uid: System.Runtime.InteropServices.Marshal.ReleaseThreadCache
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReleaseThreadCache()
  nameWithType: Marshal.ReleaseThreadCache()
  fullName: Marshal.ReleaseThreadCache()
- uid: System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToBSTR(SecureString)
  nameWithType: Marshal.SecureStringToBSTR(SecureString)
  fullName: Marshal.SecureStringToBSTR(SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToCoTaskMemAnsi(SecureString)
  nameWithType: Marshal.SecureStringToCoTaskMemAnsi(SecureString)
  fullName: Marshal.SecureStringToCoTaskMemAnsi(SecureString)
- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToCoTaskMemUnicode(SecureString)
  nameWithType: Marshal.SecureStringToCoTaskMemUnicode(SecureString)
  fullName: Marshal.SecureStringToCoTaskMemUnicode(SecureString)
- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToGlobalAllocAnsi(SecureString)
  nameWithType: Marshal.SecureStringToGlobalAllocAnsi(SecureString)
  fullName: Marshal.SecureStringToGlobalAllocAnsi(SecureString)
- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToGlobalAllocUnicode(SecureString)
  nameWithType: Marshal.SecureStringToGlobalAllocUnicode(SecureString)
  fullName: Marshal.SecureStringToGlobalAllocUnicode(SecureString)
- uid: System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SetComObjectData(Object, Object, Object)
  nameWithType: Marshal.SetComObjectData(Object, Object, Object)
  fullName: Marshal.SetComObjectData(Object, Object, Object)
- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SizeOf(Object)
  nameWithType: Marshal.SizeOf(Object)
  fullName: Marshal.SizeOf(Object)
- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SizeOf(Type)
  nameWithType: Marshal.SizeOf(Type)
  fullName: Marshal.SizeOf(Type)
- uid: System.Runtime.InteropServices.Marshal.SizeOf``1
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SizeOf<T>()
  nameWithType: Marshal.SizeOf<T>()
  fullName: Marshal.SizeOf<T>()
- uid: System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SizeOf<T>(T)
  nameWithType: Marshal.SizeOf<T>(T)
  fullName: Marshal.SizeOf<T>(T)
- uid: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToBSTR(String)
  nameWithType: Marshal.StringToBSTR(String)
  fullName: Marshal.StringToBSTR(String)
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToCoTaskMemAnsi(String)
  nameWithType: Marshal.StringToCoTaskMemAnsi(String)
  fullName: Marshal.StringToCoTaskMemAnsi(String)
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToCoTaskMemAuto(String)
  nameWithType: Marshal.StringToCoTaskMemAuto(String)
  fullName: Marshal.StringToCoTaskMemAuto(String)
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToCoTaskMemUni(String)
  nameWithType: Marshal.StringToCoTaskMemUni(String)
  fullName: Marshal.StringToCoTaskMemUni(String)
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToCoTaskMemUTF8(String)
  nameWithType: Marshal.StringToCoTaskMemUTF8(String)
  fullName: Marshal.StringToCoTaskMemUTF8(String)
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToHGlobalAnsi(String)
  nameWithType: Marshal.StringToHGlobalAnsi(String)
  fullName: Marshal.StringToHGlobalAnsi(String)
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToHGlobalAuto(String)
  nameWithType: Marshal.StringToHGlobalAuto(String)
  fullName: Marshal.StringToHGlobalAuto(String)
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToHGlobalUni(String)
  nameWithType: Marshal.StringToHGlobalUni(String)
  fullName: Marshal.StringToHGlobalUni(String)
- uid: System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StructureToPtr(Object, IntPtr, Boolean)
  nameWithType: Marshal.StructureToPtr(Object, IntPtr, Boolean)
  fullName: Marshal.StructureToPtr(Object, IntPtr, Boolean)
- uid: System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StructureToPtr<T>(T, IntPtr, Boolean)
  nameWithType: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)
  fullName: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)
- uid: System.Runtime.InteropServices.Marshal.SystemDefaultCharSize
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SystemDefaultCharSize
  nameWithType: Marshal.SystemDefaultCharSize
  fullName: Marshal.SystemDefaultCharSize
- uid: System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SystemMaxDBCSCharSize
  nameWithType: Marshal.SystemMaxDBCSCharSize
  fullName: Marshal.SystemMaxDBCSCharSize
- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ThrowExceptionForHR(Int32)
  nameWithType: Marshal.ThrowExceptionForHR(Int32)
  fullName: Marshal.ThrowExceptionForHR(Int32)
- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ThrowExceptionForHR(Int32, IntPtr)
  nameWithType: Marshal.ThrowExceptionForHR(Int32, IntPtr)
  fullName: Marshal.ThrowExceptionForHR(Int32, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: UnsafeAddrOfPinnedArrayElement(Array, Int32)
  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)
  fullName: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)
- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)
  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)
  fullName: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)
- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteByte(Object, Int32, Byte)
  nameWithType: Marshal.WriteByte(Object, Int32, Byte)
  fullName: Marshal.WriteByte(Object, Int32, Byte)
- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteByte(IntPtr, Int32, Byte)
  nameWithType: Marshal.WriteByte(IntPtr, Int32, Byte)
  fullName: Marshal.WriteByte(IntPtr, Int32, Byte)
- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteByte(IntPtr, Byte)
  nameWithType: Marshal.WriteByte(IntPtr, Byte)
  fullName: Marshal.WriteByte(IntPtr, Byte)
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt16(IntPtr, Char)
  nameWithType: Marshal.WriteInt16(IntPtr, Char)
  fullName: Marshal.WriteInt16(IntPtr, Char)
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt16(IntPtr, Int16)
  nameWithType: Marshal.WriteInt16(IntPtr, Int16)
  fullName: Marshal.WriteInt16(IntPtr, Int16)
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt16(IntPtr, Int32, Char)
  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Char)
  fullName: Marshal.WriteInt16(IntPtr, Int32, Char)
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt16(IntPtr, Int32, Int16)
  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Int16)
  fullName: Marshal.WriteInt16(IntPtr, Int32, Int16)
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt16(Object, Int32, Char)
  nameWithType: Marshal.WriteInt16(Object, Int32, Char)
  fullName: Marshal.WriteInt16(Object, Int32, Char)
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt16(Object, Int32, Int16)
  nameWithType: Marshal.WriteInt16(Object, Int32, Int16)
  fullName: Marshal.WriteInt16(Object, Int32, Int16)
- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt32(IntPtr, Int32)
  nameWithType: Marshal.WriteInt32(IntPtr, Int32)
  fullName: Marshal.WriteInt32(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt32(IntPtr, Int32, Int32)
  nameWithType: Marshal.WriteInt32(IntPtr, Int32, Int32)
  fullName: Marshal.WriteInt32(IntPtr, Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt32(Object, Int32, Int32)
  nameWithType: Marshal.WriteInt32(Object, Int32, Int32)
  fullName: Marshal.WriteInt32(Object, Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt64(Object, Int32, Int64)
  nameWithType: Marshal.WriteInt64(Object, Int32, Int64)
  fullName: Marshal.WriteInt64(Object, Int32, Int64)
- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt64(IntPtr, Int64)
  nameWithType: Marshal.WriteInt64(IntPtr, Int64)
  fullName: Marshal.WriteInt64(IntPtr, Int64)
- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt64(IntPtr, Int32, Int64)
  nameWithType: Marshal.WriteInt64(IntPtr, Int32, Int64)
  fullName: Marshal.WriteInt64(IntPtr, Int32, Int64)
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteIntPtr(IntPtr, IntPtr)
  nameWithType: Marshal.WriteIntPtr(IntPtr, IntPtr)
  fullName: Marshal.WriteIntPtr(IntPtr, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteIntPtr(IntPtr, Int32, IntPtr)
  nameWithType: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)
  fullName: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteIntPtr(Object, Int32, IntPtr)
  nameWithType: Marshal.WriteIntPtr(Object, Int32, IntPtr)
  fullName: Marshal.WriteIntPtr(Object, Int32, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeBSTR(IntPtr)
  nameWithType: Marshal.ZeroFreeBSTR(IntPtr)
  fullName: Marshal.ZeroFreeBSTR(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeCoTaskMemAnsi(IntPtr)
  nameWithType: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)
  fullName: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeCoTaskMemUnicode(IntPtr)
  nameWithType: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)
  fullName: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeCoTaskMemUTF8(IntPtr)
  nameWithType: Marshal.ZeroFreeCoTaskMemUTF8(IntPtr)
  fullName: Marshal.ZeroFreeCoTaskMemUTF8(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeGlobalAllocAnsi(IntPtr)
  nameWithType: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)
  fullName: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeGlobalAllocUnicode(IntPtr)
  nameWithType: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)
  fullName: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.AddRef*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: AddRef
  nameWithType: Marshal.AddRef
  fullName: Marshal.AddRef
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.AllocCoTaskMem*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: AllocCoTaskMem
  nameWithType: Marshal.AllocCoTaskMem
  fullName: Marshal.AllocCoTaskMem
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: AllocHGlobal
  nameWithType: Marshal.AllocHGlobal
  fullName: Marshal.AllocHGlobal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: AreComObjectsAvailableForCleanup
  nameWithType: Marshal.AreComObjectsAvailableForCleanup
  fullName: Marshal.AreComObjectsAvailableForCleanup
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.BindToMoniker*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: BindToMoniker
  nameWithType: Marshal.BindToMoniker
  fullName: Marshal.BindToMoniker
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.BufferToBSTR*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: BufferToBSTR
  nameWithType: Marshal.BufferToBSTR
  fullName: Marshal.BufferToBSTR
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ChangeWrapperHandleStrength
  nameWithType: Marshal.ChangeWrapperHandleStrength
  fullName: Marshal.ChangeWrapperHandleStrength
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CleanupUnusedObjectsInCurrentContext
  nameWithType: Marshal.CleanupUnusedObjectsInCurrentContext
  fullName: Marshal.CleanupUnusedObjectsInCurrentContext
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.Copy*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Copy
  nameWithType: Marshal.Copy
  fullName: Marshal.Copy
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CreateAggregatedObject
  nameWithType: Marshal.CreateAggregatedObject
  fullName: Marshal.CreateAggregatedObject
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CreateAggregatedObject<T>
  nameWithType: Marshal.CreateAggregatedObject<T>
  fullName: Marshal.CreateAggregatedObject<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CreateWrapperOfType
  nameWithType: Marshal.CreateWrapperOfType
  fullName: Marshal.CreateWrapperOfType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: CreateWrapperOfType<T,TWrapper>
  nameWithType: Marshal.CreateWrapperOfType<T,TWrapper>
  fullName: Marshal.CreateWrapperOfType<T,TWrapper>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.DestroyStructure*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: DestroyStructure
  nameWithType: Marshal.DestroyStructure
  fullName: Marshal.DestroyStructure
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.DestroyStructure``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: DestroyStructure<T>
  nameWithType: Marshal.DestroyStructure<T>
  fullName: Marshal.DestroyStructure<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.FinalReleaseComObject*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: FinalReleaseComObject
  nameWithType: Marshal.FinalReleaseComObject
  fullName: Marshal.FinalReleaseComObject
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.FreeBSTR*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: FreeBSTR
  nameWithType: Marshal.FreeBSTR
  fullName: Marshal.FreeBSTR
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.FreeCoTaskMem*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: FreeCoTaskMem
  nameWithType: Marshal.FreeCoTaskMem
  fullName: Marshal.FreeCoTaskMem
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.FreeHGlobal*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: FreeHGlobal
  nameWithType: Marshal.FreeHGlobal
  fullName: Marshal.FreeHGlobal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GenerateGuidForType*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GenerateGuidForType
  nameWithType: Marshal.GenerateGuidForType
  fullName: Marshal.GenerateGuidForType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GenerateProgIdForType*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GenerateProgIdForType
  nameWithType: Marshal.GenerateProgIdForType
  fullName: Marshal.GenerateProgIdForType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetActiveObject*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetActiveObject
  nameWithType: Marshal.GetActiveObject
  fullName: Marshal.GetActiveObject
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComInterfaceForObject
  nameWithType: Marshal.GetComInterfaceForObject
  fullName: Marshal.GetComInterfaceForObject
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComInterfaceForObject<T,TInterface>
  nameWithType: Marshal.GetComInterfaceForObject<T,TInterface>
  fullName: Marshal.GetComInterfaceForObject<T,TInterface>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComInterfaceForObjectInContext
  nameWithType: Marshal.GetComInterfaceForObjectInContext
  fullName: Marshal.GetComInterfaceForObjectInContext
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetComObjectData*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComObjectData
  nameWithType: Marshal.GetComObjectData
  fullName: Marshal.GetComObjectData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetComSlotForMethodInfo
  nameWithType: Marshal.GetComSlotForMethodInfo
  fullName: Marshal.GetComSlotForMethodInfo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetDelegateForFunctionPointer
  nameWithType: Marshal.GetDelegateForFunctionPointer
  fullName: Marshal.GetDelegateForFunctionPointer
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetDelegateForFunctionPointer<TDelegate>
  nameWithType: Marshal.GetDelegateForFunctionPointer<TDelegate>
  fullName: Marshal.GetDelegateForFunctionPointer<TDelegate>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetEndComSlot*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetEndComSlot
  nameWithType: Marshal.GetEndComSlot
  fullName: Marshal.GetEndComSlot
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetExceptionCode*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetExceptionCode
  nameWithType: Marshal.GetExceptionCode
  fullName: Marshal.GetExceptionCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetExceptionForHR
  nameWithType: Marshal.GetExceptionForHR
  fullName: Marshal.GetExceptionForHR
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetExceptionPointers*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetExceptionPointers
  nameWithType: Marshal.GetExceptionPointers
  fullName: Marshal.GetExceptionPointers
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetFunctionPointerForDelegate
  nameWithType: Marshal.GetFunctionPointerForDelegate
  fullName: Marshal.GetFunctionPointerForDelegate
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetFunctionPointerForDelegate<TDelegate>
  nameWithType: Marshal.GetFunctionPointerForDelegate<TDelegate>
  fullName: Marshal.GetFunctionPointerForDelegate<TDelegate>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetHINSTANCE*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetHINSTANCE
  nameWithType: Marshal.GetHINSTANCE
  fullName: Marshal.GetHINSTANCE
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetHRForException*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetHRForException
  nameWithType: Marshal.GetHRForException
  fullName: Marshal.GetHRForException
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetHRForLastWin32Error
  nameWithType: Marshal.GetHRForLastWin32Error
  fullName: Marshal.GetHRForLastWin32Error
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObject*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetIDispatchForObject
  nameWithType: Marshal.GetIDispatchForObject
  fullName: Marshal.GetIDispatchForObject
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetIDispatchForObjectInContext
  nameWithType: Marshal.GetIDispatchForObjectInContext
  fullName: Marshal.GetIDispatchForObjectInContext
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetITypeInfoForType*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetITypeInfoForType
  nameWithType: Marshal.GetITypeInfoForType
  fullName: Marshal.GetITypeInfoForType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObject*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetIUnknownForObject
  nameWithType: Marshal.GetIUnknownForObject
  fullName: Marshal.GetIUnknownForObject
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetIUnknownForObjectInContext
  nameWithType: Marshal.GetIUnknownForObjectInContext
  fullName: Marshal.GetIUnknownForObjectInContext
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetLastWin32Error*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetLastWin32Error
  nameWithType: Marshal.GetLastWin32Error
  fullName: Marshal.GetLastWin32Error
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetManagedThunkForUnmanagedMethodPtr
  nameWithType: Marshal.GetManagedThunkForUnmanagedMethodPtr
  fullName: Marshal.GetManagedThunkForUnmanagedMethodPtr
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetMethodInfoForComSlot
  nameWithType: Marshal.GetMethodInfoForComSlot
  fullName: Marshal.GetMethodInfoForComSlot
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetNativeVariantForObject
  nameWithType: Marshal.GetNativeVariantForObject
  fullName: Marshal.GetNativeVariantForObject
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetNativeVariantForObject<T>
  nameWithType: Marshal.GetNativeVariantForObject<T>
  fullName: Marshal.GetNativeVariantForObject<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectForIUnknown
  nameWithType: Marshal.GetObjectForIUnknown
  fullName: Marshal.GetObjectForIUnknown
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectForNativeVariant
  nameWithType: Marshal.GetObjectForNativeVariant
  fullName: Marshal.GetObjectForNativeVariant
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectForNativeVariant<T>
  nameWithType: Marshal.GetObjectForNativeVariant<T>
  fullName: Marshal.GetObjectForNativeVariant<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectsForNativeVariants
  nameWithType: Marshal.GetObjectsForNativeVariants
  fullName: Marshal.GetObjectsForNativeVariants
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetObjectsForNativeVariants<T>
  nameWithType: Marshal.GetObjectsForNativeVariants<T>
  fullName: Marshal.GetObjectsForNativeVariants<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetStartComSlot*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetStartComSlot
  nameWithType: Marshal.GetStartComSlot
  fullName: Marshal.GetStartComSlot
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetThreadFromFiberCookie
  nameWithType: Marshal.GetThreadFromFiberCookie
  fullName: Marshal.GetThreadFromFiberCookie
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypedObjectForIUnknown
  nameWithType: Marshal.GetTypedObjectForIUnknown
  fullName: Marshal.GetTypedObjectForIUnknown
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeForITypeInfo
  nameWithType: Marshal.GetTypeForITypeInfo
  fullName: Marshal.GetTypeForITypeInfo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeFromCLSID
  nameWithType: Marshal.GetTypeFromCLSID
  fullName: Marshal.GetTypeFromCLSID
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeInfoName
  nameWithType: Marshal.GetTypeInfoName
  fullName: Marshal.GetTypeInfoName
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibGuid
  nameWithType: Marshal.GetTypeLibGuid
  fullName: Marshal.GetTypeLibGuid
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibGuidForAssembly
  nameWithType: Marshal.GetTypeLibGuidForAssembly
  fullName: Marshal.GetTypeLibGuidForAssembly
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibLcid
  nameWithType: Marshal.GetTypeLibLcid
  fullName: Marshal.GetTypeLibLcid
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibName
  nameWithType: Marshal.GetTypeLibName
  fullName: Marshal.GetTypeLibName
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetTypeLibVersionForAssembly
  nameWithType: Marshal.GetTypeLibVersionForAssembly
  fullName: Marshal.GetTypeLibVersionForAssembly
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetUniqueObjectForIUnknown
  nameWithType: Marshal.GetUniqueObjectForIUnknown
  fullName: Marshal.GetUniqueObjectForIUnknown
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: GetUnmanagedThunkForManagedMethodPtr
  nameWithType: Marshal.GetUnmanagedThunkForManagedMethodPtr
  fullName: Marshal.GetUnmanagedThunkForManagedMethodPtr
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.IsComObject*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: IsComObject
  nameWithType: Marshal.IsComObject
  fullName: Marshal.IsComObject
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: IsTypeVisibleFromCom
  nameWithType: Marshal.IsTypeVisibleFromCom
  fullName: Marshal.IsTypeVisibleFromCom
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.NumParamBytes*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: NumParamBytes
  nameWithType: Marshal.NumParamBytes
  fullName: Marshal.NumParamBytes
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.OffsetOf*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: OffsetOf
  nameWithType: Marshal.OffsetOf
  fullName: Marshal.OffsetOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.OffsetOf``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: OffsetOf<T>
  nameWithType: Marshal.OffsetOf<T>
  fullName: Marshal.OffsetOf<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.Prelink*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Prelink
  nameWithType: Marshal.Prelink
  fullName: Marshal.Prelink
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PrelinkAll*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PrelinkAll
  nameWithType: Marshal.PrelinkAll
  fullName: Marshal.PrelinkAll
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringAnsi
  nameWithType: Marshal.PtrToStringAnsi
  fullName: Marshal.PtrToStringAnsi
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringAuto
  nameWithType: Marshal.PtrToStringAuto
  fullName: Marshal.PtrToStringAuto
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PtrToStringBSTR*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringBSTR
  nameWithType: Marshal.PtrToStringBSTR
  fullName: Marshal.PtrToStringBSTR
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringUni
  nameWithType: Marshal.PtrToStringUni
  fullName: Marshal.PtrToStringUni
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStringUTF8
  nameWithType: Marshal.PtrToStringUTF8
  fullName: Marshal.PtrToStringUTF8
  monikers:
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStructure
  nameWithType: Marshal.PtrToStructure
  fullName: Marshal.PtrToStructure
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: PtrToStructure<T>
  nameWithType: Marshal.PtrToStructure<T>
  fullName: Marshal.PtrToStructure<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.QueryInterface*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: QueryInterface
  nameWithType: Marshal.QueryInterface
  fullName: Marshal.QueryInterface
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ReadByte*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadByte
  nameWithType: Marshal.ReadByte
  fullName: Marshal.ReadByte
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ReadInt16*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt16
  nameWithType: Marshal.ReadInt16
  fullName: Marshal.ReadInt16
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ReadInt32*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt32
  nameWithType: Marshal.ReadInt32
  fullName: Marshal.ReadInt32
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ReadInt64*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadInt64
  nameWithType: Marshal.ReadInt64
  fullName: Marshal.ReadInt64
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReadIntPtr
  nameWithType: Marshal.ReadIntPtr
  fullName: Marshal.ReadIntPtr
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReAllocCoTaskMem
  nameWithType: Marshal.ReAllocCoTaskMem
  fullName: Marshal.ReAllocCoTaskMem
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ReAllocHGlobal*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReAllocHGlobal
  nameWithType: Marshal.ReAllocHGlobal
  fullName: Marshal.ReAllocHGlobal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.Release*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: Release
  nameWithType: Marshal.Release
  fullName: Marshal.Release
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ReleaseComObject*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReleaseComObject
  nameWithType: Marshal.ReleaseComObject
  fullName: Marshal.ReleaseComObject
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ReleaseThreadCache*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ReleaseThreadCache
  nameWithType: Marshal.ReleaseThreadCache
  fullName: Marshal.ReleaseThreadCache
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.SecureStringToBSTR*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToBSTR
  nameWithType: Marshal.SecureStringToBSTR
  fullName: Marshal.SecureStringToBSTR
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToCoTaskMemAnsi
  nameWithType: Marshal.SecureStringToCoTaskMemAnsi
  fullName: Marshal.SecureStringToCoTaskMemAnsi
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToCoTaskMemUnicode
  nameWithType: Marshal.SecureStringToCoTaskMemUnicode
  fullName: Marshal.SecureStringToCoTaskMemUnicode
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToGlobalAllocAnsi
  nameWithType: Marshal.SecureStringToGlobalAllocAnsi
  fullName: Marshal.SecureStringToGlobalAllocAnsi
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SecureStringToGlobalAllocUnicode
  nameWithType: Marshal.SecureStringToGlobalAllocUnicode
  fullName: Marshal.SecureStringToGlobalAllocUnicode
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.SetComObjectData*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SetComObjectData
  nameWithType: Marshal.SetComObjectData
  fullName: Marshal.SetComObjectData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.SizeOf*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SizeOf
  nameWithType: Marshal.SizeOf
  fullName: Marshal.SizeOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.SizeOf``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: SizeOf<T>
  nameWithType: Marshal.SizeOf<T>
  fullName: Marshal.SizeOf<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StringToBSTR*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToBSTR
  nameWithType: Marshal.StringToBSTR
  fullName: Marshal.StringToBSTR
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToCoTaskMemAnsi
  nameWithType: Marshal.StringToCoTaskMemAnsi
  fullName: Marshal.StringToCoTaskMemAnsi
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToCoTaskMemAuto
  nameWithType: Marshal.StringToCoTaskMemAuto
  fullName: Marshal.StringToCoTaskMemAuto
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToCoTaskMemUni
  nameWithType: Marshal.StringToCoTaskMemUni
  fullName: Marshal.StringToCoTaskMemUni
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToCoTaskMemUTF8
  nameWithType: Marshal.StringToCoTaskMemUTF8
  fullName: Marshal.StringToCoTaskMemUTF8
  monikers:
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToHGlobalAnsi
  nameWithType: Marshal.StringToHGlobalAnsi
  fullName: Marshal.StringToHGlobalAnsi
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToHGlobalAuto
  nameWithType: Marshal.StringToHGlobalAuto
  fullName: Marshal.StringToHGlobalAuto
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalUni*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StringToHGlobalUni
  nameWithType: Marshal.StringToHGlobalUni
  fullName: Marshal.StringToHGlobalUni
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StructureToPtr*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StructureToPtr
  nameWithType: Marshal.StructureToPtr
  fullName: Marshal.StructureToPtr
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.StructureToPtr``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: StructureToPtr<T>
  nameWithType: Marshal.StructureToPtr<T>
  fullName: Marshal.StructureToPtr<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ThrowExceptionForHR
  nameWithType: Marshal.ThrowExceptionForHR
  fullName: Marshal.ThrowExceptionForHR
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: UnsafeAddrOfPinnedArrayElement
  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement
  fullName: Marshal.UnsafeAddrOfPinnedArrayElement
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: UnsafeAddrOfPinnedArrayElement<T>
  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement<T>
  fullName: Marshal.UnsafeAddrOfPinnedArrayElement<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.WriteByte*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteByte
  nameWithType: Marshal.WriteByte
  fullName: Marshal.WriteByte
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.WriteInt16*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt16
  nameWithType: Marshal.WriteInt16
  fullName: Marshal.WriteInt16
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.WriteInt32*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt32
  nameWithType: Marshal.WriteInt32
  fullName: Marshal.WriteInt32
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.WriteInt64*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteInt64
  nameWithType: Marshal.WriteInt64
  fullName: Marshal.WriteInt64
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: WriteIntPtr
  nameWithType: Marshal.WriteIntPtr
  fullName: Marshal.WriteIntPtr
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeBSTR
  nameWithType: Marshal.ZeroFreeBSTR
  fullName: Marshal.ZeroFreeBSTR
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeCoTaskMemAnsi
  nameWithType: Marshal.ZeroFreeCoTaskMemAnsi
  fullName: Marshal.ZeroFreeCoTaskMemAnsi
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeCoTaskMemUnicode
  nameWithType: Marshal.ZeroFreeCoTaskMemUnicode
  fullName: Marshal.ZeroFreeCoTaskMemUnicode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeCoTaskMemUTF8
  nameWithType: Marshal.ZeroFreeCoTaskMemUTF8
  fullName: Marshal.ZeroFreeCoTaskMemUTF8
  monikers:
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeGlobalAllocAnsi
  nameWithType: Marshal.ZeroFreeGlobalAllocAnsi
  fullName: Marshal.ZeroFreeGlobalAllocAnsi
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode*
  parent: System.Runtime.InteropServices.Marshal
  isExternal: false
  name: ZeroFreeGlobalAllocUnicode
  nameWithType: Marshal.ZeroFreeGlobalAllocUnicode
  fullName: Marshal.ZeroFreeGlobalAllocUnicode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
