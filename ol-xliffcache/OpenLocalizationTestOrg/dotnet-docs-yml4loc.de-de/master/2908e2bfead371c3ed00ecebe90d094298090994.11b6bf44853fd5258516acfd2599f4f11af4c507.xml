{"nodes":[{"content":"Specifies whether a service class supports single-threaded or multi-threaded modes of operation.","nodes":[{"pos":[0,96],"content":"Specifies whether a service class supports single-threaded or multi-threaded modes of operation.","nodes":[{"content":"Specifies whether a service class supports single-threaded or multi-threaded modes of operation.","pos":[0,96]}]}],"pos":[529,626],"yaml":true},{"content":"<xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation. A single-threaded operation can be either reentrant or non-reentrant.  \n  \n The following table shows when [!INCLUDE[indigo1](~/includes/indigo1-md.md)] permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.  \n  \n|ConcurrencyMode Value|Can a new operation be invoked?|  \n|---------------------------|-------------------------------------|  \n|Single|Never.|  \n|Reentrant|Only while invoking another service or a callback.|  \n|Multiple|Always.|","nodes":[{"pos":[0,322],"content":"<xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation. A single-threaded operation can be either reentrant or non-reentrant.","nodes":[{"content":"<xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation. A single-threaded operation can be either reentrant or non-reentrant.","pos":[0,322],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph> is used in conjunction with the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A&gt;</ph> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.","pos":[0,252],"source":"<xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation."},{"content":"A single-threaded operation can be either reentrant or non-reentrant.","pos":[253,322]}]}]},{"pos":[329,537],"content":"The following table shows when <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> permits an operation to be invoked while another one is in progress, depending upon the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph>.","source":"The following table shows when [!INCLUDE[indigo1](~/includes/indigo1-md.md)] permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>."},{"pos":[544,565],"content":"ConcurrencyMode Value","nodes":[{"content":"ConcurrencyMode Value","pos":[0,21]}]},{"pos":[566,597],"content":"Can a new operation be invoked?","nodes":[{"content":"Can a new operation be invoked?","pos":[0,31]}]},{"pos":[672,678],"content":"Single","nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[679,685],"content":"Never.","nodes":[{"content":"Never.","pos":[0,6]}]},{"pos":[690,699],"content":"Reentrant","nodes":[{"content":"Reentrant","pos":[0,9]}]},{"pos":[700,750],"content":"Only while invoking another service or a callback.","nodes":[{"content":"Only while invoking another service or a callback.","pos":[0,50]}]},{"pos":[755,763],"content":"Multiple","nodes":[{"content":"Multiple","pos":[0,8]}]},{"pos":[764,771],"content":"Always.","nodes":[{"content":"Always.","pos":[0,7]}]}],"pos":[637,1420],"yaml":true,"extradata":"MT"},{"content":"The service instance is multi-threaded. No synchronization guarantees are made. Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.","nodes":[{"pos":[0,213],"content":"The service instance is multi-threaded. No synchronization guarantees are made. Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.","nodes":[{"content":"The service instance is multi-threaded. No synchronization guarantees are made. Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.","pos":[0,213],"nodes":[{"content":"The service instance is multi-threaded.","pos":[0,39]},{"content":"No synchronization guarantees are made.","pos":[40,79]},{"content":"Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.","pos":[80,213]}]}]}],"pos":[3078,3292],"yaml":true},{"content":"The service instance is single-threaded and accepts reentrant calls. The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts. Note that the service instance is unlocked only by calling another service over a [!INCLUDE[indigo2](~/includes/indigo2-md.md)] channel. In this case, the called service can reenter the first service via a callback. If the first service is not reentrant, the sequence of calls results in a deadlock. For details, see <xref href=\"System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode\"></xref>.","nodes":[{"pos":[0,697],"content":"The service instance is single-threaded and accepts reentrant calls. The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts. Note that the service instance is unlocked only by calling another service over a [!INCLUDE[indigo2](~/includes/indigo2-md.md)] channel. In this case, the called service can reenter the first service via a callback. If the first service is not reentrant, the sequence of calls results in a deadlock. For details, see <xref href=\"System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode\"></xref>.","nodes":[{"content":"The service instance is single-threaded and accepts reentrant calls.","pos":[0,68]},{"content":"The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.","pos":[69,297]},{"content":"Note that the service instance is unlocked only by calling another service over a <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> channel.","pos":[298,434],"source":" Note that the service instance is unlocked only by calling another service over a [!INCLUDE[indigo2](~/includes/indigo2-md.md)] channel."},{"content":"In this case, the called service can reenter the first service via a callback.","pos":[435,513]},{"content":"If the first service is not reentrant, the sequence of calls results in a deadlock.","pos":[514,597]},{"content":"For details, see <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode\"&gt;&lt;/xref&gt;</ph>.","pos":[598,697],"source":" For details, see <xref href=\"System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode\"></xref>."}]}],"pos":[4376,5074],"yaml":true},{"content":"The service instance is single-threaded and does not accept reentrant calls. If the <xref href=\"System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode\"></xref> property is <xref href=\"System.ServiceModel.InstanceContextMode.Single\"></xref>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.","nodes":[{"pos":[0,405],"content":"The service instance is single-threaded and does not accept reentrant calls. If the <xref href=\"System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode\"></xref> property is <xref href=\"System.ServiceModel.InstanceContextMode.Single\"></xref>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.","nodes":[{"content":"The service instance is single-threaded and does not accept reentrant calls.","pos":[0,76]},{"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">&lt;xref href=\"System.ServiceModel.InstanceContextMode.Single\"&gt;&lt;/xref&gt;</ph>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.","pos":[77,405],"source":" If the <xref href=\"System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode\"></xref> property is <xref href=\"System.ServiceModel.InstanceContextMode.Single\"></xref>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out."}]}],"pos":[6141,6547],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.ConcurrencyMode\n  commentId: T:System.ServiceModel.ConcurrencyMode\n  id: ConcurrencyMode\n  children:\n  - System.ServiceModel.ConcurrencyMode.Multiple\n  - System.ServiceModel.ConcurrencyMode.Reentrant\n  - System.ServiceModel.ConcurrencyMode.Single\n  langs:\n  - csharp\n  name: ConcurrencyMode\n  nameWithType: ConcurrencyMode\n  fullName: System.ServiceModel.ConcurrencyMode\n  type: Enum\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Specifies whether a service class supports single-threaded or multi-threaded modes of operation.\n  remarks: \"<xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation. A single-threaded operation can be either reentrant or non-reentrant.  \\n  \\n The following table shows when [!INCLUDE[indigo1](~/includes/indigo1-md.md)] permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.  \\n  \\n|ConcurrencyMode Value|Can a new operation be invoked?|  \\n|---------------------------|-------------------------------------|  \\n|Single|Never.|  \\n|Reentrant|Only while invoking another service or a callback.|  \\n|Multiple|Always.|\"\n  example:\n  - \"The following code example demonstrates the different between using Single, Reentrant, and Multiple. This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that [!INCLUDE[indigo2](~/includes/indigo2-md.md)] makes and what that means for your operation code.  \\n  \\n [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]\"\n  syntax:\n    content: public enum ConcurrencyMode\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ConcurrencyMode.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.ConcurrencyMode.Multiple\n  commentId: F:System.ServiceModel.ConcurrencyMode.Multiple\n  id: Multiple\n  parent: System.ServiceModel.ConcurrencyMode\n  langs:\n  - csharp\n  name: Multiple\n  nameWithType: ConcurrencyMode.Multiple\n  fullName: ConcurrencyMode.Multiple\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: The service instance is multi-threaded. No synchronization guarantees are made. Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.\n  syntax:\n    content: Multiple\n    return:\n      type: System.ServiceModel.ConcurrencyMode\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ConcurrencyMode.xml\n- uid: System.ServiceModel.ConcurrencyMode.Reentrant\n  commentId: F:System.ServiceModel.ConcurrencyMode.Reentrant\n  id: Reentrant\n  parent: System.ServiceModel.ConcurrencyMode\n  langs:\n  - csharp\n  name: Reentrant\n  nameWithType: ConcurrencyMode.Reentrant\n  fullName: ConcurrencyMode.Reentrant\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: The service instance is single-threaded and accepts reentrant calls. The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts. Note that the service instance is unlocked only by calling another service over a [!INCLUDE[indigo2](~/includes/indigo2-md.md)] channel. In this case, the called service can reenter the first service via a callback. If the first service is not reentrant, the sequence of calls results in a deadlock. For details, see <xref href=\"System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode\"></xref>.\n  syntax:\n    content: Reentrant\n    return:\n      type: System.ServiceModel.ConcurrencyMode\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ConcurrencyMode.xml\n- uid: System.ServiceModel.ConcurrencyMode.Single\n  commentId: F:System.ServiceModel.ConcurrencyMode.Single\n  id: Single\n  parent: System.ServiceModel.ConcurrencyMode\n  langs:\n  - csharp\n  name: Single\n  nameWithType: ConcurrencyMode.Single\n  fullName: ConcurrencyMode.Single\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: The service instance is single-threaded and does not accept reentrant calls. If the <xref href=\"System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode\"></xref> property is <xref href=\"System.ServiceModel.InstanceContextMode.Single\"></xref>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.\n  syntax:\n    content: Single\n    return:\n      type: System.ServiceModel.ConcurrencyMode\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ConcurrencyMode.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.ServiceModel.ConcurrencyMode.Multiple\n  parent: System.ServiceModel.ConcurrencyMode\n  isExternal: false\n  name: Multiple\n  nameWithType: ConcurrencyMode.Multiple\n  fullName: ConcurrencyMode.Multiple\n- uid: System.ServiceModel.ConcurrencyMode\n  parent: System.ServiceModel\n  isExternal: false\n  name: ConcurrencyMode\n  nameWithType: ConcurrencyMode\n  fullName: System.ServiceModel.ConcurrencyMode\n- uid: System.ServiceModel.ConcurrencyMode.Reentrant\n  parent: System.ServiceModel.ConcurrencyMode\n  isExternal: false\n  name: Reentrant\n  nameWithType: ConcurrencyMode.Reentrant\n  fullName: ConcurrencyMode.Reentrant\n- uid: System.ServiceModel.ConcurrencyMode.Single\n  parent: System.ServiceModel.ConcurrencyMode\n  isExternal: false\n  name: Single\n  nameWithType: ConcurrencyMode.Single\n  fullName: ConcurrencyMode.Single\n"}