### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDiffieHellmanCng
  commentId: T:System.Security.Cryptography.ECDiffieHellmanCng
  id: ECDiffieHellmanCng
  children:
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  - System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  - System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  - System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDiffieHellmanCng.Key
  - System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  - System.Security.Cryptography.ECDiffieHellmanCng.Label
  - System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  - System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  - System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  - System.Security.Cryptography.ECDiffieHellmanCng.Seed
  - System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  langs:
  - csharp
  name: ECDiffieHellmanCng
  nameWithType: ECDiffieHellmanCng
  fullName: System.Security.Cryptography.ECDiffieHellmanCng
  type: Class
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.
  remarks: "The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class enables two parties to exchange private key material even if they are communicating through a public channel.  Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes. The secret agreement can then be used for a variety of purposes, including as a symmetric key. However, instead of exposing the secret agreement directly, the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class does some post-processing on the agreement before providing the value. This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.  \n  \n|Key derivation function|Properties|  \n|-----------------------------|----------------|  \n|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|  \n|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|  \n|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.|  \n  \n The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application. The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:  \n  \n1.  Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation  \n  \n2.  Alice and Bob configure the KDF using parameters the agree on.  \n  \n3.  Alice sends Bob her public key.  \n  \n4.  Bob sends Alice his public key.  \n  \n5.  Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material."
  example:
  - "The following example shows how to use the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.  \n  \n [!code-csharp[ECDiffieHellmanCng#1](~/samples/snippets/csharp/VS_Snippets_CLR/ecdiffiehellmancng/cs/program.cs#1)]\n [!code-vb[ECDiffieHellmanCng#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ecdiffiehellmancng/vb/program.vb#1)]"
  syntax:
    content: 'public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.ECDiffieHellman
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.ECDiffieHellman.Create
  - System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng()
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng()
  fullName: ECDiffieHellmanCng.ECDiffieHellmanCng()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDiffieHellmanCng"></xref> class with a random key pair.
  remarks: The random key pair has a default public key length of 521 bits.
  syntax:
    content: public ECDiffieHellmanCng ();
    parameters: []
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng(Int32)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
  fullName: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDiffieHellmanCng"></xref> class with a random key pair, using the specified key size.
  remarks: The random key pair will have the public key length defined by the `keySize` parameter.
  syntax:
    content: public ECDiffieHellmanCng (int keySize);
    parameters:
    - id: keySize
      type: System.Int32
      description: The size of the key. Valid key sizes are 256, 384, and 521 bits.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>keySize</code> specifies an invalid length.
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: Cryptography Next Generation (CNG) classes are not supported on this system.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  id: '#ctor(System.Security.Cryptography.CngKey)'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng(CngKey)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
  fullName: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDiffieHellmanCng"></xref> class by using the specified <xref href="System.Security.Cryptography.CngKey"></xref> object.
  syntax:
    content: public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);
    parameters:
    - id: key
      type: System.Security.Cryptography.CngKey
      description: The key that will be used as input to the cryptographic operations performed by the current object.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>key</code> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: Cryptography Next Generation (CNG) classes are not supported on this system.
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)
  id: '#ctor(System.Security.Cryptography.ECCurve)'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng(ECCurve)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(ECCurve)
  fullName: ECDiffieHellmanCng.ECDiffieHellmanCng(ECCurve)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the <xref href="System.Security.Cryptography.ECDiffieHellmanCng"></xref> class whose public/private key pair is generated over the specified curve.
  remarks: '`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method and must be either a named or explicit prime.'
  syntax:
    content: public ECDiffieHellmanCng (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve used to generate the public/private key pair.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>curve</code> does not validate.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  fullName: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.
  remarks: If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.
  syntax:
    content: public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm  to use to derive the key material.
    - id: secretPrepend
      type: System.Byte[]
      description: A value to prepend to the derived secret before hashing.
    - id: secretAppend
      type: System.Byte[]
      description: A value to append to the derived secret before hashing.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>otherPartyPublicKey</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.  \n  \n -or-  \n  \n <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: All other errors.
  attributes: []
  version:
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  fullName: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).
  remarks: If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays. If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.
  syntax:
    content: public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm to use to derive the key material.
    - id: hmacKey
      type: System.Byte[]
      description: The key for the HMAC.
    - id: secretPrepend
      type: System.Byte[]
      description: A value to prepend to the derived secret before hashing.
    - id: secretAppend
      type: System.Byte[]
      description: A value to append to the derived secret before hashing.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>otherPartyPublicKey</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.  \n  \n -or-  \n  \n <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: All other errors.
  attributes: []
  version:
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyMaterial(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
  fullName: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives the key material that is generated from the secret agreement between two parties, given a <xref href="System.Security.Cryptography.CngKey"></xref> object that contains the second party's public key.
  syntax:
    content: public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.CngKey
      description: An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.
    return:
      type: System.Byte[]
      description: A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>otherPartyPublicKey</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>otherPartyPublicKey</code> is invalid. Either its <xref href="System.Security.Cryptography.CngKey.AlgorithmGroup"></xref> property does not specify <xref href="System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman"></xref> or its key size does not match the key size of this instance.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: This object's <xref href="System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction"></xref> property specifies the <xref href="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls"></xref> key derivation function, but either <xref href="System.Security.Cryptography.ECDiffieHellmanCng.Label"></xref> or <xref href="System.Security.Cryptography.ECDiffieHellmanCng.Seed"></xref> is `null`.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: All other errors.
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives the key material that is generated from the secret agreement between two parties, given an <xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"></xref> object that contains the second party's public key.
  syntax:
    content: public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The public key from the other party in the key exchange.
    return:
      type: System.Byte[]
      description: A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>otherPartyPublicKey</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>otherPartyPublicKey</code> is not an <xref href="System.Security.Cryptography.ECDiffieHellmanCngPublicKey"></xref> key.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  fullName: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.
  syntax:
    content: public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: prfLabel
      type: System.Byte[]
      description: The ASCII-encoded PRF label.
    - id: prfSeed
      type: System.Byte[]
      description: The 64-byte PRF seed.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code> is `null`.  \n  \n -or-  \n  \n <code>prfLabel</code> is `null`.  \n  \n -or-  \n  \n <code>prfSeed</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>prfSeed</code> is not exactly 64 bytes in length.  \n  \n -or-  \n  \n All other cryptographic errors."
  attributes: []
  version:
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  id: DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveSecretAgreementHandle(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
  fullName: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets a handle to the secret agreement generated between two parties, given a <xref href="System.Security.Cryptography.CngKey"></xref> object that contains the second party's public key.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.CngKey
      description: An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
      description: A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>otherPartyPublicKey</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: All other errors.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  fullName: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets a handle to the secret agreement generated between two parties, given an <xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"></xref> object that contains the second party's public key.
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The public key from the other party in the key exchange.
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
      description: A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>otherPartyPublicKey</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>otherPartyPublicKey</code> is not an <xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"></xref> key.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ECDiffieHellmanCng.Dispose(Boolean)
  fullName: ECDiffieHellmanCng.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Dispose*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)
  id: ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDiffieHellmanCng.ExportExplicitParameters(Boolean)
  fullName: ECDiffieHellmanCng.ExportExplicitParameters(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Exports the key and explicit curve parameters used by the <xref href="System.Security.Cryptography.ECCurve"></xref> object into an <xref href="System.Security.Cryptography.ECParameters"></xref> object.
  syntax:
    content: public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: The key and explicit curve parameters used by the <xref href="System.Security.Cryptography.ECCurve"></xref> object.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The method cannot obtain curve values.
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: Explicit export is not supported by this platform. Windows 10 or higher is required.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: ECDiffieHellmanCng.ExportParameters(Boolean)
  fullName: ECDiffieHellmanCng.ExportParameters(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Exports the key used by the <xref href="System.Security.Cryptography.ECCurve"></xref> object into an <xref href="System.Security.Cryptography.ECParameters"></xref> object.
  remarks: If the key was created as a named curve, the <xref:System.Security.Cryptography.ECParameters?displayProperty=fullName> field contains named curve parameters;          otherwise,  it contains explicit parameters.
  syntax:
    content: public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: The key and named curve parameters used by the <xref href="System.Security.Cryptography.ECCurve"></xref> object.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The method cannot obtain curve values.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  id: FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: FromXmlString(String, ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String, ECKeyXmlFormat)
  fullName: ECDiffieHellmanCng.FromXmlString(String, ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Deserializes the key information from an XML string by using the specified format.
  syntax:
    content: public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: xml
      type: System.String
      description: The XML-based key information to be deserialized.
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href="System.Security.Cryptography.ECKeyXmlFormat.Rfc4050"></xref>.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>xml</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>xml</code> is malformed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href="System.Security.Cryptography.ECKeyXmlFormat.Rfc4050"></xref>.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: All other errors.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String)
  fullName: ECDiffieHellmanCng.FromXmlString(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: This method is not implemented.
  remarks: To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: The XML-based key information to be deserialized.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: This method was not overridden for this instance.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)
  id: GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: GenerateKey(ECCurve)
  nameWithType: ECDiffieHellmanCng.GenerateKey(ECCurve)
  fullName: ECDiffieHellmanCng.GenerateKey(ECCurve)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Generates a new ephemeral public/private key pair for the specified curve.
  remarks: "`curve` must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method) and must not be implicit.  \n  \n Characteristic-2 curves are not supported on Windows."
  syntax:
    content: public override void GenerateKey (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve used to generate an ephemeral public/private key pair.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>curve</code> does not validate.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  id: HashAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: ECDiffieHellmanCng.HashAlgorithm
  fullName: ECDiffieHellmanCng.HashAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets or sets the hash algorithm to use when generating key material.
  remarks: "This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.  \n  \n This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.  \n  \n Other custom hash algorithms may also be used.  \n  \n The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>."
  syntax:
    content: public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: An object that specifies the hash algorithm.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value is `null.`
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  id: HmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: HmacKey
  nameWithType: ECDiffieHellmanCng.HmacKey
  fullName: ECDiffieHellmanCng.HmacKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.
  remarks: This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`. By default, the value is `null`.
  syntax:
    content: public byte[] HmacKey { get; set; }
    return:
      type: System.Byte[]
      description: The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)
  id: ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ImportParameters(ECParameters)
  nameWithType: ECDiffieHellmanCng.ImportParameters(ECParameters)
  fullName: ECDiffieHellmanCng.ImportParameters(ECParameters)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Imports the specified parameters for an <xref href="System.Security.Cryptography.ECCurve"></xref> object as a key into the current instance.
  remarks: The <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> method replaces the existing key that this object is working with by creating a         new <xref:System.Security.Cryptography.CngKey> object. If `parameters` contains only the <xref:System.Security.Cryptography.ECParameters.Q> field, then only a public key is imported.         If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, then a full key pair is be imported.          The `parameter`<xref:System.Security.Cryptography.ECParameters.Curve>value specifies the type of the curve to import.
  syntax:
    content: public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
      description: The curve's parameters to import.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>parameters</code> does not validate.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>parameters</code> references a curve that cannot be imported..
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: <code>parameters</code> references a curve that is not supported by this platform.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.Key
  id: Key
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Key
  nameWithType: ECDiffieHellmanCng.Key
  fullName: ECDiffieHellmanCng.Key
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Specifies the <xref href="System.Security.Cryptography.CngKey"></xref> that is used by the current object for cryptographic operations.
  syntax:
    content: public System.Security.Cryptography.CngKey Key { get; }
    return:
      type: System.Security.Cryptography.CngKey
      description: The key pair used by this object to perform cryptographic operations.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Key*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  id: KeyDerivationFunction
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: KeyDerivationFunction
  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction
  fullName: ECDiffieHellmanCng.KeyDerivationFunction
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets or sets the key derivation function for the <xref href="System.Security.Cryptography.ECDiffieHellmanCng"></xref> class.
  remarks: This property specifies the key derivation function that is used to transform the secret agreement into key material.
  syntax:
    content: public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
      description: 'One of the <xref href="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"></xref> enumeration values: <xref href="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash"></xref>, <xref href="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac"></xref>, or <xref href="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls"></xref>. The default value is <xref href="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash"></xref>.'
  overload: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The enumeration value is out of range.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.Label
  id: Label
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Label
  nameWithType: ECDiffieHellmanCng.Label
  fullName: ECDiffieHellmanCng.Label
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets or sets the label value that is used for key derivation.
  remarks: This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property. By default, it is `null`.
  syntax:
    content: public byte[] Label { get; set; }
    return:
      type: System.Byte[]
      description: The label value.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Label*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: PublicKey
  nameWithType: ECDiffieHellmanCng.PublicKey
  fullName: ECDiffieHellmanCng.PublicKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets the public key that can be used by another <xref href="System.Security.Cryptography.ECDiffieHellmanCng"></xref> object to generate a shared secret agreement.
  syntax:
    content: public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The public key that is associated with this instance of the <xref href="System.Security.Cryptography.ECDiffieHellmanCng"></xref> object.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  id: SecretAppend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: SecretAppend
  nameWithType: ECDiffieHellmanCng.SecretAppend
  fullName: ECDiffieHellmanCng.SecretAppend
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets or sets a value that will be appended to the secret agreement when generating key material.
  remarks: This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> key derivation function (KDF) is used. The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material. By default, the value is `null`.
  syntax:
    content: public byte[] SecretAppend { get; set; }
    return:
      type: System.Byte[]
      description: The value that is appended to the secret agreement.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  id: SecretPrepend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: SecretPrepend
  nameWithType: ECDiffieHellmanCng.SecretPrepend
  fullName: ECDiffieHellmanCng.SecretPrepend
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.
  remarks: "This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:  \n  \n-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>  \n  \n-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>  \n  \n The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material. By default, the value is `null`."
  syntax:
    content: public byte[] SecretPrepend { get; set; }
    return:
      type: System.Byte[]
      description: The value that is appended to the beginning of the secret agreement during key derivation.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.Seed
  id: Seed
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Seed
  nameWithType: ECDiffieHellmanCng.Seed
  fullName: ECDiffieHellmanCng.Seed
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets or sets the seed value that will be used when deriving key material.
  remarks: This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>. By default, the value is `null`.
  syntax:
    content: public byte[] Seed { get; set; }
    return:
      type: System.Byte[]
      description: The seed value.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Seed*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: ECDiffieHellmanCng.ToXmlString(Boolean)
  fullName: ECDiffieHellmanCng.ToXmlString(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: This method is not implemented.
  remarks: To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.String
      description: Not applicable.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: This method was not overridden for this instance.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  commentId: M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  id: ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
  fullName: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Serializes the key information to an XML string by using the specified format.
  syntax:
    content: public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href="System.Security.Cryptography.ECKeyXmlFormat.Rfc4050"></xref>.
    return:
      type: System.String
      description: A string object that contains the key information, serialized to an XML string, according to the requested format.
  overload: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href="System.Security.Cryptography.ECKeyXmlFormat.Rfc4050"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  commentId: P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  id: UseSecretAgreementAsHmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: UseSecretAgreementAsHmacKey
  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  fullName: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.
  remarks: '-   This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>. By default, the value is `false`.'
  syntax:
    content: public bool UseSecretAgreementAsHmacKey { get; }
    return:
      type: System.Boolean
      description: '`true` if the secret agreement is used as an HMAC key to derive key material; otherwise, `false`.'
  overload: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.Cryptography.ECDiffieHellman
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.PlatformNotSupportedException
  parent: System
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng()
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng()
  fullName: ECDiffieHellmanCng.ECDiffieHellmanCng()
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng(Int32)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
  fullName: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng(CngKey)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
  fullName: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng(ECCurve)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(ECCurve)
  fullName: ECDiffieHellmanCng.ECDiffieHellmanCng(ECCurve)
- uid: System.Security.Cryptography.ECCurve
  parent: System.Security.Cryptography
  isExternal: false
  name: ECCurve
  nameWithType: ECCurve
  fullName: System.Security.Cryptography.ECCurve
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  fullName: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  fullName: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyMaterial(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
  fullName: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  fullName: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveSecretAgreementHandle(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
  fullName: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptSecretHandle
  nameWithType: SafeNCryptSecretHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  fullName: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ECDiffieHellmanCng.Dispose(Boolean)
  fullName: ECDiffieHellmanCng.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDiffieHellmanCng.ExportExplicitParameters(Boolean)
  fullName: ECDiffieHellmanCng.ExportExplicitParameters(Boolean)
- uid: System.Security.Cryptography.ECParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: ECParameters
  nameWithType: ECParameters
  fullName: System.Security.Cryptography.ECParameters
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: ECDiffieHellmanCng.ExportParameters(Boolean)
  fullName: ECDiffieHellmanCng.ExportParameters(Boolean)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: FromXmlString(String, ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String, ECKeyXmlFormat)
  fullName: ECDiffieHellmanCng.FromXmlString(String, ECKeyXmlFormat)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECKeyXmlFormat
  parent: System.Security.Cryptography
  isExternal: false
  name: ECKeyXmlFormat
  nameWithType: ECKeyXmlFormat
  fullName: System.Security.Cryptography.ECKeyXmlFormat
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: FromXmlString(String)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String)
  fullName: ECDiffieHellmanCng.FromXmlString(String)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: GenerateKey(ECCurve)
  nameWithType: ECDiffieHellmanCng.GenerateKey(ECCurve)
  fullName: ECDiffieHellmanCng.GenerateKey(ECCurve)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDiffieHellmanCng.HashAlgorithm
  fullName: ECDiffieHellmanCng.HashAlgorithm
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HmacKey
  nameWithType: ECDiffieHellmanCng.HmacKey
  fullName: ECDiffieHellmanCng.HmacKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ImportParameters(ECParameters)
  nameWithType: ECDiffieHellmanCng.ImportParameters(ECParameters)
  fullName: ECDiffieHellmanCng.ImportParameters(ECParameters)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Key
  nameWithType: ECDiffieHellmanCng.Key
  fullName: ECDiffieHellmanCng.Key
- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: KeyDerivationFunction
  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction
  fullName: ECDiffieHellmanCng.KeyDerivationFunction
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanKeyDerivationFunction
  nameWithType: ECDiffieHellmanKeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Label
  nameWithType: ECDiffieHellmanCng.Label
  fullName: ECDiffieHellmanCng.Label
- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellmanCng.PublicKey
  fullName: ECDiffieHellmanCng.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretAppend
  nameWithType: ECDiffieHellmanCng.SecretAppend
  fullName: ECDiffieHellmanCng.SecretAppend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretPrepend
  nameWithType: ECDiffieHellmanCng.SecretPrepend
  fullName: ECDiffieHellmanCng.SecretPrepend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Seed
  nameWithType: ECDiffieHellmanCng.Seed
  fullName: ECDiffieHellmanCng.Seed
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: ECDiffieHellmanCng.ToXmlString(Boolean)
  fullName: ECDiffieHellmanCng.ToXmlString(Boolean)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
  fullName: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: UseSecretAgreementAsHmacKey
  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  fullName: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyMaterial
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial
  fullName: ECDiffieHellmanCng.DeriveKeyMaterial
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveSecretAgreementHandle
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle
  fullName: ECDiffieHellmanCng.DeriveSecretAgreementHandle
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng
  fullName: ECDiffieHellmanCng.ECDiffieHellmanCng
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHash
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash
  fullName: ECDiffieHellmanCng.DeriveKeyFromHash
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHmac
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac
  fullName: ECDiffieHellmanCng.DeriveKeyFromHmac
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyTls
  nameWithType: ECDiffieHellmanCng.DeriveKeyTls
  fullName: ECDiffieHellmanCng.DeriveKeyTls
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Dispose
  nameWithType: ECDiffieHellmanCng.Dispose
  fullName: ECDiffieHellmanCng.Dispose
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ExportExplicitParameters
  nameWithType: ECDiffieHellmanCng.ExportExplicitParameters
  fullName: ECDiffieHellmanCng.ExportExplicitParameters
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ExportParameters
  nameWithType: ECDiffieHellmanCng.ExportParameters
  fullName: ECDiffieHellmanCng.ExportParameters
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: FromXmlString
  nameWithType: ECDiffieHellmanCng.FromXmlString
  fullName: ECDiffieHellmanCng.FromXmlString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: GenerateKey
  nameWithType: ECDiffieHellmanCng.GenerateKey
  fullName: ECDiffieHellmanCng.GenerateKey
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDiffieHellmanCng.HashAlgorithm
  fullName: ECDiffieHellmanCng.HashAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HmacKey
  nameWithType: ECDiffieHellmanCng.HmacKey
  fullName: ECDiffieHellmanCng.HmacKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ImportParameters
  nameWithType: ECDiffieHellmanCng.ImportParameters
  fullName: ECDiffieHellmanCng.ImportParameters
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Key
  nameWithType: ECDiffieHellmanCng.Key
  fullName: ECDiffieHellmanCng.Key
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: KeyDerivationFunction
  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction
  fullName: ECDiffieHellmanCng.KeyDerivationFunction
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Label
  nameWithType: ECDiffieHellmanCng.Label
  fullName: ECDiffieHellmanCng.Label
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellmanCng.PublicKey
  fullName: ECDiffieHellmanCng.PublicKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretAppend
  nameWithType: ECDiffieHellmanCng.SecretAppend
  fullName: ECDiffieHellmanCng.SecretAppend
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretPrepend
  nameWithType: ECDiffieHellmanCng.SecretPrepend
  fullName: ECDiffieHellmanCng.SecretPrepend
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Seed
  nameWithType: ECDiffieHellmanCng.Seed
  fullName: ECDiffieHellmanCng.Seed
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ToXmlString
  nameWithType: ECDiffieHellmanCng.ToXmlString
  fullName: ECDiffieHellmanCng.ToXmlString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: UseSecretAgreementAsHmacKey
  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  fullName: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellmanCng.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: AsymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: ECDiffieHellman.Create()
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: ECDiffieHellman.Create(String)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: AsymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: ECDiffieHellman.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: AsymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: AsymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: ECDiffieHellman.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(ECCurve)
  nameWithType: ECDiffieHellman.Create(ECCurve)
  fullName: ECDiffieHellman.Create(ECCurve)
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(ECParameters)
  nameWithType: ECDiffieHellman.Create(ECParameters)
  fullName: ECDiffieHellman.Create(ECParameters)
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)
  fullName: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])
  fullName: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])
