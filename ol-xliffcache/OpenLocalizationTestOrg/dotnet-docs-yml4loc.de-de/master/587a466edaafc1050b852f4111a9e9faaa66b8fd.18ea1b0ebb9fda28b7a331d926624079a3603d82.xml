{"nodes":[{"content":"Represents the security context for a message in a queue.","nodes":[{"pos":[0,57],"content":"Represents the security context for a message in a queue.","nodes":[{"content":"Represents the security context for a message in a queue.","pos":[0,57]}]}],"pos":[414,472],"yaml":true},{"content":"The security context contains cached security information such as an internal certificate, the corresponding private key, the user's SID, needed to attach a certificate and the sender identifier to a message when requesting authentication.  \n  \n If a client, such as an ASP.NET application, impersonates a user to send a message to a queue, the identity of the user is used to access the queue. If the queue is remote, these credentials are cached and used for messages that are subsequently sent to the queue. Therefore, the SID in subsequent messages will be the cached identity of the first user that sent a message to the queue. The cached identity of the first user that sent a message to the queue will be used for subsequent users.  \n  \n To overcome this problem, set the security context using <xref:System.Messaging.Message.SecurityContext%2A> before sending a message to a remote queue to ensure that the current user's credentials are used to gain access to the queue. However, the suggested best practice is to:  \n  \n1.  Make the queue an authenticated queue.  \n  \n2.  Run the ASP.NET application as a domain identity and authorize that application to write to the queue.  \n  \n3.  Do not impersonate the user when using the queue. Instead, get the caller’s identity and either perform authorization checking in the ASP.NET application or include the caller’s identity as part of the message and perform authorization checking in the receiver application.","nodes":[{"pos":[0,239],"content":"The security context contains cached security information such as an internal certificate, the corresponding private key, the user's SID, needed to attach a certificate and the sender identifier to a message when requesting authentication.","nodes":[{"content":"The security context contains cached security information such as an internal certificate, the corresponding private key, the user's SID, needed to attach a certificate and the sender identifier to a message when requesting authentication.","pos":[0,239]}]},{"pos":[246,738],"content":"If a client, such as an ASP.NET application, impersonates a user to send a message to a queue, the identity of the user is used to access the queue. If the queue is remote, these credentials are cached and used for messages that are subsequently sent to the queue. Therefore, the SID in subsequent messages will be the cached identity of the first user that sent a message to the queue. The cached identity of the first user that sent a message to the queue will be used for subsequent users.","nodes":[{"content":"If a client, such as an ASP.NET application, impersonates a user to send a message to a queue, the identity of the user is used to access the queue. If the queue is remote, these credentials are cached and used for messages that are subsequently sent to the queue. Therefore, the SID in subsequent messages will be the cached identity of the first user that sent a message to the queue. The cached identity of the first user that sent a message to the queue will be used for subsequent users.","pos":[0,492],"nodes":[{"content":"If a client, such as an ASP.NET application, impersonates a user to send a message to a queue, the identity of the user is used to access the queue.","pos":[0,148]},{"content":"If the queue is remote, these credentials are cached and used for messages that are subsequently sent to the queue.","pos":[149,264]},{"content":"Therefore, the SID in subsequent messages will be the cached identity of the first user that sent a message to the queue.","pos":[265,386]},{"content":"The cached identity of the first user that sent a message to the queue will be used for subsequent users.","pos":[387,492]}]}]},{"pos":[745,1023],"content":"To overcome this problem, set the security context using <xref:System.Messaging.Message.SecurityContext%2A> before sending a message to a remote queue to ensure that the current user's credentials are used to gain access to the queue. However, the suggested best practice is to:","nodes":[{"content":"To overcome this problem, set the security context using <xref:System.Messaging.Message.SecurityContext%2A> before sending a message to a remote queue to ensure that the current user's credentials are used to gain access to the queue. However, the suggested best practice is to:","pos":[0,278],"nodes":[{"content":"To overcome this problem, set the security context using <ph id=\"ph1\">&lt;xref:System.Messaging.Message.SecurityContext%2A&gt;</ph> before sending a message to a remote queue to ensure that the current user's credentials are used to gain access to the queue.","pos":[0,234],"source":"To overcome this problem, set the security context using <xref:System.Messaging.Message.SecurityContext%2A> before sending a message to a remote queue to ensure that the current user's credentials are used to gain access to the queue."},{"content":"However, the suggested best practice is to:","pos":[235,278]}]}]},{"pos":[1033,1071],"content":"Make the queue an authenticated queue.","nodes":[{"content":"Make the queue an authenticated queue.","pos":[0,38]}]},{"pos":[1081,1183],"content":"Run the ASP.NET application as a domain identity and authorize that application to write to the queue.","nodes":[{"content":"Run the ASP.NET application as a domain identity and authorize that application to write to the queue.","pos":[0,102]}]},{"pos":[1193,1466],"content":"Do not impersonate the user when using the queue. Instead, get the caller’s identity and either perform authorization checking in the ASP.NET application or include the caller’s identity as part of the message and perform authorization checking in the receiver application.","nodes":[{"content":"Do not impersonate the user when using the queue. Instead, get the caller’s identity and either perform authorization checking in the ASP.NET application or include the caller’s identity as part of the message and perform authorization checking in the receiver application.","pos":[0,273],"nodes":[{"content":"Do not impersonate the user when using the queue.","pos":[0,49]},{"content":"Instead, get the caller’s identity and either perform authorization checking in the ASP.NET application or include the caller’s identity as part of the message and perform authorization checking in the receiver application.","pos":[50,273]}]}]}],"pos":[483,1962],"yaml":true,"extradata":"MT"},{"content":"Releases all resources used by the <xref href=\"System.Messaging.SecurityContext\"></xref>.","nodes":[{"pos":[0,89],"content":"Releases all resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.SecurityContext\"&gt;&lt;/xref&gt;</ph>.","source":"Releases all resources used by the <xref href=\"System.Messaging.SecurityContext\"></xref>."}],"pos":[3262,3352],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.SecurityContext\n  commentId: T:System.Messaging.SecurityContext\n  id: SecurityContext\n  children:\n  - System.Messaging.SecurityContext.Dispose\n  langs:\n  - csharp\n  name: SecurityContext\n  nameWithType: SecurityContext\n  fullName: System.Messaging.SecurityContext\n  type: Class\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Represents the security context for a message in a queue.\n  remarks: \"The security context contains cached security information such as an internal certificate, the corresponding private key, the user's SID, needed to attach a certificate and the sender identifier to a message when requesting authentication.  \\n  \\n If a client, such as an ASP.NET application, impersonates a user to send a message to a queue, the identity of the user is used to access the queue. If the queue is remote, these credentials are cached and used for messages that are subsequently sent to the queue. Therefore, the SID in subsequent messages will be the cached identity of the first user that sent a message to the queue. The cached identity of the first user that sent a message to the queue will be used for subsequent users.  \\n  \\n To overcome this problem, set the security context using <xref:System.Messaging.Message.SecurityContext%2A> before sending a message to a remote queue to ensure that the current user's credentials are used to gain access to the queue. However, the suggested best practice is to:  \\n  \\n1.  Make the queue an authenticated queue.  \\n  \\n2.  Run the ASP.NET application as a domain identity and authorize that application to write to the queue.  \\n  \\n3.  Do not impersonate the user when using the queue. Instead, get the caller’s identity and either perform authorization checking in the ASP.NET application or include the caller’s identity as part of the message and perform authorization checking in the receiver application.\"\n  syntax:\n    content: 'public sealed class SecurityContext : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/SecurityContext.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.SecurityContext.Dispose\n  commentId: M:System.Messaging.SecurityContext.Dispose\n  id: Dispose\n  parent: System.Messaging.SecurityContext\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SecurityContext.Dispose()\n  fullName: SecurityContext.Dispose()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Releases all resources used by the <xref href=\"System.Messaging.SecurityContext\"></xref>.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Messaging.SecurityContext.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/SecurityContext.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Messaging.SecurityContext.Dispose\n  parent: System.Messaging.SecurityContext\n  isExternal: false\n  name: Dispose()\n  nameWithType: SecurityContext.Dispose()\n  fullName: SecurityContext.Dispose()\n- uid: System.Messaging.SecurityContext.Dispose*\n  parent: System.Messaging.SecurityContext\n  isExternal: false\n  name: Dispose\n  nameWithType: SecurityContext.Dispose\n  fullName: SecurityContext.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/SecurityContext.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}