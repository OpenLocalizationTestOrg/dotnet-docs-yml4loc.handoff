{"nodes":[{"content":"Represents a user identity authenticated for client application services by using forms authentication.","nodes":[{"pos":[0,103],"content":"Represents a user identity authenticated for client application services by using forms authentication.","nodes":[{"content":"Represents a user identity authenticated for client application services by using forms authentication.","pos":[0,103]}]}],"pos":[1132,1236],"yaml":true},{"content":"The client application services feature uses this class to represent an authenticated user. When you configure your application to use client application services and forms authentication, you can authenticate a user by calling the `static` <xref:System.Web.Security.Membership.ValidateUser%2A?displayProperty=fullName> method. After authentication, you can retrieve a reference to the current <xref:System.Web.ClientServices.ClientFormsIdentity> instance through the <xref:System.Security.Principal.IPrincipal.Identity%2A> property of the <xref:System.Security.Principal.IPrincipal> retrieved through the `static` <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property. For more information, see [Client Application Services](~/docs/framework/common-client-technologies/client-application-services.md).  \n  \n You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\".  \n  \n You must use an explicit <xref:System.Web.ClientServices.ClientFormsIdentity> reference to call the <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method, which is not defined by the <xref:System.Security.Principal.IIdentity> interface.","nodes":[{"pos":[0,833],"content":"The client application services feature uses this class to represent an authenticated user. When you configure your application to use client application services and forms authentication, you can authenticate a user by calling the `static` <xref:System.Web.Security.Membership.ValidateUser%2A?displayProperty=fullName> method. After authentication, you can retrieve a reference to the current <xref:System.Web.ClientServices.ClientFormsIdentity> instance through the <xref:System.Security.Principal.IPrincipal.Identity%2A> property of the <xref:System.Security.Principal.IPrincipal> retrieved through the `static` <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property. For more information, see [Client Application Services](~/docs/framework/common-client-technologies/client-application-services.md).","nodes":[{"content":"The client application services feature uses this class to represent an authenticated user.","pos":[0,91]},{"content":"When you configure your application to use client application services and forms authentication, you can authenticate a user by calling the <ph id=\"ph1\">`static`</ph> <ph id=\"ph2\">&lt;xref:System.Web.Security.Membership.ValidateUser%2A?displayProperty=fullName&gt;</ph> method.","pos":[92,327],"source":" When you configure your application to use client application services and forms authentication, you can authenticate a user by calling the `static` <xref:System.Web.Security.Membership.ValidateUser%2A?displayProperty=fullName> method."},{"content":"After authentication, you can retrieve a reference to the current <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> instance through the <ph id=\"ph2\">&lt;xref:System.Security.Principal.IPrincipal.Identity%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> retrieved through the <ph id=\"ph4\">`static`</ph> <ph id=\"ph5\">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</ph> property.","pos":[328,700],"source":" After authentication, you can retrieve a reference to the current <xref:System.Web.ClientServices.ClientFormsIdentity> instance through the <xref:System.Security.Principal.IPrincipal.Identity%2A> property of the <xref:System.Security.Principal.IPrincipal> retrieved through the `static` <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Client Application Services<ept id=\"p1\">](~/docs/framework/common-client-technologies/client-application-services.md)</ept>.","pos":[701,833],"source":" For more information, see [Client Application Services](~/docs/framework/common-client-technologies/client-application-services.md)."}]},{"pos":[840,1538],"content":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\".","nodes":[{"content":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\".","pos":[0,698],"nodes":[{"content":"You will typically access a <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> object as an <ph id=\"ph2\">&lt;xref:System.Security.Principal.IIdentity&gt;</ph> reference to avoid a direct dependency on this class.","pos":[0,190],"source":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class."},{"content":"You can determine whether a user is authenticated by checking the <ph id=\"ph1\">&lt;xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName&gt;</ph> property of the identity.","pos":[191,369],"source":" You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity."},{"content":"However, the user may be authenticated for Windows, but not for client application services.","pos":[370,462]},{"content":"To determine whether the user is authenticated for client application services, you should also confirm that the <ph id=\"ph1\">&lt;xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName&gt;</ph> property value is \"ClientForms\".","pos":[463,698],"source":" To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\"."}]}]},{"pos":[1545,1805],"content":"You must use an explicit <xref:System.Web.ClientServices.ClientFormsIdentity> reference to call the <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method, which is not defined by the <xref:System.Security.Principal.IIdentity> interface.","nodes":[{"content":"You must use an explicit <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> reference to call the <ph id=\"ph2\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A&gt;</ph> method, which is not defined by the <ph id=\"ph3\">&lt;xref:System.Security.Principal.IIdentity&gt;</ph> interface.","pos":[0,260],"source":"You must use an explicit <xref:System.Web.ClientServices.ClientFormsIdentity> reference to call the <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method, which is not defined by the <xref:System.Security.Principal.IIdentity> interface."}]}],"pos":[1247,3061],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Web.ClientServices.ClientFormsIdentity\"></xref> class.","nodes":[{"pos":[0,107],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.ClientServices.ClientFormsIdentity\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Web.ClientServices.ClientFormsIdentity\"></xref> class."}],"pos":[6684,6792],"yaml":true},{"content":"The name of the authenticated user.","nodes":[{"pos":[0,35],"content":"The name of the authenticated user.","nodes":[{"content":"The name of the authenticated user.","pos":[0,35]}]}],"pos":[7098,7134],"yaml":true},{"content":"The password of the authenticated user.","nodes":[{"pos":[0,39],"content":"The password of the authenticated user.","nodes":[{"content":"The password of the authenticated user.","pos":[0,39]}]}],"pos":[7198,7238],"yaml":true},{"content":"The membership provider used to authenticate the user.","nodes":[{"pos":[0,54],"content":"The membership provider used to authenticate the user.","nodes":[{"content":"The membership provider used to authenticate the user.","pos":[0,54]}]}],"pos":[7327,7382],"yaml":true},{"content":"The type of authentication that is used.","nodes":[{"pos":[0,40],"content":"The type of authentication that is used.","nodes":[{"content":"The type of authentication that is used.","pos":[0,40]}]}],"pos":[7456,7497],"yaml":true},{"content":"`true` if the user has been authenticated; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if the user has been authenticated; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the user has been authenticated; otherwise, `false`."}],"pos":[7569,7634],"yaml":true},{"content":"The cookies retrieved from the authentication service.","nodes":[{"pos":[0,54],"content":"The cookies retrieved from the authentication service.","nodes":[{"content":"The cookies retrieved from the authentication service.","pos":[0,54]}]}],"pos":[7724,7779],"yaml":true},{"content":"Gets a collection of the cookies retrieved from the authentication service.","nodes":[{"pos":[0,75],"content":"Gets a collection of the cookies retrieved from the authentication service.","nodes":[{"content":"Gets a collection of the cookies retrieved from the authentication service.","pos":[0,75]}]}],"pos":[8917,8993],"yaml":true},{"content":"This property is not meant for use in your application code. You cannot meaningfully modify the cookies retrieved through this property, and they contain no useful information.","nodes":[{"pos":[0,176],"content":"This property is not meant for use in your application code. You cannot meaningfully modify the cookies retrieved through this property, and they contain no useful information.","nodes":[{"content":"This property is not meant for use in your application code. You cannot meaningfully modify the cookies retrieved through this property, and they contain no useful information.","pos":[0,176],"nodes":[{"content":"This property is not meant for use in your application code.","pos":[0,60]},{"content":"You cannot meaningfully modify the cookies retrieved through this property, and they contain no useful information.","pos":[61,176]}]}]}],"pos":[9004,9181],"yaml":true,"extradata":"MT"},{"content":"The cookies retrieved from the authentication service.","nodes":[{"pos":[0,54],"content":"The cookies retrieved from the authentication service.","nodes":[{"content":"The cookies retrieved from the authentication service.","pos":[0,54]}]}],"pos":[9339,9394],"yaml":true},{"content":"Gets the type of authentication that is used to authenticate the user.","nodes":[{"pos":[0,70],"content":"Gets the type of authentication that is used to authenticate the user.","nodes":[{"content":"Gets the type of authentication that is used to authenticate the user.","pos":[0,70]}]}],"pos":[10530,10601],"yaml":true},{"content":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\". For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview.","nodes":[{"pos":[0,797],"content":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\". For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview.","nodes":[{"content":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\". For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview.","pos":[0,797],"nodes":[{"content":"You will typically access a <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> object as an <ph id=\"ph2\">&lt;xref:System.Security.Principal.IIdentity&gt;</ph> reference to avoid a direct dependency on this class.","pos":[0,190],"source":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class."},{"content":"You can determine whether a user is authenticated by checking the <ph id=\"ph1\">&lt;xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName&gt;</ph> property of the identity.","pos":[191,369],"source":" You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity."},{"content":"However, the user may be authenticated for Windows, but not for client application services.","pos":[370,462]},{"content":"To determine whether the user is authenticated for client application services, you should also confirm that the <ph id=\"ph1\">&lt;xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName&gt;</ph> property value is \"ClientForms\".","pos":[463,698],"source":" To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\"."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> class overview.","pos":[699,797],"source":" For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview."}]}]}],"pos":[10612,11410],"yaml":true,"extradata":"MT"},{"content":"The type of authentication that is used to authenticate the user.","nodes":[{"pos":[0,65],"content":"The type of authentication that is used to authenticate the user.","nodes":[{"content":"The type of authentication that is used to authenticate the user.","pos":[0,65]}]}],"pos":[12472,12538],"yaml":true},{"content":"Releases all resources used by the <xref href=\"System.Web.ClientServices.ClientFormsIdentity\"></xref>.","nodes":[{"pos":[0,102],"content":"Releases all resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Web.ClientServices.ClientFormsIdentity\"&gt;&lt;/xref&gt;</ph>.","source":"Releases all resources used by the <xref href=\"System.Web.ClientServices.ClientFormsIdentity\"></xref>."}],"pos":[13609,13712],"yaml":true},{"content":"Call <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> when you are finished using the <xref:System.Web.ClientServices.ClientFormsIdentity>. The <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> method leaves the <xref:System.Web.ClientServices.ClientFormsIdentity> in an unusable state. After calling <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A>, you must release all references to the <xref:System.Web.ClientServices.ClientFormsIdentity> so the garbage collector can reclaim the memory that the <xref:System.Web.ClientServices.ClientFormsIdentity> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> before you release your last reference to the <xref:System.Web.ClientServices.ClientFormsIdentity>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Web.ClientServices.ClientFormsIdentity> object's `Finalize` method.","nodes":[{"pos":[0,817],"content":"Call <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> when you are finished using the <xref:System.Web.ClientServices.ClientFormsIdentity>. The <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> method leaves the <xref:System.Web.ClientServices.ClientFormsIdentity> in an unusable state. After calling <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A>, you must release all references to the <xref:System.Web.ClientServices.ClientFormsIdentity> so the garbage collector can reclaim the memory that the <xref:System.Web.ClientServices.ClientFormsIdentity> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).","nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A&gt;</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph>.","pos":[0,154],"source":"Call <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> when you are finished using the <xref:System.Web.ClientServices.ClientFormsIdentity>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A&gt;</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> in an unusable state.","pos":[155,315],"source":" The <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> method leaves the <xref:System.Web.ClientServices.ClientFormsIdentity> in an unusable state."},{"content":"After calling <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A&gt;</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> was occupying.","pos":[316,611],"source":" After calling <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A>, you must release all references to the <xref:System.Web.ClientServices.ClientFormsIdentity> so the garbage collector can reclaim the memory that the <xref:System.Web.ClientServices.ClientFormsIdentity> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","pos":[612,817],"source":" For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."}]},{"pos":[825,1185],"content":"[!NOTE]\n Always call <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> before you release your last reference to the <xref:System.Web.ClientServices.ClientFormsIdentity>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Web.ClientServices.ClientFormsIdentity> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> before you release your last reference to the <xref:System.Web.ClientServices.ClientFormsIdentity>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Web.ClientServices.ClientFormsIdentity> object's `Finalize` method.","pos":[8,358],"nodes":[{"content":"Always call <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A&gt;</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph>.","pos":[1,176],"source":" Always call <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> before you release your last reference to the <xref:System.Web.ClientServices.ClientFormsIdentity>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[177,350],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Web.ClientServices.ClientFormsIdentity> object's `Finalize` method."}]}]}],"pos":[13723,14914],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Web.ClientServices.ClientFormsIdentity\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,158],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Web.ClientServices.ClientFormsIdentity\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Web.ClientServices.ClientFormsIdentity\"></xref> and optionally releases the managed resources."}],"pos":[16109,16268],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Web.ClientServices.ClientFormsIdentity> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,293],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[210,293],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[300,547],"content":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Web.ClientServices.ClientFormsIdentity> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id=\"ph2\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> references.","pos":[0,177],"source":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Web.ClientServices.ClientFormsIdentity> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[178,247],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[16279,16831],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[16985,17088],"yaml":true},{"content":"Gets a value indicating whether the user has been authenticated.","nodes":[{"pos":[0,64],"content":"Gets a value indicating whether the user has been authenticated.","nodes":[{"content":"Gets a value indicating whether the user has been authenticated.","pos":[0,64]}]}],"pos":[18192,18257],"yaml":true},{"content":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\". For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview.","nodes":[{"pos":[0,797],"content":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\". For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview.","nodes":[{"content":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\". For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview.","pos":[0,797],"nodes":[{"content":"You will typically access a <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> object as an <ph id=\"ph2\">&lt;xref:System.Security.Principal.IIdentity&gt;</ph> reference to avoid a direct dependency on this class.","pos":[0,190],"source":"You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class."},{"content":"You can determine whether a user is authenticated by checking the <ph id=\"ph1\">&lt;xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName&gt;</ph> property of the identity.","pos":[191,369],"source":" You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity."},{"content":"However, the user may be authenticated for Windows, but not for client application services.","pos":[370,462]},{"content":"To determine whether the user is authenticated for client application services, you should also confirm that the <ph id=\"ph1\">&lt;xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName&gt;</ph> property value is \"ClientForms\".","pos":[463,698],"source":" To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\"."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> class overview.","pos":[699,797],"source":" For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview."}]}]}],"pos":[18268,19066],"yaml":true,"extradata":"MT"},{"content":"`true` if the user has been authenticated; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if the user has been authenticated; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the user has been authenticated; otherwise, `false`."}],"pos":[20124,20189],"yaml":true},{"content":"Gets the name of the user.","nodes":[{"pos":[0,26],"content":"Gets the name of the user.","nodes":[{"content":"Gets the name of the user.","pos":[0,26]}]}],"pos":[21235,21262],"yaml":true},{"content":"The name of the user.","nodes":[{"pos":[0,21],"content":"The name of the user.","nodes":[{"content":"The name of the user.","pos":[0,21]}]}],"pos":[21370,21392],"yaml":true},{"content":"Gets the membership provider that is used to authenticate the user.","nodes":[{"pos":[0,67],"content":"Gets the membership provider that is used to authenticate the user.","nodes":[{"content":"Gets the membership provider that is used to authenticate the user.","pos":[0,67]}]}],"pos":[22451,22519],"yaml":true},{"content":"The membership provider that is used to authenticate the user.","nodes":[{"pos":[0,62],"content":"The membership provider that is used to authenticate the user.","nodes":[{"content":"The membership provider that is used to authenticate the user.","pos":[0,62]}]}],"pos":[22688,22751],"yaml":true},{"content":"Silently authenticates the user by using cached credentials.","nodes":[{"pos":[0,60],"content":"Silently authenticates the user by using cached credentials.","nodes":[{"content":"Silently authenticates the user by using cached credentials.","pos":[0,60]}]}],"pos":[23854,23915],"yaml":true},{"content":"When you use forms authentication to validate the current user, the <xref:System.Web.ClientServices.ClientFormsIdentity> class stores the user credentials as long as the application is running. However, the user is only authenticated until the authentication cookie expires. After the cookie expires, the user must be revalidated to access the remote roles or Web settings services. You can use the **Advanced Settings for Services** dialog box to configure your application to automatically revalidate the user, as described in [How to: Configure Client Application Services](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md). However, if you configure your application to honor the cookie expiration, you can programmatically revalidate the user by calling the <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method. This method is also useful when switching from offline mode to online mode, because the application may have been shut down while offline.  \n  \n> [!NOTE]\n>  The <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method is for convenience only. Because it does not have a return value, it cannot indicate whether revalidation has failed. Revalidation can fail, for example, if the user credentials have changed on the server. In this case, you might want to include code that explicitly validates users after a service call fails. For more information, see the Accessing Web Settings section in [Walkthrough: Using Client Application Services](~/docs/framework/common-client-technologies/walkthrough-using-client-application-services.md).","nodes":[{"pos":[0,1023],"content":"When you use forms authentication to validate the current user, the <xref:System.Web.ClientServices.ClientFormsIdentity> class stores the user credentials as long as the application is running. However, the user is only authenticated until the authentication cookie expires. After the cookie expires, the user must be revalidated to access the remote roles or Web settings services. You can use the **Advanced Settings for Services** dialog box to configure your application to automatically revalidate the user, as described in [How to: Configure Client Application Services](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md). However, if you configure your application to honor the cookie expiration, you can programmatically revalidate the user by calling the <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method. This method is also useful when switching from offline mode to online mode, because the application may have been shut down while offline.","nodes":[{"content":"When you use forms authentication to validate the current user, the <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity&gt;</ph> class stores the user credentials as long as the application is running.","pos":[0,193],"source":"When you use forms authentication to validate the current user, the <xref:System.Web.ClientServices.ClientFormsIdentity> class stores the user credentials as long as the application is running."},{"content":"However, the user is only authenticated until the authentication cookie expires.","pos":[194,274]},{"content":"After the cookie expires, the user must be revalidated to access the remote roles or Web settings services.","pos":[275,382]},{"content":"You can use the <bpt id=\"p1\">**</bpt>Advanced Settings for Services<ept id=\"p1\">**</ept> dialog box to configure your application to automatically revalidate the user, as described in <bpt id=\"p2\">[</bpt>How to: Configure Client Application Services<ept id=\"p2\">](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md)</ept>.","pos":[383,670],"source":" You can use the **Advanced Settings for Services** dialog box to configure your application to automatically revalidate the user, as described in [How to: Configure Client Application Services](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md)."},{"content":"However, if you configure your application to honor the cookie expiration, you can programmatically revalidate the user by calling the <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A&gt;</ph> method.","pos":[671,884],"source":" However, if you configure your application to honor the cookie expiration, you can programmatically revalidate the user by calling the <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method."},{"content":"This method is also useful when switching from offline mode to online mode, because the application may have been shut down while offline.","pos":[885,1023]}]},{"pos":[1031,1642],"content":"[!NOTE]\n The <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method is for convenience only. Because it does not have a return value, it cannot indicate whether revalidation has failed. Revalidation can fail, for example, if the user credentials have changed on the server. In this case, you might want to include code that explicitly validates users after a service call fails. For more information, see the Accessing Web Settings section in [Walkthrough: Using Client Application Services](~/docs/framework/common-client-technologies/walkthrough-using-client-application-services.md).","leadings":["","> "],"nodes":[{"content":" The <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method is for convenience only. Because it does not have a return value, it cannot indicate whether revalidation has failed. Revalidation can fail, for example, if the user credentials have changed on the server. In this case, you might want to include code that explicitly validates users after a service call fails. For more information, see the Accessing Web Settings section in [Walkthrough: Using Client Application Services](~/docs/framework/common-client-technologies/walkthrough-using-client-application-services.md).","pos":[8,609],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A&gt;</ph> method is for convenience only.","pos":[1,107],"source":" The <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method is for convenience only."},{"content":"Because it does not have a return value, it cannot indicate whether revalidation has failed.","pos":[108,200]},{"content":"Revalidation can fail, for example, if the user credentials have changed on the server.","pos":[201,288]},{"content":"In this case, you might want to include code that explicitly validates users after a service call fails.","pos":[289,393]},{"content":"For more information, see the Accessing Web Settings section in <bpt id=\"p1\">[</bpt>Walkthrough: Using Client Application Services<ept id=\"p1\">](~/docs/framework/common-client-technologies/walkthrough-using-client-application-services.md)</ept>.","pos":[394,601],"source":" For more information, see the Accessing Web Settings section in [Walkthrough: Using Client Application Services](~/docs/framework/common-client-technologies/walkthrough-using-client-application-services.md)."}]}]}],"pos":[23926,25574],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.ClientServices.ClientFormsIdentity\n  commentId: T:System.Web.ClientServices.ClientFormsIdentity\n  id: ClientFormsIdentity\n  children:\n  - System.Web.ClientServices.ClientFormsIdentity.#ctor(System.String,System.String,System.Web.Security.MembershipProvider,System.String,System.Boolean,System.Net.CookieContainer)\n  - System.Web.ClientServices.ClientFormsIdentity.AuthenticationCookies\n  - System.Web.ClientServices.ClientFormsIdentity.AuthenticationType\n  - System.Web.ClientServices.ClientFormsIdentity.Dispose\n  - System.Web.ClientServices.ClientFormsIdentity.Dispose(System.Boolean)\n  - System.Web.ClientServices.ClientFormsIdentity.IsAuthenticated\n  - System.Web.ClientServices.ClientFormsIdentity.Name\n  - System.Web.ClientServices.ClientFormsIdentity.Provider\n  - System.Web.ClientServices.ClientFormsIdentity.RevalidateUser\n  langs:\n  - csharp\n  name: ClientFormsIdentity\n  nameWithType: ClientFormsIdentity\n  fullName: System.Web.ClientServices.ClientFormsIdentity\n  type: Class\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Represents a user identity authenticated for client application services by using forms authentication.\n  remarks: \"The client application services feature uses this class to represent an authenticated user. When you configure your application to use client application services and forms authentication, you can authenticate a user by calling the `static` <xref:System.Web.Security.Membership.ValidateUser%2A?displayProperty=fullName> method. After authentication, you can retrieve a reference to the current <xref:System.Web.ClientServices.ClientFormsIdentity> instance through the <xref:System.Security.Principal.IPrincipal.Identity%2A> property of the <xref:System.Security.Principal.IPrincipal> retrieved through the `static` <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property. For more information, see [Client Application Services](~/docs/framework/common-client-technologies/client-application-services.md).  \\n  \\n You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \\\"ClientForms\\\".  \\n  \\n You must use an explicit <xref:System.Web.ClientServices.ClientFormsIdentity> reference to call the <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method, which is not defined by the <xref:System.Security.Principal.IIdentity> interface.\"\n  example:\n  - \"The following example code demonstrates how to use this class to silently revalidate a user when the application leaves the offline state. In this example, a <xref:System.Windows.Forms.CheckBox.CheckedChanged> event handler updates the offline status to match the check box value. If the user sets the application to the online state, the event handler attempts to revalidate the user by calling the <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method. However, if the authentication server is unavailable, the event handler returns the application to the offline state.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method is for convenience only. Because it does not have a return value, it cannot indicate whether revalidation has failed. Revalidation can fail, for example, if the user credentials have changed on the server. In this case, you might want to include code that explicitly validates users after a service call fails. For more information, see the Accessing Web Settings section in [Walkthrough: Using Client Application Services](~/docs/framework/common-client-technologies/walkthrough-using-client-application-services.md).  \\n  \\n [!code-csharp[ClientApplicationServices#315](~/samples/snippets/csharp/VS_Snippets_Winforms/ClientApplicationServices/CS/Class1.cs#315)]\\n [!code-vb[ClientApplicationServices#315](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClientApplicationServices/VB/Class1.vb#315)]\"\n  syntax:\n    content: 'public class ClientFormsIdentity : IDisposable, System.Security.Principal.IIdentity'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  - System.Security.Principal.IIdentity\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Web.ClientServices.ClientFormsIdentity.#ctor(System.String,System.String,System.Web.Security.MembershipProvider,System.String,System.Boolean,System.Net.CookieContainer)\n  commentId: M:System.Web.ClientServices.ClientFormsIdentity.#ctor(System.String,System.String,System.Web.Security.MembershipProvider,System.String,System.Boolean,System.Net.CookieContainer)\n  id: '#ctor(System.String,System.String,System.Web.Security.MembershipProvider,System.String,System.Boolean,System.Net.CookieContainer)'\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  langs:\n  - csharp\n  name: ClientFormsIdentity(String, String, MembershipProvider, String, Boolean, CookieContainer)\n  nameWithType: ClientFormsIdentity.ClientFormsIdentity(String, String, MembershipProvider, String, Boolean, CookieContainer)\n  fullName: ClientFormsIdentity.ClientFormsIdentity(String, String, MembershipProvider, String, Boolean, CookieContainer)\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Initializes a new instance of the <xref href=\"System.Web.ClientServices.ClientFormsIdentity\"></xref> class.\n  syntax:\n    content: public ClientFormsIdentity (string name, string password, System.Web.Security.MembershipProvider provider, string authenticationType, bool isAuthenticated, System.Net.CookieContainer authenticationCookies);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the authenticated user.\n    - id: password\n      type: System.String\n      description: The password of the authenticated user.\n    - id: provider\n      type: System.Web.Security.MembershipProvider\n      description: The membership provider used to authenticate the user.\n    - id: authenticationType\n      type: System.String\n      description: The type of authentication that is used.\n    - id: isAuthenticated\n      type: System.Boolean\n      description: '`true` if the user has been authenticated; otherwise, `false`.'\n    - id: authenticationCookies\n      type: System.Net.CookieContainer\n      description: The cookies retrieved from the authentication service.\n  overload: System.Web.ClientServices.ClientFormsIdentity.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Web.ClientServices.ClientFormsIdentity.AuthenticationCookies\n  commentId: P:System.Web.ClientServices.ClientFormsIdentity.AuthenticationCookies\n  id: AuthenticationCookies\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  langs:\n  - csharp\n  name: AuthenticationCookies\n  nameWithType: ClientFormsIdentity.AuthenticationCookies\n  fullName: ClientFormsIdentity.AuthenticationCookies\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Gets a collection of the cookies retrieved from the authentication service.\n  remarks: This property is not meant for use in your application code. You cannot meaningfully modify the cookies retrieved through this property, and they contain no useful information.\n  syntax:\n    content: public System.Net.CookieContainer AuthenticationCookies { get; }\n    return:\n      type: System.Net.CookieContainer\n      description: The cookies retrieved from the authentication service.\n  overload: System.Web.ClientServices.ClientFormsIdentity.AuthenticationCookies*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Web.ClientServices.ClientFormsIdentity.AuthenticationType\n  commentId: P:System.Web.ClientServices.ClientFormsIdentity.AuthenticationType\n  id: AuthenticationType\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  langs:\n  - csharp\n  name: AuthenticationType\n  nameWithType: ClientFormsIdentity.AuthenticationType\n  fullName: ClientFormsIdentity.AuthenticationType\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Gets the type of authentication that is used to authenticate the user.\n  remarks: You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\". For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview.\n  example:\n  - \"The following example code demonstrates how to use this property through an <xref:System.Security.Principal.IIdentity> reference to determine whether a user is currently authenticated for client application services. This example assumes that the application is in the default configuration where users are not required to log in again when the authentication cookie expires. Otherwise, the <xref:System.Net.WebException> might indicate that the user login has expired. For more information, see [How to: Configure Client Application Services](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md).  \\n  \\n [!code-csharp[ClientApplicationServices#312](~/samples/snippets/csharp/VS_Snippets_Winforms/ClientApplicationServices/CS/Class1.cs#312)]\\n [!code-vb[ClientApplicationServices#312](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClientApplicationServices/VB/Class1.vb#312)]\"\n  syntax:\n    content: public string AuthenticationType { get; }\n    return:\n      type: System.String\n      description: The type of authentication that is used to authenticate the user.\n  overload: System.Web.ClientServices.ClientFormsIdentity.AuthenticationType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Web.ClientServices.ClientFormsIdentity.Dispose\n  commentId: M:System.Web.ClientServices.ClientFormsIdentity.Dispose\n  id: Dispose\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ClientFormsIdentity.Dispose()\n  fullName: ClientFormsIdentity.Dispose()\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Releases all resources used by the <xref href=\"System.Web.ClientServices.ClientFormsIdentity\"></xref>.\n  remarks: \"Call <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> when you are finished using the <xref:System.Web.ClientServices.ClientFormsIdentity>. The <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> method leaves the <xref:System.Web.ClientServices.ClientFormsIdentity> in an unusable state. After calling <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A>, you must release all references to the <xref:System.Web.ClientServices.ClientFormsIdentity> so the garbage collector can reclaim the memory that the <xref:System.Web.ClientServices.ClientFormsIdentity> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> before you release your last reference to the <xref:System.Web.ClientServices.ClientFormsIdentity>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Web.ClientServices.ClientFormsIdentity> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Web.ClientServices.ClientFormsIdentity.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Web.ClientServices.ClientFormsIdentity.Dispose(System.Boolean)\n  commentId: M:System.Web.ClientServices.ClientFormsIdentity.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ClientFormsIdentity.Dispose(Boolean)\n  fullName: ClientFormsIdentity.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Web.ClientServices.ClientFormsIdentity\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Web.ClientServices.ClientFormsIdentity> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Web.ClientServices.ClientFormsIdentity.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Web.ClientServices.ClientFormsIdentity.IsAuthenticated\n  commentId: P:System.Web.ClientServices.ClientFormsIdentity.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  langs:\n  - csharp\n  name: IsAuthenticated\n  nameWithType: ClientFormsIdentity.IsAuthenticated\n  fullName: ClientFormsIdentity.IsAuthenticated\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Gets a value indicating whether the user has been authenticated.\n  remarks: You will typically access a <xref:System.Web.ClientServices.ClientFormsIdentity> object as an <xref:System.Security.Principal.IIdentity> reference to avoid a direct dependency on this class. You can determine whether a user is authenticated by checking the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=fullName> property of the identity. However, the user may be authenticated for Windows, but not for client application services. To determine whether the user is authenticated for client application services, you should also confirm that the <xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> property value is \"ClientForms\". For more information, see the <xref:System.Web.ClientServices.ClientFormsIdentity> class overview.\n  example:\n  - \"The following example code demonstrates how to use this property through an <xref:System.Security.Principal.IIdentity> reference to determine whether a user is currently authenticated for client application services. This example assumes that the application is in the default configuration where users are not required to log in again when the authentication cookie expires. Otherwise, the <xref:System.Net.WebException> might indicate that the user login has expired. For more information, see [How to: Configure Client Application Services](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md).  \\n  \\n [!code-csharp[ClientApplicationServices#312](~/samples/snippets/csharp/VS_Snippets_Winforms/ClientApplicationServices/CS/Class1.cs#312)]\\n [!code-vb[ClientApplicationServices#312](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClientApplicationServices/VB/Class1.vb#312)]\"\n  syntax:\n    content: public bool IsAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the user has been authenticated; otherwise, `false`.'\n  overload: System.Web.ClientServices.ClientFormsIdentity.IsAuthenticated*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Web.ClientServices.ClientFormsIdentity.Name\n  commentId: P:System.Web.ClientServices.ClientFormsIdentity.Name\n  id: Name\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  langs:\n  - csharp\n  name: Name\n  nameWithType: ClientFormsIdentity.Name\n  fullName: ClientFormsIdentity.Name\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Gets the name of the user.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: The name of the user.\n  overload: System.Web.ClientServices.ClientFormsIdentity.Name*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Web.ClientServices.ClientFormsIdentity.Provider\n  commentId: P:System.Web.ClientServices.ClientFormsIdentity.Provider\n  id: Provider\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  langs:\n  - csharp\n  name: Provider\n  nameWithType: ClientFormsIdentity.Provider\n  fullName: ClientFormsIdentity.Provider\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Gets the membership provider that is used to authenticate the user.\n  syntax:\n    content: public System.Web.Security.MembershipProvider Provider { get; }\n    return:\n      type: System.Web.Security.MembershipProvider\n      description: The membership provider that is used to authenticate the user.\n  overload: System.Web.ClientServices.ClientFormsIdentity.Provider*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Web.ClientServices.ClientFormsIdentity.RevalidateUser\n  commentId: M:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser\n  id: RevalidateUser\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  langs:\n  - csharp\n  name: RevalidateUser()\n  nameWithType: ClientFormsIdentity.RevalidateUser()\n  fullName: ClientFormsIdentity.RevalidateUser()\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.ClientServices\n  summary: Silently authenticates the user by using cached credentials.\n  remarks: \"When you use forms authentication to validate the current user, the <xref:System.Web.ClientServices.ClientFormsIdentity> class stores the user credentials as long as the application is running. However, the user is only authenticated until the authentication cookie expires. After the cookie expires, the user must be revalidated to access the remote roles or Web settings services. You can use the **Advanced Settings for Services** dialog box to configure your application to automatically revalidate the user, as described in [How to: Configure Client Application Services](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md). However, if you configure your application to honor the cookie expiration, you can programmatically revalidate the user by calling the <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method. This method is also useful when switching from offline mode to online mode, because the application may have been shut down while offline.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> method is for convenience only. Because it does not have a return value, it cannot indicate whether revalidation has failed. Revalidation can fail, for example, if the user credentials have changed on the server. In this case, you might want to include code that explicitly validates users after a service call fails. For more information, see the Accessing Web Settings section in [Walkthrough: Using Client Application Services](~/docs/framework/common-client-technologies/walkthrough-using-client-application-services.md).\"\n  example:\n  - \"The following example code demonstrates how to use this method to silently revalidate a user when the application leaves the offline state. In this example, a <xref:System.Windows.Forms.CheckBox.CheckedChanged> event handler updates the offline status to match the check box value. If the user sets the application to the online state, the event handler attempts to revalidate the user. However, if the authentication server is unavailable, the event handler returns the application to the offline state.  \\n  \\n [!code-csharp[ClientApplicationServices#315](~/samples/snippets/csharp/VS_Snippets_Winforms/ClientApplicationServices/CS/Class1.cs#315)]\\n [!code-vb[ClientApplicationServices#315](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClientApplicationServices/VB/Class1.vb#315)]\"\n  syntax:\n    content: public void RevalidateUser ();\n    parameters: []\n  overload: System.Web.ClientServices.ClientFormsIdentity.RevalidateUser*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n  ms.technology:\n  - dotnet-webforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.ClientServices.ClientFormsIdentity.#ctor(System.String,System.String,System.Web.Security.MembershipProvider,System.String,System.Boolean,System.Net.CookieContainer)\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: ClientFormsIdentity(String, String, MembershipProvider, String, Boolean, CookieContainer)\n  nameWithType: ClientFormsIdentity.ClientFormsIdentity(String, String, MembershipProvider, String, Boolean, CookieContainer)\n  fullName: ClientFormsIdentity.ClientFormsIdentity(String, String, MembershipProvider, String, Boolean, CookieContainer)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Security.MembershipProvider\n  parent: System.Web.Security\n  isExternal: false\n  name: MembershipProvider\n  nameWithType: MembershipProvider\n  fullName: System.Web.Security.MembershipProvider\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.CookieContainer\n  parent: System.Net\n  isExternal: false\n  name: CookieContainer\n  nameWithType: CookieContainer\n  fullName: System.Net.CookieContainer\n- uid: System.Web.ClientServices.ClientFormsIdentity.AuthenticationCookies\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: AuthenticationCookies\n  nameWithType: ClientFormsIdentity.AuthenticationCookies\n  fullName: ClientFormsIdentity.AuthenticationCookies\n- uid: System.Web.ClientServices.ClientFormsIdentity.AuthenticationType\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: AuthenticationType\n  nameWithType: ClientFormsIdentity.AuthenticationType\n  fullName: ClientFormsIdentity.AuthenticationType\n- uid: System.Web.ClientServices.ClientFormsIdentity.Dispose\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: Dispose()\n  nameWithType: ClientFormsIdentity.Dispose()\n  fullName: ClientFormsIdentity.Dispose()\n- uid: System.Web.ClientServices.ClientFormsIdentity.Dispose(System.Boolean)\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ClientFormsIdentity.Dispose(Boolean)\n  fullName: ClientFormsIdentity.Dispose(Boolean)\n- uid: System.Web.ClientServices.ClientFormsIdentity.IsAuthenticated\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: ClientFormsIdentity.IsAuthenticated\n  fullName: ClientFormsIdentity.IsAuthenticated\n- uid: System.Web.ClientServices.ClientFormsIdentity.Name\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: Name\n  nameWithType: ClientFormsIdentity.Name\n  fullName: ClientFormsIdentity.Name\n- uid: System.Web.ClientServices.ClientFormsIdentity.Provider\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: Provider\n  nameWithType: ClientFormsIdentity.Provider\n  fullName: ClientFormsIdentity.Provider\n- uid: System.Web.ClientServices.ClientFormsIdentity.RevalidateUser\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: RevalidateUser()\n  nameWithType: ClientFormsIdentity.RevalidateUser()\n  fullName: ClientFormsIdentity.RevalidateUser()\n- uid: System.Web.ClientServices.ClientFormsIdentity.#ctor*\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: ClientFormsIdentity\n  nameWithType: ClientFormsIdentity.ClientFormsIdentity\n  fullName: ClientFormsIdentity.ClientFormsIdentity\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n- uid: System.Web.ClientServices.ClientFormsIdentity.AuthenticationCookies*\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: AuthenticationCookies\n  nameWithType: ClientFormsIdentity.AuthenticationCookies\n  fullName: ClientFormsIdentity.AuthenticationCookies\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n- uid: System.Web.ClientServices.ClientFormsIdentity.AuthenticationType*\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: AuthenticationType\n  nameWithType: ClientFormsIdentity.AuthenticationType\n  fullName: ClientFormsIdentity.AuthenticationType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n- uid: System.Web.ClientServices.ClientFormsIdentity.Dispose*\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: Dispose\n  nameWithType: ClientFormsIdentity.Dispose\n  fullName: ClientFormsIdentity.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n- uid: System.Web.ClientServices.ClientFormsIdentity.IsAuthenticated*\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: ClientFormsIdentity.IsAuthenticated\n  fullName: ClientFormsIdentity.IsAuthenticated\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n- uid: System.Web.ClientServices.ClientFormsIdentity.Name*\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: Name\n  nameWithType: ClientFormsIdentity.Name\n  fullName: ClientFormsIdentity.Name\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n- uid: System.Web.ClientServices.ClientFormsIdentity.Provider*\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: Provider\n  nameWithType: ClientFormsIdentity.Provider\n  fullName: ClientFormsIdentity.Provider\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n- uid: System.Web.ClientServices.ClientFormsIdentity.RevalidateUser*\n  parent: System.Web.ClientServices.ClientFormsIdentity\n  isExternal: false\n  name: RevalidateUser\n  nameWithType: ClientFormsIdentity.RevalidateUser\n  fullName: ClientFormsIdentity.RevalidateUser\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.ClientServices/ClientFormsIdentity.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.Security.Principal.IIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: IIdentity\n  nameWithType: IIdentity\n  fullName: System.Security.Principal.IIdentity\n"}