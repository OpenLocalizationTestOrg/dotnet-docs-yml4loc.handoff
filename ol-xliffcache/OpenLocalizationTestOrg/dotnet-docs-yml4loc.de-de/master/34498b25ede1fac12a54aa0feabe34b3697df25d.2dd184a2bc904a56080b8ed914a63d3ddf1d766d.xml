{"nodes":[{"content":"Represents execution state information while a persistence command is being executed.","nodes":[{"pos":[0,85],"content":"Represents execution state information while a persistence command is being executed.","nodes":[{"content":"Represents execution state information while a persistence command is being executed.","pos":[0,85]}]}],"pos":[4940,5026],"yaml":true},{"content":"An instance of this class is passed to the TryCommand method of persistence provider implementations. Persistence providers use this class to inspect the in-memory view of the instance as well as indicate the results of operations on the external store which may affect the view or other in-memory context.","nodes":[{"pos":[0,306],"content":"An instance of this class is passed to the TryCommand method of persistence provider implementations. Persistence providers use this class to inspect the in-memory view of the instance as well as indicate the results of operations on the external store which may affect the view or other in-memory context.","nodes":[{"content":"An instance of this class is passed to the TryCommand method of persistence provider implementations. Persistence providers use this class to inspect the in-memory view of the instance as well as indicate the results of operations on the external store which may affect the view or other in-memory context.","pos":[0,306],"nodes":[{"content":"An instance of this class is passed to the TryCommand method of persistence provider implementations.","pos":[0,101]},{"content":"Persistence providers use this class to inspect the in-memory view of the instance as well as indicate the results of operations on the external store which may affect the view or other in-memory context.","pos":[102,306]}]}]}],"pos":[5037,5344],"yaml":true,"extradata":"MT"},{"content":"Indicates that the persistence provider has successfully associated a key to the current instance in the instance store. The identifier of the key is specified as a parameter.","nodes":[{"pos":[0,175],"content":"Indicates that the persistence provider has successfully associated a key to the current instance in the instance store. The identifier of the key is specified as a parameter.","nodes":[{"content":"Indicates that the persistence provider has successfully associated a key to the current instance in the instance store. The identifier of the key is specified as a parameter.","pos":[0,175],"nodes":[{"content":"Indicates that the persistence provider has successfully associated a key to the current instance in the instance store.","pos":[0,120]},{"content":"The identifier of the key is specified as a parameter.","pos":[121,175]}]}]}],"pos":[6953,7129],"yaml":true},{"content":"The instance key must be unassociated. The current instance handle must be bound to an instance as well as a lock on that instance.","nodes":[{"pos":[0,131],"content":"The instance key must be unassociated. The current instance handle must be bound to an instance as well as a lock on that instance.","nodes":[{"content":"The instance key must be unassociated. The current instance handle must be bound to an instance as well as a lock on that instance.","pos":[0,131],"nodes":[{"content":"The instance key must be unassociated.","pos":[0,38]},{"content":"The current instance handle must be bound to an instance as well as a lock on that instance.","pos":[39,131]}]}]}],"pos":[7140,7272],"yaml":true,"extradata":"MT"},{"content":"The instance key identifier  for the key that has been associated. Must not be Guid.Empty.","nodes":[{"pos":[0,90],"content":"The instance key identifier  for the key that has been associated. Must not be Guid.Empty.","nodes":[{"content":"The instance key identifier  for the key that has been associated. Must not be Guid.Empty.","pos":[0,90],"nodes":[{"content":"The instance key identifier  for the key that has been associated.","pos":[0,66]},{"content":"Must not be Guid.Empty.","pos":[67,90]}]}]}],"pos":[7414,7505],"yaml":true},{"content":"Begin an asynchronous operation to bind an existing lock on an instance to the current instance handle. The version of the existing lock is passed as a parameter.","nodes":[{"pos":[0,162],"content":"Begin an asynchronous operation to bind an existing lock on an instance to the current instance handle. The version of the existing lock is passed as a parameter.","nodes":[{"content":"Begin an asynchronous operation to bind an existing lock on an instance to the current instance handle. The version of the existing lock is passed as a parameter.","pos":[0,162],"nodes":[{"content":"Begin an asynchronous operation to bind an existing lock on an instance to the current instance handle.","pos":[0,103]},{"content":"The version of the existing lock is passed as a parameter.","pos":[104,162]}]}]}],"pos":[9076,9239],"yaml":true},{"content":"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store. If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BeginBindReclaimedLock. The persistence provider must not make changes to the instance until the lock is successfully reclaimed. If no other handle is bound to the lock, then the BeginBindReclaimedLock operation succeeds and the current handle becomes bound to the lock. Otherwise, BeginBindReclaimedLock or EndBindReclaimedLock throws InstanceHandleConflictException. If commands are in progress on other handles, the operation may not complete while waiting for the outcome of those commands to decide whether the lock can be reclaimed.  \n  \n The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock.  \n  \n Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.","nodes":[{"pos":[0,840],"content":"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store. If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BeginBindReclaimedLock. The persistence provider must not make changes to the instance until the lock is successfully reclaimed. If no other handle is bound to the lock, then the BeginBindReclaimedLock operation succeeds and the current handle becomes bound to the lock. Otherwise, BeginBindReclaimedLock or EndBindReclaimedLock throws InstanceHandleConflictException. If commands are in progress on other handles, the operation may not complete while waiting for the outcome of those commands to decide whether the lock can be reclaimed.","nodes":[{"content":"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store. If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BeginBindReclaimedLock. The persistence provider must not make changes to the instance until the lock is successfully reclaimed. If no other handle is bound to the lock, then the BeginBindReclaimedLock operation succeeds and the current handle becomes bound to the lock. Otherwise, BeginBindReclaimedLock or EndBindReclaimedLock throws InstanceHandleConflictException. If commands are in progress on other handles, the operation may not complete while waiting for the outcome of those commands to decide whether the lock can be reclaimed.","pos":[0,840],"nodes":[{"content":"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store.","pos":[0,136]},{"content":"If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BeginBindReclaimedLock.","pos":[137,325]},{"content":"The persistence provider must not make changes to the instance until the lock is successfully reclaimed.","pos":[326,430]},{"content":"If no other handle is bound to the lock, then the BeginBindReclaimedLock operation succeeds and the current handle becomes bound to the lock.","pos":[431,572]},{"content":"Otherwise, BeginBindReclaimedLock or EndBindReclaimedLock throws InstanceHandleConflictException.","pos":[573,670]},{"content":"If commands are in progress on other handles, the operation may not complete while waiting for the outcome of those commands to decide whether the lock can be reclaimed.","pos":[671,840]}]}]},{"pos":[847,1046],"content":"The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock.","nodes":[{"content":"The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock.","pos":[0,199],"nodes":[{"content":"The current instance handle must be bound to an instance and a lock owner.","pos":[0,74]},{"content":"The instance must not be completed.","pos":[75,110]},{"content":"The lock token associated with the lock owner is used to identify the owner of the lock.","pos":[111,199]}]}]},{"pos":[1053,1199],"content":"Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.","nodes":[{"content":"Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.","pos":[0,146],"nodes":[{"content":"Once a lock is bound to a handle, it remains bound for the lifetime of the handle.","pos":[0,82]},{"content":"Neither the lock token nor the instance version can be changed.","pos":[83,146]}]}]}],"pos":[9250,10456],"yaml":true,"extradata":"MT"},{"content":"The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.","nodes":[{"pos":[0,115],"content":"The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.","nodes":[{"content":"The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.","pos":[0,115]}]}],"pos":[10688,10804],"yaml":true},{"content":"The timeout period for the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The timeout period for the asynchronous operation.","nodes":[{"content":"The timeout period for the asynchronous operation.","pos":[0,50]}]}],"pos":[10869,10920],"yaml":true},{"content":"The method to be called when the operation is completed.","nodes":[{"pos":[0,56],"content":"The method to be called when the operation is completed.","nodes":[{"content":"The method to be called when the operation is completed.","pos":[0,56]}]}],"pos":[10991,11048],"yaml":true},{"content":"The state information associated with the asynchronous operation.","nodes":[{"pos":[0,65],"content":"The state information associated with the asynchronous operation.","nodes":[{"content":"The state information associated with the asynchronous operation.","pos":[0,65]}]}],"pos":[11109,11175],"yaml":true},{"content":"The status of an asynchronous operation.","nodes":[{"pos":[0,40],"content":"The status of an asynchronous operation.","nodes":[{"content":"The status of an asynchronous operation.","pos":[0,40]}]}],"pos":[11238,11279],"yaml":true},{"content":"Begins executing a persistence command asynchronously.","nodes":[{"pos":[0,54],"content":"Begins executing a persistence command asynchronously.","nodes":[{"content":"Begins executing a persistence command asynchronously.","pos":[0,54]}]}],"pos":[12995,13050],"yaml":true},{"content":"A persistence provider can use this method to execute sub-commands as part of a command. The sub-command will be executed using BeginTryCommand, similar to commands passed to InstanceStore.BeginExecute. Commands can be nested, but a command must not execute more than one sub-command at a time.","nodes":[{"pos":[0,294],"content":"A persistence provider can use this method to execute sub-commands as part of a command. The sub-command will be executed using BeginTryCommand, similar to commands passed to InstanceStore.BeginExecute. Commands can be nested, but a command must not execute more than one sub-command at a time.","nodes":[{"content":"A persistence provider can use this method to execute sub-commands as part of a command. The sub-command will be executed using BeginTryCommand, similar to commands passed to InstanceStore.BeginExecute. Commands can be nested, but a command must not execute more than one sub-command at a time.","pos":[0,294],"nodes":[{"content":"A persistence provider can use this method to execute sub-commands as part of a command.","pos":[0,88]},{"content":"The sub-command will be executed using BeginTryCommand, similar to commands passed to InstanceStore.BeginExecute.","pos":[89,202]},{"content":"Commands can be nested, but a command must not execute more than one sub-command at a time.","pos":[203,294]}]}]}],"pos":[13061,13356],"yaml":true,"extradata":"MT"},{"content":"The persistence command to be executed.","nodes":[{"pos":[0,39],"content":"The persistence command to be executed.","nodes":[{"content":"The persistence command to be executed.","pos":[0,39]}]}],"pos":[13664,13704],"yaml":true},{"content":"The time-out value for the operation.","nodes":[{"pos":[0,37],"content":"The time-out value for the operation.","nodes":[{"content":"The time-out value for the operation.","pos":[0,37]}]}],"pos":[13769,13807],"yaml":true},{"content":"The delegate that receives the notification of the asynchronous receive that a request operation completes.","nodes":[{"pos":[0,107],"content":"The delegate that receives the notification of the asynchronous receive that a request operation completes.","nodes":[{"content":"The delegate that receives the notification of the asynchronous receive that a request operation completes.","pos":[0,107]}]}],"pos":[13878,13986],"yaml":true},{"content":"The state information.","nodes":[{"pos":[0,22],"content":"The state information.","nodes":[{"content":"The state information.","pos":[0,22]}]}],"pos":[14047,14070],"yaml":true},{"content":"The status of an asynchronous operation.","nodes":[{"pos":[0,40],"content":"The status of an asynchronous operation.","nodes":[{"content":"The status of an asynchronous operation.","pos":[0,40]}]}],"pos":[14133,14174],"yaml":true},{"content":"Binds a newly acquired lock on an instance to the current instance handle. The version of the acquired lock is passed as a parameter.","nodes":[{"pos":[0,133],"content":"Binds a newly acquired lock on an instance to the current instance handle. The version of the acquired lock is passed as a parameter.","nodes":[{"content":"Binds a newly acquired lock on an instance to the current instance handle. The version of the acquired lock is passed as a parameter.","pos":[0,133],"nodes":[{"content":"Binds a newly acquired lock on an instance to the current instance handle.","pos":[0,74]},{"content":"The version of the acquired lock is passed as a parameter.","pos":[75,133]}]}]}],"pos":[15448,15582],"yaml":true},{"content":"If a persistence provider implements lock versioning, then each time a lock is acquired on the instance, the version must be incremented by one in the external store. The first time the instance is locked, the version should be 1. Each lock acquisition invalidates the previous lock. The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock  \n  \n Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.","nodes":[{"pos":[0,482],"content":"If a persistence provider implements lock versioning, then each time a lock is acquired on the instance, the version must be incremented by one in the external store. The first time the instance is locked, the version should be 1. Each lock acquisition invalidates the previous lock. The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock","nodes":[{"content":"If a persistence provider implements lock versioning, then each time a lock is acquired on the instance, the version must be incremented by one in the external store. The first time the instance is locked, the version should be 1. Each lock acquisition invalidates the previous lock. The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock","pos":[0,482],"nodes":[{"content":"If a persistence provider implements lock versioning, then each time a lock is acquired on the instance, the version must be incremented by one in the external store.","pos":[0,166]},{"content":"The first time the instance is locked, the version should be 1.","pos":[167,230]},{"content":"Each lock acquisition invalidates the previous lock.","pos":[231,283]},{"content":"The current instance handle must be bound to an instance and a lock owner.","pos":[284,358]},{"content":"The instance must not be completed.","pos":[359,394]},{"content":"The lock token associated with the lock owner is used to identify the owner of the lock","pos":[395,482]}]}]},{"pos":[489,635],"content":"Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.","nodes":[{"content":"Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.","pos":[0,146],"nodes":[{"content":"Once a lock is bound to a handle, it remains bound for the lifetime of the handle.","pos":[0,82]},{"content":"Neither the lock token nor the instance version can be changed.","pos":[83,146]}]}]}],"pos":[15593,16233],"yaml":true,"extradata":"MT"},{"content":"Version of the lock acquired on the instance, or zero if the persistence provider does not implement lock versions.","nodes":[{"pos":[0,115],"content":"Version of the lock acquired on the instance, or zero if the persistence provider does not implement lock versions.","nodes":[{"content":"Version of the lock acquired on the instance, or zero if the persistence provider does not implement lock versions.","pos":[0,115]}]}],"pos":[16395,16511],"yaml":true},{"content":"Binds an <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> to an instance handle.","nodes":[{"pos":[0,110],"content":"Binds an <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"&gt;&lt;/xref&gt;</ph> to an instance handle.","source":"Binds an <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> to an instance handle."}],"pos":[17939,18050],"yaml":true},{"content":"An <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> object containing information about the event.","nodes":[{"pos":[0,128],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"&gt;&lt;/xref&gt;</ph> object containing information about the event.","source":"An <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> object containing information about the event."}],"pos":[18305,18434],"yaml":true},{"content":"Binds an instance whose identifier is specified as a parameter to the current instance handle.","nodes":[{"pos":[0,94],"content":"Binds an instance whose identifier is specified as a parameter to the current instance handle.","nodes":[{"content":"Binds an instance whose identifier is specified as a parameter to the current instance handle.","pos":[0,94]}]}],"pos":[19675,19770],"yaml":true},{"content":"Once an instance is bound to a handle, it remains bound for the lifetime of the handle. No other instance can ever be bound to the handle.","nodes":[{"pos":[0,138],"content":"Once an instance is bound to a handle, it remains bound for the lifetime of the handle. No other instance can ever be bound to the handle.","nodes":[{"content":"Once an instance is bound to a handle, it remains bound for the lifetime of the handle. No other instance can ever be bound to the handle.","pos":[0,138],"nodes":[{"content":"Once an instance is bound to a handle, it remains bound for the lifetime of the handle.","pos":[0,87]},{"content":"No other instance can ever be bound to the handle.","pos":[88,138]}]}]}],"pos":[19781,19920],"yaml":true,"extradata":"MT"},{"content":"An instance identifier. Must not be Guid.Empty.","nodes":[{"pos":[0,47],"content":"An instance identifier. Must not be Guid.Empty.","nodes":[{"content":"An instance identifier. Must not be Guid.Empty.","pos":[0,47],"nodes":[{"content":"An instance identifier.","pos":[0,23]},{"content":"Must not be Guid.Empty.","pos":[24,47]}]}]}],"pos":[20067,20115],"yaml":true},{"content":"Binds an instance owner to the current instance handle.","nodes":[{"pos":[0,55],"content":"Binds an instance owner to the current instance handle.","nodes":[{"content":"Binds an instance owner to the current instance handle.","pos":[0,55]}]}],"pos":[21443,21499],"yaml":true},{"content":"Once an instance owner is bound to a handle, it remains bound for the lifetime of the handle. No other instance owner can ever be bound to the handle.","nodes":[{"pos":[0,150],"content":"Once an instance owner is bound to a handle, it remains bound for the lifetime of the handle. No other instance owner can ever be bound to the handle.","nodes":[{"content":"Once an instance owner is bound to a handle, it remains bound for the lifetime of the handle. No other instance owner can ever be bound to the handle.","pos":[0,150],"nodes":[{"content":"Once an instance owner is bound to a handle, it remains bound for the lifetime of the handle.","pos":[0,93]},{"content":"No other instance owner can ever be bound to the handle.","pos":[94,150]}]}]}],"pos":[21510,21661],"yaml":true,"extradata":"MT"},{"content":"The identifier for the instance owner.","nodes":[{"pos":[0,38],"content":"The identifier for the instance owner.","nodes":[{"content":"The identifier for the instance owner.","pos":[0,38]}]}],"pos":[21839,21878],"yaml":true},{"content":"The lock token of the instance owner. A persistence provider may choose to use the same value for the instance owner identifier and the owner’s lock token.","nodes":[{"pos":[0,155],"content":"The lock token of the instance owner. A persistence provider may choose to use the same value for the instance owner identifier and the owner’s lock token.","nodes":[{"content":"The lock token of the instance owner. A persistence provider may choose to use the same value for the instance owner identifier and the owner’s lock token.","pos":[0,155],"nodes":[{"content":"The lock token of the instance owner.","pos":[0,37]},{"content":"A persistence provider may choose to use the same value for the instance owner identifier and the owner’s lock token.","pos":[38,155]}]}]}],"pos":[21941,22097],"yaml":true},{"content":"Binds an existing lock on an instance to the current instance handle. The version of the existing lock is passed as a parameter.","nodes":[{"pos":[0,128],"content":"Binds an existing lock on an instance to the current instance handle. The version of the existing lock is passed as a parameter.","nodes":[{"content":"Binds an existing lock on an instance to the current instance handle. The version of the existing lock is passed as a parameter.","pos":[0,128],"nodes":[{"content":"Binds an existing lock on an instance to the current instance handle.","pos":[0,69]},{"content":"The version of the existing lock is passed as a parameter.","pos":[70,128]}]}]}],"pos":[23460,23589],"yaml":true},{"content":"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store. If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BindReclaimedLock. The persistence provider must not make changes to the instance until the lock is successfully reclaimed. If no other handle is bound to the lock, then BindReclaimedLock succeeds and the current handle becomes bound to the lock. Otherwise, BindReclaimedLock throws InstanceHandleConflictException. If commands are in progress on other handles, BindReclaimedLock may block waiting for the outcome of those commands before deciding whether the lock can be reclaimed.  \n  \n The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock.  \n  \n Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.","nodes":[{"pos":[0,784],"content":"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store. If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BindReclaimedLock. The persistence provider must not make changes to the instance until the lock is successfully reclaimed. If no other handle is bound to the lock, then BindReclaimedLock succeeds and the current handle becomes bound to the lock. Otherwise, BindReclaimedLock throws InstanceHandleConflictException. If commands are in progress on other handles, BindReclaimedLock may block waiting for the outcome of those commands before deciding whether the lock can be reclaimed.","nodes":[{"content":"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store. If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BindReclaimedLock. The persistence provider must not make changes to the instance until the lock is successfully reclaimed. If no other handle is bound to the lock, then BindReclaimedLock succeeds and the current handle becomes bound to the lock. Otherwise, BindReclaimedLock throws InstanceHandleConflictException. If commands are in progress on other handles, BindReclaimedLock may block waiting for the outcome of those commands before deciding whether the lock can be reclaimed.","pos":[0,784],"nodes":[{"content":"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store.","pos":[0,136]},{"content":"If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BindReclaimedLock.","pos":[137,320]},{"content":"The persistence provider must not make changes to the instance until the lock is successfully reclaimed.","pos":[321,425]},{"content":"If no other handle is bound to the lock, then BindReclaimedLock succeeds and the current handle becomes bound to the lock.","pos":[426,548]},{"content":"Otherwise, BindReclaimedLock throws InstanceHandleConflictException.","pos":[549,617]},{"content":"If commands are in progress on other handles, BindReclaimedLock may block waiting for the outcome of those commands before deciding whether the lock can be reclaimed.","pos":[618,784]}]}]},{"pos":[791,990],"content":"The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock.","nodes":[{"content":"The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock.","pos":[0,199],"nodes":[{"content":"The current instance handle must be bound to an instance and a lock owner.","pos":[0,74]},{"content":"The instance must not be completed.","pos":[75,110]},{"content":"The lock token associated with the lock owner is used to identify the owner of the lock.","pos":[111,199]}]}]},{"pos":[997,1143],"content":"Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.","nodes":[{"content":"Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.","pos":[0,146],"nodes":[{"content":"Once a lock is bound to a handle, it remains bound for the lifetime of the handle.","pos":[0,82]},{"content":"Neither the lock token nor the instance version can be changed.","pos":[83,146]}]}]}],"pos":[23600,24750],"yaml":true,"extradata":"MT"},{"content":"Version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.","nodes":[{"pos":[0,111],"content":"Version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.","nodes":[{"content":"Version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.","pos":[0,111]}]}],"pos":[24931,25043],"yaml":true},{"content":"The time-out value for the operation.","nodes":[{"pos":[0,37],"content":"The time-out value for the operation.","nodes":[{"content":"The time-out value for the operation.","pos":[0,37]}]}],"pos":[25108,25146],"yaml":true},{"content":"Indicates that the persistence provider has successfully marked the current instance as complete in the instance store.","nodes":[{"pos":[0,119],"content":"Indicates that the persistence provider has successfully marked the current instance as complete in the instance store.","nodes":[{"content":"Indicates that the persistence provider has successfully marked the current instance as complete in the instance store.","pos":[0,119]}]}],"pos":[26374,26494],"yaml":true},{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance must be initialized and not be already completed. (An instance is initialized if a set of instance data has ever been persisted to it.) All of the keys associated to the instance must be completed.","nodes":[{"pos":[0,303],"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance must be initialized and not be already completed. (An instance is initialized if a set of instance data has ever been persisted to it.) All of the keys associated to the instance must be completed.","nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance must be initialized and not be already completed. (An instance is initialized if a set of instance data has ever been persisted to it.) All of the keys associated to the instance must be completed.","pos":[0,303],"nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance.","pos":[0,92]},{"content":"The instance must be initialized and not be already completed.","pos":[93,155]},{"content":"(An instance is initialized if a set of instance data has ever been persisted to it.) All of the keys associated to the instance must be completed.","pos":[156,303]}]}]}],"pos":[26505,26809],"yaml":true,"extradata":"MT"},{"content":"Indicates that the persistence provider has successfully marked a key as complete in the external store. The identifier of the key is specified as a parameter.","nodes":[{"pos":[0,159],"content":"Indicates that the persistence provider has successfully marked a key as complete in the external store. The identifier of the key is specified as a parameter.","nodes":[{"content":"Indicates that the persistence provider has successfully marked a key as complete in the external store. The identifier of the key is specified as a parameter.","pos":[0,159],"nodes":[{"content":"Indicates that the persistence provider has successfully marked a key as complete in the external store.","pos":[0,104]},{"content":"The identifier of the key is specified as a parameter.","pos":[105,159]}]}]}],"pos":[28182,28342],"yaml":true},{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated to the current instance and not be already completed.","nodes":[{"pos":[0,182],"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated to the current instance and not be already completed.","nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated to the current instance and not be already completed.","pos":[0,182],"nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance.","pos":[0,92]},{"content":"The instance key must be associated to the current instance and not be already completed.","pos":[93,182]}]}]}],"pos":[28353,28536],"yaml":true,"extradata":"MT"},{"content":"The instance key identifier for the key that has been completed. Must not be Guid.Empty.","nodes":[{"pos":[0,88],"content":"The instance key identifier for the key that has been completed. Must not be Guid.Empty.","nodes":[{"content":"The instance key identifier for the key that has been completed. Must not be Guid.Empty.","pos":[0,88],"nodes":[{"content":"The instance key identifier for the key that has been completed.","pos":[0,64]},{"content":"Must not be Guid.Empty.","pos":[65,88]}]}]}],"pos":[28677,28766],"yaml":true},{"content":"Creates an instance of an exception which can be thrown from TryCommand to trigger BindReclaimedLock behavior.","nodes":[{"pos":[0,110],"content":"Creates an instance of an exception which can be thrown from TryCommand to trigger BindReclaimedLock behavior.","nodes":[{"content":"Creates an instance of an exception which can be thrown from TryCommand to trigger BindReclaimedLock behavior.","pos":[0,110]}]}],"pos":[30144,30255],"yaml":true},{"content":"Sample code:  \n  \n```  \n  \nprotected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  \n{  \n    throw context.CreateBindReclaimedLockException(5);  \n}  \nis equivalent to  \nprotected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  \n{  \n    context.BindReclaimedLock(5, timeout);  \n    throw new OperationCanceledException();  \n}  \n  \n```","nodes":[{"pos":[0,12],"content":"Sample code:","nodes":[{"content":"Sample code:","pos":[0,12]}]}],"pos":[30266,30754],"yaml":true,"extradata":"MT"},{"content":"The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.","nodes":[{"pos":[0,115],"content":"The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.","nodes":[{"content":"The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.","pos":[0,115]}]}],"pos":[30937,31053],"yaml":true},{"content":"An exception.","nodes":[{"pos":[0,13],"content":"An exception.","nodes":[{"content":"An exception.","pos":[0,13]}]}],"pos":[31113,31127],"yaml":true},{"content":"Ends the asynchronous operation started by the <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)\"></xref> method.","nodes":[{"pos":[0,223],"content":"Ends the asynchronous operation started by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"Ends the asynchronous operation started by the <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)\"></xref> method."}],"pos":[32487,32711],"yaml":true},{"content":"The result of the asynchronous operation.","nodes":[{"pos":[0,41],"content":"The result of the asynchronous operation.","nodes":[{"content":"The result of the asynchronous operation.","pos":[0,41]}]}],"pos":[32874,32916],"yaml":true},{"content":"Ends the asynchronous operation.","nodes":[{"pos":[0,32],"content":"Ends the asynchronous operation.","nodes":[{"content":"Ends the asynchronous operation.","pos":[0,32]}]}],"pos":[34204,34237],"yaml":true},{"content":"The status of an asynchronous operation.","nodes":[{"pos":[0,40],"content":"The status of an asynchronous operation.","nodes":[{"content":"The status of an asynchronous operation.","pos":[0,40]}]}],"pos":[34390,34431],"yaml":true},{"content":"Executes a persistence command.","nodes":[{"pos":[0,31],"content":"Executes a persistence command.","nodes":[{"content":"Executes a persistence command.","pos":[0,31]}]}],"pos":[35931,35963],"yaml":true},{"content":"A persistence provider can use this method to execute sub-commands as part of a command. The sub-command will be executed using TryCommand, similar to commands passed to InstanceStore.Execute. Commands can be nested, but a command must not execute more than one sub-command at a time.","nodes":[{"pos":[0,284],"content":"A persistence provider can use this method to execute sub-commands as part of a command. The sub-command will be executed using TryCommand, similar to commands passed to InstanceStore.Execute. Commands can be nested, but a command must not execute more than one sub-command at a time.","nodes":[{"content":"A persistence provider can use this method to execute sub-commands as part of a command. The sub-command will be executed using TryCommand, similar to commands passed to InstanceStore.Execute. Commands can be nested, but a command must not execute more than one sub-command at a time.","pos":[0,284],"nodes":[{"content":"A persistence provider can use this method to execute sub-commands as part of a command.","pos":[0,88]},{"content":"The sub-command will be executed using TryCommand, similar to commands passed to InstanceStore.Execute.","pos":[89,192]},{"content":"Commands can be nested, but a command must not execute more than one sub-command at a time.","pos":[193,284]}]}]}],"pos":[35974,36259],"yaml":true,"extradata":"MT"},{"content":"The persistence command to be executed.","nodes":[{"pos":[0,39],"content":"The persistence command to be executed.","nodes":[{"content":"The persistence command to be executed.","pos":[0,39]}]}],"pos":[36516,36556],"yaml":true},{"content":"The time-out value for the operation.","nodes":[{"pos":[0,37],"content":"The time-out value for the operation.","nodes":[{"content":"The time-out value for the operation.","pos":[0,37]}]}],"pos":[36621,36659],"yaml":true},{"content":"Gets the current instance handle.","nodes":[{"pos":[0,33],"content":"Gets the current instance handle.","nodes":[{"content":"Gets the current instance handle.","pos":[0,33]}]}],"pos":[37855,37889],"yaml":true},{"content":"The current instance handle.","nodes":[{"pos":[0,28],"content":"The current instance handle.","nodes":[{"content":"The current instance handle.","pos":[0,28]}]}],"pos":[38082,38111],"yaml":true},{"content":"Gets the version of the lock held on the current instance by the current instance handle.","nodes":[{"pos":[0,89],"content":"Gets the version of the lock held on the current instance by the current instance handle.","nodes":[{"content":"Gets the version of the lock held on the current instance by the current instance handle.","pos":[0,89]}]}],"pos":[39320,39410],"yaml":true},{"content":"The persistence provider should check this value against the lock version of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock. If the lock version doesn’t match, the command should fail with InstanceLockLostException.","nodes":[{"pos":[0,337],"content":"The persistence provider should check this value against the lock version of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock. If the lock version doesn’t match, the command should fail with InstanceLockLostException.","nodes":[{"content":"The persistence provider should check this value against the lock version of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock. If the lock version doesn’t match, the command should fail with InstanceLockLostException.","pos":[0,337],"nodes":[{"content":"The persistence provider should check this value against the lock version of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock.","pos":[0,246]},{"content":"If the lock version doesn’t match, the command should fail with InstanceLockLostException.","pos":[247,337]}]}]}],"pos":[39421,39759],"yaml":true,"extradata":"MT"},{"content":"The version of the instance lock bound to the current instance handle, or -1 if the handle isn’t bound to a lock.","nodes":[{"pos":[0,113],"content":"The version of the instance lock bound to the current instance handle, or -1 if the handle isn’t bound to a lock.","nodes":[{"content":"The version of the instance lock bound to the current instance handle, or -1 if the handle isn’t bound to a lock.","pos":[0,113]}]}],"pos":[39875,39989],"yaml":true},{"content":"Gets the instance view object that represents the in-memory state of the current instance. This view reflects updates as they are made by the command in progress.","nodes":[{"pos":[0,162],"content":"Gets the instance view object that represents the in-memory state of the current instance. This view reflects updates as they are made by the command in progress.","nodes":[{"content":"Gets the instance view object that represents the in-memory state of the current instance. This view reflects updates as they are made by the command in progress.","pos":[0,162],"nodes":[{"content":"Gets the instance view object that represents the in-memory state of the current instance.","pos":[0,90]},{"content":"This view reflects updates as they are made by the command in progress.","pos":[91,162]}]}]}],"pos":[41181,41344],"yaml":true},{"content":"The instance view object.","nodes":[{"pos":[0,25],"content":"The instance view object.","nodes":[{"content":"The instance view object.","pos":[0,25]}]}],"pos":[41531,41557],"yaml":true},{"content":"Indicates that the persistence provider has successfully retrieved the current instance from the instance store.","nodes":[{"pos":[0,112],"content":"Indicates that the persistence provider has successfully retrieved the current instance from the instance store.","nodes":[{"content":"Indicates that the persistence provider has successfully retrieved the current instance from the instance store.","pos":[0,112]}]}],"pos":[45081,45194],"yaml":true},{"content":"The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the loaded instance is marked as complete, the loaded data is considered to be consistent; otherwise, it is considered to be in doubt.","nodes":[{"pos":[0,237],"content":"The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the loaded instance is marked as complete, the loaded data is considered to be consistent; otherwise, it is considered to be in doubt.","nodes":[{"content":"The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the loaded instance is marked as complete, the loaded data is considered to be consistent; otherwise, it is considered to be in doubt.","pos":[0,237],"nodes":[{"content":"The current instance handle must be bound to an instance.","pos":[0,57]},{"content":"If the instance handle is bound to a lock or the loaded instance is marked as complete, the loaded data is considered to be consistent; otherwise, it is considered to be in doubt.","pos":[58,237]}]}]}],"pos":[45205,45443],"yaml":true,"extradata":"MT"},{"content":"The instance state information.","nodes":[{"pos":[0,31],"content":"The instance state information.","nodes":[{"content":"The instance state information.","pos":[0,31]}]}],"pos":[46278,46310],"yaml":true},{"content":"The instance data as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.","nodes":[{"pos":[0,160],"content":"The instance data as a dictionary of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValue\"&gt;&lt;/xref&gt;</ph> objects.","source":"The instance data as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects."}],"pos":[46473,46634],"yaml":true},{"content":"Instance metadata as a collection of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.","nodes":[{"pos":[0,160],"content":"Instance metadata as a collection of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValue\"&gt;&lt;/xref&gt;</ph> objects.","source":"Instance metadata as a collection of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects."}],"pos":[46801,46962],"yaml":true},{"content":"Associated instance key metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.","nodes":[{"pos":[0,247],"content":"Associated instance key metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValue\"&gt;&lt;/xref&gt;</ph> objects.","source":"Associated instance key metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects."}],"pos":[47194,47442],"yaml":true},{"content":"Completed instance metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.","nodes":[{"pos":[0,242],"content":"Completed instance metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValue\"&gt;&lt;/xref&gt;</ph> objects.","source":"Completed instance metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects."}],"pos":[47673,47916],"yaml":true},{"content":"Gets the lock token of the instance owner bound to the current instance handle.","nodes":[{"pos":[0,79],"content":"Gets the lock token of the instance owner bound to the current instance handle.","nodes":[{"content":"Gets the lock token of the instance owner bound to the current instance handle.","pos":[0,79]}]}],"pos":[49089,49169],"yaml":true},{"content":"The persistence provider should check this value against the lock token of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock. If the lock token doesn’t match, the command should fail with InstanceLockLostException.  \n  \n The persistence provider should use this value as the lock token when acquiring a new lock on an instance (such as persisting instance data using a handle not already bound to a lock). If the instance is already locked in the instance store and the lock token matches this lock token, the persistence provider can attempt to reclaim the instance using BindReclaimedLock.","nodes":[{"pos":[0,333],"content":"The persistence provider should check this value against the lock token of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock. If the lock token doesn’t match, the command should fail with InstanceLockLostException.","nodes":[{"content":"The persistence provider should check this value against the lock token of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock. If the lock token doesn’t match, the command should fail with InstanceLockLostException.","pos":[0,333],"nodes":[{"content":"The persistence provider should check this value against the lock token of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock.","pos":[0,244]},{"content":"If the lock token doesn’t match, the command should fail with InstanceLockLostException.","pos":[245,333]}]}]},{"pos":[340,710],"content":"The persistence provider should use this value as the lock token when acquiring a new lock on an instance (such as persisting instance data using a handle not already bound to a lock). If the instance is already locked in the instance store and the lock token matches this lock token, the persistence provider can attempt to reclaim the instance using BindReclaimedLock.","nodes":[{"content":"The persistence provider should use this value as the lock token when acquiring a new lock on an instance (such as persisting instance data using a handle not already bound to a lock). If the instance is already locked in the instance store and the lock token matches this lock token, the persistence provider can attempt to reclaim the instance using BindReclaimedLock.","pos":[0,370],"nodes":[{"content":"The persistence provider should use this value as the lock token when acquiring a new lock on an instance (such as persisting instance data using a handle not already bound to a lock).","pos":[0,184]},{"content":"If the instance is already locked in the instance store and the lock token matches this lock token, the persistence provider can attempt to reclaim the instance using BindReclaimedLock.","pos":[185,370]}]}]}],"pos":[49180,49895],"yaml":true,"extradata":"MT"},{"content":"The lock token bound to the current instance handle, or Guid.Empty if the handle isn’t bound to an instance owner.","nodes":[{"pos":[0,114],"content":"The lock token bound to the current instance handle, or Guid.Empty if the handle isn’t bound to an instance owner.","nodes":[{"content":"The lock token bound to the current instance handle, or Guid.Empty if the handle isn’t bound to an instance owner.","pos":[0,114]}]}],"pos":[50004,50119],"yaml":true},{"content":"Indicates that the persistence provider has successfully persisted a set of instance data to the instance store. This has the effect of initializing the instance if it wasn’t already.","nodes":[{"pos":[0,183],"content":"Indicates that the persistence provider has successfully persisted a set of instance data to the instance store. This has the effect of initializing the instance if it wasn’t already.","nodes":[{"content":"Indicates that the persistence provider has successfully persisted a set of instance data to the instance store. This has the effect of initializing the instance if it wasn’t already.","pos":[0,183],"nodes":[{"content":"Indicates that the persistence provider has successfully persisted a set of instance data to the instance store.","pos":[0,112]},{"content":"This has the effect of initializing the instance if it wasn’t already.","pos":[113,183]}]}]}],"pos":[51765,51949],"yaml":true},{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. Each set of instance data completely replaces the previous set. The set of instance data may be null – this is the same as empty. Persisting a null set of instance data deletes the existing set of instance data. (Persisting a set of instance data has no effect on instance metadata.)","nodes":[{"pos":[0,376],"content":"The current instance handle must be bound to an instance as well as a lock on that instance. Each set of instance data completely replaces the previous set. The set of instance data may be null – this is the same as empty. Persisting a null set of instance data deletes the existing set of instance data. (Persisting a set of instance data has no effect on instance metadata.)","nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. Each set of instance data completely replaces the previous set. The set of instance data may be null – this is the same as empty. Persisting a null set of instance data deletes the existing set of instance data. (Persisting a set of instance data has no effect on instance metadata.)","pos":[0,376],"nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance.","pos":[0,92]},{"content":"Each set of instance data completely replaces the previous set.","pos":[93,156]},{"content":"The set of instance data may be null – this is the same as empty.","pos":[157,222]},{"content":"Persisting a null set of instance data deletes the existing set of instance data.","pos":[223,304]},{"content":"(Persisting a set of instance data has no effect on instance metadata.)","pos":[305,376]}]}]}],"pos":[51960,52337],"yaml":true,"extradata":"MT"},{"content":"Instance data as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.","nodes":[{"pos":[0,156],"content":"Instance data as a dictionary of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValue\"&gt;&lt;/xref&gt;</ph> objects.","source":"Instance data as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects."}],"pos":[52678,52835],"yaml":true},{"content":"Adds the <xref href=\"System.Runtime.DurableInstancing.InstanceStoreQueryResult\"></xref> passed as a parameter to a list of <xref href=\"System.Runtime.DurableInstancing.InstanceStoreQueryResult\"></xref> objects in an <xref href=\"System.Runtime.DurableInstancing.InstanceView\"></xref>.","nodes":[{"pos":[0,283],"content":"Adds the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceStoreQueryResult\"&gt;&lt;/xref&gt;</ph> passed as a parameter to a list of <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceStoreQueryResult\"&gt;&lt;/xref&gt;</ph> objects in an <ph id=\"ph3\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceView\"&gt;&lt;/xref&gt;</ph>.","source":"Adds the <xref href=\"System.Runtime.DurableInstancing.InstanceStoreQueryResult\"></xref> passed as a parameter to a list of <xref href=\"System.Runtime.DurableInstancing.InstanceStoreQueryResult\"></xref> objects in an <xref href=\"System.Runtime.DurableInstancing.InstanceView\"></xref>."}],"pos":[54330,54614],"yaml":true},{"content":"The results of a query against an instance store.","nodes":[{"pos":[0,49],"content":"The results of a query against an instance store.","nodes":[{"content":"The results of a query against an instance store.","pos":[0,49]}]}],"pos":[54870,54920],"yaml":true},{"content":"Indicates that the persistence provider has successfully read some instance key metadata for a key associated to the current instance from the instance store.","nodes":[{"pos":[0,158],"content":"Indicates that the persistence provider has successfully read some instance key metadata for a key associated to the current instance from the instance store.","nodes":[{"content":"Indicates that the persistence provider has successfully read some instance key metadata for a key associated to the current instance from the instance store.","pos":[0,158]}]}],"pos":[56739,56898],"yaml":true},{"content":"The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.","nodes":[{"pos":[0,235],"content":"The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.","nodes":[{"content":"The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.","pos":[0,235],"nodes":[{"content":"The current instance handle must be bound to an instance.","pos":[0,57]},{"content":"If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.","pos":[58,235]}]}]}],"pos":[56909,57145],"yaml":true,"extradata":"MT"},{"content":"The instance key identifier for the key whose metadata was read. Must not be Guid.Empty.","nodes":[{"pos":[0,88],"content":"The instance key identifier for the key whose metadata was read. Must not be Guid.Empty.","nodes":[{"content":"The instance key identifier for the key whose metadata was read. Must not be Guid.Empty.","pos":[0,88],"nodes":[{"content":"The instance key identifier for the key whose metadata was read.","pos":[0,64]},{"content":"Must not be Guid.Empty.","pos":[65,88]}]}]}],"pos":[57423,57512],"yaml":true},{"content":"The metadata as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.","nodes":[{"pos":[0,155],"content":"The metadata as a dictionary of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValue\"&gt;&lt;/xref&gt;</ph> objects.","source":"The metadata as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects."}],"pos":[57671,57827],"yaml":true},{"content":"`True` if the metadata represents all of the metadata associated to the instance key, otherwise `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`True`</ph> if the metadata represents all of the metadata associated to the instance key, otherwise <ph id=\"ph2\">`false`</ph>.","source":"`True` if the metadata represents all of the metadata associated to the instance key, otherwise `false`."}],"pos":[57892,57999],"yaml":true},{"content":"Indicates that the persistence provider has successfully read some instance metadata for the current instance from the instance store.","nodes":[{"pos":[0,134],"content":"Indicates that the persistence provider has successfully read some instance metadata for the current instance from the instance store.","nodes":[{"content":"Indicates that the persistence provider has successfully read some instance metadata for the current instance from the instance store.","pos":[0,134]}]}],"pos":[59749,59884],"yaml":true},{"content":"The metadata as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.","nodes":[{"pos":[0,155],"content":"The metadata as a dictionary of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValue\"&gt;&lt;/xref&gt;</ph> objects.","source":"The metadata as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects."}],"pos":[60251,60407],"yaml":true},{"content":"`True` if the metadata represents all of the metadata associated to the instance, otherwise `false`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`True`</ph> if the metadata represents all of the metadata associated to the instance, otherwise <ph id=\"ph2\">`false`</ph>.","source":"`True` if the metadata represents all of the metadata associated to the instance, otherwise `false`."}],"pos":[60472,60575],"yaml":true},{"content":"Sets the instance owner metadata using the data passed in the parameter.","nodes":[{"pos":[0,72],"content":"Sets the instance owner metadata using the data passed in the parameter.","nodes":[{"content":"Sets the instance owner metadata using the data passed in the parameter.","pos":[0,72]}]}],"pos":[62352,62425],"yaml":true},{"content":"The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.","nodes":[{"pos":[0,235],"content":"The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.","nodes":[{"content":"The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.","pos":[0,235],"nodes":[{"content":"The current instance handle must be bound to an instance.","pos":[0,57]},{"content":"If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.","pos":[58,235]}]}]}],"pos":[62436,62672],"yaml":true,"extradata":"MT"},{"content":"The dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.","nodes":[{"pos":[0,141],"content":"The dictionary of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValue\"&gt;&lt;/xref&gt;</ph> objects.","source":"The dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects."}],"pos":[63044,63186],"yaml":true},{"content":"The value to specify whether the consistency to be set to <xref href=\"System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt\"></xref> or <xref href=\"System.Runtime.DurableInstancing.InstanceValueConsistency.Partial\"></xref>.","nodes":[{"pos":[0,235],"content":"The value to specify whether the consistency to be set to <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceValueConsistency.Partial\"&gt;&lt;/xref&gt;</ph>.","source":"The value to specify whether the consistency to be set to <xref href=\"System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt\"></xref> or <xref href=\"System.Runtime.DurableInstancing.InstanceValueConsistency.Partial\"></xref>."}],"pos":[63251,63487],"yaml":true},{"content":"Sets the cancellation handler to be called when the cancel of an operation is requested.","nodes":[{"pos":[0,88],"content":"Sets the cancellation handler to be called when the cancel of an operation is requested.","nodes":[{"content":"Sets the cancellation handler to be called when the cancel of an operation is requested.","pos":[0,88]}]}],"pos":[65083,65172],"yaml":true},{"content":"If the cancellation handler is called, the persistence provider should cancel all pending operations and throw OperationCanceledException from TryCommand to indicate that the persistence command was interrupted before it could be completed.","nodes":[{"pos":[0,240],"content":"If the cancellation handler is called, the persistence provider should cancel all pending operations and throw OperationCanceledException from TryCommand to indicate that the persistence command was interrupted before it could be completed.","nodes":[{"content":"If the cancellation handler is called, the persistence provider should cancel all pending operations and throw OperationCanceledException from TryCommand to indicate that the persistence command was interrupted before it could be completed.","pos":[0,240]}]}],"pos":[65183,65424],"yaml":true,"extradata":"MT"},{"content":"The reference to a function to be called.","nodes":[{"pos":[0,41],"content":"The reference to a function to be called.","nodes":[{"content":"The reference to a function to be called.","pos":[0,41]}]}],"pos":[65725,65767],"yaml":true},{"content":"Indicates that the persistence provider has successfully disassociated a key from the current instance in the instance store. The identifier of the key is specified as a parameter.","nodes":[{"pos":[0,180],"content":"Indicates that the persistence provider has successfully disassociated a key from the current instance in the instance store. The identifier of the key is specified as a parameter.","nodes":[{"content":"Indicates that the persistence provider has successfully disassociated a key from the current instance in the instance store. The identifier of the key is specified as a parameter.","pos":[0,180],"nodes":[{"content":"Indicates that the persistence provider has successfully disassociated a key from the current instance in the instance store.","pos":[0,125]},{"content":"The identifier of the key is specified as a parameter.","pos":[126,180]}]}]}],"pos":[67087,67268],"yaml":true},{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated to the current instance and must be marked complete. The current instance must not be marked complete.","nodes":[{"pos":[0,231],"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated to the current instance and must be marked complete. The current instance must not be marked complete.","nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated to the current instance and must be marked complete. The current instance must not be marked complete.","pos":[0,231],"nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance.","pos":[0,92]},{"content":"The instance key must be associated to the current instance and must be marked complete.","pos":[93,181]},{"content":"The current instance must not be marked complete.","pos":[182,231]}]}]}],"pos":[67279,67511],"yaml":true,"extradata":"MT"},{"content":"The instance key identifier for the key that has been unassociated. Must not be Guid.Empty.","nodes":[{"pos":[0,91],"content":"The instance key identifier for the key that has been unassociated. Must not be Guid.Empty.","nodes":[{"content":"The instance key identifier for the key that has been unassociated. Must not be Guid.Empty.","pos":[0,91],"nodes":[{"content":"The instance key identifier for the key that has been unassociated.","pos":[0,67]},{"content":"Must not be Guid.Empty.","pos":[68,91]}]}]}],"pos":[67655,67747],"yaml":true},{"content":"Gets the user context information attached to the current instance handle.","nodes":[{"pos":[0,74],"content":"Gets the user context information attached to the current instance handle.","nodes":[{"content":"Gets the user context information attached to the current instance handle.","pos":[0,74]}]}],"pos":[68941,69016],"yaml":true},{"content":"The object is the one that is returned from InstanceStore.OnNewInstanceHandle for the current instance handle.","nodes":[{"pos":[0,110],"content":"The object is the one that is returned from InstanceStore.OnNewInstanceHandle for the current instance handle.","nodes":[{"content":"The object is the one that is returned from InstanceStore.OnNewInstanceHandle for the current instance handle.","pos":[0,110]}]}],"pos":[69027,69138],"yaml":true,"extradata":"MT"},{"content":"The user context information.","nodes":[{"pos":[0,29],"content":"The user context information.","nodes":[{"content":"The user context information.","pos":[0,29]}]}],"pos":[69253,69283],"yaml":true},{"content":"Indicates that the persistence provider has successfully written a metadata value for an instance key that is associated with the current instance to the instance store","nodes":[{"pos":[0,168],"content":"Indicates that the persistence provider has successfully written a metadata value for an instance key that is associated with the current instance to the instance store","nodes":[{"content":"Indicates that the persistence provider has successfully written a metadata value for an instance key that is associated with the current instance to the instance store","pos":[0,168]}]}],"pos":[70901,71070],"yaml":true},{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated with the current instance and must not be completed.","nodes":[{"pos":[0,181],"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated with the current instance and must not be completed.","nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated with the current instance and must not be completed.","pos":[0,181],"nodes":[{"content":"The current instance handle must be bound to an instance as well as a lock on that instance.","pos":[0,92]},{"content":"The instance key must be associated with the current instance and must not be completed.","pos":[93,181]}]}]}],"pos":[71081,71263],"yaml":true,"extradata":"MT"},{"content":"The instance key identifier for the key. Must not be Guid.Empty.","nodes":[{"pos":[0,64],"content":"The instance key identifier for the key. Must not be Guid.Empty.","nodes":[{"content":"The instance key identifier for the key. Must not be Guid.Empty.","pos":[0,64],"nodes":[{"content":"The instance key identifier for the key.","pos":[0,40]},{"content":"Must not be Guid.Empty.","pos":[41,64]}]}]}],"pos":[71495,71560],"yaml":true},{"content":"The name of the metadata property.","nodes":[{"pos":[0,34],"content":"The name of the metadata property.","nodes":[{"content":"The name of the metadata property.","pos":[0,34]}]}],"pos":[71628,71663],"yaml":true},{"content":"The value of the metadata property.","nodes":[{"pos":[0,35],"content":"The value of the metadata property.","nodes":[{"content":"The value of the metadata property.","pos":[0,35]}]}],"pos":[71757,71793],"yaml":true},{"content":"Indicates that the persistence provider has successfully written a metadata value for the current instance to the external instance store.","nodes":[{"pos":[0,138],"content":"Indicates that the persistence provider has successfully written a metadata value for the current instance to the external instance store.","nodes":[{"content":"Indicates that the persistence provider has successfully written a metadata value for the current instance to the external instance store.","pos":[0,138]}]}],"pos":[73357,73496],"yaml":true},{"content":"The current instance handle must be bound to an instance as well as has a lock on that instance. The instance must not be completed.","nodes":[{"pos":[0,132],"content":"The current instance handle must be bound to an instance as well as has a lock on that instance. The instance must not be completed.","nodes":[{"content":"The current instance handle must be bound to an instance as well as has a lock on that instance. The instance must not be completed.","pos":[0,132],"nodes":[{"content":"The current instance handle must be bound to an instance as well as has a lock on that instance.","pos":[0,96]},{"content":"The instance must not be completed.","pos":[97,132]}]}]}],"pos":[73507,73640],"yaml":true,"extradata":"MT"},{"content":"The name of the metadata property.","nodes":[{"pos":[0,34],"content":"The name of the metadata property.","nodes":[{"content":"The name of the metadata property.","pos":[0,34]}]}],"pos":[73870,73905],"yaml":true},{"content":"The value of the metadata property.","nodes":[{"pos":[0,35],"content":"The value of the metadata property.","nodes":[{"content":"The value of the metadata property.","pos":[0,35]}]}],"pos":[73999,74035],"yaml":true},{"content":"Indicates that the persistence provider has successfully written a metadata value for the current instance owner to the instance store.","nodes":[{"pos":[0,135],"content":"Indicates that the persistence provider has successfully written a metadata value for the current instance owner to the instance store.","nodes":[{"content":"Indicates that the persistence provider has successfully written a metadata value for the current instance owner to the instance store.","pos":[0,135]}]}],"pos":[75626,75762],"yaml":true},{"content":"The current instance handle must be bound to an instance owner.","nodes":[{"pos":[0,63],"content":"The current instance handle must be bound to an instance owner.","nodes":[{"content":"The current instance handle must be bound to an instance owner.","pos":[0,63]}]}],"pos":[75773,75837],"yaml":true,"extradata":"MT"},{"content":"The name of the metadata property.","nodes":[{"pos":[0,34],"content":"The name of the metadata property.","nodes":[{"content":"The name of the metadata property.","pos":[0,34]}]}],"pos":[76072,76107],"yaml":true},{"content":"The value of the metadata property.","nodes":[{"pos":[0,35],"content":"The value of the metadata property.","nodes":[{"content":"The value of the metadata property.","pos":[0,35]}]}],"pos":[76201,76237],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext\n  commentId: T:System.Runtime.DurableInstancing.InstancePersistenceContext\n  id: InstancePersistenceContext\n  children:\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.AssociatedInstanceKey(System.Guid)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.BeginExecute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.BindAcquiredLock(System.Int64)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.BindEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstance(System.Guid)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstanceOwner(System.Guid,System.Guid)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.BindReclaimedLock(System.Int64,System.TimeSpan)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstance\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstanceKey(System.Guid)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.CreateBindReclaimedLockException(System.Int64)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.EndBindReclaimedLock(System.IAsyncResult)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.EndExecute(System.IAsyncResult)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.Execute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.LoadedInstance(System.Runtime.DurableInstancing.InstanceState,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}})\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.PersistedInstance(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue})\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.QueriedInstanceStore(System.Runtime.DurableInstancing.InstanceStoreQueryResult)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceKeyMetadata(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceOwnerMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.SetCancellationHandler(System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext})\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.UnassociatedInstanceKey(System.Guid)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceKeyMetadataValue(System.Guid,System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  - System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceOwnerMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  langs:\n  - csharp\n  name: InstancePersistenceContext\n  nameWithType: InstancePersistenceContext\n  fullName: System.Runtime.DurableInstancing.InstancePersistenceContext\n  type: Class\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Represents execution state information while a persistence command is being executed.\n  remarks: An instance of this class is passed to the TryCommand method of persistence provider implementations. Persistence providers use this class to inspect the in-memory view of the instance as well as indicate the results of operations on the external store which may affect the view or other in-memory context.\n  syntax:\n    content: public sealed class InstancePersistenceContext\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.AssociatedInstanceKey(System.Guid)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.AssociatedInstanceKey(System.Guid)\n  id: AssociatedInstanceKey(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: AssociatedInstanceKey(Guid)\n  nameWithType: InstancePersistenceContext.AssociatedInstanceKey(Guid)\n  fullName: InstancePersistenceContext.AssociatedInstanceKey(Guid)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully associated a key to the current instance in the instance store. The identifier of the key is specified as a parameter.\n  remarks: The instance key must be unassociated. The current instance handle must be bound to an instance as well as a lock on that instance.\n  syntax:\n    content: public void AssociatedInstanceKey (Guid key);\n    parameters:\n    - id: key\n      type: System.Guid\n      description: The instance key identifier  for the key that has been associated. Must not be Guid.Empty.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.AssociatedInstanceKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: BeginBindReclaimedLock(Int64, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstancePersistenceContext.BeginBindReclaimedLock(Int64, TimeSpan, AsyncCallback, Object)\n  fullName: InstancePersistenceContext.BeginBindReclaimedLock(Int64, TimeSpan, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Begin an asynchronous operation to bind an existing lock on an instance to the current instance handle. The version of the existing lock is passed as a parameter.\n  remarks: \"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store. If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BeginBindReclaimedLock. The persistence provider must not make changes to the instance until the lock is successfully reclaimed. If no other handle is bound to the lock, then the BeginBindReclaimedLock operation succeeds and the current handle becomes bound to the lock. Otherwise, BeginBindReclaimedLock or EndBindReclaimedLock throws InstanceHandleConflictException. If commands are in progress on other handles, the operation may not complete while waiting for the outcome of those commands to decide whether the lock can be reclaimed.  \\n  \\n The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock.  \\n  \\n Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.\"\n  syntax:\n    content: public IAsyncResult BeginBindReclaimedLock (long instanceVersion, TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: instanceVersion\n      type: System.Int64\n      description: The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.\n    - id: timeout\n      type: System.TimeSpan\n      description: The timeout period for the asynchronous operation.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the operation is completed.\n    - id: state\n      type: System.Object\n      description: The state information associated with the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: The status of an asynchronous operation.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BeginExecute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginExecute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginExecute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: BeginExecute(InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstancePersistenceContext.BeginExecute(InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  fullName: InstancePersistenceContext.BeginExecute(InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Begins executing a persistence command asynchronously.\n  remarks: A persistence provider can use this method to execute sub-commands as part of a command. The sub-command will be executed using BeginTryCommand, similar to commands passed to InstanceStore.BeginExecute. Commands can be nested, but a command must not execute more than one sub-command at a time.\n  syntax:\n    content: public IAsyncResult BeginExecute (System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: command\n      type: System.Runtime.DurableInstancing.InstancePersistenceCommand\n      description: The persistence command to be executed.\n    - id: timeout\n      type: System.TimeSpan\n      description: The time-out value for the operation.\n    - id: callback\n      type: System.AsyncCallback\n      description: The delegate that receives the notification of the asynchronous receive that a request operation completes.\n    - id: state\n      type: System.Object\n      description: The state information.\n    return:\n      type: System.IAsyncResult\n      description: The status of an asynchronous operation.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.BeginExecute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindAcquiredLock(System.Int64)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindAcquiredLock(System.Int64)\n  id: BindAcquiredLock(System.Int64)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: BindAcquiredLock(Int64)\n  nameWithType: InstancePersistenceContext.BindAcquiredLock(Int64)\n  fullName: InstancePersistenceContext.BindAcquiredLock(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Binds a newly acquired lock on an instance to the current instance handle. The version of the acquired lock is passed as a parameter.\n  remarks: \"If a persistence provider implements lock versioning, then each time a lock is acquired on the instance, the version must be incremented by one in the external store. The first time the instance is locked, the version should be 1. Each lock acquisition invalidates the previous lock. The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock  \\n  \\n Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.\"\n  syntax:\n    content: public void BindAcquiredLock (long instanceVersion);\n    parameters:\n    - id: instanceVersion\n      type: System.Int64\n      description: Version of the lock acquired on the instance, or zero if the persistence provider does not implement lock versions.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.BindAcquiredLock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent)\n  id: BindEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: BindEvent(InstancePersistenceEvent)\n  nameWithType: InstancePersistenceContext.BindEvent(InstancePersistenceEvent)\n  fullName: InstancePersistenceContext.BindEvent(InstancePersistenceEvent)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Binds an <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> to an instance handle.\n  syntax:\n    content: public void BindEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent);\n    parameters:\n    - id: persistenceEvent\n      type: System.Runtime.DurableInstancing.InstancePersistenceEvent\n      description: An <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> object containing information about the event.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.BindEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstance(System.Guid)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstance(System.Guid)\n  id: BindInstance(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: BindInstance(Guid)\n  nameWithType: InstancePersistenceContext.BindInstance(Guid)\n  fullName: InstancePersistenceContext.BindInstance(Guid)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Binds an instance whose identifier is specified as a parameter to the current instance handle.\n  remarks: Once an instance is bound to a handle, it remains bound for the lifetime of the handle. No other instance can ever be bound to the handle.\n  syntax:\n    content: public void BindInstance (Guid instanceId);\n    parameters:\n    - id: instanceId\n      type: System.Guid\n      description: An instance identifier. Must not be Guid.Empty.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstance*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstanceOwner(System.Guid,System.Guid)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstanceOwner(System.Guid,System.Guid)\n  id: BindInstanceOwner(System.Guid,System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: BindInstanceOwner(Guid, Guid)\n  nameWithType: InstancePersistenceContext.BindInstanceOwner(Guid, Guid)\n  fullName: InstancePersistenceContext.BindInstanceOwner(Guid, Guid)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Binds an instance owner to the current instance handle.\n  remarks: Once an instance owner is bound to a handle, it remains bound for the lifetime of the handle. No other instance owner can ever be bound to the handle.\n  syntax:\n    content: public void BindInstanceOwner (Guid instanceOwnerId, Guid lockToken);\n    parameters:\n    - id: instanceOwnerId\n      type: System.Guid\n      description: The identifier for the instance owner.\n    - id: lockToken\n      type: System.Guid\n      description: The lock token of the instance owner. A persistence provider may choose to use the same value for the instance owner identifier and the owner’s lock token.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstanceOwner*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindReclaimedLock(System.Int64,System.TimeSpan)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindReclaimedLock(System.Int64,System.TimeSpan)\n  id: BindReclaimedLock(System.Int64,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: BindReclaimedLock(Int64, TimeSpan)\n  nameWithType: InstancePersistenceContext.BindReclaimedLock(Int64, TimeSpan)\n  fullName: InstancePersistenceContext.BindReclaimedLock(Int64, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Binds an existing lock on an instance to the current instance handle. The version of the existing lock is passed as a parameter.\n  remarks: \"When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store. If the lock token matches the current handle’s lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BindReclaimedLock. The persistence provider must not make changes to the instance until the lock is successfully reclaimed. If no other handle is bound to the lock, then BindReclaimedLock succeeds and the current handle becomes bound to the lock. Otherwise, BindReclaimedLock throws InstanceHandleConflictException. If commands are in progress on other handles, BindReclaimedLock may block waiting for the outcome of those commands before deciding whether the lock can be reclaimed.  \\n  \\n The current instance handle must be bound to an instance and a lock owner. The instance must not be completed. The lock token associated with the lock owner is used to identify the owner of the lock.  \\n  \\n Once a lock is bound to a handle, it remains bound for the lifetime of the handle. Neither the lock token nor the instance version can be changed.\"\n  syntax:\n    content: public void BindReclaimedLock (long instanceVersion, TimeSpan timeout);\n    parameters:\n    - id: instanceVersion\n      type: System.Int64\n      description: Version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.\n    - id: timeout\n      type: System.TimeSpan\n      description: The time-out value for the operation.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.BindReclaimedLock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstance\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstance\n  id: CompletedInstance\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: CompletedInstance()\n  nameWithType: InstancePersistenceContext.CompletedInstance()\n  fullName: InstancePersistenceContext.CompletedInstance()\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully marked the current instance as complete in the instance store.\n  remarks: The current instance handle must be bound to an instance as well as a lock on that instance. The instance must be initialized and not be already completed. (An instance is initialized if a set of instance data has ever been persisted to it.) All of the keys associated to the instance must be completed.\n  syntax:\n    content: public void CompletedInstance ();\n    parameters: []\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstance*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstanceKey(System.Guid)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstanceKey(System.Guid)\n  id: CompletedInstanceKey(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: CompletedInstanceKey(Guid)\n  nameWithType: InstancePersistenceContext.CompletedInstanceKey(Guid)\n  fullName: InstancePersistenceContext.CompletedInstanceKey(Guid)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully marked a key as complete in the external store. The identifier of the key is specified as a parameter.\n  remarks: The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated to the current instance and not be already completed.\n  syntax:\n    content: public void CompletedInstanceKey (Guid key);\n    parameters:\n    - id: key\n      type: System.Guid\n      description: The instance key identifier for the key that has been completed. Must not be Guid.Empty.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstanceKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.CreateBindReclaimedLockException(System.Int64)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.CreateBindReclaimedLockException(System.Int64)\n  id: CreateBindReclaimedLockException(System.Int64)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: CreateBindReclaimedLockException(Int64)\n  nameWithType: InstancePersistenceContext.CreateBindReclaimedLockException(Int64)\n  fullName: InstancePersistenceContext.CreateBindReclaimedLockException(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Creates an instance of an exception which can be thrown from TryCommand to trigger BindReclaimedLock behavior.\n  remarks: \"Sample code:  \\n  \\n```  \\n  \\nprotected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  \\n{  \\n    throw context.CreateBindReclaimedLockException(5);  \\n}  \\nis equivalent to  \\nprotected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  \\n{  \\n    context.BindReclaimedLock(5, timeout);  \\n    throw new OperationCanceledException();  \\n}  \\n  \\n```\"\n  syntax:\n    content: public Exception CreateBindReclaimedLockException (long instanceVersion);\n    parameters:\n    - id: instanceVersion\n      type: System.Int64\n      description: The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.\n    return:\n      type: System.Exception\n      description: An exception.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.CreateBindReclaimedLockException*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.EndBindReclaimedLock(System.IAsyncResult)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.EndBindReclaimedLock(System.IAsyncResult)\n  id: EndBindReclaimedLock(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: EndBindReclaimedLock(IAsyncResult)\n  nameWithType: InstancePersistenceContext.EndBindReclaimedLock(IAsyncResult)\n  fullName: InstancePersistenceContext.EndBindReclaimedLock(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Ends the asynchronous operation started by the <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)\"></xref> method.\n  syntax:\n    content: public void EndBindReclaimedLock (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The result of the asynchronous operation.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.EndBindReclaimedLock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.EndExecute(System.IAsyncResult)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.EndExecute(System.IAsyncResult)\n  id: EndExecute(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: EndExecute(IAsyncResult)\n  nameWithType: InstancePersistenceContext.EndExecute(IAsyncResult)\n  fullName: InstancePersistenceContext.EndExecute(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Ends the asynchronous operation.\n  syntax:\n    content: public void EndExecute (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The status of an asynchronous operation.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.EndExecute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.Execute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.Execute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  id: Execute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: Execute(InstancePersistenceCommand, TimeSpan)\n  nameWithType: InstancePersistenceContext.Execute(InstancePersistenceCommand, TimeSpan)\n  fullName: InstancePersistenceContext.Execute(InstancePersistenceCommand, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Executes a persistence command.\n  remarks: A persistence provider can use this method to execute sub-commands as part of a command. The sub-command will be executed using TryCommand, similar to commands passed to InstanceStore.Execute. Commands can be nested, but a command must not execute more than one sub-command at a time.\n  syntax:\n    content: public void Execute (System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);\n    parameters:\n    - id: command\n      type: System.Runtime.DurableInstancing.InstancePersistenceCommand\n      description: The persistence command to be executed.\n    - id: timeout\n      type: System.TimeSpan\n      description: The time-out value for the operation.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.Execute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle\n  commentId: P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle\n  id: InstanceHandle\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: InstanceHandle\n  nameWithType: InstancePersistenceContext.InstanceHandle\n  fullName: InstancePersistenceContext.InstanceHandle\n  type: Property\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Gets the current instance handle.\n  syntax:\n    content: public System.Runtime.DurableInstancing.InstanceHandle InstanceHandle { get; }\n    return:\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: The current instance handle.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion\n  commentId: P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion\n  id: InstanceVersion\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: InstanceVersion\n  nameWithType: InstancePersistenceContext.InstanceVersion\n  fullName: InstancePersistenceContext.InstanceVersion\n  type: Property\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Gets the version of the lock held on the current instance by the current instance handle.\n  remarks: The persistence provider should check this value against the lock version of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock. If the lock version doesn’t match, the command should fail with InstanceLockLostException.\n  syntax:\n    content: public long InstanceVersion { get; }\n    return:\n      type: System.Int64\n      description: The version of the instance lock bound to the current instance handle, or -1 if the handle isn’t bound to a lock.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView\n  commentId: P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView\n  id: InstanceView\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: InstanceView\n  nameWithType: InstancePersistenceContext.InstanceView\n  fullName: InstancePersistenceContext.InstanceView\n  type: Property\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Gets the instance view object that represents the in-memory state of the current instance. This view reflects updates as they are made by the command in progress.\n  syntax:\n    content: public System.Runtime.DurableInstancing.InstanceView InstanceView { get; }\n    return:\n      type: System.Runtime.DurableInstancing.InstanceView\n      description: The instance view object.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.LoadedInstance(System.Runtime.DurableInstancing.InstanceState,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}})\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.LoadedInstance(System.Runtime.DurableInstancing.InstanceState,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}})\n  id: LoadedInstance(System.Runtime.DurableInstancing.InstanceState,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}})\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: LoadedInstance(InstanceState, IDictionary<XName,InstanceValue>, IDictionary<XName,InstanceValue>, IDictionary<Guid,IDictionary<XName,InstanceValue>>, IDictionary<Guid,IDictionary<XName,InstanceValue>>)\n  nameWithType: InstancePersistenceContext.LoadedInstance(InstanceState, IDictionary<XName,InstanceValue>, IDictionary<XName,InstanceValue>, IDictionary<Guid,IDictionary<XName,InstanceValue>>, IDictionary<Guid,IDictionary<XName,InstanceValue>>)\n  fullName: InstancePersistenceContext.LoadedInstance(InstanceState, IDictionary<XName,InstanceValue>, IDictionary<XName,InstanceValue>, IDictionary<Guid,IDictionary<XName,InstanceValue>>, IDictionary<Guid,IDictionary<XName,InstanceValue>>)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully retrieved the current instance from the instance store.\n  remarks: The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the loaded instance is marked as complete, the loaded data is considered to be consistent; otherwise, it is considered to be in doubt.\n  syntax:\n    content: public void LoadedInstance (System.Runtime.DurableInstancing.InstanceState state, System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue> instanceData, System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue> instanceMetadata, System.Collections.Generic.IDictionary<Guid,System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue>> associatedInstanceKeyMetadata, System.Collections.Generic.IDictionary<Guid,System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue>> completedInstanceKeyMetadata);\n    parameters:\n    - id: state\n      type: System.Runtime.DurableInstancing.InstanceState\n      description: The instance state information.\n    - id: instanceData\n      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}\n      description: The instance data as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.\n    - id: instanceMetadata\n      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}\n      description: Instance metadata as a collection of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.\n    - id: associatedInstanceKeyMetadata\n      type: System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}}\n      description: Associated instance key metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.\n    - id: completedInstanceKeyMetadata\n      type: System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}}\n      description: Completed instance metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.LoadedInstance*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken\n  commentId: P:System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken\n  id: LockToken\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: LockToken\n  nameWithType: InstancePersistenceContext.LockToken\n  fullName: InstancePersistenceContext.LockToken\n  type: Property\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Gets the lock token of the instance owner bound to the current instance handle.\n  remarks: \"The persistence provider should check this value against the lock token of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock. If the lock token doesn’t match, the command should fail with InstanceLockLostException.  \\n  \\n The persistence provider should use this value as the lock token when acquiring a new lock on an instance (such as persisting instance data using a handle not already bound to a lock). If the instance is already locked in the instance store and the lock token matches this lock token, the persistence provider can attempt to reclaim the instance using BindReclaimedLock.\"\n  syntax:\n    content: public Guid LockToken { get; }\n    return:\n      type: System.Guid\n      description: The lock token bound to the current instance handle, or Guid.Empty if the handle isn’t bound to an instance owner.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.PersistedInstance(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue})\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.PersistedInstance(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue})\n  id: PersistedInstance(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue})\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: PersistedInstance(IDictionary<XName,InstanceValue>)\n  nameWithType: InstancePersistenceContext.PersistedInstance(IDictionary<XName,InstanceValue>)\n  fullName: InstancePersistenceContext.PersistedInstance(IDictionary<XName,InstanceValue>)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully persisted a set of instance data to the instance store. This has the effect of initializing the instance if it wasn’t already.\n  remarks: The current instance handle must be bound to an instance as well as a lock on that instance. Each set of instance data completely replaces the previous set. The set of instance data may be null – this is the same as empty. Persisting a null set of instance data deletes the existing set of instance data. (Persisting a set of instance data has no effect on instance metadata.)\n  syntax:\n    content: public void PersistedInstance (System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue> data);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}\n      description: Instance data as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.PersistedInstance*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.QueriedInstanceStore(System.Runtime.DurableInstancing.InstanceStoreQueryResult)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.QueriedInstanceStore(System.Runtime.DurableInstancing.InstanceStoreQueryResult)\n  id: QueriedInstanceStore(System.Runtime.DurableInstancing.InstanceStoreQueryResult)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: QueriedInstanceStore(InstanceStoreQueryResult)\n  nameWithType: InstancePersistenceContext.QueriedInstanceStore(InstanceStoreQueryResult)\n  fullName: InstancePersistenceContext.QueriedInstanceStore(InstanceStoreQueryResult)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Adds the <xref href=\"System.Runtime.DurableInstancing.InstanceStoreQueryResult\"></xref> passed as a parameter to a list of <xref href=\"System.Runtime.DurableInstancing.InstanceStoreQueryResult\"></xref> objects in an <xref href=\"System.Runtime.DurableInstancing.InstanceView\"></xref>.\n  syntax:\n    content: public void QueriedInstanceStore (System.Runtime.DurableInstancing.InstanceStoreQueryResult queryResult);\n    parameters:\n    - id: queryResult\n      type: System.Runtime.DurableInstancing.InstanceStoreQueryResult\n      description: The results of a query against an instance store.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.QueriedInstanceStore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceKeyMetadata(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceKeyMetadata(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  id: ReadInstanceKeyMetadata(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: ReadInstanceKeyMetadata(Guid, IDictionary<XName,InstanceValue>, Boolean)\n  nameWithType: InstancePersistenceContext.ReadInstanceKeyMetadata(Guid, IDictionary<XName,InstanceValue>, Boolean)\n  fullName: InstancePersistenceContext.ReadInstanceKeyMetadata(Guid, IDictionary<XName,InstanceValue>, Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully read some instance key metadata for a key associated to the current instance from the instance store.\n  remarks: The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.\n  syntax:\n    content: public void ReadInstanceKeyMetadata (Guid key, System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue> metadata, bool complete);\n    parameters:\n    - id: key\n      type: System.Guid\n      description: The instance key identifier for the key whose metadata was read. Must not be Guid.Empty.\n    - id: metadata\n      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}\n      description: The metadata as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.\n    - id: complete\n      type: System.Boolean\n      description: '`True` if the metadata represents all of the metadata associated to the instance key, otherwise `false`.'\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceKeyMetadata*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  id: ReadInstanceMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: ReadInstanceMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  nameWithType: InstancePersistenceContext.ReadInstanceMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  fullName: InstancePersistenceContext.ReadInstanceMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully read some instance metadata for the current instance from the instance store.\n  syntax:\n    content: public void ReadInstanceMetadata (System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue> metadata, bool complete);\n    parameters:\n    - id: metadata\n      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}\n      description: The metadata as a dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.\n    - id: complete\n      type: System.Boolean\n      description: '`True` if the metadata represents all of the metadata associated to the instance, otherwise `false`.'\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceMetadata*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceOwnerMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceOwnerMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  id: ReadInstanceOwnerMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: ReadInstanceOwnerMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  nameWithType: InstancePersistenceContext.ReadInstanceOwnerMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  fullName: InstancePersistenceContext.ReadInstanceOwnerMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Sets the instance owner metadata using the data passed in the parameter.\n  remarks: The current instance handle must be bound to an instance. If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.\n  syntax:\n    content: public void ReadInstanceOwnerMetadata (System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue> metadata, bool complete);\n    parameters:\n    - id: metadata\n      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}\n      description: The dictionary of <xref href=\"System.Xml.Linq.XName\"></xref> and <xref href=\"System.Runtime.DurableInstancing.InstanceValue\"></xref> objects.\n    - id: complete\n      type: System.Boolean\n      description: The value to specify whether the consistency to be set to <xref href=\"System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt\"></xref> or <xref href=\"System.Runtime.DurableInstancing.InstanceValueConsistency.Partial\"></xref>.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceOwnerMetadata*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.SetCancellationHandler(System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext})\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.SetCancellationHandler(System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext})\n  id: SetCancellationHandler(System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext})\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: SetCancellationHandler(Action<InstancePersistenceContext>)\n  nameWithType: InstancePersistenceContext.SetCancellationHandler(Action<InstancePersistenceContext>)\n  fullName: InstancePersistenceContext.SetCancellationHandler(Action<InstancePersistenceContext>)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Sets the cancellation handler to be called when the cancel of an operation is requested.\n  remarks: If the cancellation handler is called, the persistence provider should cancel all pending operations and throw OperationCanceledException from TryCommand to indicate that the persistence command was interrupted before it could be completed.\n  syntax:\n    content: public void SetCancellationHandler (Action<System.Runtime.DurableInstancing.InstancePersistenceContext> cancellationHandler);\n    parameters:\n    - id: cancellationHandler\n      type: System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext}\n      description: The reference to a function to be called.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.SetCancellationHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.UnassociatedInstanceKey(System.Guid)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.UnassociatedInstanceKey(System.Guid)\n  id: UnassociatedInstanceKey(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: UnassociatedInstanceKey(Guid)\n  nameWithType: InstancePersistenceContext.UnassociatedInstanceKey(Guid)\n  fullName: InstancePersistenceContext.UnassociatedInstanceKey(Guid)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully disassociated a key from the current instance in the instance store. The identifier of the key is specified as a parameter.\n  remarks: The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated to the current instance and must be marked complete. The current instance must not be marked complete.\n  syntax:\n    content: public void UnassociatedInstanceKey (Guid key);\n    parameters:\n    - id: key\n      type: System.Guid\n      description: The instance key identifier for the key that has been unassociated. Must not be Guid.Empty.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.UnassociatedInstanceKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext\n  commentId: P:System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext\n  id: UserContext\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: UserContext\n  nameWithType: InstancePersistenceContext.UserContext\n  fullName: InstancePersistenceContext.UserContext\n  type: Property\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Gets the user context information attached to the current instance handle.\n  remarks: The object is the one that is returned from InstanceStore.OnNewInstanceHandle for the current instance handle.\n  syntax:\n    content: public object UserContext { get; }\n    return:\n      type: System.Object\n      description: The user context information.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceKeyMetadataValue(System.Guid,System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceKeyMetadataValue(System.Guid,System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  id: WroteInstanceKeyMetadataValue(System.Guid,System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: WroteInstanceKeyMetadataValue(Guid, XName, InstanceValue)\n  nameWithType: InstancePersistenceContext.WroteInstanceKeyMetadataValue(Guid, XName, InstanceValue)\n  fullName: InstancePersistenceContext.WroteInstanceKeyMetadataValue(Guid, XName, InstanceValue)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully written a metadata value for an instance key that is associated with the current instance to the instance store\n  remarks: The current instance handle must be bound to an instance as well as a lock on that instance. The instance key must be associated with the current instance and must not be completed.\n  syntax:\n    content: public void WroteInstanceKeyMetadataValue (Guid key, System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);\n    parameters:\n    - id: key\n      type: System.Guid\n      description: The instance key identifier for the key. Must not be Guid.Empty.\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The name of the metadata property.\n    - id: value\n      type: System.Runtime.DurableInstancing.InstanceValue\n      description: The value of the metadata property.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceKeyMetadataValue*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  id: WroteInstanceMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: WroteInstanceMetadataValue(XName, InstanceValue)\n  nameWithType: InstancePersistenceContext.WroteInstanceMetadataValue(XName, InstanceValue)\n  fullName: InstancePersistenceContext.WroteInstanceMetadataValue(XName, InstanceValue)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully written a metadata value for the current instance to the external instance store.\n  remarks: The current instance handle must be bound to an instance as well as has a lock on that instance. The instance must not be completed.\n  syntax:\n    content: public void WroteInstanceMetadataValue (System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The name of the metadata property.\n    - id: value\n      type: System.Runtime.DurableInstancing.InstanceValue\n      description: The value of the metadata property.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceMetadataValue*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceOwnerMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  commentId: M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceOwnerMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  id: WroteInstanceOwnerMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  langs:\n  - csharp\n  name: WroteInstanceOwnerMetadataValue(XName, InstanceValue)\n  nameWithType: InstancePersistenceContext.WroteInstanceOwnerMetadataValue(XName, InstanceValue)\n  fullName: InstancePersistenceContext.WroteInstanceOwnerMetadataValue(XName, InstanceValue)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Indicates that the persistence provider has successfully written a metadata value for the current instance owner to the instance store.\n  remarks: The current instance handle must be bound to an instance owner.\n  syntax:\n    content: public void WroteInstanceOwnerMetadataValue (System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The name of the metadata property.\n    - id: value\n      type: System.Runtime.DurableInstancing.InstanceValue\n      description: The value of the metadata property.\n  overload: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceOwnerMetadataValue*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.AssociatedInstanceKey(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: AssociatedInstanceKey(Guid)\n  nameWithType: InstancePersistenceContext.AssociatedInstanceKey(Guid)\n  fullName: InstancePersistenceContext.AssociatedInstanceKey(Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BeginBindReclaimedLock(Int64, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstancePersistenceContext.BeginBindReclaimedLock(Int64, TimeSpan, AsyncCallback, Object)\n  fullName: InstancePersistenceContext.BeginBindReclaimedLock(Int64, TimeSpan, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BeginExecute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BeginExecute(InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstancePersistenceContext.BeginExecute(InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  fullName: InstancePersistenceContext.BeginExecute(InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceCommand\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstancePersistenceCommand\n  nameWithType: InstancePersistenceCommand\n  fullName: System.Runtime.DurableInstancing.InstancePersistenceCommand\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindAcquiredLock(System.Int64)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindAcquiredLock(Int64)\n  nameWithType: InstancePersistenceContext.BindAcquiredLock(Int64)\n  fullName: InstancePersistenceContext.BindAcquiredLock(Int64)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindEvent(InstancePersistenceEvent)\n  nameWithType: InstancePersistenceContext.BindEvent(InstancePersistenceEvent)\n  fullName: InstancePersistenceContext.BindEvent(InstancePersistenceEvent)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceEvent\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstancePersistenceEvent\n  nameWithType: InstancePersistenceEvent\n  fullName: System.Runtime.DurableInstancing.InstancePersistenceEvent\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstance(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindInstance(Guid)\n  nameWithType: InstancePersistenceContext.BindInstance(Guid)\n  fullName: InstancePersistenceContext.BindInstance(Guid)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstanceOwner(System.Guid,System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindInstanceOwner(Guid, Guid)\n  nameWithType: InstancePersistenceContext.BindInstanceOwner(Guid, Guid)\n  fullName: InstancePersistenceContext.BindInstanceOwner(Guid, Guid)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindReclaimedLock(System.Int64,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindReclaimedLock(Int64, TimeSpan)\n  nameWithType: InstancePersistenceContext.BindReclaimedLock(Int64, TimeSpan)\n  fullName: InstancePersistenceContext.BindReclaimedLock(Int64, TimeSpan)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstance\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: CompletedInstance()\n  nameWithType: InstancePersistenceContext.CompletedInstance()\n  fullName: InstancePersistenceContext.CompletedInstance()\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstanceKey(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: CompletedInstanceKey(Guid)\n  nameWithType: InstancePersistenceContext.CompletedInstanceKey(Guid)\n  fullName: InstancePersistenceContext.CompletedInstanceKey(Guid)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.CreateBindReclaimedLockException(System.Int64)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: CreateBindReclaimedLockException(Int64)\n  nameWithType: InstancePersistenceContext.CreateBindReclaimedLockException(Int64)\n  fullName: InstancePersistenceContext.CreateBindReclaimedLockException(Int64)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.EndBindReclaimedLock(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: EndBindReclaimedLock(IAsyncResult)\n  nameWithType: InstancePersistenceContext.EndBindReclaimedLock(IAsyncResult)\n  fullName: InstancePersistenceContext.EndBindReclaimedLock(IAsyncResult)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.EndExecute(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: EndExecute(IAsyncResult)\n  nameWithType: InstancePersistenceContext.EndExecute(IAsyncResult)\n  fullName: InstancePersistenceContext.EndExecute(IAsyncResult)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.Execute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: Execute(InstancePersistenceCommand, TimeSpan)\n  nameWithType: InstancePersistenceContext.Execute(InstancePersistenceCommand, TimeSpan)\n  fullName: InstancePersistenceContext.Execute(InstancePersistenceCommand, TimeSpan)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: InstanceHandle\n  nameWithType: InstancePersistenceContext.InstanceHandle\n  fullName: InstancePersistenceContext.InstanceHandle\n- uid: System.Runtime.DurableInstancing.InstanceHandle\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstanceHandle\n  nameWithType: InstanceHandle\n  fullName: System.Runtime.DurableInstancing.InstanceHandle\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: InstanceVersion\n  nameWithType: InstancePersistenceContext.InstanceVersion\n  fullName: InstancePersistenceContext.InstanceVersion\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: InstanceView\n  nameWithType: InstancePersistenceContext.InstanceView\n  fullName: InstancePersistenceContext.InstanceView\n- uid: System.Runtime.DurableInstancing.InstanceView\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstanceView\n  nameWithType: InstanceView\n  fullName: System.Runtime.DurableInstancing.InstanceView\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.LoadedInstance(System.Runtime.DurableInstancing.InstanceState,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}})\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: LoadedInstance(InstanceState, IDictionary<XName,InstanceValue>, IDictionary<XName,InstanceValue>, IDictionary<Guid,IDictionary<XName,InstanceValue>>, IDictionary<Guid,IDictionary<XName,InstanceValue>>)\n  nameWithType: InstancePersistenceContext.LoadedInstance(InstanceState, IDictionary<XName,InstanceValue>, IDictionary<XName,InstanceValue>, IDictionary<Guid,IDictionary<XName,InstanceValue>>, IDictionary<Guid,IDictionary<XName,InstanceValue>>)\n  fullName: InstancePersistenceContext.LoadedInstance(InstanceState, IDictionary<XName,InstanceValue>, IDictionary<XName,InstanceValue>, IDictionary<Guid,IDictionary<XName,InstanceValue>>, IDictionary<Guid,IDictionary<XName,InstanceValue>>)\n- uid: System.Runtime.DurableInstancing.InstanceState\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstanceState\n  nameWithType: InstanceState\n  fullName: System.Runtime.DurableInstancing.InstanceState\n- uid: System.Collections.Generic.IDictionary`2\n  name: IDictionary<TKey,TValue>\n  nameWithType: IDictionary<TKey,TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey,TValue>\n- uid: System.Xml.Linq.XName\n  name: XName\n  nameWithType: XName\n  fullName: System.Xml.Linq.XName\n- uid: System.Runtime.DurableInstancing.InstanceValue\n  name: InstanceValue\n  nameWithType: InstanceValue\n  fullName: System.Runtime.DurableInstancing.InstanceValue\n- uid: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IDictionary<XName,InstanceValue>\n  nameWithType: IDictionary<XName,InstanceValue>\n  fullName: System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XName\n    name: XName\n    nameWithType: XName\n    fullName: System.Xml.Linq.XName\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Runtime.DurableInstancing.InstanceValue\n    name: InstanceValue\n    nameWithType: InstanceValue\n    fullName: System.Runtime.DurableInstancing.InstanceValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IDictionary<Guid,IDictionary<XName,InstanceValue>>\n  nameWithType: IDictionary<Guid,IDictionary<XName,InstanceValue>>\n  fullName: System.Collections.Generic.IDictionary<System.Guid,System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Guid\n    name: Guid\n    nameWithType: Guid\n    fullName: System.Guid\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XName\n    name: XName\n    nameWithType: XName\n    fullName: System.Xml.Linq.XName\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Runtime.DurableInstancing.InstanceValue\n    name: InstanceValue\n    nameWithType: InstanceValue\n    fullName: System.Runtime.DurableInstancing.InstanceValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: LockToken\n  nameWithType: InstancePersistenceContext.LockToken\n  fullName: InstancePersistenceContext.LockToken\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.PersistedInstance(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue})\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: PersistedInstance(IDictionary<XName,InstanceValue>)\n  nameWithType: InstancePersistenceContext.PersistedInstance(IDictionary<XName,InstanceValue>)\n  fullName: InstancePersistenceContext.PersistedInstance(IDictionary<XName,InstanceValue>)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.QueriedInstanceStore(System.Runtime.DurableInstancing.InstanceStoreQueryResult)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: QueriedInstanceStore(InstanceStoreQueryResult)\n  nameWithType: InstancePersistenceContext.QueriedInstanceStore(InstanceStoreQueryResult)\n  fullName: InstancePersistenceContext.QueriedInstanceStore(InstanceStoreQueryResult)\n- uid: System.Runtime.DurableInstancing.InstanceStoreQueryResult\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstanceStoreQueryResult\n  nameWithType: InstanceStoreQueryResult\n  fullName: System.Runtime.DurableInstancing.InstanceStoreQueryResult\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceKeyMetadata(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: ReadInstanceKeyMetadata(Guid, IDictionary<XName,InstanceValue>, Boolean)\n  nameWithType: InstancePersistenceContext.ReadInstanceKeyMetadata(Guid, IDictionary<XName,InstanceValue>, Boolean)\n  fullName: InstancePersistenceContext.ReadInstanceKeyMetadata(Guid, IDictionary<XName,InstanceValue>, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: ReadInstanceMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  nameWithType: InstancePersistenceContext.ReadInstanceMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  fullName: InstancePersistenceContext.ReadInstanceMetadata(IDictionary<XName,InstanceValue>, Boolean)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceOwnerMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: ReadInstanceOwnerMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  nameWithType: InstancePersistenceContext.ReadInstanceOwnerMetadata(IDictionary<XName,InstanceValue>, Boolean)\n  fullName: InstancePersistenceContext.ReadInstanceOwnerMetadata(IDictionary<XName,InstanceValue>, Boolean)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.SetCancellationHandler(System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext})\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: SetCancellationHandler(Action<InstancePersistenceContext>)\n  nameWithType: InstancePersistenceContext.SetCancellationHandler(Action<InstancePersistenceContext>)\n  fullName: InstancePersistenceContext.SetCancellationHandler(Action<InstancePersistenceContext>)\n- uid: System.Action`1\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext\n  name: InstancePersistenceContext\n  nameWithType: InstancePersistenceContext\n  fullName: System.Runtime.DurableInstancing.InstancePersistenceContext\n- uid: System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext}\n  parent: System\n  isExternal: false\n  name: Action<InstancePersistenceContext>\n  nameWithType: Action<InstancePersistenceContext>\n  fullName: System.Action<System.Runtime.DurableInstancing.InstancePersistenceContext>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Runtime.DurableInstancing.InstancePersistenceContext\n    name: InstancePersistenceContext\n    nameWithType: InstancePersistenceContext\n    fullName: System.Runtime.DurableInstancing.InstancePersistenceContext\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.UnassociatedInstanceKey(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: UnassociatedInstanceKey(Guid)\n  nameWithType: InstancePersistenceContext.UnassociatedInstanceKey(Guid)\n  fullName: InstancePersistenceContext.UnassociatedInstanceKey(Guid)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: UserContext\n  nameWithType: InstancePersistenceContext.UserContext\n  fullName: InstancePersistenceContext.UserContext\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceKeyMetadataValue(System.Guid,System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: WroteInstanceKeyMetadataValue(Guid, XName, InstanceValue)\n  nameWithType: InstancePersistenceContext.WroteInstanceKeyMetadataValue(Guid, XName, InstanceValue)\n  fullName: InstancePersistenceContext.WroteInstanceKeyMetadataValue(Guid, XName, InstanceValue)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: WroteInstanceMetadataValue(XName, InstanceValue)\n  nameWithType: InstancePersistenceContext.WroteInstanceMetadataValue(XName, InstanceValue)\n  fullName: InstancePersistenceContext.WroteInstanceMetadataValue(XName, InstanceValue)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceOwnerMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: WroteInstanceOwnerMetadataValue(XName, InstanceValue)\n  nameWithType: InstancePersistenceContext.WroteInstanceOwnerMetadataValue(XName, InstanceValue)\n  fullName: InstancePersistenceContext.WroteInstanceOwnerMetadataValue(XName, InstanceValue)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.AssociatedInstanceKey*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: AssociatedInstanceKey\n  nameWithType: InstancePersistenceContext.AssociatedInstanceKey\n  fullName: InstancePersistenceContext.AssociatedInstanceKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BeginBindReclaimedLock\n  nameWithType: InstancePersistenceContext.BeginBindReclaimedLock\n  fullName: InstancePersistenceContext.BeginBindReclaimedLock\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BeginExecute*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BeginExecute\n  nameWithType: InstancePersistenceContext.BeginExecute\n  fullName: InstancePersistenceContext.BeginExecute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindAcquiredLock*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindAcquiredLock\n  nameWithType: InstancePersistenceContext.BindAcquiredLock\n  fullName: InstancePersistenceContext.BindAcquiredLock\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindEvent*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindEvent\n  nameWithType: InstancePersistenceContext.BindEvent\n  fullName: InstancePersistenceContext.BindEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstance*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindInstance\n  nameWithType: InstancePersistenceContext.BindInstance\n  fullName: InstancePersistenceContext.BindInstance\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstanceOwner*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindInstanceOwner\n  nameWithType: InstancePersistenceContext.BindInstanceOwner\n  fullName: InstancePersistenceContext.BindInstanceOwner\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.BindReclaimedLock*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: BindReclaimedLock\n  nameWithType: InstancePersistenceContext.BindReclaimedLock\n  fullName: InstancePersistenceContext.BindReclaimedLock\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstance*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: CompletedInstance\n  nameWithType: InstancePersistenceContext.CompletedInstance\n  fullName: InstancePersistenceContext.CompletedInstance\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstanceKey*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: CompletedInstanceKey\n  nameWithType: InstancePersistenceContext.CompletedInstanceKey\n  fullName: InstancePersistenceContext.CompletedInstanceKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.CreateBindReclaimedLockException*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: CreateBindReclaimedLockException\n  nameWithType: InstancePersistenceContext.CreateBindReclaimedLockException\n  fullName: InstancePersistenceContext.CreateBindReclaimedLockException\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.EndBindReclaimedLock*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: EndBindReclaimedLock\n  nameWithType: InstancePersistenceContext.EndBindReclaimedLock\n  fullName: InstancePersistenceContext.EndBindReclaimedLock\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.EndExecute*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: EndExecute\n  nameWithType: InstancePersistenceContext.EndExecute\n  fullName: InstancePersistenceContext.EndExecute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.Execute*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: Execute\n  nameWithType: InstancePersistenceContext.Execute\n  fullName: InstancePersistenceContext.Execute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: InstanceHandle\n  nameWithType: InstancePersistenceContext.InstanceHandle\n  fullName: InstancePersistenceContext.InstanceHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: InstanceVersion\n  nameWithType: InstancePersistenceContext.InstanceVersion\n  fullName: InstancePersistenceContext.InstanceVersion\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: InstanceView\n  nameWithType: InstancePersistenceContext.InstanceView\n  fullName: InstancePersistenceContext.InstanceView\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.LoadedInstance*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: LoadedInstance\n  nameWithType: InstancePersistenceContext.LoadedInstance\n  fullName: InstancePersistenceContext.LoadedInstance\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: LockToken\n  nameWithType: InstancePersistenceContext.LockToken\n  fullName: InstancePersistenceContext.LockToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.PersistedInstance*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: PersistedInstance\n  nameWithType: InstancePersistenceContext.PersistedInstance\n  fullName: InstancePersistenceContext.PersistedInstance\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.QueriedInstanceStore*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: QueriedInstanceStore\n  nameWithType: InstancePersistenceContext.QueriedInstanceStore\n  fullName: InstancePersistenceContext.QueriedInstanceStore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceKeyMetadata*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: ReadInstanceKeyMetadata\n  nameWithType: InstancePersistenceContext.ReadInstanceKeyMetadata\n  fullName: InstancePersistenceContext.ReadInstanceKeyMetadata\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceMetadata*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: ReadInstanceMetadata\n  nameWithType: InstancePersistenceContext.ReadInstanceMetadata\n  fullName: InstancePersistenceContext.ReadInstanceMetadata\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceOwnerMetadata*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: ReadInstanceOwnerMetadata\n  nameWithType: InstancePersistenceContext.ReadInstanceOwnerMetadata\n  fullName: InstancePersistenceContext.ReadInstanceOwnerMetadata\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.SetCancellationHandler*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: SetCancellationHandler\n  nameWithType: InstancePersistenceContext.SetCancellationHandler\n  fullName: InstancePersistenceContext.SetCancellationHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.UnassociatedInstanceKey*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: UnassociatedInstanceKey\n  nameWithType: InstancePersistenceContext.UnassociatedInstanceKey\n  fullName: InstancePersistenceContext.UnassociatedInstanceKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: UserContext\n  nameWithType: InstancePersistenceContext.UserContext\n  fullName: InstancePersistenceContext.UserContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceKeyMetadataValue*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: WroteInstanceKeyMetadataValue\n  nameWithType: InstancePersistenceContext.WroteInstanceKeyMetadataValue\n  fullName: InstancePersistenceContext.WroteInstanceKeyMetadataValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceMetadataValue*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: WroteInstanceMetadataValue\n  nameWithType: InstancePersistenceContext.WroteInstanceMetadataValue\n  fullName: InstancePersistenceContext.WroteInstanceMetadataValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceOwnerMetadataValue*\n  parent: System.Runtime.DurableInstancing.InstancePersistenceContext\n  isExternal: false\n  name: WroteInstanceOwnerMetadataValue\n  nameWithType: InstancePersistenceContext.WroteInstanceOwnerMetadataValue\n  fullName: InstancePersistenceContext.WroteInstanceOwnerMetadataValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstancePersistenceContext.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}