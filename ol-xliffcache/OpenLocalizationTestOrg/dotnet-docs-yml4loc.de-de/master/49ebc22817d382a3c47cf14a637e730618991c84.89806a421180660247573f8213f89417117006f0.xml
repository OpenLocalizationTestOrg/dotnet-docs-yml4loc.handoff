{"nodes":[{"content":"Represents the base class from which all implementations of asymmetric signature formatters derive.","nodes":[{"pos":[0,99],"content":"Represents the base class from which all implementations of asymmetric signature formatters derive.","nodes":[{"content":"Represents the base class from which all implementations of asymmetric signature formatters derive.","pos":[0,99]}]}],"pos":[1043,1143],"yaml":true},{"content":"Asymmetric signature formatters create digital signatures that are verified using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter>.","nodes":[{"pos":[0,168],"content":"Asymmetric signature formatters create digital signatures that are verified using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter>.","nodes":[{"content":"Asymmetric signature formatters create digital signatures that are verified using implementations of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter&gt;</ph>.","pos":[0,168],"source":"Asymmetric signature formatters create digital signatures that are verified using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter>."}]}],"pos":[1154,1323],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref>.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref>."}],"pos":[3365,3475],"yaml":true},{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \n  \n Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","nodes":[{"pos":[0,115],"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","nodes":[{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","pos":[0,115],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code will create a new instance of a derived class.","pos":[52,115]}]}]},{"pos":[122,463],"content":"Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","nodes":[{"content":"Use implementations of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A&gt;</ph> to set the key and hash algorithm before calling an implementation of <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A&gt;</ph>.","pos":[0,341],"source":"Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>."}]}],"pos":[3486,3954],"yaml":true,"extradata":"MT"},{"content":"When overridden in a derived class, creates the signature for the specified data.","nodes":[{"pos":[0,81],"content":"When overridden in a derived class, creates the signature for the specified data.","nodes":[{"content":"When overridden in a derived class, creates the signature for the specified data.","pos":[0,81]}]}],"pos":[5530,5612],"yaml":true},{"content":"You must specify a key and a hash algorithm before calling this method.","nodes":[{"pos":[0,71],"content":"You must specify a key and a hash algorithm before calling this method.","nodes":[{"content":"You must specify a key and a hash algorithm before calling this method.","pos":[0,71]}]}],"pos":[5623,5695],"yaml":true,"extradata":"MT"},{"content":"The data to be signed.","nodes":[{"pos":[0,22],"content":"The data to be signed.","nodes":[{"content":"The data to be signed.","pos":[0,22]}]}],"pos":[5854,5877],"yaml":true},{"content":"The digital signature for the <code>rgbHash</code> parameter.","nodes":[{"pos":[0,61],"content":"The digital signature for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The digital signature for the <code>rgbHash</code> parameter."}],"pos":[5934,5996],"yaml":true},{"content":"Creates the signature from the specified hash value.","nodes":[{"pos":[0,52],"content":"Creates the signature from the specified hash value.","nodes":[{"content":"Creates the signature from the specified hash value.","pos":[0,52]}]}],"pos":[7605,7658],"yaml":true},{"content":"This method sets the hash algorithm to be used, then returns the signature of the input hash algorithm value.","nodes":[{"pos":[0,109],"content":"This method sets the hash algorithm to be used, then returns the signature of the input hash algorithm value.","nodes":[{"content":"This method sets the hash algorithm to be used, then returns the signature of the input hash algorithm value.","pos":[0,109]}]}],"pos":[7669,7779],"yaml":true,"extradata":"MT"},{"content":"The hash algorithm to use to create the signature.","nodes":[{"pos":[0,50],"content":"The hash algorithm to use to create the signature.","nodes":[{"content":"The hash algorithm to use to create the signature.","pos":[0,50]}]}],"pos":[7996,8047],"yaml":true},{"content":"The signature for the specified hash value.","nodes":[{"pos":[0,43],"content":"The signature for the specified hash value.","nodes":[{"content":"The signature for the specified hash value.","pos":[0,43]}]}],"pos":[8104,8148],"yaml":true},{"content":"The <code>hash</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>hash</code> parameter is `null`."}],"pos":[8351,8394],"yaml":true},{"content":"When overridden in a derived class, sets the hash algorithm to use for creating the signature.","nodes":[{"pos":[0,94],"content":"When overridden in a derived class, sets the hash algorithm to use for creating the signature.","nodes":[{"content":"When overridden in a derived class, sets the hash algorithm to use for creating the signature.","pos":[0,94]}]}],"pos":[9797,9892],"yaml":true},{"content":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","nodes":[{"pos":[0,150],"content":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","nodes":[{"content":"You must set a hash algorithm before calling an implementation of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A&gt;</ph>.","pos":[0,150],"source":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>."}]}],"pos":[9903,10054],"yaml":true,"extradata":"MT"},{"content":"The name of the hash algorithm to use for creating the signature.","nodes":[{"pos":[0,65],"content":"The name of the hash algorithm to use for creating the signature.","nodes":[{"content":"The name of the hash algorithm to use for creating the signature.","pos":[0,65]}]}],"pos":[10212,10278],"yaml":true},{"content":"When overridden in a derived class, sets the asymmetric algorithm to use to create the signature.","nodes":[{"pos":[0,97],"content":"When overridden in a derived class, sets the asymmetric algorithm to use to create the signature.","nodes":[{"content":"When overridden in a derived class, sets the asymmetric algorithm to use to create the signature.","pos":[0,97]}]}],"pos":[11870,11968],"yaml":true},{"content":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","nodes":[{"pos":[0,139],"content":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","nodes":[{"content":"You must set a key before calling an implementation of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A&gt;</ph>.","pos":[0,139],"source":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>."}]}],"pos":[11979,12119],"yaml":true,"extradata":"MT"},{"content":"The instance of the implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> to use to create the signature.","nodes":[{"pos":[0,139],"content":"The instance of the implementation of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;&lt;/xref&gt;</ph> to use to create the signature.","source":"The instance of the implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> to use to create the signature."}],"pos":[12336,12476],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter\n  commentId: T:System.Security.Cryptography.AsymmetricSignatureFormatter\n  id: AsymmetricSignatureFormatter\n  children:\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  langs:\n  - csharp\n  name: AsymmetricSignatureFormatter\n  nameWithType: AsymmetricSignatureFormatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Represents the base class from which all implementations of asymmetric signature formatters derive.\n  remarks: Asymmetric signature formatters create digital signatures that are verified using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class AsymmetricSignatureFormatter\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Security.Cryptography.DSASignatureFormatter\n  - System.Security.Cryptography.RSAPKCS1SignatureFormatter\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: AsymmetricSignatureFormatter()\n  nameWithType: AsymmetricSignatureFormatter.AsymmetricSignatureFormatter()\n  fullName: AsymmetricSignatureFormatter.AsymmetricSignatureFormatter()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref>.\n  remarks: \"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \\n  \\n Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.\"\n  syntax:\n    content: protected AsymmetricSignatureFormatter ();\n    parameters: []\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature(Byte[])\n  fullName: AsymmetricSignatureFormatter.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, creates the signature for the specified data.\n  remarks: You must specify a key and a hash algorithm before calling this method.\n  syntax:\n    content: public abstract byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data to be signed.\n    return:\n      type: System.Byte[]\n      description: The digital signature for the <code>rgbHash</code> parameter.\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  id: CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: CreateSignature(HashAlgorithm)\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature(HashAlgorithm)\n  fullName: AsymmetricSignatureFormatter.CreateSignature(HashAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates the signature from the specified hash value.\n  remarks: This method sets the hash algorithm to be used, then returns the signature of the input hash algorithm value.\n  syntax:\n    content: public virtual byte[] CreateSignature (System.Security.Cryptography.HashAlgorithm hash);\n    parameters:\n    - id: hash\n      type: System.Security.Cryptography.HashAlgorithm\n      description: The hash algorithm to use to create the signature.\n    return:\n      type: System.Byte[]\n      description: The signature for the specified hash value.\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hash</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)\n  id: SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: SetHashAlgorithm(String)\n  nameWithType: AsymmetricSignatureFormatter.SetHashAlgorithm(String)\n  fullName: AsymmetricSignatureFormatter.SetHashAlgorithm(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, sets the hash algorithm to use for creating the signature.\n  remarks: You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.\n  syntax:\n    content: public abstract void SetHashAlgorithm (string strName);\n    parameters:\n    - id: strName\n      type: System.String\n      description: The name of the hash algorithm to use for creating the signature.\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: AsymmetricSignatureFormatter.SetKey(AsymmetricAlgorithm)\n  fullName: AsymmetricSignatureFormatter.SetKey(AsymmetricAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, sets the asymmetric algorithm to use to create the signature.\n  remarks: You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.\n  syntax:\n    content: public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: The instance of the implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> to use to create the signature.\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: AsymmetricSignatureFormatter()\n  nameWithType: AsymmetricSignatureFormatter.AsymmetricSignatureFormatter()\n  fullName: AsymmetricSignatureFormatter.AsymmetricSignatureFormatter()\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature(Byte[])\n  fullName: AsymmetricSignatureFormatter.CreateSignature(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: CreateSignature(HashAlgorithm)\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature(HashAlgorithm)\n  fullName: AsymmetricSignatureFormatter.CreateSignature(HashAlgorithm)\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: SetHashAlgorithm(String)\n  nameWithType: AsymmetricSignatureFormatter.SetHashAlgorithm(String)\n  fullName: AsymmetricSignatureFormatter.SetHashAlgorithm(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: AsymmetricSignatureFormatter.SetKey(AsymmetricAlgorithm)\n  fullName: AsymmetricSignatureFormatter.SetKey(AsymmetricAlgorithm)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor*\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: AsymmetricSignatureFormatter\n  nameWithType: AsymmetricSignatureFormatter.AsymmetricSignatureFormatter\n  fullName: AsymmetricSignatureFormatter.AsymmetricSignatureFormatter\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature*\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: CreateSignature\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature\n  fullName: AsymmetricSignatureFormatter.CreateSignature\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm*\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: SetHashAlgorithm\n  nameWithType: AsymmetricSignatureFormatter.SetHashAlgorithm\n  fullName: AsymmetricSignatureFormatter.SetHashAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey*\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: SetKey\n  nameWithType: AsymmetricSignatureFormatter.SetKey\n  fullName: AsymmetricSignatureFormatter.SetKey\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureFormatter.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}