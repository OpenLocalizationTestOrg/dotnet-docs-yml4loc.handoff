{"nodes":[{"content":"Represents a table for a particular type in the underlying database.","nodes":[{"pos":[0,68],"content":"Represents a table for a particular type in the underlying database.","nodes":[{"content":"Represents a table for a particular type in the underlying database.","pos":[0,68]}]}],"pos":[3201,3270],"yaml":true},{"content":"This class enables you to query over the table and add, remove, and attach objects.  \n  \n An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>. That is, when the designer generates a DataContext object, it generates properties to represent each Table. For example:  \n  \n```  \n[global::System.Data.Linq.Mapping.DatabaseAttribute(Name=\"SignOffTool\")]  \npublic partial class DataClasses1DataContext : System.Data.Linq.DataContext {  \n   public System.Data.Linq.Table<User> Users {  \n      get {  \n         return this.GetTable<User>();  \n      }  \n   }  \n}  \n```  \n  \n For this strongly typed DataContext, you can access the Users property to get `Table<User>`.","nodes":[{"pos":[0,83],"content":"This class enables you to query over the table and add, remove, and attach objects.","nodes":[{"content":"This class enables you to query over the table and add, remove, and attach objects.","pos":[0,83]}]},{"pos":[90,431],"content":"An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>. That is, when the designer generates a DataContext object, it generates properties to represent each Table. For example:","nodes":[{"content":"An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>. That is, when the designer generates a DataContext object, it generates properties to represent each Table. For example:","pos":[0,341],"nodes":[{"content":"An application can access a <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance via <ph id=\"ph2\">&lt;xref:System.Data.Linq.DataContext.GetTable%2A&gt;</ph> or by using a strongly typed property for the strongly typed <ph id=\"ph3\">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.","pos":[0,220],"source":"An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>."},{"content":"That is, when the designer generates a DataContext object, it generates properties to represent each Table.","pos":[221,328]},{"content":"For example:","pos":[329,341]}]}]},{"pos":[733,825],"content":"For this strongly typed DataContext, you can access the Users property to get <ph id=\"ph1\">`Table&lt;User&gt;`</ph>.","source":"For this strongly typed DataContext, you can access the Users property to get `Table<User>`."}],"pos":[3281,4126],"yaml":true,"extradata":"MT"},{"content":"The type of the data in the table.","nodes":[{"pos":[0,34],"content":"The type of the data in the table.","nodes":[{"content":"The type of the data in the table.","pos":[0,34]}]}],"pos":[4436,4471],"yaml":true},{"content":"Attaches a disconnected or \"detached\" entity to a new <xref href=\"System.Data.Linq.DataContext\"></xref> when original values are required for optimistic concurrency checks.","nodes":[{"pos":[0,172],"content":"Attaches a disconnected or \"detached\" entity to a new <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> when original values are required for optimistic concurrency checks.","source":"Attaches a disconnected or \"detached\" entity to a new <xref href=\"System.Data.Linq.DataContext\"></xref> when original values are required for optimistic concurrency checks."}],"pos":[48357,48530],"yaml":true},{"content":"Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation. Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values. In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state. After calling this method, you can then update its fields, for example with additional data sent from the client.  \n  \n When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.  \n  \n For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).  \n  \n Do not try to `Attach` an entity that has not been detached through serialization. Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.","nodes":[{"pos":[0,619],"content":"Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation. Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values. In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state. After calling this method, you can then update its fields, for example with additional data sent from the client.","nodes":[{"content":"Use the <ph id=\"ph1\">`Attach`</ph> methods with entities that have been created in one <ph id=\"ph2\">&lt;xref:System.Data.Linq.DataContext&gt;</ph>, serialized to a client, and then deserialized back to perform an update or delete operation.","pos":[0,198],"source":"Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation."},{"content":"Because the new <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.","pos":[199,384],"source":" Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values."},{"content":"In this version of <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601.Attach%2A&gt;</ph>, the entity is assumed to be in its original value state.","pos":[385,505],"source":" In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state."},{"content":"After calling this method, you can then update its fields, for example with additional data sent from the client.","pos":[506,619]}]},{"pos":[626,1028],"content":"When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.","nodes":[{"content":"When a new entity is attached, deferred loaders for any child collections (for example, <ph id=\"ph1\">`EntitySet`</ph> collections of entities from associated tables) are initialized.","pos":[0,164],"source":"When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id=\"ph2\">`Unmodified`</ph> state.","pos":[165,302],"source":" When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state."},{"content":"To update members of a child collection, you must explicitly call <ph id=\"ph1\">`Attach`</ph> and specify that entity.","pos":[303,402],"source":" To update members of a child collection, you must explicitly call `Attach` and specify that entity."}]},{"pos":[1035,1233],"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id=\"p1\">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.","source":"For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)."},{"pos":[1240,1501],"content":"Do not try to `Attach` an entity that has not been detached through serialization. Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.","nodes":[{"content":"Do not try to <ph id=\"ph1\">`Attach`</ph> an entity that has not been detached through serialization.","pos":[0,82],"source":"Do not try to `Attach` an entity that has not been detached through serialization."},{"content":"Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.","pos":[83,261]}]}],"pos":[48541,50051],"yaml":true,"extradata":"MT"},{"content":"The original values of the entity to be attached.","nodes":[{"pos":[0,49],"content":"The original values of the entity to be attached.","nodes":[{"content":"The original values of the entity to be attached.","pos":[0,49]}]}],"pos":[50183,50233],"yaml":true},{"content":"Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.","nodes":[{"pos":[0,117],"content":"Attaches an entity to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in either a modified or unmodified state.","source":"Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state."}],"pos":[51302,51420],"yaml":true},{"content":"If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking. When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.","nodes":[{"pos":[0,531],"content":"If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking. When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.","nodes":[{"content":"If attaching <bpt id=\"p1\">*</bpt>as modified<ept id=\"p1\">*</ept>, the entity must either declare a version member or must not participate in update conflict checking.","pos":[0,128],"source":"If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking."},{"content":"When a new entity is attached, deferred loaders for any child collections (for example, <ph id=\"ph1\">`EntitySet`</ph> collections of entities from associated tables) are initialized.","pos":[129,293],"source":" When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id=\"ph2\">`Unmodified`</ph> state.","pos":[294,431],"source":" When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state."},{"content":"To update members of a child collection, you must explicitly call <ph id=\"ph1\">`Attach`</ph> and specify that entity.","pos":[432,531],"source":" To update members of a child collection, you must explicitly call `Attach` and specify that entity."}]}],"pos":[51431,51963],"yaml":true,"extradata":"MT"},{"content":"The entity to be attached.","nodes":[{"pos":[0,26],"content":"The entity to be attached.","nodes":[{"content":"The entity to be attached.","pos":[0,26]}]}],"pos":[52112,52139],"yaml":true},{"content":"`true` to attach the entity as modified; `false` to attach the entity as unmodified.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">`true`</ph> to attach the entity as modified; <ph id=\"ph2\">`false`</ph> to attach the entity as unmodified.","source":"`true` to attach the entity as modified; `false` to attach the entity as unmodified."}],"pos":[52206,52293],"yaml":true},{"content":"Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state by specifying both the entity and its original state.","nodes":[{"pos":[0,170],"content":"Attaches an entity to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in either a modified or unmodified state by specifying both the entity and its original state.","source":"Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state by specifying both the entity and its original state."}],"pos":[53326,53497],"yaml":true},{"content":"In the following example, the `Customer` object is already correctly configured. You can call `Attach` without having to replay the updates.  \n  \n When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.","nodes":[{"pos":[0,140],"content":"In the following example, the `Customer` object is already correctly configured. You can call `Attach` without having to replay the updates.","nodes":[{"content":"In the following example, the <ph id=\"ph1\">`Customer`</ph> object is already correctly configured.","pos":[0,80],"source":"In the following example, the `Customer` object is already correctly configured."},{"content":"You can call <ph id=\"ph1\">`Attach`</ph> without having to replay the updates.","pos":[81,140],"source":" You can call `Attach` without having to replay the updates."}]},{"pos":[147,549],"content":"When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.","nodes":[{"content":"When a new entity is attached, deferred loaders for any child collections (for example, <ph id=\"ph1\">`EntitySet`</ph> collections of entities from associated tables) are initialized.","pos":[0,164],"source":"When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id=\"ph2\">`Unmodified`</ph> state.","pos":[165,302],"source":" When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state."},{"content":"To update members of a child collection, you must explicitly call <ph id=\"ph1\">`Attach`</ph> and specify that entity.","pos":[303,402],"source":" To update members of a child collection, you must explicitly call `Attach` and specify that entity."}]}],"pos":[53508,54062],"yaml":true,"extradata":"MT"},{"content":"The entity to be attached.","nodes":[{"pos":[0,26],"content":"The entity to be attached.","nodes":[{"content":"The entity to be attached.","pos":[0,26]}]}],"pos":[54440,54467],"yaml":true},{"content":"An instance of the same entity type with data members that contain the original values.","nodes":[{"pos":[0,87],"content":"An instance of the same entity type with data members that contain the original values.","nodes":[{"content":"An instance of the same entity type with data members that contain the original values.","pos":[0,87]}]}],"pos":[54525,54613],"yaml":true},{"content":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.","nodes":[{"pos":[0,136],"content":"Attaches all entities of a collection to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in either a modified or unmodified state.","source":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state."}],"pos":[55844,55981],"yaml":true},{"content":"This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>. When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.  \n  \n For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).","nodes":[{"pos":[0,498],"content":"This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>. When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.","nodes":[{"content":"This method attaches all entities of a collection to a new <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.","pos":[0,95],"source":"This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>."},{"content":"When a new entity is attached, deferred loaders for any child collections (for example, <ph id=\"ph1\">`EntitySet`</ph> collections of entities from associated tables) are initialized.","pos":[96,260],"source":" When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id=\"ph2\">`Unmodified`</ph> state.","pos":[261,398],"source":" When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state."},{"content":"To update members of a child collection, you must explicitly call <ph id=\"ph1\">`Attach`</ph> and specify that entity.","pos":[399,498],"source":" To update members of a child collection, you must explicitly call `Attach` and specify that entity."}]},{"pos":[505,703],"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id=\"p1\">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.","source":"For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)."}],"pos":[55992,56700],"yaml":true,"extradata":"MT"},{"content":"The collection of entities.","nodes":[{"pos":[0,27],"content":"The collection of entities.","nodes":[{"content":"The collection of entities.","pos":[0,27]}]}],"pos":[56966,56994],"yaml":true},{"content":"The type of entities to attach.","nodes":[{"pos":[0,31],"content":"The type of entities to attach.","nodes":[{"content":"The type of entities to attach.","pos":[0,31]}]}],"pos":[57054,57086],"yaml":true},{"content":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.","nodes":[{"pos":[0,136],"content":"Attaches all entities of a collection to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in either a modified or unmodified state.","source":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state."}],"pos":[58395,58532],"yaml":true},{"content":"This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state. If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking. If attaching as unmodified, the entity is assumed to represent the original value. After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).  \n  \n When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.","nodes":[{"pos":[0,720],"content":"This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state. If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking. If attaching as unmodified, the entity is assumed to represent the original value. After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).","nodes":[{"content":"This method attaches all entities of a collection to the <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> in either a <bpt id=\"p1\">*</bpt>modified<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>unmodified<ept id=\"p2\">*</ept> state.","pos":[0,138],"source":"This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state."},{"content":"If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.","pos":[139,265]},{"content":"If attaching as unmodified, the entity is assumed to represent the original value.","pos":[266,348]},{"content":"After calling this method, the entity's fields can be modified with other information from the client before <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.","pos":[349,521],"source":" After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id=\"p1\">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.","pos":[522,720],"source":" For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)."}]},{"pos":[727,1129],"content":"When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.","nodes":[{"content":"When a new entity is attached, deferred loaders for any child collections (for example, <ph id=\"ph1\">`EntitySet`</ph> collections of entities from associated tables) are initialized.","pos":[0,164],"source":"When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called, members of the child collections are put into an <ph id=\"ph2\">`Unmodified`</ph> state.","pos":[165,302],"source":" When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state."},{"content":"To update members of a child collection, you must explicitly call <ph id=\"ph1\">`Attach`</ph> and specify that entity.","pos":[303,402],"source":" To update members of a child collection, you must explicitly call `Attach` and specify that entity."}]}],"pos":[58543,59677],"yaml":true,"extradata":"MT"},{"content":"The collection of entities.","nodes":[{"pos":[0,27],"content":"The collection of entities.","nodes":[{"content":"The collection of entities.","pos":[0,27]}]}],"pos":[61648,61676],"yaml":true},{"content":"`true` if the object has a timestamp or RowVersion member; `false` if original values are being used for the optimistic concurrency check.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">`true`</ph> if the object has a timestamp or RowVersion member; <ph id=\"ph2\">`false`</ph> if original values are being used for the optimistic concurrency check.","source":"`true` if the object has a timestamp or RowVersion member; `false` if original values are being used for the optimistic concurrency check."}],"pos":[61743,61884],"yaml":true},{"content":"The type of entities to attach.","nodes":[{"pos":[0,31],"content":"The type of entities to attach.","nodes":[{"content":"The type of entities to attach.","pos":[0,31]}]}],"pos":[61944,61976],"yaml":true},{"content":"Gets the <xref href=\"System.Data.Linq.DataContext\"></xref> that has been used to retrieve this <xref href=\"System.Data.Linq.Table`1\"></xref>.","nodes":[{"pos":[0,141],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> that has been used to retrieve this <ph id=\"ph2\">&lt;xref href=\"System.Data.Linq.Table`1\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the <xref href=\"System.Data.Linq.DataContext\"></xref> that has been used to retrieve this <xref href=\"System.Data.Linq.Table`1\"></xref>."}],"pos":[62948,63090],"yaml":true},{"content":"The data context that has been used to retrieve this table.","nodes":[{"pos":[0,59],"content":"The data context that has been used to retrieve this table.","nodes":[{"content":"The data context that has been used to retrieve this table.","pos":[0,59]}]}],"pos":[63238,63298],"yaml":true},{"content":"Puts all entities from the collection into a `pending delete` state.","nodes":[{"pos":[0,68],"content":"Puts all entities from the collection into a <ph id=\"ph1\">`pending delete`</ph> state.","source":"Puts all entities from the collection into a `pending delete` state."}],"pos":[64578,64647],"yaml":true},{"content":"Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. Disconnected entities must be attached before they can be deleted. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).  \n  \n The following C# snippet shows one use for this method:  \n  \n```  \nIEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  \n   where c.Orders.Count == 0  \n   select c).ToList();  \n  \ndb.Customers.DeleteAllOnSubmit(customersWithoutOrders);  \ndb.SubmitChanges();  \n```  \n  \n In Visual Basic:  \n  \n```  \nDim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   \n    Where c.Orders.Count = 0 _   \n    Select c).ToList()  \n  \ndb.Customers.DeleteAllOnSubmit(customersWithoutOrders)  \ndb.SubmitChanges()  \n```","nodes":[{"pos":[0,446],"content":"Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. Disconnected entities must be attached before they can be deleted. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).","nodes":[{"content":"Entities that are put into the pending delete state with this method do not disappear from query results until after <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.","pos":[0,180],"source":"Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called."},{"content":"Disconnected entities must be attached before they can be deleted.","pos":[181,247]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id=\"p1\">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.","pos":[248,446],"source":" For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)."}]},{"pos":[453,508],"content":"The following C# snippet shows one use for this method:","nodes":[{"content":"The following C# snippet shows one use for this method:","pos":[0,55]}]},{"pos":[742,758],"content":"In Visual Basic:","nodes":[{"content":"In Visual Basic:","pos":[0,16]}]}],"pos":[64658,65682],"yaml":true,"extradata":"MT"},{"content":"The entities to delete.","nodes":[{"pos":[0,23],"content":"The entities to delete.","nodes":[{"content":"The entities to delete.","pos":[0,23]}]}],"pos":[65956,65980],"yaml":true},{"content":"The type of the elements to delete.","nodes":[{"pos":[0,35],"content":"The type of the elements to delete.","nodes":[{"content":"The type of the elements to delete.","pos":[0,35]}]}],"pos":[66040,66076],"yaml":true},{"content":"Puts an entity from this table into a `pending delete` state.","nodes":[{"pos":[0,61],"content":"Puts an entity from this table into a <ph id=\"ph1\">`pending delete`</ph> state.","source":"Puts an entity from this table into a `pending delete` state."}],"pos":[67135,67197],"yaml":true},{"content":"The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. Disconnected entities must first be attached before they can be deleted. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).  \n  \n> [!NOTE]\n>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations. If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted. Otherwise, an exception is thrown.","nodes":[{"pos":[0,408],"content":"The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. Disconnected entities must first be attached before they can be deleted. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).","nodes":[{"content":"The removed entity does not disappear from the query results until after <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> is called.","pos":[0,136],"source":"The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called."},{"content":"Disconnected entities must first be attached before they can be deleted.","pos":[137,209]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id=\"p1\">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.","pos":[210,408],"source":" For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)."}]},{"pos":[416,844],"content":"[!NOTE]\n [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations. If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted. Otherwise, an exception is thrown.","leadings":["","> "],"nodes":[{"content":" [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations. If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted. Otherwise, an exception is thrown.","pos":[8,426],"nodes":[{"content":"<ph id=\"ph1\"> [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> does not support or recognize cascade-delete operations.","pos":[0,109],"source":" [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations."},{"content":"If you want to delete a row in a table that has constraints against it, you must either set the <ph id=\"ph1\">`ON DELETE CASCADE`</ph> rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.","pos":[110,383],"source":" If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted."},{"content":"Otherwise, an exception is thrown.","pos":[384,418]}]}]}],"pos":[67208,68058],"yaml":true,"extradata":"MT"},{"content":"The entity to be deleted.","nodes":[{"pos":[0,25],"content":"The entity to be deleted.","nodes":[{"content":"The entity to be deleted.","pos":[0,25]}]}],"pos":[68474,68500],"yaml":true},{"content":"Gets an enumerator that iterates through the collection.","nodes":[{"pos":[0,56],"content":"Gets an enumerator that iterates through the collection.","nodes":[{"content":"Gets an enumerator that iterates through the collection.","pos":[0,56]}]}],"pos":[69514,69571],"yaml":true},{"content":"An enumerator that can be used to iterate through the collection.","nodes":[{"pos":[0,65],"content":"An enumerator that can be used to iterate through the collection.","nodes":[{"content":"An enumerator that can be used to iterate through the collection.","pos":[0,65]}]}],"pos":[69777,69843],"yaml":true},{"content":"Returns an array of modified members that contain their current and original values.","nodes":[{"pos":[0,84],"content":"Returns an array of modified members that contain their current and original values.","nodes":[{"content":"Returns an array of modified members that contain their current and original values.","pos":[0,84]}]}],"pos":[70919,71004],"yaml":true},{"content":"The entity from which to get the array.","nodes":[{"pos":[0,39],"content":"The entity from which to get the array.","nodes":[{"content":"The entity from which to get the array.","pos":[0,39]}]}],"pos":[71181,71221],"yaml":true},{"content":"An array of modified members that contain their current and original values.","nodes":[{"pos":[0,76],"content":"An array of modified members that contain their current and original values.","nodes":[{"content":"An array of modified members that contain their current and original values.","pos":[0,76]}]}],"pos":[71302,71379],"yaml":true},{"content":"Creates a new list for binding to a data source.","nodes":[{"pos":[0,48],"content":"Creates a new list for binding to a data source.","nodes":[{"content":"Creates a new list for binding to a data source.","pos":[0,48]}]}],"pos":[72421,72470],"yaml":true},{"content":"The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.","nodes":[{"pos":[0,158],"content":"The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.","nodes":[{"content":"The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.","pos":[0,158]}]}],"pos":[72481,72640],"yaml":true,"extradata":"MT"},{"content":"A new <xref href=\"System.ComponentModel.IBindingList\"></xref> for binding to a data source.","nodes":[{"pos":[0,91],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IBindingList\"&gt;&lt;/xref&gt;</ph> for binding to a data source.","source":"A new <xref href=\"System.ComponentModel.IBindingList\"></xref> for binding to a data source."}],"pos":[72824,72916],"yaml":true},{"content":"Returns a <xref href=\"System.Data.Linq.Table`1\"></xref> instance that contains the original state of the entity.","nodes":[{"pos":[0,112],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.Table`1\"&gt;&lt;/xref&gt;</ph> instance that contains the original state of the entity.","source":"Returns a <xref href=\"System.Data.Linq.Table`1\"></xref> instance that contains the original state of the entity."}],"pos":[74020,74133],"yaml":true},{"content":"This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>. The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).","nodes":[{"pos":[0,557],"content":"This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>. The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).","nodes":[{"content":"This method returns the original state of an entity since it was either created or attached to the current <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.","pos":[0,143],"source":"This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>."},{"content":"The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.","pos":[144,358],"source":" The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id=\"p1\">](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.","pos":[359,557],"source":" For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)."}]}],"pos":[74144,74702],"yaml":true,"extradata":"MT"},{"content":"The entity whose original state is to be returned.","nodes":[{"pos":[0,50],"content":"The entity whose original state is to be returned.","nodes":[{"content":"The entity whose original state is to be returned.","pos":[0,50]}]}],"pos":[74853,74904],"yaml":true},{"content":"A <xref href=\"System.Data.Linq.Table`1\"></xref> instance that contains the original state of the entity.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.Table`1\"&gt;&lt;/xref&gt;</ph> instance that contains the original state of the entity.","source":"A <xref href=\"System.Data.Linq.Table`1\"></xref> instance that contains the original state of the entity."}],"pos":[74955,75060],"yaml":true},{"content":"Adds all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in a `pending insert` state.","nodes":[{"pos":[0,119],"content":"Adds all entities of a collection to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in a <ph id=\"ph2\">`pending insert`</ph> state.","source":"Adds all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in a `pending insert` state."}],"pos":[76355,76475],"yaml":true},{"content":"The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.","nodes":[{"pos":[0,129],"content":"The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.","nodes":[{"content":"The added entities will not be in query results until after <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> has been called.","pos":[0,129],"source":"The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called."}]}],"pos":[76486,76616],"yaml":true,"extradata":"MT"},{"content":"The entities to add.","nodes":[{"pos":[0,20],"content":"The entities to add.","nodes":[{"content":"The entities to add.","pos":[0,20]}]}],"pos":[76890,76911],"yaml":true},{"content":"The type of the elements to insert.","nodes":[{"pos":[0,35],"content":"The type of the elements to insert.","nodes":[{"content":"The type of the elements to insert.","pos":[0,35]}]}],"pos":[76971,77007],"yaml":true},{"content":"Adds an entity in a `pending insert` state to this <xref href=\"System.Data.Linq.Table`1\"></xref>.","nodes":[{"pos":[0,97],"content":"Adds an entity in a <ph id=\"ph1\">`pending insert`</ph> state to this <ph id=\"ph2\">&lt;xref href=\"System.Data.Linq.Table`1\"&gt;&lt;/xref&gt;</ph>.","source":"Adds an entity in a `pending insert` state to this <xref href=\"System.Data.Linq.Table`1\"></xref>."}],"pos":[78066,78164],"yaml":true},{"content":"The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.","nodes":[{"pos":[0,147],"content":"The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.","nodes":[{"content":"The added entity will not appear in query results from this table until after <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.SubmitChanges%2A&gt;</ph> has been called.","pos":[0,147],"source":"The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called."}]}],"pos":[78175,78323],"yaml":true,"extradata":"MT"},{"content":"The entity to be added.","nodes":[{"pos":[0,23],"content":"The entity to be added.","nodes":[{"content":"The entity to be added.","pos":[0,23]}]}],"pos":[78739,78763],"yaml":true},{"content":"Gets a value that indicates whether the type of the entities contained in this <xref href=\"System.Data.Linq.Table`1\"></xref> instance has a primary key.","nodes":[{"pos":[0,152],"content":"Gets a value that indicates whether the type of the entities contained in this <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.Table`1\"&gt;&lt;/xref&gt;</ph> instance has a primary key.","source":"Gets a value that indicates whether the type of the entities contained in this <xref href=\"System.Data.Linq.Table`1\"></xref> instance has a primary key."}],"pos":[79755,79908],"yaml":true},{"content":"`true` if the entity type does not have a primary key; otherwise, `false`.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">`true`</ph> if the entity type does not have a primary key; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the entity type does not have a primary key; otherwise, `false`."}],"pos":[80021,80098],"yaml":true},{"content":"Returns a string that represents the table.","nodes":[{"pos":[0,43],"content":"Returns a string that represents the table.","nodes":[{"content":"Returns a string that represents the table.","pos":[0,43]}]}],"pos":[81078,81122],"yaml":true},{"content":"A string representation of the table.","nodes":[{"pos":[0,37],"content":"A string representation of the table.","nodes":[{"content":"A string representation of the table.","pos":[0,37]}]}],"pos":[81257,81295],"yaml":true},{"content":"Returns an enumerator that iterates through the collection.","nodes":[{"pos":[0,59],"content":"Returns an enumerator that iterates through the collection.","nodes":[{"content":"Returns an enumerator that iterates through the collection.","pos":[0,59]}]}],"pos":[82524,82584],"yaml":true},{"content":"An enumerator that can be used to iterate through the collection.","nodes":[{"pos":[0,65],"content":"An enumerator that can be used to iterate through the collection.","nodes":[{"content":"An enumerator that can be used to iterate through the collection.","pos":[0,65]}]}],"pos":[82804,82870],"yaml":true},{"content":"Returns an enumerator that iterates through the collection.","nodes":[{"pos":[0,59],"content":"Returns an enumerator that iterates through the collection.","nodes":[{"content":"Returns an enumerator that iterates through the collection.","pos":[0,59]}]}],"pos":[84074,84134],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.","nodes":[{"pos":[0,206],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.","pos":[0,206],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.","pos":[60,206],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface."}]}]}],"pos":[84145,84352],"yaml":true,"extradata":"MT"},{"content":"An enumerator that can be used to iterate through the collection.","nodes":[{"pos":[0,65],"content":"An enumerator that can be used to iterate through the collection.","nodes":[{"content":"An enumerator that can be used to iterate through the collection.","pos":[0,65]}]}],"pos":[84529,84595],"yaml":true},{"content":"Gets a value that indicates whether the collection is a collection of <xref href=\"System.Collections.IList\"></xref> objects.","nodes":[{"pos":[0,124],"content":"Gets a value that indicates whether the collection is a collection of <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> objects.","source":"Gets a value that indicates whether the collection is a collection of <xref href=\"System.Collections.IList\"></xref> objects."}],"pos":[85841,85966],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","nodes":[{"pos":[0,197],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","pos":[0,197],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.","pos":[60,197],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface."}]}]}],"pos":[85977,86175],"yaml":true,"extradata":"MT"},{"content":"`true` if the collection is a collection of <xref href=\"System.Collections.IList\"></xref> objects; otherwise, `false`.","nodes":[{"pos":[0,118],"content":"<ph id=\"ph1\">`true`</ph> if the collection is a collection of <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> objects; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the collection is a collection of <xref href=\"System.Collections.IList\"></xref> objects; otherwise, `false`."}],"pos":[86327,86448],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IList\"></xref> that can be bound to a data source from an object that does not implement an <xref href=\"System.Collections.IList\"></xref> itself.","nodes":[{"pos":[0,187],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> that can be bound to a data source from an object that does not implement an <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> itself.","source":"Returns an <xref href=\"System.Collections.IList\"></xref> that can be bound to a data source from an object that does not implement an <xref href=\"System.Collections.IList\"></xref> itself."}],"pos":[87588,87776],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","nodes":[{"pos":[0,197],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","pos":[0,197],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.","pos":[60,197],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface."}]}]}],"pos":[87787,87985],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IList\"></xref> that can be bound to a data source.","nodes":[{"pos":[0,84],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> that can be bound to a data source.","source":"An <xref href=\"System.Collections.IList\"></xref> that can be bound to a data source."}],"pos":[88144,88229],"yaml":true},{"content":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.","nodes":[{"pos":[0,136],"content":"Attaches all entities of a collection to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in either a modified or unmodified state.","source":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state."}],"pos":[89470,89607],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[89618,89806],"yaml":true,"extradata":"MT"},{"content":"The entity to be attached.","nodes":[{"pos":[0,26],"content":"The entity to be attached.","nodes":[{"content":"The entity to be attached.","pos":[0,26]}]}],"pos":[89960,89987],"yaml":true},{"content":"`true` to attach the entity as modified; `false` to attached the entity as unmodified.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">`true`</ph> to attach the entity as modified; <ph id=\"ph2\">`false`</ph> to attached the entity as unmodified.","source":"`true` to attach the entity as modified; `false` to attached the entity as unmodified."}],"pos":[90054,90143],"yaml":true},{"content":"Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state by specifying both the entity and its original state.","nodes":[{"pos":[0,170],"content":"Attaches an entity to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in either a modified or unmodified state by specifying both the entity and its original state.","source":"Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state by specifying both the entity and its original state."}],"pos":[91367,91538],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[91549,91737],"yaml":true,"extradata":"MT"},{"content":"The entity to be attached.","nodes":[{"pos":[0,26],"content":"The entity to be attached.","nodes":[{"content":"The entity to be attached.","pos":[0,26]}]}],"pos":[91891,91918],"yaml":true},{"content":"An instance of the same entity type with data members that contain the original values.","nodes":[{"pos":[0,87],"content":"An instance of the same entity type with data members that contain the original values.","nodes":[{"content":"An instance of the same entity type with data members that contain the original values.","pos":[0,87]}]}],"pos":[91982,92070],"yaml":true},{"content":"Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in an unmodified state.","nodes":[{"pos":[0,99],"content":"Attaches an entity to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in an unmodified state.","source":"Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in an unmodified state."}],"pos":[93228,93328],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[93339,93527],"yaml":true,"extradata":"MT"},{"content":"The entity to be attached.","nodes":[{"pos":[0,26],"content":"The entity to be attached.","nodes":[{"content":"The entity to be attached.","pos":[0,26]}]}],"pos":[93664,93691],"yaml":true},{"content":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.","nodes":[{"pos":[0,136],"content":"Attaches all entities of a collection to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in either a modified or unmodified state.","source":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state."}],"pos":[94933,95070],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[95081,95269],"yaml":true,"extradata":"MT"},{"content":"The collection of entities to be attached.","nodes":[{"pos":[0,42],"content":"The collection of entities to be attached.","nodes":[{"content":"The collection of entities to be attached.","pos":[0,42]}]}],"pos":[95454,95497],"yaml":true},{"content":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.","nodes":[{"pos":[0,136],"content":"Attaches all entities of a collection to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in either a modified or unmodified state.","source":"Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state."}],"pos":[96814,96951],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[96962,97150],"yaml":true,"extradata":"MT"},{"content":"The collection of entities to be attched.","nodes":[{"pos":[0,41],"content":"The collection of entities to be attched.","nodes":[{"content":"The collection of entities to be attched.","pos":[0,41]}]}],"pos":[97352,97394],"yaml":true},{"content":"`true` to attach the entities as modified; `false` to attach the entities as unmodified.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">`true`</ph> to attach the entities as modified; <ph id=\"ph2\">`false`</ph> to attach the entities as unmodified.","source":"`true` to attach the entities as modified; `false` to attach the entities as unmodified."}],"pos":[97461,97552],"yaml":true},{"content":"Puts all entities from the collection into a `pending delete` state.","nodes":[{"pos":[0,68],"content":"Puts all entities from the collection into a <ph id=\"ph1\">`pending delete`</ph> state.","source":"Puts all entities from the collection into a `pending delete` state."}],"pos":[98845,98914],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[98925,99113],"yaml":true,"extradata":"MT"},{"content":"The entities being removed.","nodes":[{"pos":[0,27],"content":"The entities being removed.","nodes":[{"content":"The entities being removed.","pos":[0,27]}]}],"pos":[99306,99334],"yaml":true},{"content":"Puts an entity from this table into a `pending delete` state.","nodes":[{"pos":[0,61],"content":"Puts an entity from this table into a <ph id=\"ph1\">`pending delete`</ph> state.","source":"Puts an entity from this table into a `pending delete` state."}],"pos":[100551,100613],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.  \n  \n> [!NOTE]\n>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations. If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted. Otherwise, an exception is thrown.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]},{"pos":[195,623],"content":"[!NOTE]\n [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations. If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted. Otherwise, an exception is thrown.","leadings":["","> "],"nodes":[{"content":" [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations. If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted. Otherwise, an exception is thrown.","pos":[8,426],"nodes":[{"content":"<ph id=\"ph1\"> [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> does not support or recognize cascade-delete operations.","pos":[0,109],"source":" [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations."},{"content":"If you want to delete a row in a table that has constraints against it, you must either set the <ph id=\"ph1\">`ON DELETE CASCADE`</ph> rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.","pos":[110,383],"source":" If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted."},{"content":"Otherwise, an exception is thrown.","pos":[384,418]}]}]}],"pos":[100624,101253],"yaml":true,"extradata":"MT"},{"content":"The entity to be removed.","nodes":[{"pos":[0,25],"content":"The entity to be removed.","nodes":[{"content":"The entity to be removed.","pos":[0,25]}]}],"pos":[101398,101424],"yaml":true},{"content":"Returns an array of modified members that contain their current and original values.","nodes":[{"pos":[0,84],"content":"Returns an array of modified members that contain their current and original values.","nodes":[{"content":"Returns an array of modified members that contain their current and original values.","pos":[0,84]}]}],"pos":[102662,102747],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[102758,102946],"yaml":true,"extradata":"MT"},{"content":"The entity from which to obtain the modified members.","nodes":[{"pos":[0,53],"content":"The entity from which to obtain the modified members.","nodes":[{"content":"The entity from which to obtain the modified members.","pos":[0,53]}]}],"pos":[103185,103239],"yaml":true},{"content":"An array of modified members.","nodes":[{"pos":[0,29],"content":"An array of modified members.","nodes":[{"content":"An array of modified members.","pos":[0,29]}]}],"pos":[103320,103350],"yaml":true},{"content":"Retrieves original values of a given entity.","nodes":[{"pos":[0,44],"content":"Retrieves original values of a given entity.","nodes":[{"content":"Retrieves original values of a given entity.","pos":[0,44]}]}],"pos":[104665,104710],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[104721,104909],"yaml":true,"extradata":"MT"},{"content":"The entity whose original state is to be accessed.","nodes":[{"pos":[0,50],"content":"The entity whose original state is to be accessed.","nodes":[{"content":"The entity whose original state is to be accessed.","pos":[0,50]}]}],"pos":[105121,105172],"yaml":true},{"content":"A copy of the original entity.","nodes":[{"pos":[0,30],"content":"A copy of the original entity.","nodes":[{"content":"A copy of the original entity.","pos":[0,30]}]}],"pos":[105229,105260],"yaml":true},{"content":"Adds all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in an `pending insert` state.","nodes":[{"pos":[0,120],"content":"Adds all entities of a collection to the <ph id=\"ph1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;&lt;/xref&gt;</ph> in an <ph id=\"ph2\">`pending insert`</ph> state.","source":"Adds all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in an `pending insert` state."}],"pos":[106615,106736],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[106747,106935],"yaml":true,"extradata":"MT"},{"content":"The collection of entities to be added.","nodes":[{"pos":[0,39],"content":"The collection of entities to be added.","nodes":[{"content":"The collection of entities to be added.","pos":[0,39]}]}],"pos":[107128,107168],"yaml":true},{"content":"Adds an entity in a `pending insert` state to this table.","nodes":[{"pos":[0,57],"content":"Adds an entity in a <ph id=\"ph1\">`pending insert`</ph> state to this table.","source":"Adds an entity in a `pending insert` state to this table."}],"pos":[108385,108443],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"pos":[0,187],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.","pos":[0,187],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Data.Linq.ITable&gt;</ph> interface.","pos":[60,187],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface."}]}]}],"pos":[108454,108642],"yaml":true,"extradata":"MT"},{"content":"The entity to add.","nodes":[{"pos":[0,18],"content":"The entity to add.","nodes":[{"content":"The entity to add.","pos":[0,18]}]}],"pos":[108787,108806],"yaml":true},{"content":"Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.","nodes":[{"pos":[0,115],"content":"Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.","nodes":[{"content":"Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.","pos":[0,115]}]}],"pos":[109944,110060],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.","nodes":[{"pos":[0,186],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.","pos":[0,186],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable&gt;</ph> interface.","pos":[60,186],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface."}]}]}],"pos":[110071,110258],"yaml":true,"extradata":"MT"},{"content":"The type of the element(s) that are returned when the expression tree associated with this object is executed.","nodes":[{"pos":[0,110],"content":"The type of the element(s) that are returned when the expression tree associated with this object is executed.","nodes":[{"content":"The type of the element(s) that are returned when the expression tree associated with this object is executed.","pos":[0,110]}]}],"pos":[110385,110496],"yaml":true},{"content":"Gets the expression tree that is associated with this instance of <xref href=\"System.Linq.IQueryable\"></xref>.","nodes":[{"pos":[0,110],"content":"Gets the expression tree that is associated with this instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the expression tree that is associated with this instance of <xref href=\"System.Linq.IQueryable\"></xref>."}],"pos":[111592,111703],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.","nodes":[{"pos":[0,186],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.","pos":[0,186],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable&gt;</ph> interface.","pos":[60,186],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface."}]}]}],"pos":[111714,111901],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that is associated with this instance of <xref href=\"System.Linq.IQueryable\"></xref>.","nodes":[{"pos":[0,145],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that is associated with this instance of <ph id=\"ph2\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that is associated with this instance of <xref href=\"System.Linq.IQueryable\"></xref>."}],"pos":[112080,112226],"yaml":true},{"content":"Gets the query provider that is associated with this data source.","nodes":[{"pos":[0,65],"content":"Gets the query provider that is associated with this data source.","nodes":[{"content":"Gets the query provider that is associated with this data source.","pos":[0,65]}]}],"pos":[113309,113375],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.","nodes":[{"pos":[0,186],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.","pos":[0,186],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable&gt;</ph> interface.","pos":[60,186],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface."}]}]}],"pos":[113386,113573],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.IQueryProvider\"></xref> that is associated with this data source.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryProvider\"&gt;&lt;/xref&gt;</ph> that is associated with this data source.","source":"The <xref href=\"System.Linq.IQueryProvider\"></xref> that is associated with this data source."}],"pos":[113734,113828],"yaml":true},{"content":"Constructs an <xref href=\"System.Linq.IQueryable\"></xref> object that can evaluate the query represented by a specified expression tree.","nodes":[{"pos":[0,136],"content":"Constructs an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph> object that can evaluate the query represented by a specified expression tree.","source":"Constructs an <xref href=\"System.Linq.IQueryable\"></xref> object that can evaluate the query represented by a specified expression tree."}],"pos":[115093,115230],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","nodes":[{"pos":[0,190],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","pos":[0,190],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> interface.","pos":[60,190],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface."}]}]}],"pos":[115241,115432],"yaml":true,"extradata":"MT"},{"content":"The query expression from which the evaluation is performed.","nodes":[{"pos":[0,60],"content":"The query expression from which the evaluation is performed.","nodes":[{"content":"The query expression from which the evaluation is performed.","pos":[0,60]}]}],"pos":[115657,115718],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable\"></xref> that can evaluate the query represented by the specified expression tree.","nodes":[{"pos":[0,120],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph> that can evaluate the query represented by the specified expression tree.","source":"An <xref href=\"System.Linq.IQueryable\"></xref> that can evaluate the query represented by the specified expression tree."}],"pos":[115784,115905],"yaml":true},{"content":"Constructs an <xref href=\"System.Linq.IQueryable`1\"></xref> object that can evaluate the query represented by a specified expression tree.","nodes":[{"pos":[0,138],"content":"Constructs an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> object that can evaluate the query represented by a specified expression tree.","source":"Constructs an <xref href=\"System.Linq.IQueryable`1\"></xref> object that can evaluate the query represented by a specified expression tree."}],"pos":[117245,117384],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","nodes":[{"pos":[0,190],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","pos":[0,190],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> interface.","pos":[60,190],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface."}]}]}],"pos":[117395,117586],"yaml":true,"extradata":"MT"},{"content":"The query expression from which the evaluation is performed.","nodes":[{"pos":[0,60],"content":"The query expression from which the evaluation is performed.","nodes":[{"content":"The query expression from which the evaluation is performed.","pos":[0,60]}]}],"pos":[117829,117890],"yaml":true},{"content":"The type of the data in the table.","nodes":[{"pos":[0,34],"content":"The type of the data in the table.","nodes":[{"content":"The type of the data in the table.","pos":[0,34]}]}],"pos":[117947,117982],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that can evaluate the query represented by the specified expression tree.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that can evaluate the query represented by the specified expression tree.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that can evaluate the query represented by the specified expression tree."}],"pos":[118057,118180],"yaml":true},{"content":"Executes the query represented by a specified expression tree.","nodes":[{"pos":[0,62],"content":"Executes the query represented by a specified expression tree.","nodes":[{"content":"Executes the query represented by a specified expression tree.","pos":[0,62]}]}],"pos":[119463,119526],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","nodes":[{"pos":[0,190],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","pos":[0,190],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> interface.","pos":[60,190],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface."}]}]}],"pos":[119537,119728],"yaml":true,"extradata":"MT"},{"content":"The query expression to execute.","nodes":[{"pos":[0,32],"content":"The query expression to execute.","nodes":[{"content":"The query expression to execute.","pos":[0,32]}]}],"pos":[119933,119966],"yaml":true},{"content":"The value that results from executing the specified query.","nodes":[{"pos":[0,58],"content":"The value that results from executing the specified query.","nodes":[{"content":"The value that results from executing the specified query.","pos":[0,58]}]}],"pos":[120023,120082],"yaml":true},{"content":"Executes the strongly-typed query represented by a specified expression tree.","nodes":[{"pos":[0,77],"content":"Executes the strongly-typed query represented by a specified expression tree.","nodes":[{"content":"Executes the strongly-typed query represented by a specified expression tree.","pos":[0,77]}]}],"pos":[121394,121472],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","nodes":[{"pos":[0,190],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.","pos":[0,190],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Table%601&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> interface.","pos":[60,190],"source":" It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface."}]}]}],"pos":[121483,121674],"yaml":true,"extradata":"MT"},{"content":"The query expression to execute.","nodes":[{"pos":[0,32],"content":"The query expression to execute.","nodes":[{"content":"The query expression to execute.","pos":[0,32]}]}],"pos":[121889,121922],"yaml":true},{"content":"The type of the data in the table.","nodes":[{"pos":[0,34],"content":"The type of the data in the table.","nodes":[{"content":"The type of the data in the table.","pos":[0,34]}]}],"pos":[121979,122014],"yaml":true},{"content":"The value that results from executing the specified query.","nodes":[{"pos":[0,58],"content":"The value that results from executing the specified query.","nodes":[{"content":"The value that results from executing the specified query.","pos":[0,58]}]}],"pos":[122065,122124],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Linq.Table`1\n  commentId: T:System.Data.Linq.Table`1\n  id: Table`1\n  children:\n  - System.Data.Linq.Table`1.Attach(`0)\n  - System.Data.Linq.Table`1.Attach(`0,System.Boolean)\n  - System.Data.Linq.Table`1.Attach(`0,`0)\n  - System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)\n  - System.Data.Linq.Table`1.Context\n  - System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.Linq.Table`1.DeleteOnSubmit(`0)\n  - System.Data.Linq.Table`1.GetEnumerator\n  - System.Data.Linq.Table`1.GetModifiedMembers(`0)\n  - System.Data.Linq.Table`1.GetNewBindingList\n  - System.Data.Linq.Table`1.GetOriginalEntityState(`0)\n  - System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.Linq.Table`1.InsertOnSubmit(`0)\n  - System.Data.Linq.Table`1.IsReadOnly\n  - System.Data.Linq.Table`1.ToString\n  - System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator\n  - System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection\n  - System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)\n  - System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)\n  - System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType\n  - System.Data.Linq.Table`1.System#Linq#IQueryable#Expression\n  - System.Data.Linq.Table`1.System#Linq#IQueryable#Provider\n  - System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)\n  - System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)\n  - System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)\n  - System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)\n  langs:\n  - csharp\n  name: Table<TEntity>\n  nameWithType: Table<TEntity>\n  fullName: System.Data.Linq.Table<TEntity>\n  type: Class\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Represents a table for a particular type in the underlying database.\n  remarks: \"This class enables you to query over the table and add, remove, and attach objects.  \\n  \\n An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>. That is, when the designer generates a DataContext object, it generates properties to represent each Table. For example:  \\n  \\n```  \\n[global::System.Data.Linq.Mapping.DatabaseAttribute(Name=\\\"SignOffTool\\\")]  \\npublic partial class DataClasses1DataContext : System.Data.Linq.DataContext {  \\n   public System.Data.Linq.Table<User> Users {  \\n      get {  \\n         return this.GetTable<User>();  \\n      }  \\n   }  \\n}  \\n```  \\n  \\n For this strongly typed DataContext, you can access the Users property to get `Table<User>`.\"\n  syntax:\n    content: 'public sealed class Table<TEntity> : System.Collections.Generic.IEnumerable<TEntity>, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable<TEntity>, System.Linq.IQueryProvider where TEntity : class'\n    typeParameters:\n    - id: TEntity\n      description: The type of the data in the table.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IEnumerable{TEntity}\n  - System.ComponentModel.IListSource\n  - System.Data.Linq.ITable\n  - System.Linq.IQueryable{TEntity}\n  - System.Linq.IQueryProvider\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  extensionMethods:\n  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  - System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  - System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  - System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  - System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\n  - System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.OfType``1(System.Linq.IQueryable)\n  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  - System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  - System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  - System.Web.UI.WebControls.QueryExtensions.SortBy``1(System.Linq.IQueryable{``0},System.String)\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.Attach(`0)\n  commentId: M:System.Data.Linq.Table`1.Attach(`0)\n  id: Attach(`0)\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: Attach(TEntity)\n  nameWithType: Table<TEntity>.Attach(TEntity)\n  fullName: Table<TEntity>.Attach(TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches a disconnected or \"detached\" entity to a new <xref href=\"System.Data.Linq.DataContext\"></xref> when original values are required for optimistic concurrency checks.\n  remarks: \"Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation. Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values. In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state. After calling this method, you can then update its fields, for example with additional data sent from the client.  \\n  \\n When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.  \\n  \\n For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).  \\n  \\n Do not try to `Attach` an entity that has not been detached through serialization. Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.\"\n  syntax:\n    content: public void Attach (TEntity entity);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: The original values of the entity to be attached.\n  overload: System.Data.Linq.Table`1.Attach*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.Attach(`0,System.Boolean)\n  commentId: M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)\n  id: Attach(`0,System.Boolean)\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: Attach(TEntity, Boolean)\n  nameWithType: Table<TEntity>.Attach(TEntity, Boolean)\n  fullName: Table<TEntity>.Attach(TEntity, Boolean)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.\n  remarks: If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking. When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.\n  syntax:\n    content: public void Attach (TEntity entity, bool asModified);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: The entity to be attached.\n    - id: asModified\n      type: System.Boolean\n      description: '`true` to attach the entity as modified; `false` to attach the entity as unmodified.'\n  overload: System.Data.Linq.Table`1.Attach*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.Attach(`0,`0)\n  commentId: M:System.Data.Linq.Table`1.Attach(`0,`0)\n  id: Attach(`0,`0)\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: Attach(TEntity, TEntity)\n  nameWithType: Table<TEntity>.Attach(TEntity, TEntity)\n  fullName: Table<TEntity>.Attach(TEntity, TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state by specifying both the entity and its original state.\n  remarks: \"In the following example, the `Customer` object is already correctly configured. You can call `Attach` without having to replay the updates.  \\n  \\n When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.\"\n  example:\n  - >-\n    [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]\n     [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]\n  syntax:\n    content: public void Attach (TEntity entity, TEntity original);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: The entity to be attached.\n    - id: original\n      type: TEntity\n      description: An instance of the same entity type with data members that contain the original values.\n  overload: System.Data.Linq.Table`1.Attach*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})\n  id: AttachAll``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: AttachAll<TSubEntity>(IEnumerable<TSubEntity>)\n  nameWithType: Table<TEntity>.AttachAll<TSubEntity>(IEnumerable<TSubEntity>)\n  fullName: Table<TEntity>.AttachAll<TSubEntity>(IEnumerable<TSubEntity>)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.\n  remarks: \"This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>. When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.  \\n  \\n For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).\"\n  syntax:\n    content: 'public void AttachAll<TSubEntity> (System.Collections.Generic.IEnumerable<TSubEntity> entities) where TSubEntity : TEntity;'\n    parameters:\n    - id: entities\n      type: System.Collections.Generic.IEnumerable{TSubEntity}\n      description: The collection of entities.\n    typeParameters:\n    - id: TSubEntity\n      description: The type of entities to attach.\n  overload: System.Data.Linq.Table`1.AttachAll``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)\n  commentId: M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)\n  id: AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: AttachAll<TSubEntity>(IEnumerable<TSubEntity>, Boolean)\n  nameWithType: Table<TEntity>.AttachAll<TSubEntity>(IEnumerable<TSubEntity>, Boolean)\n  fullName: Table<TEntity>.AttachAll<TSubEntity>(IEnumerable<TSubEntity>, Boolean)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.\n  remarks: \"This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state. If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking. If attaching as unmodified, the entity is assumed to represent the original value. After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).  \\n  \\n When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized. When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state. To update members of a child collection, you must explicitly call `Attach` and specify that entity.\"\n  example:\n  - \"The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance. The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).  \\n  \\n [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]\\n [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  \\n  \\n In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached. When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects. This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance. For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.  \\n  \\n [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]\\n [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  \\n  \\n The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them. You can attach all orders of Customer A at the same time.  \\n  \\n [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]\\n [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]\"\n  syntax:\n    content: 'public void AttachAll<TSubEntity> (System.Collections.Generic.IEnumerable<TSubEntity> entities, bool asModified) where TSubEntity : TEntity;'\n    parameters:\n    - id: entities\n      type: System.Collections.Generic.IEnumerable{TSubEntity}\n      description: The collection of entities.\n    - id: asModified\n      type: System.Boolean\n      description: '`true` if the object has a timestamp or RowVersion member; `false` if original values are being used for the optimistic concurrency check.'\n    typeParameters:\n    - id: TSubEntity\n      description: The type of entities to attach.\n  overload: System.Data.Linq.Table`1.AttachAll``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.Context\n  commentId: P:System.Data.Linq.Table`1.Context\n  id: Context\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: Context\n  nameWithType: Table<TEntity>.Context\n  fullName: Table<TEntity>.Context\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets the <xref href=\"System.Data.Linq.DataContext\"></xref> that has been used to retrieve this <xref href=\"System.Data.Linq.Table`1\"></xref>.\n  syntax:\n    content: public System.Data.Linq.DataContext Context { get; }\n    return:\n      type: System.Data.Linq.DataContext\n      description: The data context that has been used to retrieve this table.\n  overload: System.Data.Linq.Table`1.Context*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  id: DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: DeleteAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  nameWithType: Table<TEntity>.DeleteAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  fullName: Table<TEntity>.DeleteAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Puts all entities from the collection into a `pending delete` state.\n  remarks: \"Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. Disconnected entities must be attached before they can be deleted. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).  \\n  \\n The following C# snippet shows one use for this method:  \\n  \\n```  \\nIEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  \\n   where c.Orders.Count == 0  \\n   select c).ToList();  \\n  \\ndb.Customers.DeleteAllOnSubmit(customersWithoutOrders);  \\ndb.SubmitChanges();  \\n```  \\n  \\n In Visual Basic:  \\n  \\n```  \\nDim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   \\n    Where c.Orders.Count = 0 _   \\n    Select c).ToList()  \\n  \\ndb.Customers.DeleteAllOnSubmit(customersWithoutOrders)  \\ndb.SubmitChanges()  \\n```\"\n  syntax:\n    content: 'public void DeleteAllOnSubmit<TSubEntity> (System.Collections.Generic.IEnumerable<TSubEntity> entities) where TSubEntity : TEntity;'\n    parameters:\n    - id: entities\n      type: System.Collections.Generic.IEnumerable{TSubEntity}\n      description: The entities to delete.\n    typeParameters:\n    - id: TSubEntity\n      description: The type of the elements to delete.\n  overload: System.Data.Linq.Table`1.DeleteAllOnSubmit``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.DeleteOnSubmit(`0)\n  commentId: M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)\n  id: DeleteOnSubmit(`0)\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: DeleteOnSubmit(TEntity)\n  nameWithType: Table<TEntity>.DeleteOnSubmit(TEntity)\n  fullName: Table<TEntity>.DeleteOnSubmit(TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Puts an entity from this table into a `pending delete` state.\n  remarks: \"The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called. Disconnected entities must first be attached before they can be deleted. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).  \\n  \\n> [!NOTE]\\n>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations. If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted. Otherwise, an exception is thrown.\"\n  example:\n  - >-\n    [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]\n     [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]\n  syntax:\n    content: public void DeleteOnSubmit (TEntity entity);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: The entity to be deleted.\n  overload: System.Data.Linq.Table`1.DeleteOnSubmit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.GetEnumerator\n  commentId: M:System.Data.Linq.Table`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Table<TEntity>.GetEnumerator()\n  fullName: Table<TEntity>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets an enumerator that iterates through the collection.\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<TEntity> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{TEntity}\n      description: An enumerator that can be used to iterate through the collection.\n  overload: System.Data.Linq.Table`1.GetEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.GetModifiedMembers(`0)\n  commentId: M:System.Data.Linq.Table`1.GetModifiedMembers(`0)\n  id: GetModifiedMembers(`0)\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: GetModifiedMembers(TEntity)\n  nameWithType: Table<TEntity>.GetModifiedMembers(TEntity)\n  fullName: Table<TEntity>.GetModifiedMembers(TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns an array of modified members that contain their current and original values.\n  syntax:\n    content: public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: The entity from which to get the array.\n    return:\n      type: System.Data.Linq.ModifiedMemberInfo[]\n      description: An array of modified members that contain their current and original values.\n  overload: System.Data.Linq.Table`1.GetModifiedMembers*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.GetNewBindingList\n  commentId: M:System.Data.Linq.Table`1.GetNewBindingList\n  id: GetNewBindingList\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: GetNewBindingList()\n  nameWithType: Table<TEntity>.GetNewBindingList()\n  fullName: Table<TEntity>.GetNewBindingList()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Creates a new list for binding to a data source.\n  remarks: The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.\n  syntax:\n    content: public System.ComponentModel.IBindingList GetNewBindingList ();\n    parameters: []\n    return:\n      type: System.ComponentModel.IBindingList\n      description: A new <xref href=\"System.ComponentModel.IBindingList\"></xref> for binding to a data source.\n  overload: System.Data.Linq.Table`1.GetNewBindingList*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.GetOriginalEntityState(`0)\n  commentId: M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)\n  id: GetOriginalEntityState(`0)\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: GetOriginalEntityState(TEntity)\n  nameWithType: Table<TEntity>.GetOriginalEntityState(TEntity)\n  fullName: Table<TEntity>.GetOriginalEntityState(TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns a <xref href=\"System.Data.Linq.Table`1\"></xref> instance that contains the original state of the entity.\n  remarks: This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>. The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>. For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).\n  syntax:\n    content: public TEntity GetOriginalEntityState (TEntity entity);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: The entity whose original state is to be returned.\n    return:\n      type: TEntity\n      description: A <xref href=\"System.Data.Linq.Table`1\"></xref> instance that contains the original state of the entity.\n  overload: System.Data.Linq.Table`1.GetOriginalEntityState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  id: InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: InsertAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  nameWithType: Table<TEntity>.InsertAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  fullName: Table<TEntity>.InsertAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Adds all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in a `pending insert` state.\n  remarks: The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.\n  syntax:\n    content: 'public void InsertAllOnSubmit<TSubEntity> (System.Collections.Generic.IEnumerable<TSubEntity> entities) where TSubEntity : TEntity;'\n    parameters:\n    - id: entities\n      type: System.Collections.Generic.IEnumerable{TSubEntity}\n      description: The entities to add.\n    typeParameters:\n    - id: TSubEntity\n      description: The type of the elements to insert.\n  overload: System.Data.Linq.Table`1.InsertAllOnSubmit``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.InsertOnSubmit(`0)\n  commentId: M:System.Data.Linq.Table`1.InsertOnSubmit(`0)\n  id: InsertOnSubmit(`0)\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: InsertOnSubmit(TEntity)\n  nameWithType: Table<TEntity>.InsertOnSubmit(TEntity)\n  fullName: Table<TEntity>.InsertOnSubmit(TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Adds an entity in a `pending insert` state to this <xref href=\"System.Data.Linq.Table`1\"></xref>.\n  remarks: The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.\n  example:\n  - >-\n    [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]\n     [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]\n  syntax:\n    content: public void InsertOnSubmit (TEntity entity);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: The entity to be added.\n  overload: System.Data.Linq.Table`1.InsertOnSubmit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.IsReadOnly\n  commentId: P:System.Data.Linq.Table`1.IsReadOnly\n  id: IsReadOnly\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: Table<TEntity>.IsReadOnly\n  fullName: Table<TEntity>.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets a value that indicates whether the type of the entities contained in this <xref href=\"System.Data.Linq.Table`1\"></xref> instance has a primary key.\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the entity type does not have a primary key; otherwise, `false`.'\n  overload: System.Data.Linq.Table`1.IsReadOnly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.ToString\n  commentId: M:System.Data.Linq.Table`1.ToString\n  id: ToString\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Table<TEntity>.ToString()\n  fullName: Table<TEntity>.ToString()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns a string that represents the table.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string representation of the table.\n  overload: System.Data.Linq.Table`1.ToString*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator\n  commentId: M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable<TEntity>#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IEnumerable<TEntity>.GetEnumerator()\n  nameWithType: Table<TEntity>.IEnumerable<TEntity>.GetEnumerator()\n  fullName: Table<TEntity>.IEnumerable<TEntity>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns an enumerator that iterates through the collection.\n  syntax:\n    content: System.Collections.Generic.IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{TEntity}\n      description: An enumerator that can be used to iterate through the collection.\n  overload: System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: Table<TEntity>.IEnumerable.GetEnumerator()\n  fullName: Table<TEntity>.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns an enumerator that iterates through the collection.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator that can be used to iterate through the collection.\n  overload: System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection\n  commentId: P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection\n  id: System#ComponentModel#IListSource#ContainsListCollection\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IListSource.ContainsListCollection\n  nameWithType: Table<TEntity>.IListSource.ContainsListCollection\n  fullName: Table<TEntity>.IListSource.ContainsListCollection\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets a value that indicates whether the collection is a collection of <xref href=\"System.Collections.IList\"></xref> objects.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.\n  syntax:\n    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the collection is a collection of <xref href=\"System.Collections.IList\"></xref> objects; otherwise, `false`.'\n  overload: System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList\n  commentId: M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList\n  id: System#ComponentModel#IListSource#GetList\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IListSource.GetList()\n  nameWithType: Table<TEntity>.IListSource.GetList()\n  fullName: Table<TEntity>.IListSource.GetList()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns an <xref href=\"System.Collections.IList\"></xref> that can be bound to a data source from an object that does not implement an <xref href=\"System.Collections.IList\"></xref> itself.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.\n  syntax:\n    content: System.Collections.IList IListSource.GetList ();\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: An <xref href=\"System.Collections.IList\"></xref> that can be bound to a data source.\n  overload: System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)\n  id: System#Data#Linq#ITable#Attach(System.Object,System.Boolean)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.Attach(Object, Boolean)\n  nameWithType: Table<TEntity>.ITable.Attach(Object, Boolean)\n  fullName: Table<TEntity>.ITable.Attach(Object, Boolean)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: void ITable.Attach (object entity, bool asModified);\n    parameters:\n    - id: entity\n      type: System.Object\n      description: The entity to be attached.\n    - id: asModified\n      type: System.Boolean\n      description: '`true` to attach the entity as modified; `false` to attached the entity as unmodified.'\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)\n  id: System#Data#Linq#ITable#Attach(System.Object,System.Object)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.Attach(Object, Object)\n  nameWithType: Table<TEntity>.ITable.Attach(Object, Object)\n  fullName: Table<TEntity>.ITable.Attach(Object, Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state by specifying both the entity and its original state.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: void ITable.Attach (object entity, object original);\n    parameters:\n    - id: entity\n      type: System.Object\n      description: The entity to be attached.\n    - id: original\n      type: System.Object\n      description: An instance of the same entity type with data members that contain the original values.\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)\n  id: System#Data#Linq#ITable#Attach(System.Object)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.Attach(Object)\n  nameWithType: Table<TEntity>.ITable.Attach(Object)\n  fullName: Table<TEntity>.ITable.Attach(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches an entity to the <xref href=\"System.Data.Linq.DataContext\"></xref> in an unmodified state.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: void ITable.Attach (object entity);\n    parameters:\n    - id: entity\n      type: System.Object\n      description: The entity to be attached.\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)\n  id: System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.AttachAll(IEnumerable)\n  nameWithType: Table<TEntity>.ITable.AttachAll(IEnumerable)\n  fullName: Table<TEntity>.ITable.AttachAll(IEnumerable)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: void ITable.AttachAll (System.Collections.IEnumerable entities);\n    parameters:\n    - id: entities\n      type: System.Collections.IEnumerable\n      description: The collection of entities to be attached.\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)\n  id: System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.AttachAll(IEnumerable, Boolean)\n  nameWithType: Table<TEntity>.ITable.AttachAll(IEnumerable, Boolean)\n  fullName: Table<TEntity>.ITable.AttachAll(IEnumerable, Boolean)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Attaches all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in either a modified or unmodified state.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);\n    parameters:\n    - id: entities\n      type: System.Collections.IEnumerable\n      description: The collection of entities to be attched.\n    - id: asModified\n      type: System.Boolean\n      description: '`true` to attach the entities as modified; `false` to attach the entities as unmodified.'\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)\n  id: System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.DeleteAllOnSubmit(IEnumerable)\n  nameWithType: Table<TEntity>.ITable.DeleteAllOnSubmit(IEnumerable)\n  fullName: Table<TEntity>.ITable.DeleteAllOnSubmit(IEnumerable)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Puts all entities from the collection into a `pending delete` state.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);\n    parameters:\n    - id: entities\n      type: System.Collections.IEnumerable\n      description: The entities being removed.\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)\n  id: System#Data#Linq#ITable#DeleteOnSubmit(System.Object)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.DeleteOnSubmit(Object)\n  nameWithType: Table<TEntity>.ITable.DeleteOnSubmit(Object)\n  fullName: Table<TEntity>.ITable.DeleteOnSubmit(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Puts an entity from this table into a `pending delete` state.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.  \\n  \\n> [!NOTE]\\n>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support or recognize cascade-delete operations. If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted. Otherwise, an exception is thrown.\"\n  syntax:\n    content: void ITable.DeleteOnSubmit (object entity);\n    parameters:\n    - id: entity\n      type: System.Object\n      description: The entity to be removed.\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)\n  id: System#Data#Linq#ITable#GetModifiedMembers(System.Object)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.GetModifiedMembers(Object)\n  nameWithType: Table<TEntity>.ITable.GetModifiedMembers(Object)\n  fullName: Table<TEntity>.ITable.GetModifiedMembers(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns an array of modified members that contain their current and original values.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: >-\n      [System.Obsolete(\"NOT IMPLEMENTED YET\")]\n\n      System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);\n    parameters:\n    - id: entity\n      type: System.Object\n      description: The entity from which to obtain the modified members.\n    return:\n      type: System.Data.Linq.ModifiedMemberInfo[]\n      description: An array of modified members.\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)\n  id: System#Data#Linq#ITable#GetOriginalEntityState(System.Object)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.GetOriginalEntityState(Object)\n  nameWithType: Table<TEntity>.ITable.GetOriginalEntityState(Object)\n  fullName: Table<TEntity>.ITable.GetOriginalEntityState(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Retrieves original values of a given entity.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: >-\n      [System.Obsolete(\"NOT IMPLEMENTED YET\")]\n\n      object ITable.GetOriginalEntityState (object entity);\n    parameters:\n    - id: entity\n      type: System.Object\n      description: The entity whose original state is to be accessed.\n    return:\n      type: System.Object\n      description: A copy of the original entity.\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)\n  id: System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.InsertAllOnSubmit(IEnumerable)\n  nameWithType: Table<TEntity>.ITable.InsertAllOnSubmit(IEnumerable)\n  fullName: Table<TEntity>.ITable.InsertAllOnSubmit(IEnumerable)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Adds all entities of a collection to the <xref href=\"System.Data.Linq.DataContext\"></xref> in an `pending insert` state.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);\n    parameters:\n    - id: entities\n      type: System.Collections.IEnumerable\n      description: The collection of entities to be added.\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)\n  commentId: M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)\n  id: System#Data#Linq#ITable#InsertOnSubmit(System.Object)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: ITable.InsertOnSubmit(Object)\n  nameWithType: Table<TEntity>.ITable.InsertOnSubmit(Object)\n  fullName: Table<TEntity>.ITable.InsertOnSubmit(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Adds an entity in a `pending insert` state to this table.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.\n  syntax:\n    content: void ITable.InsertOnSubmit (object entity);\n    parameters:\n    - id: entity\n      type: System.Object\n      description: The entity to add.\n  overload: System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType\n  commentId: P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType\n  id: System#Linq#IQueryable#ElementType\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IQueryable.ElementType\n  nameWithType: Table<TEntity>.IQueryable.ElementType\n  fullName: Table<TEntity>.IQueryable.ElementType\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.\n  syntax:\n    content: Type System.Linq.IQueryable.ElementType { get; }\n    return:\n      type: System.Type\n      description: The type of the element(s) that are returned when the expression tree associated with this object is executed.\n  overload: System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryable#Expression\n  commentId: P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression\n  id: System#Linq#IQueryable#Expression\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IQueryable.Expression\n  nameWithType: Table<TEntity>.IQueryable.Expression\n  fullName: Table<TEntity>.IQueryable.Expression\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets the expression tree that is associated with this instance of <xref href=\"System.Linq.IQueryable\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.\n  syntax:\n    content: System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }\n    return:\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that is associated with this instance of <xref href=\"System.Linq.IQueryable\"></xref>.\n  overload: System.Data.Linq.Table`1.System#Linq#IQueryable#Expression*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryable#Provider\n  commentId: P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider\n  id: System#Linq#IQueryable#Provider\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IQueryable.Provider\n  nameWithType: Table<TEntity>.IQueryable.Provider\n  fullName: Table<TEntity>.IQueryable.Provider\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets the query provider that is associated with this data source.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.\n  syntax:\n    content: System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }\n    return:\n      type: System.Linq.IQueryProvider\n      description: The <xref href=\"System.Linq.IQueryProvider\"></xref> that is associated with this data source.\n  overload: System.Data.Linq.Table`1.System#Linq#IQueryable#Provider*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)\n  commentId: M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)\n  id: System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IQueryProvider.CreateQuery(Expression)\n  nameWithType: Table<TEntity>.IQueryProvider.CreateQuery(Expression)\n  fullName: Table<TEntity>.IQueryProvider.CreateQuery(Expression)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Constructs an <xref href=\"System.Linq.IQueryable\"></xref> object that can evaluate the query represented by a specified expression tree.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.\n  syntax:\n    content: System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: The query expression from which the evaluation is performed.\n    return:\n      type: System.Linq.IQueryable\n      description: An <xref href=\"System.Linq.IQueryable\"></xref> that can evaluate the query represented by the specified expression tree.\n  overload: System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)\n  commentId: M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)\n  id: System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IQueryProvider.CreateQuery<TResult>(Expression)\n  nameWithType: Table<TEntity>.IQueryProvider.CreateQuery<TResult>(Expression)\n  fullName: Table<TEntity>.IQueryProvider.CreateQuery<TResult>(Expression)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Constructs an <xref href=\"System.Linq.IQueryable`1\"></xref> object that can evaluate the query represented by a specified expression tree.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.\n  syntax:\n    content: System.Linq.IQueryable<TResult> IQueryProvider.CreateQuery<TResult> (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: The query expression from which the evaluation is performed.\n    typeParameters:\n    - id: TResult\n      description: The type of the data in the table.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that can evaluate the query represented by the specified expression tree.\n  overload: System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)\n  commentId: M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)\n  id: System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IQueryProvider.Execute(Expression)\n  nameWithType: Table<TEntity>.IQueryProvider.Execute(Expression)\n  fullName: Table<TEntity>.IQueryProvider.Execute(Expression)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Executes the query represented by a specified expression tree.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.\n  syntax:\n    content: object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: The query expression to execute.\n    return:\n      type: System.Object\n      description: The value that results from executing the specified query.\n  overload: System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)\n  commentId: M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)\n  id: System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)\n  isEii: true\n  parent: System.Data.Linq.Table`1\n  langs:\n  - csharp\n  name: IQueryProvider.Execute<TResult>(Expression)\n  nameWithType: Table<TEntity>.IQueryProvider.Execute<TResult>(Expression)\n  fullName: Table<TEntity>.IQueryProvider.Execute<TResult>(Expression)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Executes the strongly-typed query represented by a specified expression tree.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.\n  syntax:\n    content: TResult IQueryProvider.Execute<TResult> (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: The query expression to execute.\n    typeParameters:\n    - id: TResult\n      description: The type of the data in the table.\n    return:\n      type: TResult\n      description: The value that results from executing the specified query.\n  overload: System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.Linq.Table`1.Attach(`0)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: Attach(TEntity)\n  nameWithType: Table<TEntity>.Attach(TEntity)\n  fullName: Table<TEntity>.Attach(TEntity)\n- uid: TEntity\n  isExternal: true\n  name: TEntity\n  nameWithType: TEntity\n  fullName: TEntity\n- uid: System.Data.Linq.Table`1.Attach(`0,System.Boolean)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: Attach(TEntity, Boolean)\n  nameWithType: Table<TEntity>.Attach(TEntity, Boolean)\n  fullName: Table<TEntity>.Attach(TEntity, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Linq.Table`1.Attach(`0,`0)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: Attach(TEntity, TEntity)\n  nameWithType: Table<TEntity>.Attach(TEntity, TEntity)\n  fullName: Table<TEntity>.Attach(TEntity, TEntity)\n- uid: System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: AttachAll<TSubEntity>(IEnumerable<TSubEntity>)\n  nameWithType: Table<TEntity>.AttachAll<TSubEntity>(IEnumerable<TSubEntity>)\n  fullName: Table<TEntity>.AttachAll<TSubEntity>(IEnumerable<TSubEntity>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: TSubEntity\n  name: TSubEntity\n  nameWithType: TSubEntity\n  fullName: TSubEntity\n- uid: System.Collections.Generic.IEnumerable{TSubEntity}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSubEntity>\n  nameWithType: IEnumerable<TSubEntity>\n  fullName: System.Collections.Generic.IEnumerable<TSubEntity>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSubEntity\n    name: TSubEntity\n    nameWithType: TSubEntity\n    fullName: TSubEntity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: AttachAll<TSubEntity>(IEnumerable<TSubEntity>, Boolean)\n  nameWithType: Table<TEntity>.AttachAll<TSubEntity>(IEnumerable<TSubEntity>, Boolean)\n  fullName: Table<TEntity>.AttachAll<TSubEntity>(IEnumerable<TSubEntity>, Boolean)\n- uid: System.Data.Linq.Table`1.Context\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: Context\n  nameWithType: Table<TEntity>.Context\n  fullName: Table<TEntity>.Context\n- uid: System.Data.Linq.DataContext\n  parent: System.Data.Linq\n  isExternal: false\n  name: DataContext\n  nameWithType: DataContext\n  fullName: System.Data.Linq.DataContext\n- uid: System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: DeleteAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  nameWithType: Table<TEntity>.DeleteAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  fullName: Table<TEntity>.DeleteAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n- uid: System.Data.Linq.Table`1.DeleteOnSubmit(`0)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: DeleteOnSubmit(TEntity)\n  nameWithType: Table<TEntity>.DeleteOnSubmit(TEntity)\n  fullName: Table<TEntity>.DeleteOnSubmit(TEntity)\n- uid: System.Data.Linq.Table`1.GetEnumerator\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Table<TEntity>.GetEnumerator()\n  fullName: Table<TEntity>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.IEnumerator{TEntity}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<TEntity>\n  nameWithType: IEnumerator<TEntity>\n  fullName: System.Collections.Generic.IEnumerator<TEntity>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TEntity\n    name: TEntity\n    nameWithType: TEntity\n    fullName: TEntity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.Table`1.GetModifiedMembers(`0)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: GetModifiedMembers(TEntity)\n  nameWithType: Table<TEntity>.GetModifiedMembers(TEntity)\n  fullName: Table<TEntity>.GetModifiedMembers(TEntity)\n- uid: System.Data.Linq.ModifiedMemberInfo\n  name: ModifiedMemberInfo\n  nameWithType: ModifiedMemberInfo\n  fullName: System.Data.Linq.ModifiedMemberInfo\n- uid: System.Data.Linq.ModifiedMemberInfo[]\n  parent: System.Data.Linq\n  isExternal: false\n  name: ModifiedMemberInfo[]\n  nameWithType: ModifiedMemberInfo[]\n  fullName: System.Data.Linq.ModifiedMemberInfo[]\n  spec.csharp:\n  - uid: System.Data.Linq.ModifiedMemberInfo\n    name: ModifiedMemberInfo\n    nameWithType: ModifiedMemberInfo\n    fullName: System.Data.Linq.ModifiedMemberInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.Linq.Table`1.GetNewBindingList\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: GetNewBindingList()\n  nameWithType: Table<TEntity>.GetNewBindingList()\n  fullName: Table<TEntity>.GetNewBindingList()\n- uid: System.ComponentModel.IBindingList\n  parent: System.ComponentModel\n  isExternal: false\n  name: IBindingList\n  nameWithType: IBindingList\n  fullName: System.ComponentModel.IBindingList\n- uid: System.Data.Linq.Table`1.GetOriginalEntityState(`0)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: GetOriginalEntityState(TEntity)\n  nameWithType: Table<TEntity>.GetOriginalEntityState(TEntity)\n  fullName: Table<TEntity>.GetOriginalEntityState(TEntity)\n- uid: System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: InsertAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  nameWithType: Table<TEntity>.InsertAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n  fullName: Table<TEntity>.InsertAllOnSubmit<TSubEntity>(IEnumerable<TSubEntity>)\n- uid: System.Data.Linq.Table`1.InsertOnSubmit(`0)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: InsertOnSubmit(TEntity)\n  nameWithType: Table<TEntity>.InsertOnSubmit(TEntity)\n  fullName: Table<TEntity>.InsertOnSubmit(TEntity)\n- uid: System.Data.Linq.Table`1.IsReadOnly\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Table<TEntity>.IsReadOnly\n  fullName: Table<TEntity>.IsReadOnly\n- uid: System.Data.Linq.Table`1.ToString\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ToString()\n  nameWithType: Table<TEntity>.ToString()\n  fullName: Table<TEntity>.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IEnumerable<TEntity>.GetEnumerator()\n  nameWithType: Table<TEntity>.IEnumerable<TEntity>.GetEnumerator()\n  fullName: Table<TEntity>.IEnumerable<TEntity>.GetEnumerator()\n- uid: System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: Table<TEntity>.IEnumerable.GetEnumerator()\n  fullName: Table<TEntity>.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IListSource.ContainsListCollection\n  nameWithType: Table<TEntity>.IListSource.ContainsListCollection\n  fullName: Table<TEntity>.IListSource.ContainsListCollection\n- uid: System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IListSource.GetList()\n  nameWithType: Table<TEntity>.IListSource.GetList()\n  fullName: Table<TEntity>.IListSource.GetList()\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.Attach(Object, Boolean)\n  nameWithType: Table<TEntity>.ITable.Attach(Object, Boolean)\n  fullName: Table<TEntity>.ITable.Attach(Object, Boolean)\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.Attach(Object, Object)\n  nameWithType: Table<TEntity>.ITable.Attach(Object, Object)\n  fullName: Table<TEntity>.ITable.Attach(Object, Object)\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.Attach(Object)\n  nameWithType: Table<TEntity>.ITable.Attach(Object)\n  fullName: Table<TEntity>.ITable.Attach(Object)\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.AttachAll(IEnumerable)\n  nameWithType: Table<TEntity>.ITable.AttachAll(IEnumerable)\n  fullName: Table<TEntity>.ITable.AttachAll(IEnumerable)\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.AttachAll(IEnumerable, Boolean)\n  nameWithType: Table<TEntity>.ITable.AttachAll(IEnumerable, Boolean)\n  fullName: Table<TEntity>.ITable.AttachAll(IEnumerable, Boolean)\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.DeleteAllOnSubmit(IEnumerable)\n  nameWithType: Table<TEntity>.ITable.DeleteAllOnSubmit(IEnumerable)\n  fullName: Table<TEntity>.ITable.DeleteAllOnSubmit(IEnumerable)\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.DeleteOnSubmit(Object)\n  nameWithType: Table<TEntity>.ITable.DeleteOnSubmit(Object)\n  fullName: Table<TEntity>.ITable.DeleteOnSubmit(Object)\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.GetModifiedMembers(Object)\n  nameWithType: Table<TEntity>.ITable.GetModifiedMembers(Object)\n  fullName: Table<TEntity>.ITable.GetModifiedMembers(Object)\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.GetOriginalEntityState(Object)\n  nameWithType: Table<TEntity>.ITable.GetOriginalEntityState(Object)\n  fullName: Table<TEntity>.ITable.GetOriginalEntityState(Object)\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.InsertAllOnSubmit(IEnumerable)\n  nameWithType: Table<TEntity>.ITable.InsertAllOnSubmit(IEnumerable)\n  fullName: Table<TEntity>.ITable.InsertAllOnSubmit(IEnumerable)\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ITable.InsertOnSubmit(Object)\n  nameWithType: Table<TEntity>.ITable.InsertOnSubmit(Object)\n  fullName: Table<TEntity>.ITable.InsertOnSubmit(Object)\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IQueryable.ElementType\n  nameWithType: Table<TEntity>.IQueryable.ElementType\n  fullName: Table<TEntity>.IQueryable.ElementType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryable#Expression\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IQueryable.Expression\n  nameWithType: Table<TEntity>.IQueryable.Expression\n  fullName: Table<TEntity>.IQueryable.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryable#Provider\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IQueryable.Provider\n  nameWithType: Table<TEntity>.IQueryable.Provider\n  fullName: Table<TEntity>.IQueryable.Provider\n- uid: System.Linq.IQueryProvider\n  parent: System.Linq\n  isExternal: false\n  name: IQueryProvider\n  nameWithType: IQueryProvider\n  fullName: System.Linq.IQueryProvider\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IQueryProvider.CreateQuery(Expression)\n  nameWithType: Table<TEntity>.IQueryProvider.CreateQuery(Expression)\n  fullName: Table<TEntity>.IQueryProvider.CreateQuery(Expression)\n- uid: System.Linq.IQueryable\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable\n  nameWithType: IQueryable\n  fullName: System.Linq.IQueryable\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IQueryProvider.CreateQuery<TResult>(Expression)\n  nameWithType: Table<TEntity>.IQueryProvider.CreateQuery<TResult>(Expression)\n  fullName: Table<TEntity>.IQueryProvider.CreateQuery<TResult>(Expression)\n- uid: System.Linq.IQueryable`1\n  name: IQueryable<T>\n  nameWithType: IQueryable<T>\n  fullName: System.Linq.IQueryable<T>\n- uid: TResult\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Linq.IQueryable{TResult}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<TResult>\n  nameWithType: IQueryable<TResult>\n  fullName: System.Linq.IQueryable<TResult>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IQueryProvider.Execute(Expression)\n  nameWithType: Table<TEntity>.IQueryProvider.Execute(Expression)\n  fullName: Table<TEntity>.IQueryProvider.Execute(Expression)\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IQueryProvider.Execute<TResult>(Expression)\n  nameWithType: Table<TEntity>.IQueryProvider.Execute<TResult>(Expression)\n  fullName: Table<TEntity>.IQueryProvider.Execute<TResult>(Expression)\n- uid: System.Data.Linq.Table`1.Attach*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: Attach\n  nameWithType: Table<TEntity>.Attach\n  fullName: Table<TEntity>.Attach\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.AttachAll``1*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: AttachAll<TSubEntity>\n  nameWithType: Table<TEntity>.AttachAll<TSubEntity>\n  fullName: Table<TEntity>.AttachAll<TSubEntity>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.Context*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: Context\n  nameWithType: Table<TEntity>.Context\n  fullName: Table<TEntity>.Context\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.DeleteAllOnSubmit``1*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: DeleteAllOnSubmit<TSubEntity>\n  nameWithType: Table<TEntity>.DeleteAllOnSubmit<TSubEntity>\n  fullName: Table<TEntity>.DeleteAllOnSubmit<TSubEntity>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.DeleteOnSubmit*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: DeleteOnSubmit\n  nameWithType: Table<TEntity>.DeleteOnSubmit\n  fullName: Table<TEntity>.DeleteOnSubmit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.GetEnumerator*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: Table<TEntity>.GetEnumerator\n  fullName: Table<TEntity>.GetEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.GetModifiedMembers*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: GetModifiedMembers\n  nameWithType: Table<TEntity>.GetModifiedMembers\n  fullName: Table<TEntity>.GetModifiedMembers\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.GetNewBindingList*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: GetNewBindingList\n  nameWithType: Table<TEntity>.GetNewBindingList\n  fullName: Table<TEntity>.GetNewBindingList\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.GetOriginalEntityState*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: GetOriginalEntityState\n  nameWithType: Table<TEntity>.GetOriginalEntityState\n  fullName: Table<TEntity>.GetOriginalEntityState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.InsertAllOnSubmit``1*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: InsertAllOnSubmit<TSubEntity>\n  nameWithType: Table<TEntity>.InsertAllOnSubmit<TSubEntity>\n  fullName: Table<TEntity>.InsertAllOnSubmit<TSubEntity>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.InsertOnSubmit*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: InsertOnSubmit\n  nameWithType: Table<TEntity>.InsertOnSubmit\n  fullName: Table<TEntity>.InsertOnSubmit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.IsReadOnly*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Table<TEntity>.IsReadOnly\n  fullName: Table<TEntity>.IsReadOnly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.ToString*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: ToString\n  nameWithType: Table<TEntity>.ToString\n  fullName: Table<TEntity>.ToString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator\n  nameWithType: Table<TEntity>.System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator\n  fullName: Table<TEntity>.System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: Table<TEntity>.System.Collections.IEnumerable.GetEnumerator\n  fullName: Table<TEntity>.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: Table<TEntity>.System.ComponentModel.IListSource.ContainsListCollection\n  fullName: Table<TEntity>.System.ComponentModel.IListSource.ContainsListCollection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.ComponentModel.IListSource.GetList\n  nameWithType: Table<TEntity>.System.ComponentModel.IListSource.GetList\n  fullName: Table<TEntity>.System.ComponentModel.IListSource.GetList\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Data.Linq.ITable.Attach\n  nameWithType: Table<TEntity>.System.Data.Linq.ITable.Attach\n  fullName: Table<TEntity>.System.Data.Linq.ITable.Attach\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Data.Linq.ITable.AttachAll\n  nameWithType: Table<TEntity>.System.Data.Linq.ITable.AttachAll\n  fullName: Table<TEntity>.System.Data.Linq.ITable.AttachAll\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Data.Linq.ITable.DeleteAllOnSubmit\n  nameWithType: Table<TEntity>.System.Data.Linq.ITable.DeleteAllOnSubmit\n  fullName: Table<TEntity>.System.Data.Linq.ITable.DeleteAllOnSubmit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Data.Linq.ITable.DeleteOnSubmit\n  nameWithType: Table<TEntity>.System.Data.Linq.ITable.DeleteOnSubmit\n  fullName: Table<TEntity>.System.Data.Linq.ITable.DeleteOnSubmit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Data.Linq.ITable.GetModifiedMembers\n  nameWithType: Table<TEntity>.System.Data.Linq.ITable.GetModifiedMembers\n  fullName: Table<TEntity>.System.Data.Linq.ITable.GetModifiedMembers\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Data.Linq.ITable.GetOriginalEntityState\n  nameWithType: Table<TEntity>.System.Data.Linq.ITable.GetOriginalEntityState\n  fullName: Table<TEntity>.System.Data.Linq.ITable.GetOriginalEntityState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Data.Linq.ITable.InsertAllOnSubmit\n  nameWithType: Table<TEntity>.System.Data.Linq.ITable.InsertAllOnSubmit\n  fullName: Table<TEntity>.System.Data.Linq.ITable.InsertAllOnSubmit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Data.Linq.ITable.InsertOnSubmit\n  nameWithType: Table<TEntity>.System.Data.Linq.ITable.InsertOnSubmit\n  fullName: Table<TEntity>.System.Data.Linq.ITable.InsertOnSubmit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Linq.IQueryable.ElementType\n  nameWithType: Table<TEntity>.System.Linq.IQueryable.ElementType\n  fullName: Table<TEntity>.System.Linq.IQueryable.ElementType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryable#Expression*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Linq.IQueryable.Expression\n  nameWithType: Table<TEntity>.System.Linq.IQueryable.Expression\n  fullName: Table<TEntity>.System.Linq.IQueryable.Expression\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryable#Provider*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Linq.IQueryable.Provider\n  nameWithType: Table<TEntity>.System.Linq.IQueryable.Provider\n  fullName: Table<TEntity>.System.Linq.IQueryable.Provider\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Linq.IQueryProvider.CreateQuery\n  nameWithType: Table<TEntity>.System.Linq.IQueryProvider.CreateQuery\n  fullName: Table<TEntity>.System.Linq.IQueryProvider.CreateQuery\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Linq.IQueryProvider.CreateQuery<TResult>\n  nameWithType: Table<TEntity>.System.Linq.IQueryProvider.CreateQuery<TResult>\n  fullName: Table<TEntity>.System.Linq.IQueryProvider.CreateQuery<TResult>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Linq.IQueryProvider.Execute\n  nameWithType: Table<TEntity>.System.Linq.IQueryProvider.Execute\n  fullName: Table<TEntity>.System.Linq.IQueryProvider.Execute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1*\n  parent: System.Data.Linq.Table`1\n  isExternal: false\n  name: System.Linq.IQueryProvider.Execute<TResult>\n  nameWithType: Table<TEntity>.System.Linq.IQueryProvider.Execute<TResult>\n  fullName: Table<TEntity>.System.Linq.IQueryProvider.Execute<TResult>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Linq/Table`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableArray\n  isExternal: false\n  name: ToImmutableArray<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableList\n  isExternal: false\n  name: ToImmutableList<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(IEnumerable<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource,TSource,TSource>>)\n  nameWithType: Queryable.Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource,TSource,TSource>>)\n  fullName: Queryable.Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource,TSource,TSource>>)\n- uid: System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>)\n  nameWithType: Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>)\n  fullName: Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>)\n- uid: System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>, Expression<Func<TAccumulate,TResult>>)\n  nameWithType: Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>, Expression<Func<TAccumulate,TResult>>)\n  fullName: Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>, Expression<Func<TAccumulate,TResult>>)\n- uid: System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: All<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.All<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.All<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Any<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Any<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Any<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Any<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Append<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.Append<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.Append<TSource>(IQueryable<TSource>, TSource)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Decimal>)\n  nameWithType: Queryable.Average(IQueryable<Decimal>)\n  fullName: Queryable.Average(IQueryable<Decimal>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Double>)\n  nameWithType: Queryable.Average(IQueryable<Double>)\n  fullName: Queryable.Average(IQueryable<Double>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Int32>)\n  nameWithType: Queryable.Average(IQueryable<Int32>)\n  fullName: Queryable.Average(IQueryable<Int32>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Int64>)\n  nameWithType: Queryable.Average(IQueryable<Int64>)\n  fullName: Queryable.Average(IQueryable<Int64>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Decimal>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Decimal>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Decimal>>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Double>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Double>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Double>>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Int32>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Int32>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Int32>>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Int64>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Int64>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Int64>>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Single>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Single>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Single>>)\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Single>)\n  nameWithType: Queryable.Average(IQueryable<Single>)\n  fullName: Queryable.Average(IQueryable<Single>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n- uid: System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Cast<TResult>(IQueryable)\n  nameWithType: Queryable.Cast<TResult>(IQueryable)\n  fullName: Queryable.Cast<TResult>(IQueryable)\n- uid: System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Contains<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.Contains<TSource>(IQueryable<TSource>, TSource)\n- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Queryable.Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Count<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Count<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Count<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Count<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)\n  fullName: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Distinct<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Distinct<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ElementAt<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.ElementAt<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.ElementAt<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: First<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.First<TSource>(IQueryable<TSource>)\n  fullName: Queryable.First<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: First<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.First<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.First<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)\n  fullName: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>)\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>)\n  fullName: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>)\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>)\n- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)\n  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)\n  fullName: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)\n- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>)\n  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>)\n  fullName: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>)\n- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Last<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Last<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Last<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Last<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LastOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>)\n  fullName: Queryable.LastOrDefault<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LongCount<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>)\n  fullName: Queryable.LongCount<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Max<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Max<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Max<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Max<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  nameWithType: Queryable.Max<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  fullName: Queryable.Max<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n- uid: System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Min<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Min<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Min<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Min<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  nameWithType: Queryable.Min<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  fullName: Queryable.Min<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n- uid: System.Linq.Queryable.OfType``1(System.Linq.IQueryable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OfType<TResult>(IQueryable)\n  nameWithType: Queryable.OfType<TResult>(IQueryable)\n  fullName: Queryable.OfType<TResult>(IQueryable)\n- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n- uid: System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Prepend<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.Prepend<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.Prepend<TSource>(IQueryable<TSource>, TSource)\n- uid: System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Reverse<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Reverse<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Reverse<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  fullName: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,TResult>>)\n  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,TResult>>)\n  fullName: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,TResult>>)\n- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TResult>>>)\n  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TResult>>>)\n  fullName: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TResult>>>)\n- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TResult>>>)\n  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TResult>>>)\n  fullName: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TResult>>>)\n- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  fullName: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  fullName: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Single<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Single<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Single<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Single<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)\n  fullName: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Skip<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.Skip<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.Skip<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SkipLast<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.SkipLast<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.SkipLast<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  fullName: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Decimal>)\n  nameWithType: Queryable.Sum(IQueryable<Decimal>)\n  fullName: Queryable.Sum(IQueryable<Decimal>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Double>)\n  nameWithType: Queryable.Sum(IQueryable<Double>)\n  fullName: Queryable.Sum(IQueryable<Double>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Int32>)\n  nameWithType: Queryable.Sum(IQueryable<Int32>)\n  fullName: Queryable.Sum(IQueryable<Int32>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Int64>)\n  nameWithType: Queryable.Sum(IQueryable<Int64>)\n  fullName: Queryable.Sum(IQueryable<Int64>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Decimal>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Decimal>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Decimal>>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Double>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Double>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Double>>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Int32>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Int32>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Int32>>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Int64>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Int64>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Int64>>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Single>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Single>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Single>>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Single>)\n  nameWithType: Queryable.Sum(IQueryable<Single>)\n  fullName: Queryable.Sum(IQueryable<Single>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n- uid: System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Take<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.Take<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.Take<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: TakeLast<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.TakeLast<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.TakeLast<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  fullName: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  fullName: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n- uid: System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst,TSecond,TResult>>)\n  nameWithType: Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst,TSecond,TResult>>)\n  fullName: Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst,TSecond,TResult>>)\n- uid: System.Web.UI.WebControls.QueryExtensions.SortBy``1(System.Linq.IQueryable{``0},System.String)\n  parent: System.Web.UI.WebControls.QueryExtensions\n  isExternal: false\n  name: SortBy<T>(IQueryable<T>, String)\n  nameWithType: QueryExtensions.SortBy<T>(IQueryable<T>, String)\n  fullName: QueryExtensions.SortBy<T>(IQueryable<T>, String)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>)\n  fullName: Extensions.Attributes(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)\n  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)\n  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodesAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>)\n  fullName: Extensions.Elements<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: InDocumentOrder<T>(IEnumerable<T>)\n  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Nodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)\n  fullName: Extensions.Nodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove(IEnumerable<XAttribute>)\n  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)\n  fullName: Extensions.Remove(IEnumerable<XAttribute>)\n- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove<T>(IEnumerable<T>)\n  nameWithType: Extensions.Remove<T>(IEnumerable<T>)\n  fullName: Extensions.Remove<T>(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable{TEntity}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TEntity>\n  nameWithType: IEnumerable<TEntity>\n  fullName: System.Collections.Generic.IEnumerable<TEntity>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TEntity\n    name: TEntity\n    nameWithType: TEntity\n    fullName: TEntity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.IListSource\n  parent: System.ComponentModel\n  isExternal: false\n  name: IListSource\n  nameWithType: IListSource\n  fullName: System.ComponentModel.IListSource\n- uid: System.Data.Linq.ITable\n  parent: System.Data.Linq\n  isExternal: false\n  name: ITable\n  nameWithType: ITable\n  fullName: System.Data.Linq.ITable\n- uid: System.Linq.IQueryable{TEntity}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<TEntity>\n  nameWithType: IQueryable<TEntity>\n  fullName: System.Linq.IQueryable<TEntity>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TEntity\n    name: TEntity\n    nameWithType: TEntity\n    fullName: TEntity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n"}