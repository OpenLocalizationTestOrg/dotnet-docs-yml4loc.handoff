{"nodes":[{"content":"Implements a multiple-input, single-output compositor for two-dimensional (2-D) transformations in a shared coordinate space.","nodes":[{"pos":[0,125],"content":"Implements a multiple-input, single-output compositor for two-dimensional (2-D) transformations in a shared coordinate space.","nodes":[{"content":"Implements a multiple-input, single-output compositor for two-dimensional (2-D) transformations in a shared coordinate space.","pos":[0,125]}]}],"pos":[1682,1808],"yaml":true},{"content":"A <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> object treats a collection of manipulators as a composite object. Your application is then freed from the necessity of tracking and managing individual manipulators.  \n  \n A manipulation processor by itself does not cause an element to move. Your application begins a manipulation as necessary, and then receives information from a manipulation processor by listening to the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started>, <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta> and <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> events. The values received via these events enable you to change the location, size or orientation of an element as needed.  \n  \n You inform a manipulation processor which types of manipulations are allowed (translate, scale, rotate) by setting the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations%2A> property. You can then provide non-conditional logic to the transformation of the element that is being manipulated. For instance, instead of checking if rotation is enabled before changing the orientation of an element, you can unconditionally apply the rotation factor received from the manipulation processor; if rotation is not enabled, the manipulation processor will report that no rotational change has occurred.  \n  \n When an element that is being manipulated is released (all manipulators are removed), you can use inertia processing to simulate friction and cause the element to gradually slow its movements before coming to a stop. For more information see the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> class.","nodes":[{"pos":[0,233],"content":"A <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> object treats a collection of manipulators as a composite object. Your application is then freed from the necessity of tracking and managing individual manipulators.","nodes":[{"content":"A <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> object treats a collection of manipulators as a composite object. Your application is then freed from the necessity of tracking and managing individual manipulators.","pos":[0,233],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D&gt;</ph> object treats a collection of manipulators as a composite object.","pos":[0,133],"source":"A <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> object treats a collection of manipulators as a composite object."},{"content":"Your application is then freed from the necessity of tracking and managing individual manipulators.","pos":[134,233]}]}]},{"pos":[240,794],"content":"A manipulation processor by itself does not cause an element to move. Your application begins a manipulation as necessary, and then receives information from a manipulation processor by listening to the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started>, <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta> and <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> events. The values received via these events enable you to change the location, size or orientation of an element as needed.","nodes":[{"content":"A manipulation processor by itself does not cause an element to move. Your application begins a manipulation as necessary, and then receives information from a manipulation processor by listening to the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started>, <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta> and <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> events. The values received via these events enable you to change the location, size or orientation of an element as needed.","pos":[0,554],"nodes":[{"content":"A manipulation processor by itself does not cause an element to move.","pos":[0,69]},{"content":"Your application begins a manipulation as necessary, and then receives information from a manipulation processor by listening to the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed&gt;</ph> events.","pos":[70,437],"source":" Your application begins a manipulation as necessary, and then receives information from a manipulation processor by listening to the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started>, <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta> and <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> events."},{"content":"The values received via these events enable you to change the location, size or orientation of an element as needed.","pos":[438,554]}]}]},{"pos":[801,1431],"content":"You inform a manipulation processor which types of manipulations are allowed (translate, scale, rotate) by setting the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations%2A> property. You can then provide non-conditional logic to the transformation of the element that is being manipulated. For instance, instead of checking if rotation is enabled before changing the orientation of an element, you can unconditionally apply the rotation factor received from the manipulation processor; if rotation is not enabled, the manipulation processor will report that no rotational change has occurred.","nodes":[{"content":"You inform a manipulation processor which types of manipulations are allowed (translate, scale, rotate) by setting the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations%2A> property. You can then provide non-conditional logic to the transformation of the element that is being manipulated. For instance, instead of checking if rotation is enabled before changing the orientation of an element, you can unconditionally apply the rotation factor received from the manipulation processor; if rotation is not enabled, the manipulation processor will report that no rotational change has occurred.","pos":[0,630],"nodes":[{"content":"You inform a manipulation processor which types of manipulations are allowed (translate, scale, rotate) by setting the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations%2A&gt;</ph> property.","pos":[0,220],"source":"You inform a manipulation processor which types of manipulations are allowed (translate, scale, rotate) by setting the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations%2A> property."},{"content":"You can then provide non-conditional logic to the transformation of the element that is being manipulated.","pos":[221,327]},{"content":"For instance, instead of checking if rotation is enabled before changing the orientation of an element, you can unconditionally apply the rotation factor received from the manipulation processor; if rotation is not enabled, the manipulation processor will report that no rotational change has occurred.","pos":[328,630]}]}]},{"pos":[1438,1751],"content":"When an element that is being manipulated is released (all manipulators are removed), you can use inertia processing to simulate friction and cause the element to gradually slow its movements before coming to a stop. For more information see the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> class.","nodes":[{"content":"When an element that is being manipulated is released (all manipulators are removed), you can use inertia processing to simulate friction and cause the element to gradually slow its movements before coming to a stop. For more information see the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> class.","pos":[0,313],"nodes":[{"content":"When an element that is being manipulated is released (all manipulators are removed), you can use inertia processing to simulate friction and cause the element to gradually slow its movements before coming to a stop.","pos":[0,216]},{"content":"For more information see the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D&gt;</ph> class.","pos":[217,313],"source":" For more information see the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> class."}]}]}],"pos":[1819,3579],"yaml":true,"extradata":"MT"},{"content":"Creates a new <xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D\"></xref> object.","nodes":[{"pos":[0,101],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a new <xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D\"></xref> object."}],"pos":[5283,5385],"yaml":true},{"content":"The initial set of supported manipulations.","nodes":[{"pos":[0,43],"content":"The initial set of supported manipulations.","nodes":[{"content":"The initial set of supported manipulations.","pos":[0,43]}]}],"pos":[5647,5691],"yaml":true},{"content":"The <code>supportedManipulations</code> parameter is not a valid combination of the <xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"></xref> enumeration values.","nodes":[{"pos":[0,175],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">supportedManipulations</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid combination of the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"The <code>supportedManipulations</code> parameter is not a valid combination of the <xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"></xref> enumeration values."}],"pos":[5897,6073],"yaml":true},{"content":"Creates a new <xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D\"></xref> object.","nodes":[{"pos":[0,101],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a new <xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D\"></xref> object."}],"pos":[7601,7703],"yaml":true},{"content":"The initial set of supported manipulations.","nodes":[{"pos":[0,43],"content":"The initial set of supported manipulations.","nodes":[{"content":"The initial set of supported manipulations.","pos":[0,43]}]}],"pos":[8027,8071],"yaml":true},{"content":"Pivot information for single-manipulator rotations.","nodes":[{"pos":[0,51],"content":"Pivot information for single-manipulator rotations.","nodes":[{"content":"Pivot information for single-manipulator rotations.","pos":[0,51]}]}],"pos":[8173,8225],"yaml":true},{"content":"The <code>supportedManipulations</code> parameter is not a valid combination of the <xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"></xref> enumeration values.","nodes":[{"pos":[0,175],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">supportedManipulations</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid combination of the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"The <code>supportedManipulations</code> parameter is not a valid combination of the <xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"></xref> enumeration values."}],"pos":[8431,8607],"yaml":true},{"content":"Occurs when a manipulation has competed.","nodes":[{"pos":[0,40],"content":"Occurs when a manipulation has competed.","nodes":[{"content":"Occurs when a manipulation has competed.","pos":[0,40]}]}],"pos":[9662,9703],"yaml":true},{"content":"Forces the current manipulation to complete and raises the <xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed\"></xref> event.","nodes":[{"pos":[0,155],"content":"Forces the current manipulation to complete and raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed\"&gt;&lt;/xref&gt;</ph> event.","source":"Forces the current manipulation to complete and raises the <xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed\"></xref> event."}],"pos":[11169,11325],"yaml":true},{"content":"The timestamp to complete the manipulation, in 100-nanosecond ticks.","nodes":[{"pos":[0,68],"content":"The timestamp to complete the manipulation, in 100-nanosecond ticks.","nodes":[{"content":"The timestamp to complete the manipulation, in 100-nanosecond ticks.","pos":[0,68]}]}],"pos":[11479,11548],"yaml":true},{"content":"The timestamp is less than the previous timestamp for the current manipulation.","nodes":[{"pos":[0,79],"content":"The timestamp is less than the previous timestamp for the current manipulation.","nodes":[{"content":"The timestamp is less than the previous timestamp for the current manipulation.","pos":[0,79]}]}],"pos":[11769,11849],"yaml":true},{"content":"Occurs when the manipulation origin has changed or when translation, scaling, or rotation have occurred.","nodes":[{"pos":[0,104],"content":"Occurs when the manipulation origin has changed or when translation, scaling, or rotation have occurred.","nodes":[{"content":"Occurs when the manipulation origin has changed or when translation, scaling, or rotation have occurred.","pos":[0,104]}]}],"pos":[12880,12985],"yaml":true},{"content":"The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName> event and the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=fullName> event are the same type. Typically, you can use the same event handler for both events.","nodes":[{"pos":[0,294],"content":"The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName> event and the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=fullName> event are the same type. Typically, you can use the same event handler for both events.","nodes":[{"content":"The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName> event and the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=fullName> event are the same type. Typically, you can use the same event handler for both events.","pos":[0,294],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName&gt;</ph> event and the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=fullName&gt;</ph> event are the same type.","pos":[0,231],"source":"The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName> event and the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=fullName> event are the same type."},{"content":"Typically, you can use the same event handler for both events.","pos":[232,294]}]}]}],"pos":[12996,13291],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.","nodes":[{"pos":[0,121],"content":"Gets or sets the minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.","nodes":[{"content":"Gets or sets the minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.","pos":[0,121]}]}],"pos":[14939,15061],"yaml":true},{"content":"If a manipulator is extremely close to the center of mass of the manipulators currently being processed, a very small manipulator motion can become a very large change to rotation or scaling. To avoid this problem, set <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A> to something greater than zero. Any manipulator that is closer than that distance to the center of mass will not be included in rotation and scaling operations.  \n  \n A typical value to use should be based on the likely magnitude of \"accidental\" motions of the manipulators. For example, if the manipulator is a human finger touching a screen, a radius corresponding to a centimeter or so might be appropriate.  \n  \n The value for <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A> must be a finite, non-negative number.","nodes":[{"pos":[0,473],"content":"If a manipulator is extremely close to the center of mass of the manipulators currently being processed, a very small manipulator motion can become a very large change to rotation or scaling. To avoid this problem, set <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A> to something greater than zero. Any manipulator that is closer than that distance to the center of mass will not be included in rotation and scaling operations.","nodes":[{"content":"If a manipulator is extremely close to the center of mass of the manipulators currently being processed, a very small manipulator motion can become a very large change to rotation or scaling. To avoid this problem, set <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A> to something greater than zero. Any manipulator that is closer than that distance to the center of mass will not be included in rotation and scaling operations.","pos":[0,473],"nodes":[{"content":"If a manipulator is extremely close to the center of mass of the manipulators currently being processed, a very small manipulator motion can become a very large change to rotation or scaling.","pos":[0,191]},{"content":"To avoid this problem, set <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A&gt;</ph> to something greater than zero.","pos":[192,344],"source":" To avoid this problem, set <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A> to something greater than zero."},{"content":"Any manipulator that is closer than that distance to the center of mass will not be included in rotation and scaling operations.","pos":[345,473]}]}]},{"pos":[480,723],"content":"A typical value to use should be based on the likely magnitude of \"accidental\" motions of the manipulators. For example, if the manipulator is a human finger touching a screen, a radius corresponding to a centimeter or so might be appropriate.","nodes":[{"content":"A typical value to use should be based on the likely magnitude of \"accidental\" motions of the manipulators. For example, if the manipulator is a human finger touching a screen, a radius corresponding to a centimeter or so might be appropriate.","pos":[0,243],"nodes":[{"content":"A typical value to use should be based on the likely magnitude of \"accidental\" motions of the manipulators.","pos":[0,107]},{"content":"For example, if the manipulator is a human finger touching a screen, a radius corresponding to a centimeter or so might be appropriate.","pos":[108,243]}]}]},{"pos":[730,876],"content":"The value for <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A> must be a finite, non-negative number.","nodes":[{"content":"The value for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A&gt;</ph> must be a finite, non-negative number.","pos":[0,146],"source":"The value for <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A> must be a finite, non-negative number."}]}],"pos":[15072,15957],"yaml":true,"extradata":"MT"},{"content":"The minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.","nodes":[{"pos":[0,108],"content":"The minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.","nodes":[{"content":"The minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.","pos":[0,108]}]}],"pos":[16089,16198],"yaml":true},{"content":"Gets or sets the pivot information for the manipulation processor.","nodes":[{"pos":[0,66],"content":"Gets or sets the pivot information for the manipulation processor.","nodes":[{"content":"Gets or sets the pivot information for the manipulation processor.","pos":[0,66]}]}],"pos":[17346,17413],"yaml":true},{"content":"The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot%2A> property is used to provide pivot information for single-manipulator rotations. Setting this property to null disables single-manipulator rotations.","nodes":[{"pos":[0,227],"content":"The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot%2A> property is used to provide pivot information for single-manipulator rotations. Setting this property to null disables single-manipulator rotations.","nodes":[{"content":"The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot%2A> property is used to provide pivot information for single-manipulator rotations. Setting this property to null disables single-manipulator rotations.","pos":[0,227],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot%2A&gt;</ph> property is used to provide pivot information for single-manipulator rotations.","pos":[0,158],"source":"The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot%2A> property is used to provide pivot information for single-manipulator rotations."},{"content":"Setting this property to null disables single-manipulator rotations.","pos":[159,227]}]}]}],"pos":[17424,17652],"yaml":true,"extradata":"MT"},{"content":"The pivot information for the manipulation processor.","nodes":[{"pos":[0,53],"content":"The pivot information for the manipulation processor.","nodes":[{"content":"The pivot information for the manipulation processor.","pos":[0,53]}]}],"pos":[17855,17909],"yaml":true},{"content":"Processes the specified manipulators as a single batch action.","nodes":[{"pos":[0,62],"content":"Processes the specified manipulators as a single batch action.","nodes":[{"content":"Processes the specified manipulators as a single batch action.","pos":[0,62]}]}],"pos":[19534,19597],"yaml":true},{"content":"The parameter `manipulators` may be an empty list or null. If this results in the number of manipulators reaching zero, the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> event is raised.","nodes":[{"pos":[0,216],"content":"The parameter `manipulators` may be an empty list or null. If this results in the number of manipulators reaching zero, the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> event is raised.","nodes":[{"content":"The parameter <ph id=\"ph1\">`manipulators`</ph> may be an empty list or null.","pos":[0,58],"source":"The parameter `manipulators` may be an empty list or null."},{"content":"If this results in the number of manipulators reaching zero, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed&gt;</ph> event is raised.","pos":[59,216],"source":" If this results in the number of manipulators reaching zero, the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> event is raised."}]}],"pos":[19608,19825],"yaml":true,"extradata":"MT"},{"content":"The timestamp for the batch, in 100-nanosecond ticks.","nodes":[{"pos":[0,53],"content":"The timestamp for the batch, in 100-nanosecond ticks.","nodes":[{"content":"The timestamp for the batch, in 100-nanosecond ticks.","pos":[0,53]}]}],"pos":[20835,20889],"yaml":true},{"content":"The set of manipulators that are currently in scope.","nodes":[{"pos":[0,52],"content":"The set of manipulators that are currently in scope.","nodes":[{"content":"The set of manipulators that are currently in scope.","pos":[0,52]}]}],"pos":[21032,21085],"yaml":true},{"content":"The timestamp is less than the previous timestamp for the current manipulation.","nodes":[{"pos":[0,79],"content":"The timestamp is less than the previous timestamp for the current manipulation.","nodes":[{"content":"The timestamp is less than the previous timestamp for the current manipulation.","pos":[0,79]}]}],"pos":[21305,21385],"yaml":true},{"content":"Sets parameters on the manipulation processor.","nodes":[{"pos":[0,46],"content":"Sets parameters on the manipulation processor.","nodes":[{"content":"Sets parameters on the manipulation processor.","pos":[0,46]}]}],"pos":[22726,22773],"yaml":true},{"content":"Parameters to set.","nodes":[{"pos":[0,18],"content":"Parameters to set.","nodes":[{"content":"Parameters to set.","pos":[0,18]}]}],"pos":[23024,23043],"yaml":true},{"content":"Occurs when a new manipulation has started.","nodes":[{"pos":[0,43],"content":"Occurs when a new manipulation has started.","nodes":[{"content":"Occurs when a new manipulation has started.","pos":[0,43]}]}],"pos":[24206,24250],"yaml":true},{"content":"Gets or sets the current set of supported manipulations.","nodes":[{"pos":[0,56],"content":"Gets or sets the current set of supported manipulations.","nodes":[{"content":"Gets or sets the current set of supported manipulations.","pos":[0,56]}]}],"pos":[26283,26340],"yaml":true},{"content":"The current set of supported manipulations.","nodes":[{"pos":[0,43],"content":"The current set of supported manipulations.","nodes":[{"content":"The current set of supported manipulations.","pos":[0,43]}]}],"pos":[26552,26596],"yaml":true},{"content":"The property tries to set a value that is not a valid combination of the <xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"></xref>  \n  \n enumeration values.","nodes":[{"pos":[0,144],"content":"The property tries to set a value that is not a valid combination of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"&gt;&lt;/xref&gt;</ph>","source":"The property tries to set a value that is not a valid combination of the <xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"></xref>"},{"pos":[151,170],"content":"enumeration values.","nodes":[{"content":"enumeration values.","pos":[0,19]}]}],"pos":[26819,26996],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  commentId: T:System.Windows.Input.Manipulations.ManipulationProcessor2D\n  id: ManipulationProcessor2D\n  children:\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D)\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D,System.Windows.Input.Manipulations.ManipulationPivot2D)\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.CompleteManipulation(System.Int64)\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators(System.Int64,System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D})\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.SetParameters(System.Windows.Input.Manipulations.ManipulationParameters2D)\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.Started\n  - System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations\n  langs:\n  - csharp\n  name: ManipulationProcessor2D\n  nameWithType: ManipulationProcessor2D\n  fullName: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  type: Class\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Implements a multiple-input, single-output compositor for two-dimensional (2-D) transformations in a shared coordinate space.\n  remarks: \"A <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> object treats a collection of manipulators as a composite object. Your application is then freed from the necessity of tracking and managing individual manipulators.  \\n  \\n A manipulation processor by itself does not cause an element to move. Your application begins a manipulation as necessary, and then receives information from a manipulation processor by listening to the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started>, <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta> and <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> events. The values received via these events enable you to change the location, size or orientation of an element as needed.  \\n  \\n You inform a manipulation processor which types of manipulations are allowed (translate, scale, rotate) by setting the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations%2A> property. You can then provide non-conditional logic to the transformation of the element that is being manipulated. For instance, instead of checking if rotation is enabled before changing the orientation of an element, you can unconditionally apply the rotation factor received from the manipulation processor; if rotation is not enabled, the manipulation processor will report that no rotational change has occurred.  \\n  \\n When an element that is being manipulated is released (all manipulators are removed), you can use inertia processing to simulate friction and cause the element to gradually slow its movements before coming to a stop. For more information see the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> class.\"\n  syntax:\n    content: public class ManipulationProcessor2D\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D)\n  commentId: M:System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D)\n  id: '#ctor(System.Windows.Input.Manipulations.Manipulations2D)'\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: ManipulationProcessor2D(Manipulations2D)\n  nameWithType: ManipulationProcessor2D.ManipulationProcessor2D(Manipulations2D)\n  fullName: ManipulationProcessor2D.ManipulationProcessor2D(Manipulations2D)\n  type: Constructor\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Creates a new <xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D\"></xref> object.\n  syntax:\n    content: public ManipulationProcessor2D (System.Windows.Input.Manipulations.Manipulations2D supportedManipulations);\n    parameters:\n    - id: supportedManipulations\n      type: System.Windows.Input.Manipulations.Manipulations2D\n      description: The initial set of supported manipulations.\n  overload: System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>supportedManipulations</code> parameter is not a valid combination of the <xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"></xref> enumeration values.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D,System.Windows.Input.Manipulations.ManipulationPivot2D)\n  commentId: M:System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D,System.Windows.Input.Manipulations.ManipulationPivot2D)\n  id: '#ctor(System.Windows.Input.Manipulations.Manipulations2D,System.Windows.Input.Manipulations.ManipulationPivot2D)'\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: ManipulationProcessor2D(Manipulations2D, ManipulationPivot2D)\n  nameWithType: ManipulationProcessor2D.ManipulationProcessor2D(Manipulations2D, ManipulationPivot2D)\n  fullName: ManipulationProcessor2D.ManipulationProcessor2D(Manipulations2D, ManipulationPivot2D)\n  type: Constructor\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Creates a new <xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D\"></xref> object.\n  syntax:\n    content: public ManipulationProcessor2D (System.Windows.Input.Manipulations.Manipulations2D supportedManipulations, System.Windows.Input.Manipulations.ManipulationPivot2D pivot);\n    parameters:\n    - id: supportedManipulations\n      type: System.Windows.Input.Manipulations.Manipulations2D\n      description: The initial set of supported manipulations.\n    - id: pivot\n      type: System.Windows.Input.Manipulations.ManipulationPivot2D\n      description: Pivot information for single-manipulator rotations.\n  overload: System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>supportedManipulations</code> parameter is not a valid combination of the <xref href=\"System.Windows.Input.Manipulations.Manipulations2D\"></xref> enumeration values.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed\n  commentId: E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed\n  id: Completed\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: Completed\n  nameWithType: ManipulationProcessor2D.Completed\n  fullName: ManipulationProcessor2D.Completed\n  type: Event\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Occurs when a manipulation has competed.\n  syntax:\n    content: public event EventHandler<System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs> Completed;\n    return:\n      type: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.CompleteManipulation(System.Int64)\n  commentId: M:System.Windows.Input.Manipulations.ManipulationProcessor2D.CompleteManipulation(System.Int64)\n  id: CompleteManipulation(System.Int64)\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: CompleteManipulation(Int64)\n  nameWithType: ManipulationProcessor2D.CompleteManipulation(Int64)\n  fullName: ManipulationProcessor2D.CompleteManipulation(Int64)\n  type: Method\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Forces the current manipulation to complete and raises the <xref href=\"System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed\"></xref> event.\n  syntax:\n    content: public void CompleteManipulation (long timestamp);\n    parameters:\n    - id: timestamp\n      type: System.Int64\n      description: The timestamp to complete the manipulation, in 100-nanosecond ticks.\n  overload: System.Windows.Input.Manipulations.ManipulationProcessor2D.CompleteManipulation*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The timestamp is less than the previous timestamp for the current manipulation.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta\n  commentId: E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta\n  id: Delta\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: Delta\n  nameWithType: ManipulationProcessor2D.Delta\n  fullName: ManipulationProcessor2D.Delta\n  type: Event\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Occurs when the manipulation origin has changed or when translation, scaling, or rotation have occurred.\n  remarks: The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName> event and the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=fullName> event are the same type. Typically, you can use the same event handler for both events.\n  example:\n  - '[!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationOrInertiaDelta](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationorinertiadelta)]'\n  syntax:\n    content: public event EventHandler<System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs> Delta;\n    return:\n      type: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius\n  commentId: P:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius\n  id: MinimumScaleRotateRadius\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: MinimumScaleRotateRadius\n  nameWithType: ManipulationProcessor2D.MinimumScaleRotateRadius\n  fullName: ManipulationProcessor2D.MinimumScaleRotateRadius\n  type: Property\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Gets or sets the minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.\n  remarks: \"If a manipulator is extremely close to the center of mass of the manipulators currently being processed, a very small manipulator motion can become a very large change to rotation or scaling. To avoid this problem, set <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A> to something greater than zero. Any manipulator that is closer than that distance to the center of mass will not be included in rotation and scaling operations.  \\n  \\n A typical value to use should be based on the likely magnitude of \\\"accidental\\\" motions of the manipulators. For example, if the manipulator is a human finger touching a screen, a radius corresponding to a centimeter or so might be appropriate.  \\n  \\n The value for <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius%2A> must be a finite, non-negative number.\"\n  syntax:\n    content: public float MinimumScaleRotateRadius { get; set; }\n    return:\n      type: System.Single\n      description: The minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.\n  overload: System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot\n  commentId: P:System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot\n  id: Pivot\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: Pivot\n  nameWithType: ManipulationProcessor2D.Pivot\n  fullName: ManipulationProcessor2D.Pivot\n  type: Property\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Gets or sets the pivot information for the manipulation processor.\n  remarks: The <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot%2A> property is used to provide pivot information for single-manipulator rotations. Setting this property to null disables single-manipulator rotations.\n  syntax:\n    content: public System.Windows.Input.Manipulations.ManipulationPivot2D Pivot { get; set; }\n    return:\n      type: System.Windows.Input.Manipulations.ManipulationPivot2D\n      description: The pivot information for the manipulation processor.\n  overload: System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators(System.Int64,System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D})\n  commentId: M:System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators(System.Int64,System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D})\n  id: ProcessManipulators(System.Int64,System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D})\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: ProcessManipulators(Int64, IEnumerable<Manipulator2D>)\n  nameWithType: ManipulationProcessor2D.ProcessManipulators(Int64, IEnumerable<Manipulator2D>)\n  fullName: ManipulationProcessor2D.ProcessManipulators(Int64, IEnumerable<Manipulator2D>)\n  type: Method\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Processes the specified manipulators as a single batch action.\n  remarks: The parameter `manipulators` may be an empty list or null. If this results in the number of manipulators reaching zero, the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed> event is raised.\n  example:\n  - \"In the following example, the <xref:System.Windows.UIElement.OnLostMouseCapture%2A> method of a <xref:System.Windows.UIElement> object is overridden to call the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators%2A> method with the list of <xref:System.Windows.Input.Manipulations.Manipulator2D> objects set to null.  \\n  \\n [!code-csharp[ManipulationAPI#_ManipulationItem_OnLostMouseCapture](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onlostmousecapture)]  \\n  \\n [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]\"\n  syntax:\n    content: public void ProcessManipulators (long timestamp, System.Collections.Generic.IEnumerable<System.Windows.Input.Manipulations.Manipulator2D> manipulators);\n    parameters:\n    - id: timestamp\n      type: System.Int64\n      description: The timestamp for the batch, in 100-nanosecond ticks.\n    - id: manipulators\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D}\n      description: The set of manipulators that are currently in scope.\n  overload: System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The timestamp is less than the previous timestamp for the current manipulation.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.SetParameters(System.Windows.Input.Manipulations.ManipulationParameters2D)\n  commentId: M:System.Windows.Input.Manipulations.ManipulationProcessor2D.SetParameters(System.Windows.Input.Manipulations.ManipulationParameters2D)\n  id: SetParameters(System.Windows.Input.Manipulations.ManipulationParameters2D)\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: SetParameters(ManipulationParameters2D)\n  nameWithType: ManipulationProcessor2D.SetParameters(ManipulationParameters2D)\n  fullName: ManipulationProcessor2D.SetParameters(ManipulationParameters2D)\n  type: Method\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Sets parameters on the manipulation processor.\n  syntax:\n    content: public void SetParameters (System.Windows.Input.Manipulations.ManipulationParameters2D parameters);\n    parameters:\n    - id: parameters\n      type: System.Windows.Input.Manipulations.ManipulationParameters2D\n      description: Parameters to set.\n  overload: System.Windows.Input.Manipulations.ManipulationProcessor2D.SetParameters*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.Started\n  commentId: E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started\n  id: Started\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: Started\n  nameWithType: ManipulationProcessor2D.Started\n  fullName: ManipulationProcessor2D.Started\n  type: Event\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Occurs when a new manipulation has started.\n  remarks: ''\n  example:\n  - \"In the following example, an event handler for the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started> event checks to see if inertia processing is running and if so, stops it.  \\n  \\n [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  \\n  \\n [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs> Started;\n    return:\n      type: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations\n  commentId: P:System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations\n  id: SupportedManipulations\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  langs:\n  - csharp\n  name: SupportedManipulations\n  nameWithType: ManipulationProcessor2D.SupportedManipulations\n  fullName: ManipulationProcessor2D.SupportedManipulations\n  type: Property\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Gets or sets the current set of supported manipulations.\n  syntax:\n    content: public System.Windows.Input.Manipulations.Manipulations2D SupportedManipulations { get; set; }\n    return:\n      type: System.Windows.Input.Manipulations.Manipulations2D\n      description: The current set of supported manipulations.\n  overload: System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The property tries to set a value that is not a valid combination of the <xref href=\\\"System.Windows.Input.Manipulations.Manipulations2D\\\"></xref>  \\n  \\n enumeration values.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D)\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: ManipulationProcessor2D(Manipulations2D)\n  nameWithType: ManipulationProcessor2D.ManipulationProcessor2D(Manipulations2D)\n  fullName: ManipulationProcessor2D.ManipulationProcessor2D(Manipulations2D)\n- uid: System.Windows.Input.Manipulations.Manipulations2D\n  parent: System.Windows.Input.Manipulations\n  isExternal: false\n  name: Manipulations2D\n  nameWithType: Manipulations2D\n  fullName: System.Windows.Input.Manipulations.Manipulations2D\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D,System.Windows.Input.Manipulations.ManipulationPivot2D)\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: ManipulationProcessor2D(Manipulations2D, ManipulationPivot2D)\n  nameWithType: ManipulationProcessor2D.ManipulationProcessor2D(Manipulations2D, ManipulationPivot2D)\n  fullName: ManipulationProcessor2D.ManipulationProcessor2D(Manipulations2D, ManipulationPivot2D)\n- uid: System.Windows.Input.Manipulations.ManipulationPivot2D\n  parent: System.Windows.Input.Manipulations\n  isExternal: false\n  name: ManipulationPivot2D\n  nameWithType: ManipulationPivot2D\n  fullName: System.Windows.Input.Manipulations.ManipulationPivot2D\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: Completed\n  nameWithType: ManipulationProcessor2D.Completed\n  fullName: ManipulationProcessor2D.Completed\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs\n  name: Manipulation2DCompletedEventArgs\n  nameWithType: Manipulation2DCompletedEventArgs\n  fullName: System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs\n- uid: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<Manipulation2DCompletedEventArgs>\n  nameWithType: EventHandler<Manipulation2DCompletedEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs\n    name: Manipulation2DCompletedEventArgs\n    nameWithType: Manipulation2DCompletedEventArgs\n    fullName: System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.CompleteManipulation(System.Int64)\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: CompleteManipulation(Int64)\n  nameWithType: ManipulationProcessor2D.CompleteManipulation(Int64)\n  fullName: ManipulationProcessor2D.CompleteManipulation(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: Delta\n  nameWithType: ManipulationProcessor2D.Delta\n  fullName: ManipulationProcessor2D.Delta\n- uid: System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs\n  name: Manipulation2DDeltaEventArgs\n  nameWithType: Manipulation2DDeltaEventArgs\n  fullName: System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs\n- uid: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<Manipulation2DDeltaEventArgs>\n  nameWithType: EventHandler<Manipulation2DDeltaEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs\n    name: Manipulation2DDeltaEventArgs\n    nameWithType: Manipulation2DDeltaEventArgs\n    fullName: System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: MinimumScaleRotateRadius\n  nameWithType: ManipulationProcessor2D.MinimumScaleRotateRadius\n  fullName: ManipulationProcessor2D.MinimumScaleRotateRadius\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: Pivot\n  nameWithType: ManipulationProcessor2D.Pivot\n  fullName: ManipulationProcessor2D.Pivot\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators(System.Int64,System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D})\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: ProcessManipulators(Int64, IEnumerable<Manipulator2D>)\n  nameWithType: ManipulationProcessor2D.ProcessManipulators(Int64, IEnumerable<Manipulator2D>)\n  fullName: ManipulationProcessor2D.ProcessManipulators(Int64, IEnumerable<Manipulator2D>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Windows.Input.Manipulations.Manipulator2D\n  name: Manipulator2D\n  nameWithType: Manipulator2D\n  fullName: System.Windows.Input.Manipulations.Manipulator2D\n- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Manipulator2D>\n  nameWithType: IEnumerable<Manipulator2D>\n  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.Manipulations.Manipulator2D>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.Manipulations.Manipulator2D\n    name: Manipulator2D\n    nameWithType: Manipulator2D\n    fullName: System.Windows.Input.Manipulations.Manipulator2D\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.SetParameters(System.Windows.Input.Manipulations.ManipulationParameters2D)\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: SetParameters(ManipulationParameters2D)\n  nameWithType: ManipulationProcessor2D.SetParameters(ManipulationParameters2D)\n  fullName: ManipulationProcessor2D.SetParameters(ManipulationParameters2D)\n- uid: System.Windows.Input.Manipulations.ManipulationParameters2D\n  parent: System.Windows.Input.Manipulations\n  isExternal: false\n  name: ManipulationParameters2D\n  nameWithType: ManipulationParameters2D\n  fullName: System.Windows.Input.Manipulations.ManipulationParameters2D\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.Started\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: Started\n  nameWithType: ManipulationProcessor2D.Started\n  fullName: ManipulationProcessor2D.Started\n- uid: System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs\n  name: Manipulation2DStartedEventArgs\n  nameWithType: Manipulation2DStartedEventArgs\n  fullName: System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs\n- uid: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<Manipulation2DStartedEventArgs>\n  nameWithType: EventHandler<Manipulation2DStartedEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs\n    name: Manipulation2DStartedEventArgs\n    nameWithType: Manipulation2DStartedEventArgs\n    fullName: System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: SupportedManipulations\n  nameWithType: ManipulationProcessor2D.SupportedManipulations\n  fullName: ManipulationProcessor2D.SupportedManipulations\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor*\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: ManipulationProcessor2D\n  nameWithType: ManipulationProcessor2D.ManipulationProcessor2D\n  fullName: ManipulationProcessor2D.ManipulationProcessor2D\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.CompleteManipulation*\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: CompleteManipulation\n  nameWithType: ManipulationProcessor2D.CompleteManipulation\n  fullName: ManipulationProcessor2D.CompleteManipulation\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius*\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: MinimumScaleRotateRadius\n  nameWithType: ManipulationProcessor2D.MinimumScaleRotateRadius\n  fullName: ManipulationProcessor2D.MinimumScaleRotateRadius\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot*\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: Pivot\n  nameWithType: ManipulationProcessor2D.Pivot\n  fullName: ManipulationProcessor2D.Pivot\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators*\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: ProcessManipulators\n  nameWithType: ManipulationProcessor2D.ProcessManipulators\n  fullName: ManipulationProcessor2D.ProcessManipulators\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.SetParameters*\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: SetParameters\n  nameWithType: ManipulationProcessor2D.SetParameters\n  fullName: ManipulationProcessor2D.SetParameters\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n- uid: System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations*\n  parent: System.Windows.Input.Manipulations.ManipulationProcessor2D\n  isExternal: false\n  name: SupportedManipulations\n  nameWithType: ManipulationProcessor2D.SupportedManipulations\n  fullName: ManipulationProcessor2D.SupportedManipulations\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input.Manipulations/ManipulationProcessor2D.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}