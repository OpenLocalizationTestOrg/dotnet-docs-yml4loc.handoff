<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9de6dad343629f734f82de8bac1f0e867a72270d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Forms.IDataGridViewEditingControl.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8cda17cd0778b25811b64691517742a166ef9177</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e559a71ecc1d2e55599ca5be4e10606c8feb791d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines common functionality for controls that are hosted within cells of a <ph id="ph1">&lt;xref href="System.Windows.Forms.DataGridView"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This interface is implemented by controls, such as <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridViewComboBoxEditingControl&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridViewTextBoxEditingControl&gt;</ph>, that are hosted by corresponding <ph id="ph3">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> cells, such as <ph id="ph4">&lt;xref:System.Windows.Forms.DataGridViewComboBoxCell&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.DataGridViewTextBoxCell&gt;</ph>, when they are in edit mode.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cell types that can host editing controls set their <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt;</ph> property to a <ph id="ph2">&lt;xref:System.Type&gt;</ph> representing the editing control type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the cell enters edit mode, the following steps are performed:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control creates an instance of the editing control type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control calls the cell <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this method to transfer the cell value to the editing control.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control calls the editing control <ph id="ph2">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl%2A&gt;</ph> method and passes in the cell's current style.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can implement this method to initialize the appearance of the editing control so that it matches the appearance of the cell.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control calls the editing control <ph id="ph2">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can implement this method to make final adjustments to the editing control, such as selecting the control value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about implementing <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl&gt;</ph>, see <bpt id="p1">[</bpt>How to: Host Controls in Windows Forms DataGridView Cells<ept id="p1">](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cell types such as <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridViewCheckBoxCell&gt;</ph> that provide a user interface (UI) for specifying values without hosting an editing control implement the <ph id="ph2">&lt;xref:System.Windows.Forms.IDataGridViewEditingCell&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UI in this case is displayed regardless of whether the cell is in edit mode.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other cell types, such as <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridViewButtonCell&gt;</ph>, provide a UI but do not store user-specified values.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the cell type does not implement <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingCell&gt;</ph> or host an editing control.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Changes the control's user interface (UI) to be consistent with the specified cell style.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, an implementation of this method will set UI properties for the editing control, such as font, background color, and foreground color, to the values of corresponding properties in the <ph id="ph1">`dataGridViewCellStyle`</ph>, which is the style used for the cell hosting the control.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.DataGridViewCellStyle"&gt;&lt;/xref&gt;</ph> to use as the model for the UI.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Forms.DataGridView"&gt;&lt;/xref&gt;</ph> that contains the cell.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.DataGridView"&gt;&lt;/xref&gt;</ph> that contains the <ph id="ph2">&lt;xref href="System.Windows.Forms.DataGridViewCell"&gt;&lt;/xref&gt;</ph> that is being edited; <ph id="ph3">`null`</ph> if there is no associated <ph id="ph4">&lt;xref href="System.Windows.Forms.DataGridView"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets or sets the formatted value of the cell being modified by the editor.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatted value represents the value as it is displayed in the control's user interface.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatted value may be different in absolute value and even data type from the actual value contained in the control.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> that represents the formatted value of the cell.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets or sets the index of the hosting cell's parent row.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl&gt;</ph> interface does not define a corresponding <ph id="ph2">`ColumnIndex`</ph> property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView%2A&gt;</ph> property to retrieve the parent <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control and use the <ph id="ph3">&lt;xref:System.Windows.Forms.DataGridView.CurrentCellAddress%2A?displayProperty=fullName&gt;</ph> property to determine the row and column indexes of the active cell.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The index of the row that contains the cell, or –1 if there is no parent row.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the value of the editing control differs from the value of the hosting cell.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> to indicate that the hosting cell's state has changed and its user interface (UI) needs to be updated to reflect this change in value.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The owning cell or table will reset this property to <ph id="ph1">`false`</ph> after an update.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the value of the control differs from the cell value; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Determines whether the specified key is a regular input key that the editing control should process or a special key that the <ph id="ph1">&lt;xref href="System.Windows.Forms.DataGridView"&gt;&lt;/xref&gt;</ph> should process.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>An editing control implements this method to determine which input keys should be processed by the control, and which input keys should be processed by the <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A&gt;</ph> method is called by the <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> will pass in <ph id="ph2">`true`</ph> for <ph id="ph3">`dataGridViewWantsInputKey`</ph> when it can process the <ph id="ph4">`keyData`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the editing control can let the <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> handle the <ph id="ph2">`keyData`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A&gt;</ph> should return <ph id="ph4">`false`</ph> when <ph id="ph5">`dataGridViewWantsInputKey`</ph> is <ph id="ph6">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other implementations of <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A&gt;</ph> may ignore a <ph id="ph2">`dataGridViewWantsInputKey`</ph> value of <ph id="ph3">`true`</ph> and handle the <ph id="ph4">`keyData`</ph> in the editing control.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> that represents the key that was pressed.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> when the <ph id="ph2">&lt;xref href="System.Windows.Forms.DataGridView"&gt;&lt;/xref&gt;</ph> wants to process the <ph id="ph3">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph4">keyData</ph><ept id="p1">&lt;/code&gt;</ept>; otherwise, <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified key is a regular input key that should be handled by the editing control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets the cursor used when the mouse pointer is over the <ph id="ph1">&lt;xref href="System.Windows.Forms.DataGridView.EditingPanel"&gt;&lt;/xref&gt;</ph> but not over the editing control.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The editing panel is the <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph> that hosts the editing control when the <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control is in edit mode.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual editing control may not cover the entire area of the editing panel.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor%2A&gt;</ph> implementation should return the cursor to use when the mouse pointer is over the panel but not over the control.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you will want to return the same cursor that the control uses.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to change the cursor that appears when the pointer is over the control, you must set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set this in the constructor of the <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl&gt;</ph> implementation, or you can set it in the <ph id="ph2">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Cursor"&gt;&lt;/xref&gt;</ph> that represents the mouse pointer used for the editing panel.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Retrieves the formatted value of the cell.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatted value represents the value as it is displayed in the control's user interface.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatted value may be different in absolute value and even data type from the actual value contained in the control.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the formatted value of the control, use the <ph id="ph1">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A bitwise combination of <ph id="ph1">&lt;xref href="System.Windows.Forms.DataGridViewDataErrorContexts"&gt;&lt;/xref&gt;</ph> values that specifies the context in which the data is needed.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> that represents the formatted version of the cell contents.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Prepares the currently selected cell for editing.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is to prepare the control and its contents for editing.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might want to put the insertion point at the end of the contents, or change how the contents are aligned.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to select all of the cell's content; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the cell contents need to be repositioned whenever the value changes.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some situations require that cell contents reposition when the value changes.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, cell contents may need to reposition when a cell wraps text and the contents become larger.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the contents need to be repositioned; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>