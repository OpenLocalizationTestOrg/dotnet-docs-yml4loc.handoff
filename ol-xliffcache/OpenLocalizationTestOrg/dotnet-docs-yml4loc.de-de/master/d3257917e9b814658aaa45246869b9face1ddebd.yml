### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitHandleExtensions
  commentId: T:System.Threading.WaitHandleExtensions
  id: WaitHandleExtensions
  children:
  - System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  - System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  langs:
  - csharp
  name: WaitHandleExtensions
  nameWithType: WaitHandleExtensions
  fullName: System.Threading.WaitHandleExtensions
  type: Class
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading
  summary: Provides convenience methods to for working with a safe handle for a wait handle.
  remarks: The <xref:System.Threading.WaitHandleExtensions> class includes two extension methods that allow you to create a safe handle for a wait handle and to retrieve the native operating system handle from a safe handle.
  syntax:
    content: public static class WaitHandleExtensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  id: GetSafeWaitHandle(System.Threading.WaitHandle)
  parent: System.Threading.WaitHandleExtensions
  langs:
  - csharp
  name: GetSafeWaitHandle(WaitHandle)
  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)
  fullName: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading
  summary: Gets the safe handle for a native operating system wait handle.
  remarks: <xref:System.Threading.WaitHandleExtensions.GetSafeWaitHandle%2A> is an extension method that is equivalent to retrieving the value of the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static Microsoft.Win32.SafeHandles.SafeWaitHandle GetSafeWaitHandle (this System.Threading.WaitHandle waitHandle);
    parameters:
    - id: waitHandle
      type: System.Threading.WaitHandle
      description: A native operating system handle.
    return:
      type: Microsoft.Win32.SafeHandles.SafeWaitHandle
      description: The safe wait handle that wraps the native operating system wait handle.
  overload: System.Threading.WaitHandleExtensions.GetSafeWaitHandle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>waitHandle</code> is `null`.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  id: SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  parent: System.Threading.WaitHandleExtensions
  langs:
  - csharp
  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  fullName: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading
  summary: Sets a safe handle for a native operating system wait handle.
  remarks: <xref:System.Threading.WaitHandleExtensions.SetSafeWaitHandle%2A> is an extension method that is equivalent to assigning a value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static void SetSafeWaitHandle (this System.Threading.WaitHandle waitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle value);
    parameters:
    - id: waitHandle
      type: System.Threading.WaitHandle
      description: A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource.
    - id: value
      type: Microsoft.Win32.SafeHandles.SafeWaitHandle
      description: The safe handle to wrap the operating system handle.
  overload: System.Threading.WaitHandleExtensions.SetSafeWaitHandle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>waitHandle</code> is `null`.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  parent: System.Threading.WaitHandleExtensions
  isExternal: false
  name: GetSafeWaitHandle(WaitHandle)
  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)
  fullName: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)
- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeWaitHandle
  nameWithType: SafeWaitHandle
  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  parent: System.Threading.WaitHandleExtensions
  isExternal: false
  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  fullName: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle*
  parent: System.Threading.WaitHandleExtensions
  isExternal: false
  name: GetSafeWaitHandle
  nameWithType: WaitHandleExtensions.GetSafeWaitHandle
  fullName: WaitHandleExtensions.GetSafeWaitHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml
- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle*
  parent: System.Threading.WaitHandleExtensions
  isExternal: false
  name: SetSafeWaitHandle
  nameWithType: WaitHandleExtensions.SetSafeWaitHandle
  fullName: WaitHandleExtensions.SetSafeWaitHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
