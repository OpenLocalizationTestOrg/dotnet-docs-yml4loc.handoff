<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cc6b51b8a689f38bb7ee59a5b1c9e8af280c361</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Serialization.Json.JsonReaderWriterFactory.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26ab1f27db4ac56ca28d54130bcd552c801d3ad7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc52640b89818728fe2edade338b04383f962706</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Produces instances of <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of <ph id="ph2">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that can map an XML Infoset to JSON and write JSON-encoded data to a stream.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> processes JSON messages using a mapping between JSON data and the XML Infoset.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, this mapping is hidden from view.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in some advanced scenarios it may be necessary to manually convert between JSON and XML.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> class can be used to create the necessary XML readers and writers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that not every XML Infoset element can be mapped to JSON.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> mapping, see <bpt id="p1">[</bpt>How to: Serialize and Deserialize JSON Data<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload does not accept an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> buffer array from which to read.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReaderQuotas"&gt;&lt;/xref&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can process JavaScript Object Notation (JSON) data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload does not take an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> from which to read.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReaderQuotas"&gt;&lt;/xref&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload does not take an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> buffer array from which to read.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Starting position from which to read in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Number of bytes that can be read from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReaderQuotas"&gt;&lt;/xref&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> from which to read.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Text.Encoding"&gt;&lt;/xref&gt;</ph> that specifies the character encoding used by the reader.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`null`</ph> is specified as the value, the reader attempts to auto-detect the encoding.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReaderQuotas"&gt;&lt;/xref&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.OnXmlDictionaryReaderClose"&gt;&lt;/xref&gt;</ph> delegate to call when the reader is closed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> buffer array from which to read.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Starting position from which to read in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Number of bytes that can be read from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Text.Encoding"&gt;&lt;/xref&gt;</ph> that specifies the character encoding used by the reader.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`null`</ph> is specified as the value, the reader attempts to auto-detect the encoding.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReaderQuotas"&gt;&lt;/xref&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.OnXmlDictionaryReaderClose"&gt;&lt;/xref&gt;</ph> delegate to call when the reader is closed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to a stream.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default character encoding is UTF-8.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the writer is closed, the stream is closed as well.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The output <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> for the JSON writer.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to a stream with a specified character encoding.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the writer is closed, the stream is closed as well.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The output <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> for the JSON writer.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Text.Encoding"&gt;&lt;/xref&gt;</ph> that specifies the character encoding used by the writer.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The default encoding is UTF-8.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to a stream with a specified character encoding.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The output <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> for the JSON writer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Text.Encoding"&gt;&lt;/xref&gt;</ph> that specifies the character encoding used by the writer.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The default encoding is UTF-8.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to a stream with a specified character.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The output <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> for the JSON writer.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Text.Encoding"&gt;&lt;/xref&gt;</ph> that specifies the character encoding used by the writer.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default encoding is UTF-8.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the output uses multiline format, indenting each level properly; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to a stream with a specified character.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The output <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> for the JSON writer.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Text.Encoding"&gt;&lt;/xref&gt;</ph> that specifies the character encoding used by the writer.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The default encoding is UTF-8.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the output uses multiline format, indenting each level properly; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The string used to indent each level.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>