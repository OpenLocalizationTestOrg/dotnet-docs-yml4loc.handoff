{"nodes":[{"content":"Contains methods used for transaction management. This class cannot be inherited.","nodes":[{"pos":[0,81],"content":"Contains methods used for transaction management. This class cannot be inherited.","nodes":[{"content":"Contains methods used for transaction management. This class cannot be inherited.","pos":[0,81],"nodes":[{"content":"Contains methods used for transaction management.","pos":[0,49]},{"content":"This class cannot be inherited.","pos":[50,81]}]}]}],"pos":[896,978],"yaml":true},{"content":"This class contains static properties and methods used to obtain information about the default transaction options. It also contains several static methods used for recovery of a durable resource when the durable resource fails. No special action is required of a durable resource if the Microsoft Distributed Transaction Coordinator (MSDTC) fails.","nodes":[{"pos":[0,348],"content":"This class contains static properties and methods used to obtain information about the default transaction options. It also contains several static methods used for recovery of a durable resource when the durable resource fails. No special action is required of a durable resource if the Microsoft Distributed Transaction Coordinator (MSDTC) fails.","nodes":[{"content":"This class contains static properties and methods used to obtain information about the default transaction options. It also contains several static methods used for recovery of a durable resource when the durable resource fails. No special action is required of a durable resource if the Microsoft Distributed Transaction Coordinator (MSDTC) fails.","pos":[0,348],"nodes":[{"content":"This class contains static properties and methods used to obtain information about the default transaction options.","pos":[0,115]},{"content":"It also contains several static methods used for recovery of a durable resource when the durable resource fails.","pos":[116,228]},{"content":"No special action is required of a durable resource if the Microsoft Distributed Transaction Coordinator (MSDTC) fails.","pos":[229,348]}]}]}],"pos":[989,1338],"yaml":true,"extradata":"MT"},{"content":"Gets the default timeout interval for new transactions.","nodes":[{"pos":[0,55],"content":"Gets the default timeout interval for new transactions.","nodes":[{"content":"Gets the default timeout interval for new transactions.","pos":[0,55]}]}],"pos":[2921,2977],"yaml":true},{"content":"The timeout interval of a transaction is the time within which the transaction must be completed. If the transaction manager has not heard from all transaction participants within the timeout interval, it aborts the transaction.  \n  \n This value can be set in the `DefaultSettingsSection` of the config file.","nodes":[{"pos":[0,228],"content":"The timeout interval of a transaction is the time within which the transaction must be completed. If the transaction manager has not heard from all transaction participants within the timeout interval, it aborts the transaction.","nodes":[{"content":"The timeout interval of a transaction is the time within which the transaction must be completed. If the transaction manager has not heard from all transaction participants within the timeout interval, it aborts the transaction.","pos":[0,228],"nodes":[{"content":"The timeout interval of a transaction is the time within which the transaction must be completed.","pos":[0,97]},{"content":"If the transaction manager has not heard from all transaction participants within the timeout interval, it aborts the transaction.","pos":[98,228]}]}]},{"pos":[235,308],"content":"This value can be set in the <ph id=\"ph1\">`DefaultSettingsSection`</ph> of the config file.","source":"This value can be set in the `DefaultSettingsSection` of the config file."}],"pos":[2988,3301],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> value that specifies the timeout interval for new transactions.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> value that specifies the timeout interval for new transactions.","source":"A <xref href=\"System.TimeSpan\"></xref> value that specifies the timeout interval for new transactions."}],"pos":[3430,3533],"yaml":true},{"content":"Indicates that a distributed transaction has started.","nodes":[{"pos":[0,53],"content":"Indicates that a distributed transaction has started.","nodes":[{"content":"Indicates that a distributed transaction has started.","pos":[0,53]}]}],"pos":[4881,4935],"yaml":true},{"content":"**Caution** Signing up for this event degrades the performance of all distributed transactions. Local transactions are not monitored as performance is affected even more.  \n  \n **Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.","nodes":[{"pos":[0,170],"content":"**Caution** Signing up for this event degrades the performance of all distributed transactions. Local transactions are not monitored as performance is affected even more.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Caution<ept id=\"p1\">**</ept> Signing up for this event degrades the performance of all distributed transactions.","pos":[0,95],"source":"**Caution** Signing up for this event degrades the performance of all distributed transactions."},{"content":"Local transactions are not monitored as performance is affected even more.","pos":[96,170]}]},{"pos":[177,406],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method uses <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand&gt;</ph> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id=\"ph2\">`FullTrust`</ph> permission set.","source":"**Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."}],"pos":[4946,5357],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a custom transaction factory.","nodes":[{"pos":[0,42],"content":"Gets or sets a custom transaction factory.","nodes":[{"content":"Gets or sets a custom transaction factory.","pos":[0,42]}]}],"pos":[6803,6846],"yaml":true},{"content":"**Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.","nodes":[{"pos":[0,229],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method uses <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand&gt;</ph> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id=\"ph2\">`FullTrust`</ph> permission set.","source":"**Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."}],"pos":[6857,7089],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Transactions.HostCurrentTransactionCallback\"></xref> that contains a custom transaction factory.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Transactions.HostCurrentTransactionCallback\"&gt;&lt;/xref&gt;</ph> that contains a custom transaction factory.","source":"A <xref href=\"System.Transactions.HostCurrentTransactionCallback\"></xref> that contains a custom transaction factory."}],"pos":[7305,7423],"yaml":true},{"content":"Gets the default maximum timeout interval for new transactions.","nodes":[{"pos":[0,63],"content":"Gets the default maximum timeout interval for new transactions.","nodes":[{"content":"Gets the default maximum timeout interval for new transactions.","pos":[0,63]}]}],"pos":[8689,8753],"yaml":true},{"content":"For an explanation of the timeout interval, see the documentation for the <xref:System.Transactions.TransactionManager.DefaultTimeout%2A> property.  \n  \n This value can be set in the `MachineSettingsSection` of the config file.","nodes":[{"pos":[0,147],"content":"For an explanation of the timeout interval, see the documentation for the <xref:System.Transactions.TransactionManager.DefaultTimeout%2A> property.","nodes":[{"content":"For an explanation of the timeout interval, see the documentation for the <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionManager.DefaultTimeout%2A&gt;</ph> property.","pos":[0,147],"source":"For an explanation of the timeout interval, see the documentation for the <xref:System.Transactions.TransactionManager.DefaultTimeout%2A> property."}]},{"pos":[154,227],"content":"This value can be set in the <ph id=\"ph1\">`MachineSettingsSection`</ph> of the config file.","source":"This value can be set in the `MachineSettingsSection` of the config file."}],"pos":[8764,8996],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> value that specifies the maximum timeout interval that is allowed when creating new transactions.","nodes":[{"pos":[0,136],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> value that specifies the maximum timeout interval that is allowed when creating new transactions.","source":"A <xref href=\"System.TimeSpan\"></xref> value that specifies the maximum timeout interval that is allowed when creating new transactions."}],"pos":[9125,9262],"yaml":true},{"content":"Notifies the transaction manager that a resource manager recovering from failure has finished reenlisting in all unresolved transactions.","nodes":[{"pos":[0,137],"content":"Notifies the transaction manager that a resource manager recovering from failure has finished reenlisting in all unresolved transactions.","nodes":[{"content":"Notifies the transaction manager that a resource manager recovering from failure has finished reenlisting in all unresolved transactions.","pos":[0,137]}]}],"pos":[10590,10728],"yaml":true},{"content":"All durable resource managers should do recovery when they first start up by calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method for each outstanding transaction.  Only when all of the reenlistments are done should the resource manager call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A>.  \n  \n For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).  \n  \n **Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.","nodes":[{"pos":[0,332],"content":"All durable resource managers should do recovery when they first start up by calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method for each outstanding transaction.  Only when all of the reenlistments are done should the resource manager call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A>.","nodes":[{"content":"All durable resource managers should do recovery when they first start up by calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method for each outstanding transaction.  Only when all of the reenlistments are done should the resource manager call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A>.","pos":[0,332],"nodes":[{"content":"All durable resource managers should do recovery when they first start up by calling the <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionManager.Reenlist%2A&gt;</ph> method for each outstanding transaction.","pos":[0,187],"source":"All durable resource managers should do recovery when they first start up by calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method for each outstanding transaction."},{"content":"Only when all of the reenlistments are done should the resource manager call <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionManager.RecoveryComplete%2A&gt;</ph>.","pos":[189,332],"source":"  Only when all of the reenlistments are done should the resource manager call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A>."}]}]},{"pos":[339,469],"content":"For more information on recovery, see <bpt id=\"p1\">[</bpt>Performing Recovery<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)</ept>.","source":"For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)."},{"pos":[476,705],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method uses <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand&gt;</ph> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id=\"ph2\">`FullTrust`</ph> permission set.","source":"**Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."}],"pos":[10739,11451],"yaml":true,"extradata":"MT"},{"content":"The <code>manager</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">manager</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>manager</code> parameter is `null`."}],"pos":[11809,11855],"yaml":true},{"content":"Reenlists a durable participant in a transaction.","nodes":[{"pos":[0,49],"content":"Reenlists a durable participant in a transaction.","nodes":[{"content":"Reenlists a durable participant in a transaction.","pos":[0,49]}]}],"pos":[13324,13374],"yaml":true},{"content":"A resource manager facilitates resolution of durable enlistments in a transaction by reenlisting the transaction participant after resource failure.  \n  \n The `resourceManagerIdentifier` parameter is used to consistently label the participant of a transaction in the event of a resource failure.  When calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method, the resource manager must provide the same `resourceManagerIdentifier` as it used when it originally called the <xref:System.Transactions.Transaction.EnlistDurable%2A> method during enlistment, or a <xref:System.Transactions.TransactionException> is thrown.  \n  \n When a participant is reenlisted using this method, the phase 2 methods of <xref:System.Transactions.IEnlistmentNotification> that correspond to the transaction's outcome (that is, <xref:System.Transactions.IEnlistmentNotification.Commit%2A> , <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> or <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> ) are called as appropriate.  \n  \n After the participants are successfully reenlisted, you should then call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A> to complete the recovery.  \n  \n You should only call this method when a resource manager restarts from failure. In addition, you should only reenlist unresolved transactions logged by a resource manager during the initial Prepare phase of a two-phase commit. Any attempt to call this method at invalid times can produce erroneous results.  \n  \n If the transaction manager fails, and your resource manager performs recovery only a short time after you called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method on an enlistment in phase 1 of the Two-Phase Commit protocol, your resource manager might either receive the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> callback.  \n  \n For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).  \n  \n **Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.","nodes":[{"pos":[0,148],"content":"A resource manager facilitates resolution of durable enlistments in a transaction by reenlisting the transaction participant after resource failure.","nodes":[{"content":"A resource manager facilitates resolution of durable enlistments in a transaction by reenlisting the transaction participant after resource failure.","pos":[0,148]}]},{"pos":[155,637],"content":"The `resourceManagerIdentifier` parameter is used to consistently label the participant of a transaction in the event of a resource failure.  When calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method, the resource manager must provide the same `resourceManagerIdentifier` as it used when it originally called the <xref:System.Transactions.Transaction.EnlistDurable%2A> method during enlistment, or a <xref:System.Transactions.TransactionException> is thrown.","nodes":[{"content":"The <ph id=\"ph1\">`resourceManagerIdentifier`</ph> parameter is used to consistently label the participant of a transaction in the event of a resource failure.","pos":[0,140],"source":"The `resourceManagerIdentifier` parameter is used to consistently label the participant of a transaction in the event of a resource failure."},{"content":"When calling the <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionManager.Reenlist%2A&gt;</ph> method, the resource manager must provide the same <ph id=\"ph2\">`resourceManagerIdentifier`</ph> as it used when it originally called the <ph id=\"ph3\">&lt;xref:System.Transactions.Transaction.EnlistDurable%2A&gt;</ph> method during enlistment, or a <ph id=\"ph4\">&lt;xref:System.Transactions.TransactionException&gt;</ph> is thrown.","pos":[142,482],"source":"  When calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method, the resource manager must provide the same `resourceManagerIdentifier` as it used when it originally called the <xref:System.Transactions.Transaction.EnlistDurable%2A> method during enlistment, or a <xref:System.Transactions.TransactionException> is thrown."}]},{"pos":[644,1044],"content":"When a participant is reenlisted using this method, the phase 2 methods of <xref:System.Transactions.IEnlistmentNotification> that correspond to the transaction's outcome (that is, <xref:System.Transactions.IEnlistmentNotification.Commit%2A> , <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> or <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> ) are called as appropriate.","nodes":[{"content":"When a participant is reenlisted using this method, the phase 2 methods of <ph id=\"ph1\">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> that correspond to the transaction's outcome (that is, <ph id=\"ph2\">&lt;xref:System.Transactions.IEnlistmentNotification.Commit%2A&gt;</ph> , <ph id=\"ph3\">&lt;xref:System.Transactions.IEnlistmentNotification.Rollback%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Transactions.IEnlistmentNotification.InDoubt%2A&gt;</ph> ) are called as appropriate.","pos":[0,400],"source":"When a participant is reenlisted using this method, the phase 2 methods of <xref:System.Transactions.IEnlistmentNotification> that correspond to the transaction's outcome (that is, <xref:System.Transactions.IEnlistmentNotification.Commit%2A> , <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> or <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> ) are called as appropriate."}]},{"pos":[1051,1215],"content":"After the participants are successfully reenlisted, you should then call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A> to complete the recovery.","nodes":[{"content":"After the participants are successfully reenlisted, you should then call <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionManager.RecoveryComplete%2A&gt;</ph> to complete the recovery.","pos":[0,164],"source":"After the participants are successfully reenlisted, you should then call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A> to complete the recovery."}]},{"pos":[1222,1528],"content":"You should only call this method when a resource manager restarts from failure. In addition, you should only reenlist unresolved transactions logged by a resource manager during the initial Prepare phase of a two-phase commit. Any attempt to call this method at invalid times can produce erroneous results.","nodes":[{"content":"You should only call this method when a resource manager restarts from failure. In addition, you should only reenlist unresolved transactions logged by a resource manager during the initial Prepare phase of a two-phase commit. Any attempt to call this method at invalid times can produce erroneous results.","pos":[0,306],"nodes":[{"content":"You should only call this method when a resource manager restarts from failure.","pos":[0,79]},{"content":"In addition, you should only reenlist unresolved transactions logged by a resource manager during the initial Prepare phase of a two-phase commit.","pos":[80,226]},{"content":"Any attempt to call this method at invalid times can produce erroneous results.","pos":[227,306]}]}]},{"pos":[1535,1964],"content":"If the transaction manager fails, and your resource manager performs recovery only a short time after you called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method on an enlistment in phase 1 of the Two-Phase Commit protocol, your resource manager might either receive the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> callback.","nodes":[{"content":"If the transaction manager fails, and your resource manager performs recovery only a short time after you called the <ph id=\"ph1\">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> method on an enlistment in phase 1 of the Two-Phase Commit protocol, your resource manager might either receive the <ph id=\"ph2\">&lt;xref:System.Transactions.IEnlistmentNotification.InDoubt%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Transactions.IEnlistmentNotification.Rollback%2A&gt;</ph> callback.","pos":[0,429],"source":"If the transaction manager fails, and your resource manager performs recovery only a short time after you called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method on an enlistment in phase 1 of the Two-Phase Commit protocol, your resource manager might either receive the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> callback."}]},{"pos":[1971,2101],"content":"For more information on recovery, see <bpt id=\"p1\">[</bpt>Performing Recovery<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)</ept>.","source":"For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)."},{"pos":[2108,2337],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method uses <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand&gt;</ph> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id=\"ph2\">`FullTrust`</ph> permission set.","source":"**Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."}],"pos":[13385,15739],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Transactions.Enlistment\"></xref> that describes the enlistment.","nodes":[{"pos":[0,85],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Transactions.Enlistment\"&gt;&lt;/xref&gt;</ph> that describes the enlistment.","source":"An <xref href=\"System.Transactions.Enlistment\"></xref> that describes the enlistment."}],"pos":[16272,16358],"yaml":true},{"content":"<code>recoveryInformation</code> is invalid.  \n  \n -or-  \n  \n Transaction Manager information in <code>recoveryInformation</code> does not match the configured transaction manager.  \n  \n -or-  \n  \n <code>RecoveryInformation</code> is not recognized by <xref href=\"System.Transactions\"></xref>.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;recoveryInformation&lt;/code&gt;</ph> is invalid.","source":"<code>recoveryInformation</code> is invalid."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,180],"content":"Transaction Manager information in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">recoveryInformation</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the configured transaction manager.","source":"Transaction Manager information in <code>recoveryInformation</code> does not match the configured transaction manager."},{"pos":[187,191],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[198,293],"content":"<ph id=\"ph1\">&lt;code&gt;RecoveryInformation&lt;/code&gt;</ph> is not recognized by <ph id=\"ph2\">&lt;xref href=\"System.Transactions\"&gt;&lt;/xref&gt;</ph>.","source":"<code>RecoveryInformation</code> is not recognized by <xref href=\"System.Transactions\"></xref>."}],"pos":[16527,16833],"yaml":true},{"content":"<xref href=\"System.Transactions.TransactionManager.RecoveryComplete(System.Guid)\"></xref> has already been called for the specified <code>resourceManagerIdentifier</code>. The reenlistment is rejected.","nodes":[{"pos":[0,201],"content":"<xref href=\"System.Transactions.TransactionManager.RecoveryComplete(System.Guid)\"></xref> has already been called for the specified <code>resourceManagerIdentifier</code>. The reenlistment is rejected.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Transactions.TransactionManager.RecoveryComplete(System.Guid)\"&gt;&lt;/xref&gt;</ph> has already been called for the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">resourceManagerIdentifier</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,171],"source":"<xref href=\"System.Transactions.TransactionManager.RecoveryComplete(System.Guid)\"></xref> has already been called for the specified <code>resourceManagerIdentifier</code>."},{"content":"The reenlistment is rejected.","pos":[172,201]}]}],"pos":[16943,17145],"yaml":true},{"content":"The <code>resourceManagerIdentifier</code> does not match the content of the specified recovery information in <code>recoveryInformation</code>.","nodes":[{"pos":[0,144],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resourceManagerIdentifier</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the content of the specified recovery information in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">recoveryInformation</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <code>resourceManagerIdentifier</code> does not match the content of the specified recovery information in <code>recoveryInformation</code>."}],"pos":[17271,17416],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.TransactionManager\n  commentId: T:System.Transactions.TransactionManager\n  id: TransactionManager\n  children:\n  - System.Transactions.TransactionManager.DefaultTimeout\n  - System.Transactions.TransactionManager.DistributedTransactionStarted\n  - System.Transactions.TransactionManager.HostCurrentCallback\n  - System.Transactions.TransactionManager.MaximumTimeout\n  - System.Transactions.TransactionManager.RecoveryComplete(System.Guid)\n  - System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)\n  langs:\n  - csharp\n  name: TransactionManager\n  nameWithType: TransactionManager\n  fullName: System.Transactions.TransactionManager\n  type: Class\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Contains methods used for transaction management. This class cannot be inherited.\n  remarks: This class contains static properties and methods used to obtain information about the default transaction options. It also contains several static methods used for recovery of a durable resource when the durable resource fails. No special action is required of a durable resource if the Microsoft Distributed Transaction Coordinator (MSDTC) fails.\n  syntax:\n    content: public static class TransactionManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.TransactionManager.DefaultTimeout\n  commentId: P:System.Transactions.TransactionManager.DefaultTimeout\n  id: DefaultTimeout\n  parent: System.Transactions.TransactionManager\n  langs:\n  - csharp\n  name: DefaultTimeout\n  nameWithType: TransactionManager.DefaultTimeout\n  fullName: TransactionManager.DefaultTimeout\n  type: Property\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Gets the default timeout interval for new transactions.\n  remarks: \"The timeout interval of a transaction is the time within which the transaction must be completed. If the transaction manager has not heard from all transaction participants within the timeout interval, it aborts the transaction.  \\n  \\n This value can be set in the `DefaultSettingsSection` of the config file.\"\n  syntax:\n    content: public static TimeSpan DefaultTimeout { get; }\n    return:\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> value that specifies the timeout interval for new transactions.\n  overload: System.Transactions.TransactionManager.DefaultTimeout*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.TransactionManager.DistributedTransactionStarted\n  commentId: E:System.Transactions.TransactionManager.DistributedTransactionStarted\n  id: DistributedTransactionStarted\n  parent: System.Transactions.TransactionManager\n  langs:\n  - csharp\n  name: DistributedTransactionStarted\n  nameWithType: TransactionManager.DistributedTransactionStarted\n  fullName: TransactionManager.DistributedTransactionStarted\n  type: Event\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Indicates that a distributed transaction has started.\n  remarks: \"**Caution** Signing up for this event degrades the performance of all distributed transactions. Local transactions are not monitored as performance is affected even more.  \\n  \\n **Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.\"\n  syntax:\n    content: public static event System.Transactions.TransactionStartedEventHandler DistributedTransactionStarted;\n    return:\n      type: System.Transactions.TransactionStartedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.TransactionManager.HostCurrentCallback\n  commentId: P:System.Transactions.TransactionManager.HostCurrentCallback\n  id: HostCurrentCallback\n  parent: System.Transactions.TransactionManager\n  langs:\n  - csharp\n  name: HostCurrentCallback\n  nameWithType: TransactionManager.HostCurrentCallback\n  fullName: TransactionManager.HostCurrentCallback\n  type: Property\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Gets or sets a custom transaction factory.\n  remarks: '**Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.'\n  syntax:\n    content: public static System.Transactions.HostCurrentTransactionCallback HostCurrentCallback { get; set; }\n    return:\n      type: System.Transactions.HostCurrentTransactionCallback\n      description: A <xref href=\"System.Transactions.HostCurrentTransactionCallback\"></xref> that contains a custom transaction factory.\n  overload: System.Transactions.TransactionManager.HostCurrentCallback*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.TransactionManager.MaximumTimeout\n  commentId: P:System.Transactions.TransactionManager.MaximumTimeout\n  id: MaximumTimeout\n  parent: System.Transactions.TransactionManager\n  langs:\n  - csharp\n  name: MaximumTimeout\n  nameWithType: TransactionManager.MaximumTimeout\n  fullName: TransactionManager.MaximumTimeout\n  type: Property\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Gets the default maximum timeout interval for new transactions.\n  remarks: \"For an explanation of the timeout interval, see the documentation for the <xref:System.Transactions.TransactionManager.DefaultTimeout%2A> property.  \\n  \\n This value can be set in the `MachineSettingsSection` of the config file.\"\n  syntax:\n    content: public static TimeSpan MaximumTimeout { get; }\n    return:\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> value that specifies the maximum timeout interval that is allowed when creating new transactions.\n  overload: System.Transactions.TransactionManager.MaximumTimeout*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)\n  commentId: M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)\n  id: RecoveryComplete(System.Guid)\n  parent: System.Transactions.TransactionManager\n  langs:\n  - csharp\n  name: RecoveryComplete(Guid)\n  nameWithType: TransactionManager.RecoveryComplete(Guid)\n  fullName: TransactionManager.RecoveryComplete(Guid)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Notifies the transaction manager that a resource manager recovering from failure has finished reenlisting in all unresolved transactions.\n  remarks: \"All durable resource managers should do recovery when they first start up by calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method for each outstanding transaction.  Only when all of the reenlistments are done should the resource manager call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A>.  \\n  \\n For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).  \\n  \\n **Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.\"\n  syntax:\n    content: public static void RecoveryComplete (Guid manager);\n    parameters:\n    - id: resourceManagerIdentifier\n      type: System.Guid\n      description: ''\n  overload: System.Transactions.TransactionManager.RecoveryComplete*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>manager</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)\n  commentId: M:System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)\n  id: Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)\n  parent: System.Transactions.TransactionManager\n  langs:\n  - csharp\n  name: Reenlist(Guid, Byte[], IEnlistmentNotification)\n  nameWithType: TransactionManager.Reenlist(Guid, Byte[], IEnlistmentNotification)\n  fullName: TransactionManager.Reenlist(Guid, Byte[], IEnlistmentNotification)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Reenlists a durable participant in a transaction.\n  remarks: \"A resource manager facilitates resolution of durable enlistments in a transaction by reenlisting the transaction participant after resource failure.  \\n  \\n The `resourceManagerIdentifier` parameter is used to consistently label the participant of a transaction in the event of a resource failure.  When calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method, the resource manager must provide the same `resourceManagerIdentifier` as it used when it originally called the <xref:System.Transactions.Transaction.EnlistDurable%2A> method during enlistment, or a <xref:System.Transactions.TransactionException> is thrown.  \\n  \\n When a participant is reenlisted using this method, the phase 2 methods of <xref:System.Transactions.IEnlistmentNotification> that correspond to the transaction's outcome (that is, <xref:System.Transactions.IEnlistmentNotification.Commit%2A> , <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> or <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> ) are called as appropriate.  \\n  \\n After the participants are successfully reenlisted, you should then call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A> to complete the recovery.  \\n  \\n You should only call this method when a resource manager restarts from failure. In addition, you should only reenlist unresolved transactions logged by a resource manager during the initial Prepare phase of a two-phase commit. Any attempt to call this method at invalid times can produce erroneous results.  \\n  \\n If the transaction manager fails, and your resource manager performs recovery only a short time after you called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method on an enlistment in phase 1 of the Two-Phase Commit protocol, your resource manager might either receive the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> callback.  \\n  \\n For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).  \\n  \\n **Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.\"\n  syntax:\n    content: public static System.Transactions.Enlistment Reenlist (Guid manager, byte[] recoveryInfo, System.Transactions.IEnlistmentNotification notification);\n    parameters:\n    - id: resourceManagerIdentifier\n      type: System.Guid\n      description: ''\n    - id: recoveryInformation\n      type: System.Byte[]\n      description: ''\n    - id: enlistmentNotification\n      type: System.Transactions.IEnlistmentNotification\n      description: ''\n    return:\n      type: System.Transactions.Enlistment\n      description: An <xref href=\"System.Transactions.Enlistment\"></xref> that describes the enlistment.\n  overload: System.Transactions.TransactionManager.Reenlist*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>recoveryInformation</code> is invalid.  \\n  \\n -or-  \\n  \\n Transaction Manager information in <code>recoveryInformation</code> does not match the configured transaction manager.  \\n  \\n -or-  \\n  \\n <code>RecoveryInformation</code> is not recognized by <xref href=\\\"System.Transactions\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Transactions.TransactionManager.RecoveryComplete(System.Guid)\"></xref> has already been called for the specified <code>resourceManagerIdentifier</code>. The reenlistment is rejected.\n  - type: System.Transactions.TransactionException\n    commentId: T:System.Transactions.TransactionException\n    description: The <code>resourceManagerIdentifier</code> does not match the content of the specified recovery information in <code>recoveryInformation</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Transactions.TransactionException\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionException\n  nameWithType: TransactionException\n  fullName: System.Transactions.TransactionException\n- uid: System.Transactions.TransactionManager.DefaultTimeout\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: DefaultTimeout\n  nameWithType: TransactionManager.DefaultTimeout\n  fullName: TransactionManager.DefaultTimeout\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Transactions.TransactionManager.DistributedTransactionStarted\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: DistributedTransactionStarted\n  nameWithType: TransactionManager.DistributedTransactionStarted\n  fullName: TransactionManager.DistributedTransactionStarted\n- uid: System.Transactions.TransactionStartedEventHandler\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionStartedEventHandler\n  nameWithType: TransactionStartedEventHandler\n  fullName: System.Transactions.TransactionStartedEventHandler\n- uid: System.Transactions.TransactionManager.HostCurrentCallback\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: HostCurrentCallback\n  nameWithType: TransactionManager.HostCurrentCallback\n  fullName: TransactionManager.HostCurrentCallback\n- uid: System.Transactions.HostCurrentTransactionCallback\n  parent: System.Transactions\n  isExternal: false\n  name: HostCurrentTransactionCallback\n  nameWithType: HostCurrentTransactionCallback\n  fullName: System.Transactions.HostCurrentTransactionCallback\n- uid: System.Transactions.TransactionManager.MaximumTimeout\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: MaximumTimeout\n  nameWithType: TransactionManager.MaximumTimeout\n  fullName: TransactionManager.MaximumTimeout\n- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: RecoveryComplete(Guid)\n  nameWithType: TransactionManager.RecoveryComplete(Guid)\n  fullName: TransactionManager.RecoveryComplete(Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: Reenlist(Guid, Byte[], IEnlistmentNotification)\n  nameWithType: TransactionManager.Reenlist(Guid, Byte[], IEnlistmentNotification)\n  fullName: TransactionManager.Reenlist(Guid, Byte[], IEnlistmentNotification)\n- uid: System.Transactions.Enlistment\n  parent: System.Transactions\n  isExternal: false\n  name: Enlistment\n  nameWithType: Enlistment\n  fullName: System.Transactions.Enlistment\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Transactions.IEnlistmentNotification\n  parent: System.Transactions\n  isExternal: false\n  name: IEnlistmentNotification\n  nameWithType: IEnlistmentNotification\n  fullName: System.Transactions.IEnlistmentNotification\n- uid: System.Transactions.TransactionManager.DefaultTimeout*\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: DefaultTimeout\n  nameWithType: TransactionManager.DefaultTimeout\n  fullName: TransactionManager.DefaultTimeout\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n- uid: System.Transactions.TransactionManager.HostCurrentCallback*\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: HostCurrentCallback\n  nameWithType: TransactionManager.HostCurrentCallback\n  fullName: TransactionManager.HostCurrentCallback\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n- uid: System.Transactions.TransactionManager.MaximumTimeout*\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: MaximumTimeout\n  nameWithType: TransactionManager.MaximumTimeout\n  fullName: TransactionManager.MaximumTimeout\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n- uid: System.Transactions.TransactionManager.RecoveryComplete*\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: RecoveryComplete\n  nameWithType: TransactionManager.RecoveryComplete\n  fullName: TransactionManager.RecoveryComplete\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n- uid: System.Transactions.TransactionManager.Reenlist*\n  parent: System.Transactions.TransactionManager\n  isExternal: false\n  name: Reenlist\n  nameWithType: TransactionManager.Reenlist\n  fullName: TransactionManager.Reenlist\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/TransactionManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}