### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Framework.ICancelableTask
  commentId: T:Microsoft.Build.Framework.ICancelableTask
  id: ICancelableTask
  children:
  - Microsoft.Build.Framework.ICancelableTask.Cancel
  langs:
  - csharp
  name: ICancelableTask
  nameWithType: ICancelableTask
  fullName: Microsoft.Build.Framework.ICancelableTask
  type: Interface
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: Interface for tasks which can be cancelled.
  syntax:
    content: 'public interface ICancelableTask : Microsoft.Build.Framework.ITask'
  derivedClasses:
  - Microsoft.Build.Tasks.Copy
  - Microsoft.Build.Tasks.Delete
  - Microsoft.Build.Tasks.Move
  - Microsoft.Build.Utilities.ToolTask
  implements:
  - Microsoft.Build.Framework.ITask
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Build.Framework/ICancelableTask.xml
  ms.author: susanno
  manager: douge
- uid: Microsoft.Build.Framework.ICancelableTask.Cancel
  commentId: M:Microsoft.Build.Framework.ICancelableTask.Cancel
  id: Cancel
  parent: Microsoft.Build.Framework.ICancelableTask
  langs:
  - csharp
  name: Cancel()
  nameWithType: ICancelableTask.Cancel()
  fullName: ICancelableTask.Cancel()
  type: Method
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: Instructs the task to exit as soon as possible, or to immediately exit if Execute is invoked after this method.
  remarks: "Cancel() may be called at any time after the task has been instantiated, even before <xref:Microsoft.Build.Framework.ITask.Execute%2A> is called.  \n  \n Cancel calls may come in from any thread. The implementation of this method should not block indefinitely.  \n  \n To cancel the build, both `Cancel` and `Execute` must return in any order."
  syntax:
    content: public void Cancel ();
    parameters: []
  overload: Microsoft.Build.Framework.ICancelableTask.Cancel*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Build.Framework/ICancelableTask.xml
  ms.author: susanno
  manager: douge
references:
- uid: Microsoft.Build.Framework.ICancelableTask.Cancel
  parent: Microsoft.Build.Framework.ICancelableTask
  isExternal: false
  name: Cancel()
  nameWithType: ICancelableTask.Cancel()
  fullName: ICancelableTask.Cancel()
- uid: Microsoft.Build.Framework.ICancelableTask.Cancel*
  parent: Microsoft.Build.Framework.ICancelableTask
  isExternal: false
  name: Cancel
  nameWithType: ICancelableTask.Cancel
  fullName: ICancelableTask.Cancel
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Build.Framework/ICancelableTask.xml
- uid: Microsoft.Build.Framework.ITask
  parent: Microsoft.Build.Framework
  isExternal: false
  name: ITask
  nameWithType: ITask
  fullName: Microsoft.Build.Framework.ITask
