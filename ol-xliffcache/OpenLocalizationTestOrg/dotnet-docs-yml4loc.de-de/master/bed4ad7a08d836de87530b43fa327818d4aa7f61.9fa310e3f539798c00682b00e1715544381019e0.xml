{"nodes":[{"content":"Provides an interface for defining an alternate application settings provider.","nodes":[{"pos":[0,78],"content":"Provides an interface for defining an alternate application settings provider.","nodes":[{"content":"Provides an interface for defining an alternate application settings provider.","pos":[0,78]}]}],"pos":[588,667],"yaml":true},{"content":"The <xref:System.Configuration.IPersistComponentSettings> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application. However, in some cases, the application or environment may need to override the settings provider natively used by a component with one of its own choosing. The <xref:System.Configuration.ISettingsProviderService> interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <xref:System.ComponentModel.Container>.  \n  \n <xref:System.Configuration.ISettingsProviderService> is commonly used by design-time tools and debuggers that provide special support for application settings. To make such an arrangement function seamlessly, the <xref:System.Configuration.ApplicationSettingsBase> class contains constructors that take a reference to the owning component. These constructors automatically query for compatible settings providers.","nodes":[{"pos":[0,616],"content":"The <xref:System.Configuration.IPersistComponentSettings> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application. However, in some cases, the application or environment may need to override the settings provider natively used by a component with one of its own choosing. The <xref:System.Configuration.ISettingsProviderService> interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <xref:System.ComponentModel.Container>.","nodes":[{"content":"The <xref:System.Configuration.IPersistComponentSettings> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application. However, in some cases, the application or environment may need to override the settings provider natively used by a component with one of its own choosing. The <xref:System.Configuration.ISettingsProviderService> interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <xref:System.ComponentModel.Container>.","pos":[0,616],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.IPersistComponentSettings&gt;</ph> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application.","pos":[0,214],"source":"The <xref:System.Configuration.IPersistComponentSettings> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application."},{"content":"However, in some cases, the application or environment may need to override the settings provider natively used by a component with one of its own choosing.","pos":[215,371]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ISettingsProviderService&gt;</ph> interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <ph id=\"ph2\">&lt;xref:System.ComponentModel.Container&gt;</ph>.","pos":[372,616],"source":" The <xref:System.Configuration.ISettingsProviderService> interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <xref:System.ComponentModel.Container>."}]}]},{"pos":[623,1036],"content":"<xref:System.Configuration.ISettingsProviderService> is commonly used by design-time tools and debuggers that provide special support for application settings. To make such an arrangement function seamlessly, the <xref:System.Configuration.ApplicationSettingsBase> class contains constructors that take a reference to the owning component. These constructors automatically query for compatible settings providers.","nodes":[{"content":"<xref:System.Configuration.ISettingsProviderService> is commonly used by design-time tools and debuggers that provide special support for application settings. To make such an arrangement function seamlessly, the <xref:System.Configuration.ApplicationSettingsBase> class contains constructors that take a reference to the owning component. These constructors automatically query for compatible settings providers.","pos":[0,413],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.ISettingsProviderService&gt;</ph> is commonly used by design-time tools and debuggers that provide special support for application settings.","pos":[0,159],"source":"<xref:System.Configuration.ISettingsProviderService> is commonly used by design-time tools and debuggers that provide special support for application settings."},{"content":"To make such an arrangement function seamlessly, the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class contains constructors that take a reference to the owning component.","pos":[160,339],"source":" To make such an arrangement function seamlessly, the <xref:System.Configuration.ApplicationSettingsBase> class contains constructors that take a reference to the owning component."},{"content":"These constructors automatically query for compatible settings providers.","pos":[340,413]}]}]}],"pos":[678,1719],"yaml":true,"extradata":"MT"},{"content":"Returns the settings provider compatible with the specified settings property.","nodes":[{"pos":[0,78],"content":"Returns the settings provider compatible with the specified settings property.","nodes":[{"content":"Returns the settings provider compatible with the specified settings property.","pos":[0,78]}]}],"pos":[3120,3199],"yaml":true},{"content":"The <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> method enables an <xref:System.Configuration.ISettingsProviderService> to offer its serialization services to any sited component. This method determines if the associated settings provider can persist the specified application settings property type. If it can, this method returns a reference to that settings provider; otherwise it returns `null`.","nodes":[{"pos":[0,430],"content":"The <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> method enables an <xref:System.Configuration.ISettingsProviderService> to offer its serialization services to any sited component. This method determines if the associated settings provider can persist the specified application settings property type. If it can, this method returns a reference to that settings provider; otherwise it returns `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A&gt;</ph> method enables an <ph id=\"ph2\">&lt;xref:System.Configuration.ISettingsProviderService&gt;</ph> to offer its serialization services to any sited component.","pos":[0,210],"source":"The <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> method enables an <xref:System.Configuration.ISettingsProviderService> to offer its serialization services to any sited component."},{"content":"This method determines if the associated settings provider can persist the specified application settings property type.","pos":[211,331]},{"content":"If it can, this method returns a reference to that settings provider; otherwise it returns <ph id=\"ph1\">`null`</ph>.","pos":[332,430],"source":" If it can, this method returns a reference to that settings provider; otherwise it returns `null`."}]}],"pos":[3210,3641],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Configuration.SettingsProperty\"></xref> that requires serialization.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsProperty\"&gt;&lt;/xref&gt;</ph> that requires serialization.","source":"The <xref href=\"System.Configuration.SettingsProperty\"></xref> that requires serialization."}],"pos":[3883,3975],"yaml":true},{"content":"If found, the <xref href=\"System.Configuration.SettingsProvider\"></xref> that can persist the specified settings property; otherwise, `null`.","nodes":[{"pos":[0,141],"content":"If found, the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsProvider\"&gt;&lt;/xref&gt;</ph> that can persist the specified settings property; otherwise, <ph id=\"ph2\">`null`</ph>.","source":"If found, the <xref href=\"System.Configuration.SettingsProvider\"></xref> that can persist the specified settings property; otherwise, `null`."}],"pos":[4056,4198],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.ISettingsProviderService\n  commentId: T:System.Configuration.ISettingsProviderService\n  id: ISettingsProviderService\n  children:\n  - System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)\n  langs:\n  - csharp\n  name: ISettingsProviderService\n  nameWithType: ISettingsProviderService\n  fullName: System.Configuration.ISettingsProviderService\n  type: Interface\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Provides an interface for defining an alternate application settings provider.\n  remarks: \"The <xref:System.Configuration.IPersistComponentSettings> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application. However, in some cases, the application or environment may need to override the settings provider natively used by a component with one of its own choosing. The <xref:System.Configuration.ISettingsProviderService> interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <xref:System.ComponentModel.Container>.  \\n  \\n <xref:System.Configuration.ISettingsProviderService> is commonly used by design-time tools and debuggers that provide special support for application settings. To make such an arrangement function seamlessly, the <xref:System.Configuration.ApplicationSettingsBase> class contains constructors that take a reference to the owning component. These constructors automatically query for compatible settings providers.\"\n  syntax:\n    content: public interface ISettingsProviderService\n  implements: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ISettingsProviderService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)\n  commentId: M:System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)\n  id: GetSettingsProvider(System.Configuration.SettingsProperty)\n  parent: System.Configuration.ISettingsProviderService\n  langs:\n  - csharp\n  name: GetSettingsProvider(SettingsProperty)\n  nameWithType: ISettingsProviderService.GetSettingsProvider(SettingsProperty)\n  fullName: ISettingsProviderService.GetSettingsProvider(SettingsProperty)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Returns the settings provider compatible with the specified settings property.\n  remarks: The <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> method enables an <xref:System.Configuration.ISettingsProviderService> to offer its serialization services to any sited component. This method determines if the associated settings provider can persist the specified application settings property type. If it can, this method returns a reference to that settings provider; otherwise it returns `null`.\n  syntax:\n    content: public System.Configuration.SettingsProvider GetSettingsProvider (System.Configuration.SettingsProperty property);\n    parameters:\n    - id: property\n      type: System.Configuration.SettingsProperty\n      description: The <xref href=\"System.Configuration.SettingsProperty\"></xref> that requires serialization.\n    return:\n      type: System.Configuration.SettingsProvider\n      description: If found, the <xref href=\"System.Configuration.SettingsProvider\"></xref> that can persist the specified settings property; otherwise, `null`.\n  overload: System.Configuration.ISettingsProviderService.GetSettingsProvider*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ISettingsProviderService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)\n  parent: System.Configuration.ISettingsProviderService\n  isExternal: false\n  name: GetSettingsProvider(SettingsProperty)\n  nameWithType: ISettingsProviderService.GetSettingsProvider(SettingsProperty)\n  fullName: ISettingsProviderService.GetSettingsProvider(SettingsProperty)\n- uid: System.Configuration.SettingsProvider\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsProvider\n  nameWithType: SettingsProvider\n  fullName: System.Configuration.SettingsProvider\n- uid: System.Configuration.SettingsProperty\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsProperty\n  nameWithType: SettingsProperty\n  fullName: System.Configuration.SettingsProperty\n- uid: System.Configuration.ISettingsProviderService.GetSettingsProvider*\n  parent: System.Configuration.ISettingsProviderService\n  isExternal: false\n  name: GetSettingsProvider\n  nameWithType: ISettingsProviderService.GetSettingsProvider\n  fullName: ISettingsProviderService.GetSettingsProvider\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ISettingsProviderService.xml\n"}