{"nodes":[{"content":"Provides a buffer that allows a fallback handler to return an alternate string to a decoder when it cannot decode an input byte sequence.","nodes":[{"pos":[0,137],"content":"Provides a buffer that allows a fallback handler to return an alternate string to a decoder when it cannot decode an input byte sequence.","nodes":[{"content":"Provides a buffer that allows a fallback handler to return an alternate string to a decoder when it cannot decode an input byte sequence.","pos":[0,137]}]}],"pos":[749,887],"yaml":true},{"content":"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes. A decoding operation, which converts an input byte sequence to an output character, fails if no mapping is defined for a particular byte sequence.  \n  \n The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed. All decoder fallback handlers must implement the following:  \n  \n-   A decoder fallback, which is represented by a class derived from the <xref:System.Text.DecoderFallback> class.  \n  \n-   A decoder fallback buffer, which is represented by a type derived from the <xref:System.Text.DecoderFallbackBuffer> class that can return a string to the conversion operation.  \n  \n Fallbacks can use three strategies to handle conversion failures:  \n  \n-   Best-fit mapping. The decoder fallback buffer can return a string that represents a close approximation to the input byte sequence. The .NET Framework does not provide a public best-fit <xref:System.Text.DecoderFallbackBuffer> implementation.  \n  \n-   Replacement. The decoder fallback buffer can return a string, such as a question mark (\"?\"), that indicates that a byte sequence could not be decoded. In the .NET Framework, the <xref:System.Text.DecoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation. The constructor of the <xref:System.Text.DecoderReplacementFallback> class enables you to define the replacement string.  \n  \n-   Exception. The <xref:System.Text.DecoderFallbackBuffer> implementation throws an exception, which indicates that a byte sequence cannot be decoded, and terminates the decoding operation. In this case, the fallback handler must provide a <xref:System.Text.DecoderFallbackBuffer> implementation, although it does not return a string to the decoder. In the .NET Framework, the <xref:System.Text.DecoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws a <xref:System.Text.DecoderFallbackException> when a byte sequence cannot be decoded.  \n  \n The buffer in a <xref:System.Text.DecoderFallbackBuffer> implementation represents the entire string to be returned to the decoder in response to a decoder fallback. Generally, implementations also include state information, such as the index of the next character to return to the decoder and the number of remaining characters to be returned. Because <xref:System.Text.DecoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:  \n  \n-   The <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method, which is called by the decoder when it cannot decode a byte sequence. The decoder passes two pieces of information to the fallback buffer implementation: an array containing the bytes that could not be decoded and the index of the first byte in the input byte array. In a decoder fallback exception handler, the exception is thrown in this method. Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not.  \n  \n-   The <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the decoder if the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true`. In successive calls, the handler should return each character in its buffer. When it has returned all characters, it should return U+0000. An exception fallback handler always returns U+0000.  \n  \n-   The <xref:System.Text.DecoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful. An exception handler always returns `false`.  \n  \n-   The <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the decoder. An exception fallback handler always returns zero.","nodes":[{"pos":[0,238],"content":"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes. A decoding operation, which converts an input byte sequence to an output character, fails if no mapping is defined for a particular byte sequence.","nodes":[{"content":"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes. A decoding operation, which converts an input byte sequence to an output character, fails if no mapping is defined for a particular byte sequence.","pos":[0,238],"nodes":[{"content":"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes.","pos":[0,91]},{"content":"A decoding operation, which converts an input byte sequence to an output character, fails if no mapping is defined for a particular byte sequence.","pos":[92,238]}]}]},{"pos":[245,418],"content":"The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed. All decoder fallback handlers must implement the following:","nodes":[{"content":"The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed. All decoder fallback handlers must implement the following:","pos":[0,173],"nodes":[{"content":"The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed.","pos":[0,113]},{"content":"All decoder fallback handlers must implement the following:","pos":[114,173]}]}]},{"pos":[428,538],"content":"A decoder fallback, which is represented by a class derived from the <xref:System.Text.DecoderFallback> class.","nodes":[{"content":"A decoder fallback, which is represented by a class derived from the <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallback&gt;</ph> class.","pos":[0,110],"source":"A decoder fallback, which is represented by a class derived from the <xref:System.Text.DecoderFallback> class."}]},{"pos":[548,723],"content":"A decoder fallback buffer, which is represented by a type derived from the <xref:System.Text.DecoderFallbackBuffer> class that can return a string to the conversion operation.","nodes":[{"content":"A decoder fallback buffer, which is represented by a type derived from the <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> class that can return a string to the conversion operation.","pos":[0,175],"source":"A decoder fallback buffer, which is represented by a type derived from the <xref:System.Text.DecoderFallbackBuffer> class that can return a string to the conversion operation."}]},{"pos":[730,795],"content":"Fallbacks can use three strategies to handle conversion failures:","nodes":[{"content":"Fallbacks can use three strategies to handle conversion failures:","pos":[0,65]}]},{"pos":[805,1047],"content":"Best-fit mapping. The decoder fallback buffer can return a string that represents a close approximation to the input byte sequence. The .NET Framework does not provide a public best-fit <xref:System.Text.DecoderFallbackBuffer> implementation.","nodes":[{"content":"Best-fit mapping. The decoder fallback buffer can return a string that represents a close approximation to the input byte sequence. The .NET Framework does not provide a public best-fit <xref:System.Text.DecoderFallbackBuffer> implementation.","pos":[0,242],"nodes":[{"content":"Best-fit mapping.","pos":[0,17]},{"content":"The decoder fallback buffer can return a string that represents a close approximation to the input byte sequence.","pos":[18,131]},{"content":"The .NET Framework does not provide a public best-fit <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> implementation.","pos":[132,242],"source":" The .NET Framework does not provide a public best-fit <xref:System.Text.DecoderFallbackBuffer> implementation."}]}]},{"pos":[1057,1526],"content":"Replacement. The decoder fallback buffer can return a string, such as a question mark (\"?\"), that indicates that a byte sequence could not be decoded. In the .NET Framework, the <xref:System.Text.DecoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation. The constructor of the <xref:System.Text.DecoderReplacementFallback> class enables you to define the replacement string.","nodes":[{"content":"Replacement. The decoder fallback buffer can return a string, such as a question mark (\"?\"), that indicates that a byte sequence could not be decoded. In the .NET Framework, the <xref:System.Text.DecoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation. The constructor of the <xref:System.Text.DecoderReplacementFallback> class enables you to define the replacement string.","pos":[0,469],"nodes":[{"content":"Replacement.","pos":[0,12]},{"content":"The decoder fallback buffer can return a string, such as a question mark (\"?\"), that indicates that a byte sequence could not be decoded.","pos":[13,150]},{"content":"In the .NET Framework, the <ph id=\"ph1\">&lt;xref:System.Text.DecoderReplacementFallback&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.DecoderReplacementFallbackBuffer&gt;</ph> classes provide a public replacement fallback buffer implementation.","pos":[151,348],"source":" In the .NET Framework, the <xref:System.Text.DecoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation."},{"content":"The constructor of the <ph id=\"ph1\">&lt;xref:System.Text.DecoderReplacementFallback&gt;</ph> class enables you to define the replacement string.","pos":[349,469],"source":" The constructor of the <xref:System.Text.DecoderReplacementFallback> class enables you to define the replacement string."}]}]},{"pos":[1536,2164],"content":"Exception. The <xref:System.Text.DecoderFallbackBuffer> implementation throws an exception, which indicates that a byte sequence cannot be decoded, and terminates the decoding operation. In this case, the fallback handler must provide a <xref:System.Text.DecoderFallbackBuffer> implementation, although it does not return a string to the decoder. In the .NET Framework, the <xref:System.Text.DecoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws a <xref:System.Text.DecoderFallbackException> when a byte sequence cannot be decoded.","nodes":[{"content":"Exception. The <xref:System.Text.DecoderFallbackBuffer> implementation throws an exception, which indicates that a byte sequence cannot be decoded, and terminates the decoding operation. In this case, the fallback handler must provide a <xref:System.Text.DecoderFallbackBuffer> implementation, although it does not return a string to the decoder. In the .NET Framework, the <xref:System.Text.DecoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws a <xref:System.Text.DecoderFallbackException> when a byte sequence cannot be decoded.","pos":[0,628],"nodes":[{"content":"Exception.","pos":[0,10]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> implementation throws an exception, which indicates that a byte sequence cannot be decoded, and terminates the decoding operation.","pos":[11,186],"source":" The <xref:System.Text.DecoderFallbackBuffer> implementation throws an exception, which indicates that a byte sequence cannot be decoded, and terminates the decoding operation."},{"content":"In this case, the fallback handler must provide a <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> implementation, although it does not return a string to the decoder.","pos":[187,346],"source":" In this case, the fallback handler must provide a <xref:System.Text.DecoderFallbackBuffer> implementation, although it does not return a string to the decoder."},{"content":"In the .NET Framework, the <ph id=\"ph1\">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.DecoderExceptionFallbackBuffer&gt;</ph> classes provide a public exception fallback implementation that throws a <ph id=\"ph3\">&lt;xref:System.Text.DecoderFallbackException&gt;</ph> when a byte sequence cannot be decoded.","pos":[347,628],"source":" In the .NET Framework, the <xref:System.Text.DecoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws a <xref:System.Text.DecoderFallbackException> when a byte sequence cannot be decoded."}]}]},{"pos":[2171,2663],"content":"The buffer in a <xref:System.Text.DecoderFallbackBuffer> implementation represents the entire string to be returned to the decoder in response to a decoder fallback. Generally, implementations also include state information, such as the index of the next character to return to the decoder and the number of remaining characters to be returned. Because <xref:System.Text.DecoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:","nodes":[{"content":"The buffer in a <xref:System.Text.DecoderFallbackBuffer> implementation represents the entire string to be returned to the decoder in response to a decoder fallback. Generally, implementations also include state information, such as the index of the next character to return to the decoder and the number of remaining characters to be returned. Because <xref:System.Text.DecoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:","pos":[0,492],"nodes":[{"content":"The buffer in a <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> implementation represents the entire string to be returned to the decoder in response to a decoder fallback.","pos":[0,165],"source":"The buffer in a <xref:System.Text.DecoderFallbackBuffer> implementation represents the entire string to be returned to the decoder in response to a decoder fallback."},{"content":"Generally, implementations also include state information, such as the index of the next character to return to the decoder and the number of remaining characters to be returned.","pos":[166,344]},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> is an abstract class, it requires derived classes to implement the following members at a minimum:","pos":[345,492],"source":" Because <xref:System.Text.DecoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:"}]}]},{"pos":[2673,3176],"content":"The <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method, which is called by the decoder when it cannot decode a byte sequence. The decoder passes two pieces of information to the fallback buffer implementation: an array containing the bytes that could not be decoded and the index of the first byte in the input byte array. In a decoder fallback exception handler, the exception is thrown in this method. Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%2A&gt;</ph> method, which is called by the decoder when it cannot decode a byte sequence.","pos":[0,134],"source":"The <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method, which is called by the decoder when it cannot decode a byte sequence."},{"content":"The decoder passes two pieces of information to the fallback buffer implementation: an array containing the bytes that could not be decoded and the index of the first byte in the input byte array.","pos":[135,331]},{"content":"In a decoder fallback exception handler, the exception is thrown in this method.","pos":[332,412]},{"content":"Otherwise, the method returns <ph id=\"ph1\">`true`</ph> if it provides a fallback, or <ph id=\"ph2\">`false`</ph> if it does not.","pos":[413,503],"source":" Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not."}]},{"pos":[3186,3570],"content":"The <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the decoder if the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true`. In successive calls, the handler should return each character in its buffer. When it has returned all characters, it should return U+0000. An exception fallback handler always returns U+0000.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A&gt;</ph> method, which is called repeatedly by the decoder if the <ph id=\"ph2\">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id=\"ph3\">`true`</ph>.","pos":[0,192],"source":"The <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the decoder if the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true`."},{"content":"In successive calls, the handler should return each character in its buffer.","pos":[193,269]},{"content":"When it has returned all characters, it should return U+0000.","pos":[270,331]},{"content":"An exception fallback handler always returns U+0000.","pos":[332,384]}]},{"pos":[3580,3811],"content":"The <xref:System.Text.DecoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful. An exception handler always returns `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.MovePrevious%2A&gt;</ph> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful.","pos":[0,186],"source":"The <xref:System.Text.DecoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful."},{"content":"An exception handler always returns <ph id=\"ph1\">`false`</ph>.","pos":[187,231],"source":" An exception handler always returns `false`."}]},{"pos":[3821,4021],"content":"The <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the decoder. An exception fallback handler always returns zero.","nodes":[{"content":"The <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the decoder. An exception fallback handler always returns zero.","pos":[0,200],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.Remaining%2A&gt;</ph> property, which indicates the number of remaining characters to be returned to the decoder.","pos":[0,149],"source":"The <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the decoder."},{"content":"An exception fallback handler always returns zero.","pos":[150,200]}]}]}],"pos":[898,4948],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> class.","nodes":[{"pos":[0,95],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.DecoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> class."}],"pos":[6862,6958],"yaml":true},{"content":"When overridden in a derived class, prepares the fallback buffer to handle the specified input byte sequence.","nodes":[{"pos":[0,109],"content":"When overridden in a derived class, prepares the fallback buffer to handle the specified input byte sequence.","nodes":[{"content":"When overridden in a derived class, prepares the fallback buffer to handle the specified input byte sequence.","pos":[0,109]}]}],"pos":[8581,8691],"yaml":true},{"content":"The <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>, <xref:System.Text.Encoding.GetString%2A?displayProperty=fullName>, and <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> if they encounter an unknown input byte sequence that cannot be decoded. A return value of `true` indicates that the fallback buffer can process the input byte sequence, which causes the calling method to call the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer. Because it does not process individual bytes, the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.","nodes":[{"pos":[0,759],"content":"The <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>, <xref:System.Text.Encoding.GetString%2A?displayProperty=fullName>, and <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> if they encounter an unknown input byte sequence that cannot be decoded. A return value of `true` indicates that the fallback buffer can process the input byte sequence, which causes the calling method to call the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer. Because it does not process individual bytes, the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.Encoding.GetString%2A?displayProperty=fullName&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=fullName&gt;</ph> methods call <ph id=\"ph4\">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%2A&gt;</ph> if they encounter an unknown input byte sequence that cannot be decoded.","pos":[0,342],"source":"The <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>, <xref:System.Text.Encoding.GetString%2A?displayProperty=fullName>, and <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> if they encounter an unknown input byte sequence that cannot be decoded."},{"content":"A return value of <ph id=\"ph1\">`true`</ph> indicates that the fallback buffer can process the input byte sequence, which causes the calling method to call the <ph id=\"ph2\">&lt;xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A&gt;</ph> method to obtain each character of the fallback buffer.","pos":[343,595],"source":" A return value of `true` indicates that the fallback buffer can process the input byte sequence, which causes the calling method to call the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer."},{"content":"Because it does not process individual bytes, the <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%2A&gt;</ph> method in an exception fallback handler throws an exception.","pos":[596,759],"source":" Because it does not process individual bytes, the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception."}]}],"pos":[8702,9462],"yaml":true,"extradata":"MT"},{"content":"An input array of bytes.","nodes":[{"pos":[0,24],"content":"An input array of bytes.","nodes":[{"content":"An input array of bytes.","pos":[0,24]}]}],"pos":[9633,9658],"yaml":true},{"content":"The index position of a byte in <code>bytesUnknown</code>.","nodes":[{"pos":[0,58],"content":"The index position of a byte in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytesUnknown</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The index position of a byte in <code>bytesUnknown</code>."}],"pos":[9718,9777],"yaml":true},{"content":"`true` if the fallback buffer can process <code>bytesUnknown</code>; `false` if the fallback buffer ignores <code>bytesUnknown</code>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">`true`</ph> if the fallback buffer can process <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bytesUnknown</ph><ept id=\"p1\">&lt;/code&gt;</ept>; <ph id=\"ph3\">`false`</ph> if the fallback buffer ignores <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">bytesUnknown</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"`true` if the fallback buffer can process <code>bytesUnknown</code>; `false` if the fallback buffer ignores <code>bytesUnknown</code>."}],"pos":[9835,9972],"yaml":true},{"content":"When overridden in a derived class, retrieves the next character in the fallback buffer.","nodes":[{"pos":[0,88],"content":"When overridden in a derived class, retrieves the next character in the fallback buffer.","nodes":[{"content":"When overridden in a derived class, retrieves the next character in the fallback buffer.","pos":[0,88]}]}],"pos":[11415,11504],"yaml":true},{"content":"A decoding operation calls the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown byte sequence in the input. If the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be inserted in the output instead of decoding the unknown input. The decoding operation calls the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time. When all characters in the fallback buffer have been returned to the decoder, the method should return U+0000.  \n  \n For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method should return U+0000.","nodes":[{"pos":[0,618],"content":"A decoding operation calls the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown byte sequence in the input. If the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be inserted in the output instead of decoding the unknown input. The decoding operation calls the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time. When all characters in the fallback buffer have been returned to the decoder, the method should return U+0000.","nodes":[{"content":"A decoding operation calls the <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%2A&gt;</ph> method if the operation encounters an unknown byte sequence in the input.","pos":[0,157],"source":"A decoding operation calls the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown byte sequence in the input."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id=\"ph2\">`true`</ph>, a substitute string exists that can be inserted in the output instead of decoding the unknown input.","pos":[158,341],"source":" If the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be inserted in the output instead of decoding the unknown input."},{"content":"The decoding operation calls the <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A&gt;</ph> method repeatedly and obtains the substitute string one character at a time.","pos":[342,507],"source":" The decoding operation calls the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time."},{"content":"When all characters in the fallback buffer have been returned to the decoder, the method should return U+0000.","pos":[508,618]}]},{"pos":[625,748],"content":"For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method should return U+0000.","nodes":[{"content":"For an exception fallback handler, the <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A&gt;</ph> method should return U+0000.","pos":[0,123],"source":"For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method should return U+0000."}]}],"pos":[11515,12268],"yaml":true,"extradata":"MT"},{"content":"The next character in the fallback buffer.","nodes":[{"pos":[0,42],"content":"The next character in the fallback buffer.","nodes":[{"content":"The next character in the fallback buffer.","pos":[0,42]}]}],"pos":[12402,12445],"yaml":true},{"content":"When overridden in a derived class, causes the next call to the <xref href=\"System.Text.DecoderFallbackBuffer.GetNextChar\"></xref> method to access the data buffer character position that is prior to the current character position.","nodes":[{"pos":[0,231],"content":"When overridden in a derived class, causes the next call to the <ph id=\"ph1\">&lt;xref href=\"System.Text.DecoderFallbackBuffer.GetNextChar\"&gt;&lt;/xref&gt;</ph> method to access the data buffer character position that is prior to the current character position.","source":"When overridden in a derived class, causes the next call to the <xref href=\"System.Text.DecoderFallbackBuffer.GetNextChar\"></xref> method to access the data buffer character position that is prior to the current character position."}],"pos":[13897,14129],"yaml":true},{"content":"An exception fallback handler should return `false`.","nodes":[{"pos":[0,52],"content":"An exception fallback handler should return <ph id=\"ph1\">`false`</ph>.","source":"An exception fallback handler should return `false`."}],"pos":[14140,14193],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Text.DecoderFallbackBuffer.MovePrevious\"></xref> operation was successful; otherwise, `false`.","nodes":[{"pos":[0,127],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderFallbackBuffer.MovePrevious\"&gt;&lt;/xref&gt;</ph> operation was successful; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Text.DecoderFallbackBuffer.MovePrevious\"></xref> operation was successful; otherwise, `false`."}],"pos":[14331,14461],"yaml":true},{"content":"When overridden in a derived class, gets the number of characters in the current <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object that remain to be processed.","nodes":[{"pos":[0,171],"content":"When overridden in a derived class, gets the number of characters in the current <ph id=\"ph1\">&lt;xref href=\"System.Text.DecoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> object that remain to be processed.","source":"When overridden in a derived class, gets the number of characters in the current <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object that remain to be processed."}],"pos":[15892,16064],"yaml":true},{"content":"The <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true` if <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> is a nonzero value.  \n  \n For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero.","nodes":[{"pos":[0,155],"content":"The <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id=\"ph2\">`true`</ph> if <ph id=\"ph3\">&lt;xref:System.Text.DecoderFallbackBuffer.Remaining%2A&gt;</ph> is a nonzero value.","source":"The <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true` if <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> is a nonzero value."},{"pos":[162,281],"content":"For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero.","nodes":[{"content":"For an exception fallback handler, the <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.Remaining%2A&gt;</ph> method should return zero.","pos":[0,119],"source":"For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero."}]}],"pos":[16075,16361],"yaml":true,"extradata":"MT"},{"content":"The number of characters in the current fallback buffer that have not yet been processed.","nodes":[{"pos":[0,89],"content":"The number of characters in the current fallback buffer that have not yet been processed.","nodes":[{"content":"The number of characters in the current fallback buffer that have not yet been processed.","pos":[0,89]}]}],"pos":[16479,16569],"yaml":true},{"content":"Initializes all data and state information pertaining to this fallback buffer.","nodes":[{"pos":[0,78],"content":"Initializes all data and state information pertaining to this fallback buffer.","nodes":[{"content":"Initializes all data and state information pertaining to this fallback buffer.","pos":[0,78]}]}],"pos":[17977,18056],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.DecoderFallbackBuffer\n  commentId: T:System.Text.DecoderFallbackBuffer\n  id: DecoderFallbackBuffer\n  children:\n  - System.Text.DecoderFallbackBuffer.#ctor\n  - System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)\n  - System.Text.DecoderFallbackBuffer.GetNextChar\n  - System.Text.DecoderFallbackBuffer.MovePrevious\n  - System.Text.DecoderFallbackBuffer.Remaining\n  - System.Text.DecoderFallbackBuffer.Reset\n  langs:\n  - csharp\n  name: DecoderFallbackBuffer\n  nameWithType: DecoderFallbackBuffer\n  fullName: System.Text.DecoderFallbackBuffer\n  type: Class\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Provides a buffer that allows a fallback handler to return an alternate string to a decoder when it cannot decode an input byte sequence.\n  remarks: \"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes. A decoding operation, which converts an input byte sequence to an output character, fails if no mapping is defined for a particular byte sequence.  \\n  \\n The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed. All decoder fallback handlers must implement the following:  \\n  \\n-   A decoder fallback, which is represented by a class derived from the <xref:System.Text.DecoderFallback> class.  \\n  \\n-   A decoder fallback buffer, which is represented by a type derived from the <xref:System.Text.DecoderFallbackBuffer> class that can return a string to the conversion operation.  \\n  \\n Fallbacks can use three strategies to handle conversion failures:  \\n  \\n-   Best-fit mapping. The decoder fallback buffer can return a string that represents a close approximation to the input byte sequence. The .NET Framework does not provide a public best-fit <xref:System.Text.DecoderFallbackBuffer> implementation.  \\n  \\n-   Replacement. The decoder fallback buffer can return a string, such as a question mark (\\\"?\\\"), that indicates that a byte sequence could not be decoded. In the .NET Framework, the <xref:System.Text.DecoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation. The constructor of the <xref:System.Text.DecoderReplacementFallback> class enables you to define the replacement string.  \\n  \\n-   Exception. The <xref:System.Text.DecoderFallbackBuffer> implementation throws an exception, which indicates that a byte sequence cannot be decoded, and terminates the decoding operation. In this case, the fallback handler must provide a <xref:System.Text.DecoderFallbackBuffer> implementation, although it does not return a string to the decoder. In the .NET Framework, the <xref:System.Text.DecoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws a <xref:System.Text.DecoderFallbackException> when a byte sequence cannot be decoded.  \\n  \\n The buffer in a <xref:System.Text.DecoderFallbackBuffer> implementation represents the entire string to be returned to the decoder in response to a decoder fallback. Generally, implementations also include state information, such as the index of the next character to return to the decoder and the number of remaining characters to be returned. Because <xref:System.Text.DecoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:  \\n  \\n-   The <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method, which is called by the decoder when it cannot decode a byte sequence. The decoder passes two pieces of information to the fallback buffer implementation: an array containing the bytes that could not be decoded and the index of the first byte in the input byte array. In a decoder fallback exception handler, the exception is thrown in this method. Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not.  \\n  \\n-   The <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the decoder if the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true`. In successive calls, the handler should return each character in its buffer. When it has returned all characters, it should return U+0000. An exception fallback handler always returns U+0000.  \\n  \\n-   The <xref:System.Text.DecoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful. An exception handler always returns `false`.  \\n  \\n-   The <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the decoder. An exception fallback handler always returns zero.\"\n  syntax:\n    content: public abstract class DecoderFallbackBuffer\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Text.DecoderExceptionFallbackBuffer\n  - System.Text.DecoderReplacementFallbackBuffer\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.DecoderFallbackBuffer.#ctor\n  commentId: M:System.Text.DecoderFallbackBuffer.#ctor\n  id: '#ctor'\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  name: DecoderFallbackBuffer()\n  nameWithType: DecoderFallbackBuffer.DecoderFallbackBuffer()\n  fullName: DecoderFallbackBuffer.DecoderFallbackBuffer()\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> class.\n  syntax:\n    content: protected DecoderFallbackBuffer ();\n    parameters: []\n  overload: System.Text.DecoderFallbackBuffer.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)\n  commentId: M:System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)\n  id: Fallback(System.Byte[],System.Int32)\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  name: Fallback(Byte[], Int32)\n  nameWithType: DecoderFallbackBuffer.Fallback(Byte[], Int32)\n  fullName: DecoderFallbackBuffer.Fallback(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, prepares the fallback buffer to handle the specified input byte sequence.\n  remarks: The <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>, <xref:System.Text.Encoding.GetString%2A?displayProperty=fullName>, and <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> if they encounter an unknown input byte sequence that cannot be decoded. A return value of `true` indicates that the fallback buffer can process the input byte sequence, which causes the calling method to call the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer. Because it does not process individual bytes, the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.\n  syntax:\n    content: public abstract bool Fallback (byte[] bytesUnknown, int index);\n    parameters:\n    - id: bytesUnknown\n      type: System.Byte[]\n      description: An input array of bytes.\n    - id: index\n      type: System.Int32\n      description: The index position of a byte in <code>bytesUnknown</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the fallback buffer can process <code>bytesUnknown</code>; `false` if the fallback buffer ignores <code>bytesUnknown</code>.'\n  overload: System.Text.DecoderFallbackBuffer.Fallback*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.DecoderFallbackBuffer.GetNextChar\n  commentId: M:System.Text.DecoderFallbackBuffer.GetNextChar\n  id: GetNextChar\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  name: GetNextChar()\n  nameWithType: DecoderFallbackBuffer.GetNextChar()\n  fullName: DecoderFallbackBuffer.GetNextChar()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, retrieves the next character in the fallback buffer.\n  remarks: \"A decoding operation calls the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown byte sequence in the input. If the <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be inserted in the output instead of decoding the unknown input. The decoding operation calls the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time. When all characters in the fallback buffer have been returned to the decoder, the method should return U+0000.  \\n  \\n For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> method should return U+0000.\"\n  syntax:\n    content: public abstract char GetNextChar ();\n    parameters: []\n    return:\n      type: System.Char\n      description: The next character in the fallback buffer.\n  overload: System.Text.DecoderFallbackBuffer.GetNextChar*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.DecoderFallbackBuffer.MovePrevious\n  commentId: M:System.Text.DecoderFallbackBuffer.MovePrevious\n  id: MovePrevious\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  name: MovePrevious()\n  nameWithType: DecoderFallbackBuffer.MovePrevious()\n  fullName: DecoderFallbackBuffer.MovePrevious()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, causes the next call to the <xref href=\"System.Text.DecoderFallbackBuffer.GetNextChar\"></xref> method to access the data buffer character position that is prior to the current character position.\n  remarks: An exception fallback handler should return `false`.\n  syntax:\n    content: public abstract bool MovePrevious ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Text.DecoderFallbackBuffer.MovePrevious\"></xref> operation was successful; otherwise, `false`.'\n  overload: System.Text.DecoderFallbackBuffer.MovePrevious*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.DecoderFallbackBuffer.Remaining\n  commentId: P:System.Text.DecoderFallbackBuffer.Remaining\n  id: Remaining\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  name: Remaining\n  nameWithType: DecoderFallbackBuffer.Remaining\n  fullName: DecoderFallbackBuffer.Remaining\n  type: Property\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, gets the number of characters in the current <xref href=\"System.Text.DecoderFallbackBuffer\"></xref> object that remain to be processed.\n  remarks: \"The <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> method returns `true` if <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> is a nonzero value.  \\n  \\n For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero.\"\n  syntax:\n    content: public abstract int Remaining { get; }\n    return:\n      type: System.Int32\n      description: The number of characters in the current fallback buffer that have not yet been processed.\n  overload: System.Text.DecoderFallbackBuffer.Remaining*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.DecoderFallbackBuffer.Reset\n  commentId: M:System.Text.DecoderFallbackBuffer.Reset\n  id: Reset\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: DecoderFallbackBuffer.Reset()\n  fullName: DecoderFallbackBuffer.Reset()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Initializes all data and state information pertaining to this fallback buffer.\n  syntax:\n    content: public virtual void Reset ();\n    parameters: []\n  overload: System.Text.DecoderFallbackBuffer.Reset*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Text.DecoderFallbackBuffer.#ctor\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: DecoderFallbackBuffer()\n  nameWithType: DecoderFallbackBuffer.DecoderFallbackBuffer()\n  fullName: DecoderFallbackBuffer.DecoderFallbackBuffer()\n- uid: System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: Fallback(Byte[], Int32)\n  nameWithType: DecoderFallbackBuffer.Fallback(Byte[], Int32)\n  fullName: DecoderFallbackBuffer.Fallback(Byte[], Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.DecoderFallbackBuffer.GetNextChar\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: GetNextChar()\n  nameWithType: DecoderFallbackBuffer.GetNextChar()\n  fullName: DecoderFallbackBuffer.GetNextChar()\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Text.DecoderFallbackBuffer.MovePrevious\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: MovePrevious()\n  nameWithType: DecoderFallbackBuffer.MovePrevious()\n  fullName: DecoderFallbackBuffer.MovePrevious()\n- uid: System.Text.DecoderFallbackBuffer.Remaining\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: Remaining\n  nameWithType: DecoderFallbackBuffer.Remaining\n  fullName: DecoderFallbackBuffer.Remaining\n- uid: System.Text.DecoderFallbackBuffer.Reset\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: Reset()\n  nameWithType: DecoderFallbackBuffer.Reset()\n  fullName: DecoderFallbackBuffer.Reset()\n- uid: System.Text.DecoderFallbackBuffer.#ctor*\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: DecoderFallbackBuffer\n  nameWithType: DecoderFallbackBuffer.DecoderFallbackBuffer\n  fullName: DecoderFallbackBuffer.DecoderFallbackBuffer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n- uid: System.Text.DecoderFallbackBuffer.Fallback*\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: Fallback\n  nameWithType: DecoderFallbackBuffer.Fallback\n  fullName: DecoderFallbackBuffer.Fallback\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n- uid: System.Text.DecoderFallbackBuffer.GetNextChar*\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: GetNextChar\n  nameWithType: DecoderFallbackBuffer.GetNextChar\n  fullName: DecoderFallbackBuffer.GetNextChar\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n- uid: System.Text.DecoderFallbackBuffer.MovePrevious*\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: MovePrevious\n  nameWithType: DecoderFallbackBuffer.MovePrevious\n  fullName: DecoderFallbackBuffer.MovePrevious\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n- uid: System.Text.DecoderFallbackBuffer.Remaining*\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: Remaining\n  nameWithType: DecoderFallbackBuffer.Remaining\n  fullName: DecoderFallbackBuffer.Remaining\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n- uid: System.Text.DecoderFallbackBuffer.Reset*\n  parent: System.Text.DecoderFallbackBuffer\n  isExternal: false\n  name: Reset\n  nameWithType: DecoderFallbackBuffer.Reset\n  fullName: DecoderFallbackBuffer.Reset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/DecoderFallbackBuffer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}