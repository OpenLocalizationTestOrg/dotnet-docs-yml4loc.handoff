<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7add526c0401bb1d9dc77558245a95d311328f07</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Drawing.Graphics.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e410f64ee11dc2f83f9bc3a15f61a4ac08a8381b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d27b5403258f4e17c70df90824fa70e0b665eea4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates a GDI+ drawing surface.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> class provides methods for drawing objects to the display device.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> is associated with a specific device context.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=fullName&gt;</ph> method on an object that inherits from <ph id="ph3">&lt;xref:System.Windows.Forms.Control?displayProperty=fullName&gt;</ph>, or by handling a control's <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Paint?displayProperty=fullName&gt;</ph> event and accessing the <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs.Graphics%2A&gt;</ph> property of the <ph id="ph6">&lt;xref:System.Windows.Forms.PaintEventArgs?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also create a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object from an image by using the <ph id="ph2">&lt;xref:System.Drawing.Graphics.FromImage%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object, see <bpt id="p1">[</bpt>How to: Create Graphics Objects for Drawing<ept id="p1">](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can draw many different shapes and lines by using a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to draw lines and shapes, see the specific <ph id="ph1">`Draw`</ph><bpt id="p1">*</bpt>GraphicalElement<ept id="p1">*</ept> method for the line or shape you want to draw.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>These methods include <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawLine%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Drawing.Graphics.DrawArc%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Drawing.Graphics.DrawClosedCurve%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Drawing.Graphics.DrawPolygon%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Drawing.Graphics.DrawRectangle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to draw lines and shapes, see <bpt id="p1">[</bpt>Using a Pen to Draw Lines and Shapes<ept id="p1">](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md)</ept> and <bpt id="p2">[</bpt>Using a Brush to Fill Shapes<ept id="p2">](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also draw images and icons by using the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImage%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Graphics.DrawIcon%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform a bit-block transfer of color data from the screen to the drawing surface of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object, see <ph id="ph2">&lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to draw images with a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object, see <bpt id="p1">[</bpt>Working with Images, Bitmaps, Icons, and Metafiles<ept id="p1">](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you can manipulate the coordinate system used by the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on the coordinate system and how to manipulate it, see <bpt id="p1">[</bpt>Coordinate Systems and Transformations<ept id="p1">](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Adds a comment to the current <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is valid only if this <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Array of bytes that contains the comment.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Saves a graphics container with the current state of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> and opens and uses a new graphics container.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method with the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method to create nested graphics containers.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph>, an information block that holds the state of the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> is put on a stack.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph> that identifies that information block.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass the identifying object to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, the information block is removed from the stack and is used to restore the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Containers can be nested; that is, you can call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method several times before you call the <ph id="ph2">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method, an information block is put on the stack, and you receive a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph> for the information block.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass one of those objects to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is returned to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call that returned that particular <ph id="ph4">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information block placed on the stack by that <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call is removed from the stack, and all information blocks placed on that stack after that <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call are also removed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method place information blocks on the same stack as calls to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Just as an <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method call is paired with a <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call, a <ph id="ph3">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method call is paired with a <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, when you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The graphics state established by the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsContainer"&gt;&lt;/xref&gt;</ph> that represents the state of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> at the time of the method call.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Saves a graphics container with the current state of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> and opens and uses a new graphics container with the specified scale transformation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method with the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method to create nested graphics containers.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph>, an information block that holds the state of the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> is put on a stack.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph> that identifies that information block.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass the identifying object to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, the information block is removed from the stack and is used to restore the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Containers can be nested; that is, you can call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method several times before you call the <ph id="ph2">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method, an information block is put on the stack, and you receive a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph> for the information block.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass one of those objects to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is returned to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call that returned that particular <ph id="ph4">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information block placed on the stack by that <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call is removed from the stack, and all information blocks placed on that stack after that <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call are also removed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method place information blocks on the same stack as calls to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Just as an <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method call is paired with a <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call, a <ph id="ph3">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method call is paired with a <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, when you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method specifies a scale transformation for the new graphics container with the <ph id="ph1">`dstrect`</ph> and <ph id="ph2">`srcrect`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scale is equal to the transformation that, when applied to <ph id="ph1">`srcrect`</ph>, results in <ph id="ph2">`dstrect`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The graphics state established by the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that, together with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcrect</ph><ept id="p1">&lt;/code&gt;</ept> parameter, specifies a scale transformation for the container.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that, together with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">dstrect</ph><ept id="p1">&lt;/code&gt;</ept> parameter, specifies a scale transformation for the container.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure for the container.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsContainer"&gt;&lt;/xref&gt;</ph> that represents the state of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> at the time of the method call.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Saves a graphics container with the current state of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> and opens and uses a new graphics container with the specified scale transformation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method with the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method to create nested graphics containers.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph>, an information block that holds the state of the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> is put on a stack.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph> that identifies that information block.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass the identifying object to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, the information block is removed from the stack and is used to restore the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Containers can be nested; that is, you can call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method several times before you call the <ph id="ph2">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method, an information block is put on the stack, and you receive a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph> for the information block.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass one of those objects to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is returned to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call that returned that particular <ph id="ph4">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information block placed on the stack by that <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call is removed from the stack, and all information blocks placed on that stack after that <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call are also removed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method place information blocks on the same stack as calls to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Just as an <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method call is paired with a <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call, a <ph id="ph3">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method call is paired with a <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">`Save`</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, when you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method specifies a scale transformation for the new graphics container with the <ph id="ph1">`dstrect`</ph> and <ph id="ph2">`srcrect`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scale is equal to the transformation that, when applied to <ph id="ph1">`srcrect`</ph>, results in <ph id="ph2">`dstrect`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The graphics state established by the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that, together with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcrect</ph><ept id="p1">&lt;/code&gt;</ept> parameter, specifies a scale transformation for the new graphics container.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that, together with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">dstrect</ph><ept id="p1">&lt;/code&gt;</ept> parameter, specifies a scale transformation for the new graphics container.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure for the container.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsContainer"&gt;&lt;/xref&gt;</ph> that represents the state of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> at the time of the method call.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Clears the entire drawing surface and fills it with the specified background color.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.Clear%2A&gt;</ph> method clears the state of the graphics object and should not be called when the graphics object cannot be updated.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Clear%2A&gt;</ph> method is called on a secure desktop in a terminal server session, an <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ExternalException&gt;</ph> may occur, leaving the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> object in an inconsistent state.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> structure that represents the background color of the drawing surface.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> that limits the drawing region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modifying the <ph id="ph1">&lt;xref:System.Drawing.Region&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Clip%2A&gt;</ph> property does not affect subsequent drawing with the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the clip region, replace the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Clip%2A&gt;</ph> property value with a new <ph id="ph2">&lt;xref:System.Drawing.Region&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine whether the clipping region is infinite, retrieve the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Clip%2A&gt;</ph> property and call its <ph id="ph2">&lt;xref:System.Drawing.Region.IsInfinite%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> that limits the portion of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> that is currently available for drawing.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that bounds the clipping region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The unit for resulting rectangle is designated by the <ph id="ph1">&lt;xref:System.Drawing.Graphics.PageUnit%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default unit is pixels.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the clipping region is infinite, the <ph id="ph1">&lt;xref:System.Drawing.Graphics.ClipBounds%2A&gt;</ph> property returns a meaningless large rectangle.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine whether the clipping region is infinite, retrieve the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Clip%2A&gt;</ph> property and call its <ph id="ph2">&lt;xref:System.Drawing.Region.IsInfinite%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that represents a bounding rectangle for the clipping region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Gets a value that specifies how composited images are drawn to this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compositing mode determines whether pixels from a source image overwrite or are combined with background pixels.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not use a <ph id="ph1">&lt;xref:System.Drawing.Graphics.CompositingMode%2A&gt;</ph> property value of <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy&gt;</ph> when the <ph id="ph3">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> property is set to <ph id="ph4">&lt;xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception could occur or the image may not render correctly.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This property specifies a member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CompositingMode"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CompositingMode.SourceOver"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Gets or sets the rendering quality of composited images drawn to this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compositing quality determines the rendering quality level of composited images.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This property specifies a member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CompositingQuality"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CompositingQuality.Default"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt;</ph> methods are useful for layering one image on top of another.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify how the source and destination colors are blended, use one of the <ph id="ph1">&lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt;</ph> methods that takes a <ph id="ph2">&lt;xref:System.Drawing.CopyPixelOperation&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the point at the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the point at the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the point at the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the point at the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The size of the area to be transferred.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The operation failed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt;</ph> methods are useful for layering one image on top of another.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`copyPixelOperation`</ph> parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the point at the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the point at the upper-left corner of the source rectangle</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the point at the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the point at the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The size of the area to be transferred.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.CopyPixelOperation"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;copyPixelOperation&lt;/code&gt;</ph> is not a member of <ph id="ph2">&lt;xref href="System.Drawing.CopyPixelOperation"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The operation failed.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt;</ph> methods are useful for layering one image on top of another.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify how the source and destination colors are blended, use one of the <ph id="ph1">&lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt;</ph> methods that takes a <ph id="ph2">&lt;xref:System.Drawing.CopyPixelOperation&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The point at the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The point at the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The size of the area to be transferred.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The operation failed.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt;</ph> methods are useful for layering one image on top of another.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`copyPixelOperation`</ph> parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The point at the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The point at the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The size of the area to be transferred.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.CopyPixelOperation"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;copyPixelOperation&lt;/code&gt;</ph> is not a member of <ph id="ph2">&lt;xref href="System.Drawing.CopyPixelOperation"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The operation failed.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Releases all resources used by this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Drawing.Graphics.Dispose%2A&gt;</ph> allows the resources used by this <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> to be reallocated for other purposes.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets the horizontal resolution of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating high-resolution applications, see</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>High DPI<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=159804)</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The value, in dots per inch, for the horizontal resolution supported by this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Gets the vertical resolution of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating high-resolution applications, see</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>High DPI<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=159804)</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The value, in dots per inch, for the vertical resolution supported by this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Draws an arc representing a portion of an ellipse specified by a <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an arc that is a portion of the perimeter of an ellipse.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the boundaries of a rectangle.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arc is the portion of the perimeter of the ellipse between the <ph id="ph1">`startAngle`</ph> parameter and the <ph id="ph2">`startAngle`</ph><ph id="ph3"> + </ph><ph id="ph4">`sweepAngle`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the arc.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that defines the boundaries of the ellipse.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to ending point of the arc.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Draws an arc representing a portion of an ellipse specified by a <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an arc that is a portion of the perimeter of an ellipse.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the boundaries of a rectangle.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arc is the portion of the perimeter of the ellipse between the <ph id="ph1">`startAngle`</ph> parameter and the <ph id="ph2">`startAngle`</ph><ph id="ph3"> + </ph><ph id="ph4">`sweepAngle`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the arc.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that defines the boundaries of the ellipse.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to ending point of the arc.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an arc that is a portion of the perimeter of an ellipse.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the boundaries of a rectangle.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arc is the portion of the perimeter of the ellipse between the <ph id="ph1">`startAngle`</ph> parameter and the <ph id="ph2">`startAngle`</ph><ph id="ph3"> + </ph><ph id="ph4">`sweepAngle`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the arc.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Width of the rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Height of the rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to ending point of the arc.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rects&lt;/code&gt;</ph> is a zero-length array.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an arc that is a portion of the perimeter of an ellipse.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the boundaries of a rectangle.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arc is the portion of the perimeter of the ellipse between the <ph id="ph1">`startAngle`</ph> parameter and the <ph id="ph2">`startAngle`</ph><ph id="ph3"> + </ph><ph id="ph4">`sweepAngle`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the arc.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Width of the rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Height of the rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to ending point of the arc.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Draws a Bézier spline defined by four <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Bézier curve is drawn from the first point to the fourth point.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second and third points are control points that determine the shape of the curve.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> structure that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that represents the starting point of the curve.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that represents the first control point for the curve.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that represents the second control point for the curve.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that represents the ending point of the curve.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Draws a Bézier spline defined by four <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Bézier spline is drawn from the first point to the fourth point.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second and third points are control points that determine the shape of the curve.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that represents the starting point of the curve.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that represents the first control point for the curve.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that represents the second control point for the curve.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that represents the ending point of the curve.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Draws a Bézier spline defined by four ordered pairs of coordinates that represent points.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Bézier spline is drawn from the first point to the fourth point.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second and third points are control points that determine the shape of the curve.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the starting point of the curve.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the starting point of the curve.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the first control point of the curve.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the first control point of the curve.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the second control point of the curve.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the second control point of the curve.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the ending point of the curve.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the ending point of the curve.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Draws a series of Bézier splines from an array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first Bézier curve is drawn from the first point to the fourth point in the point array.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second and third points are control points that determine the shape of the curve.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each subsequent curve needs exactly three more points: two more control points and an ending point.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ending point of the previous curve is used as the starting point for each additional curve.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that represent the points that determine the curve.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Draws a series of Bézier splines from an array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first Bézier spline is drawn from the first point to the fourth point in the point array.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second and third points are control points that determine the shape of the curve.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each subsequent curve needs exactly three more points: two more control points and an ending point.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ending point of the previous curve is used as the starting point for each additional curve.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that represent the points that determine the curve.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Draws a closed cardinal spline defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures using a specified tension.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`tension`</ph> parameter determines the shape of the spline.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, the <ph id="ph1">`tension`</ph> parameter is less than or equal to 1.0F.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values over 1.0F produce unusual results.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and height of the curve.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Value greater than or equal to 0.0F that specifies the tension of the curve.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.FillMode"&gt;&lt;/xref&gt;</ph> enumeration that determines how the curve is filled.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>This parameter is required but ignored.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Draws a closed cardinal spline defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures using a specified tension.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`tension`</ph> parameter determines the shape of the spline.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, the <ph id="ph1">`tension`</ph> parameter is less than or equal to 1.0F.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values over 1.0F produce unusual results.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and height of the curve.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Value greater than or equal to 0.0F that specifies the tension of the curve.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.FillMode"&gt;&lt;/xref&gt;</ph> enumeration that determines how the curve is filled.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>This parameter is required but is ignored.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Draws a closed cardinal spline defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close the figure.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a default tension of 0.5.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and height of the curve.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Draws a closed cardinal spline defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a default tension of 0.5.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and height of the curve.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Draws a cardinal spline through a specified array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures for a curve to be drawn.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a default tension of 0.5.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and height of the curve.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Draws a cardinal spline through a specified array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures for a curve to be drawn.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a default tension of 0.5.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Draws a cardinal spline through a specified array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures using a specified tension.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures for a curve to be drawn.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`tension`</ph> parameter determines the shape of the spline.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, the <ph id="ph1">`tension`</ph> parameter is less than or equal to 1.0F.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values over 1.0F produce unusual results.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Value greater than or equal to 0.0F that specifies the tension of the curve.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Draws a cardinal spline through a specified array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures using a specified tension.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures for a curve to be drawn.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`tension`</ph> parameter determines the shape of the spline.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, the <ph id="ph1">`tension`</ph> parameter is less than or equal to 1.0F.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values over 1.0F produce unusual results.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that represent the points that define the curve.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Value greater than or equal to 0.0F that specifies the tension of the curve.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Draws a cardinal spline through a specified array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The drawing begins offset from the beginning of the array.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures for a curve to be drawn.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`offset`</ph> parameter specifies the number of elements to skip in the array.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first element after the skipped elements represents the starting point of the curve.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`numberOfSegments`</ph> parameter specifies the number of segments, after the starting point, to draw in the curve.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`numberOfSegments`</ph> parameter must be at least 1.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`offset`</ph> parameter plus the value of the <ph id="ph2">`numberOfSegments`</ph> parameter must be less than the number of elements in the array of the <ph id="ph3">`points`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a default tension of 0.5.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Offset from the first element in the array of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">points</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the starting point in the curve.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Number of segments after the starting point to include in the curve.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Draws a cardinal spline through a specified array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures using a specified tension.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures for a curve to be drawn.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`offset`</ph> parameter specifies the number of elements to skip in the array.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first element after the skipped elements represents the starting point of the curve.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`numberOfSegments`</ph> parameter specifies the number of segments, after the starting point, to draw in the curve.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`numberOfSegments`</ph> parameter must be at least 1.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`offset`</ph> parameter plus the value of the <ph id="ph2">`numberOfSegments`</ph> parameter must be less than the number of elements in the array of the <ph id="ph3">`points`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`tension`</ph> parameter determines the shape of the spline.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, the <ph id="ph1">`tension`</ph> parameter is less than or equal to 1.0F.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values over 1.0F produce unusual results.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Offset from the first element in the array of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">points</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the starting point in the curve.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Number of segments after the starting point to include in the curve.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Value greater than or equal to 0.0F that specifies the tension of the curve.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Draws a cardinal spline through a specified array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures using a specified tension.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The drawing begins offset from the beginning of the array.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures for curve to be drawn.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`offset`</ph> parameter specifies the number of elements to skip in the array.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first element after the skipped elements represents the starting point of the curve.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`numberOfSegments`</ph> parameter specifies the number of segments, after the starting point, to draw in the curve.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`numberOfSegments`</ph> parameter must be at least 1.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`offset`</ph> parameter plus the value of the <ph id="ph2">`numberOfSegments`</ph> parameter must be less than the number of elements in the array of the <ph id="ph3">`points`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`tension`</ph> parameter determines the shape of the spline.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, the <ph id="ph1">`tension`</ph> parameter is less than or equal to 1.0F.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values over 1.0F produce unusual results.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the curve.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Offset from the first element in the array of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">points</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the starting point in the curve.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Number of segments after the starting point to include in the curve.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Value greater than or equal to 0.0F that specifies the tension of the curve.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Draws an ellipse specified by a bounding <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an ellipse that is defined by the bounding rectangle specified by the <ph id="ph1">`rect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the ellipse.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that defines the boundaries of the ellipse.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Draws an ellipse defined by a bounding <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an ellipse that is defined by the bounding rectangle specified by the <ph id="ph1">`rect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the ellipse.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that defines the boundaries of the ellipse.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of the rectangle, a height, and a width.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an ellipse that is defined by the bounding rectangle described by the <ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the ellipse.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Width of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Height of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an ellipse that is defined by the bounding rectangle described by the <ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the ellipse.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Width of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Height of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Draws the image represented by the specified <ph id="ph1">&lt;xref href="System.Drawing.Icon"&gt;&lt;/xref&gt;</ph> at the specified coordinates.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Icon"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;icon&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Draws the image represented by the specified <ph id="ph1">&lt;xref href="System.Drawing.Icon"&gt;&lt;/xref&gt;</ph> within the area specified by a <ph id="ph2">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Icon"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the resulting image on the display surface.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The image contained in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">icon</ph><ept id="p1">&lt;/code&gt;</ept> parameter is scaled to the dimensions of this rectangular area.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;icon&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Draws the image represented by the specified <ph id="ph1">&lt;xref href="System.Drawing.Icon"&gt;&lt;/xref&gt;</ph> without scaling the image.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Icon"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the resulting image.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>The image is not scaled to fit this rectangle, but retains its original size.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>If the image is larger than the rectangle, it is clipped to fit inside it.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;icon&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Draws a portion of an image at a specified location.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <ph id="ph2">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcX`</ph>, <ph id="ph2">`srcY`</ph>, <ph id="ph3">`srcWidth`</ph>, and <ph id="ph4">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id="ph5">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle is relative to the upper-left corner of the source image.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload with the <ph id="ph1">`callback`</ph> and <ph id="ph2">`callbackData`</ph> parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Width of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Height of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used to determine the source rectangle.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate that specifies a method to call during the drawing of the image.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>This method is called frequently to check whether to stop execution of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)"&gt;&lt;/xref&gt;</ph> method according to application-determined criteria.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Value specifying additional data for the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate to use when checking whether to stop execution of the <ph id="ph2">`DrawImage`</ph> method.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcX`</ph>, <ph id="ph2">`srcY`</ph>, <ph id="ph3">`srcWidth`</ph>, and <ph id="ph4">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id="ph5">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle is relative to the upper-left corner of the source image.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload with the <ph id="ph1">`callback`</ph> and <ph id="ph2">`callbackData`</ph> parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Width of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Height of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used to determine the source rectangle.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate that specifies a method to call during the drawing of the image.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>This method is called frequently to check whether to stop execution of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)"&gt;&lt;/xref&gt;</ph> method according to application-determined criteria.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Value specifying additional data for the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate to use when checking whether to stop execution of the <ph id="ph2">`DrawImage`</ph> method.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcX`</ph>, <ph id="ph2">`srcY`</ph>, <ph id="ph3">`srcWidth`</ph>, and <ph id="ph4">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id="ph5">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle is relative to the upper-left corner of the source image.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload with the <ph id="ph1">`callback`</ph> parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Width of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Height of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used to determine the source rectangle.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate that specifies a method to call during the drawing of the image.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>This method is called frequently to check whether to stop execution of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)"&gt;&lt;/xref&gt;</ph> method according to application-determined criteria.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcX`</ph>, <ph id="ph2">`srcY`</ph>, <ph id="ph3">`srcWidth`</ph>, and <ph id="ph4">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id="ph5">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle is relative to the upper-left corner of the source image.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> object.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload with the <ph id="ph1">`callback`</ph> parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Width of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Height of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used to determine the source rectangle.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate that specifies a method to call during the drawing of the image.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>This method is called frequently to check whether to stop execution of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)"&gt;&lt;/xref&gt;</ph> method according to application-determined criteria.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcX`</ph>, <ph id="ph2">`srcY`</ph>, <ph id="ph3">`srcWidth`</ph>, and <ph id="ph4">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id="ph5">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle is relative to the upper-left corner of the source image.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Width of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Height of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used to determine the source rectangle.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcX`</ph>, <ph id="ph2">`srcY`</ph>, <ph id="ph3">`srcWidth`</ph>, and <ph id="ph4">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id="ph5">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle is relative to the upper-left corner of the source image.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Width of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Height of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used to determine the source rectangle.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcX`</ph>, <ph id="ph2">`srcY`</ph>, <ph id="ph3">`srcWidth`</ph>, and <ph id="ph4">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id="ph5">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle is relative to the upper-left corner of the source image.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Width of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Height of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used to determine the source rectangle.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcX`</ph>, <ph id="ph2">`srcY`</ph>, <ph id="ph3">`srcWidth`</ph>, and <ph id="ph4">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id="ph5">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle is relative to the upper-left corner of the source image.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Width of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Height of the portion of the source image to draw.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used to determine the source rectangle.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id="ph1">`destPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload with the <ph id="ph1">`callback`</ph> and <ph id="ph2">`callbackData`</ph> parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate that specifies a method to call during the drawing of the image.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>This method is called frequently to check whether to stop execution of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)"&gt;&lt;/xref&gt;</ph> method according to application-determined criteria.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Value specifying additional data for the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate to use when checking whether to stop execution of the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id="ph1">`destPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload with the <ph id="ph1">`callback`</ph> and <ph id="ph2">`callbackData`</ph> parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate that specifies a method to call during the drawing of the image.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>This method is called frequently to check whether to stop execution of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)"&gt;&lt;/xref&gt;</ph> method according to application-determined criteria.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Value specifying additional data for the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate to use when checking whether to stop execution of the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id="ph1">`destPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload with the <ph id="ph1">`callback`</ph> parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate that specifies a method to call during the drawing of the image.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>This method is called frequently to check whether to stop execution of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)"&gt;&lt;/xref&gt;</ph> method according to application-determined criteria.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id="ph1">`destPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload with the <ph id="ph1">`callback`</ph> parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImageAbort"&gt;&lt;/xref&gt;</ph> delegate that specifies a method to call during the drawing of the image.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>This method is called frequently to check whether to stop execution of the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)"&gt;&lt;/xref&gt;</ph> method according to application-determined criteria.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Draws the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle defined by the <ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters determines the position and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Width of the drawn image.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Height of the drawn image.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Draws the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rectangle defined by the <ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters determines the position and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Width of the drawn image.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Height of the drawn image.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id="ph1">`destPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Draws the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph>, using its original physical size, at the specified location.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that represents the location of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Draws the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified shape and size.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image represented by the <ph id="ph1">`image`</ph> parameter is scaled and sheared to fit the shape of the parallelogram specified by the <ph id="ph2">`destPoints`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Draws the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph>, using its original physical size, at the specified location.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that represents the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Draws the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified shape and size.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image represented by the <ph id="ph1">`image`</ph> object is scaled and sheared to fit the shape of the parallelogram specified by the <ph id="ph2">`destPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Draws the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image represented by the <ph id="ph1">`image`</ph> object is scaled to the dimensions of the <ph id="ph2">`rect`</ph> rectangle.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Draws the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image represented by the <ph id="ph1">`image`</ph> object is scaled to the dimensions of the <ph id="ph2">`rect`</ph> rectangle.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Draws the specified image, using its original physical size, at the location specified by a coordinate pair.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImage%2A&gt;</ph> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImage%2A&gt;</ph> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Draws a portion of an image at a specified location.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id="ph1">`destPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id="ph1">`destPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location and with the specified size.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled to fit inside the rectangle specified by the <ph id="ph1">`destRect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn image.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>The image is scaled to fit the rectangle.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Draws the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph>, using its original physical size, at the specified location.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Draws the specified portion of the specified <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> at the specified location.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`srcRect`</ph> parameter specifies a rectangular portion of the<ph id="ph2">`image`</ph> object to draw.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT">
          <source>This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id="ph1">`destPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object to draw.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the units of measure used by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies recoloring and gamma information for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">image</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Draws a specified image using its original physical size at a specified location.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImageUnscaled%2A&gt;</ph> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImageUnscaled%2A&gt;</ph> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Draws the specified image using its original physical size at the location specified by a coordinate pair.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImageUnscaled%2A&gt;</ph> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImageUnscaled%2A&gt;</ph> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Draws a specified image using its original physical size at a specified location.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImageUnscaled%2A&gt;</ph> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImageUnscaled%2A&gt;</ph> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that specifies the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Draws a specified image using its original physical size at a specified location.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Drawing.Image&gt;</ph> stores a value for pixel width and a value for horizontal resolution (dots per inch).</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar remarks apply to pixel height and physical height.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImageUnscaled%2A&gt;</ph> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawImageUnscaled%2A&gt;</ph> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that specifies the upper-left corner of the drawn image.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>The X and Y properties of the rectangle specify the upper-left corner.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>The Width and Height properties are ignored.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Draws the specified image without scaling and clips it, if necessary, to fit in the specified rectangle.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> in which to draw the image.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Draws a line connecting two <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a line connecting the two points specified by the <ph id="ph1">`pt1`</ph> and p<ph id="ph2">`2`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the line.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that represents the first point to connect.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that represents the second point to connect.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Draws a line connecting the two points specified by the coordinate pairs.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a line connecting the two points specified by the <ph id="ph1">`x1`</ph>, <ph id="ph2">`y1`</ph>, <ph id="ph3">`x2`</ph>, and <ph id="ph4">`y2`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the line.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the first point.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the first point.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the second point.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the second point.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Draws a line connecting the two points specified by the coordinate pairs.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a line connecting the two points specified by the <ph id="ph1">`x1`</ph>, <ph id="ph2">`y1`</ph>, <ph id="ph3">`x2`</ph>, and <ph id="ph4">`y2`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the line.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the first point.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the first point.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the second point.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the second point.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>Draws a line connecting two <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the line.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that represents the first point to connect.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that represents the second point to connect.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>Draws a series of line segments that connect an array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a series of lines connecting an array of ending points.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first two points in the array specify the first line.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the line segments.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that represent the points to connect.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>Draws a series of line segments that connect an array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a series of lines connecting an array of ending points.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first two points in the array specify the first line.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the line segments.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that represent the points to connect.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Draws a <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsPath"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current transformation in the graphic context is applied to the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> before it is drawn.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the path.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsPath"&gt;&lt;/xref&gt;</ph> to draw.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle described by the <ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pie shape consists of the two radial lines defined by the <ph id="ph1">`startAngle`</ph> and <ph id="ph2">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>Width of the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Height of the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>Angle measured in degrees clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the second side of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Draws a pie shape defined by an ellipse specified by a <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure and two radial lines.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pie shape consists of the two radial lines defined by the <ph id="ph1">`startAngle`</ph> and <ph id="ph2">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>Angle measured in degrees clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the second side of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>Draws a pie shape defined by an ellipse specified by a <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure and two radial lines.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pie shape consists of the two radial lines defined by the <ph id="ph1">`startAngle`</ph> and <ph id="ph2">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>Angle measured in degrees clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the second side of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle described by the <ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pie shape consists of the two radial lines defined by the <ph id="ph1">`startAngle`</ph> and <ph id="ph2">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Width of the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>Height of the bounding rectangle that defines the ellipse from which the pie shape comes.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>Angle measured in degrees clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the second side of the pie shape.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>Draws a polygon defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every pair of two consecutive points in the array specifies a side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, if the last point and the first of the array point do not coincide, they specify the last side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the polygon.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that represent the vertices of the polygon.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>Draws a polygon defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every pair of two consecutive points in the array specifies a side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, if the last point and the first point of the array do not coincide, they specify the last side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the polygon.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that represent the vertices of the polygon.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>Draws a rectangle specified by a <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about how to draw a <ph id="ph1">&lt;xref:System.Drawing.RectangleF&gt;</ph>, see<ph id="ph2">&lt;xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that represents the rectangle to draw.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>Draws a rectangle specified by a coordinate pair, a width, and a height.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about how to draw a <ph id="ph1">&lt;xref:System.Drawing.RectangleF&gt;</ph>, see <ph id="ph2">&lt;xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the rectangle to draw.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the rectangle to draw.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>Width of the rectangle to draw.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Height of the rectangle to draw.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>Draws a rectangle specified by a coordinate pair, a width, and a height.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about how to draw a <ph id="ph1">&lt;xref:System.Drawing.RectangleF&gt;</ph>, see <ph id="ph2">&lt;xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the rectangle to draw.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the rectangle to draw.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>The width of the rectangle to draw.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>The height of the rectangle to draw.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>Draws a series of rectangles specified by <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the outlines of the rectangles.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structures that represent the rectangles to draw.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rects&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rects&lt;/code&gt;</ph> is a zero-length array.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>Draws a series of rectangles specified by <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Pen"&gt;&lt;/xref&gt;</ph> that determines the color, width, and style of the outlines of the rectangles.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structures that represent the rectangles to draw.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pen&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rects&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rects&lt;/code&gt;</ph> is a zero-length array.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Draws the specified text string at the specified location with the specified <ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> objects using the formatting attributes of the specified <ph id="ph3">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>String to draw.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the color and texture of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>Draws the specified text string in the specified rectangle with the specified <ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> objects using the formatting attributes of the specified <ph id="ph3">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text represented by the <ph id="ph1">`s`</ph> parameter is drawn inside the rectangle represented by the <ph id="ph2">`layoutRectangle`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the text does not fit inside the rectangle, it is truncated at the nearest word, unless otherwise specified with the <ph id="ph1">`format`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>String to draw.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the color and texture of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>Draws the specified text string at the specified location with the specified <ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>String to draw.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the color and texture of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>Draws the specified text string in the specified rectangle with the specified <ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text represented by the <ph id="ph1">`s`</ph> parameter is drawn inside the rectangle represented by the <ph id="ph2">`layoutRectangle`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the text does not fit inside the rectangle, it is truncated at the nearest word.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT">
          <source>To further manipulate how the string is drawn inside the rectangle use the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawString%2A&gt;</ph> overload that takes a <ph id="ph2">&lt;xref:System.Drawing.StringFormat&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>String to draw.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the color and texture of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Draws the specified text string at the specified location with the specified <ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>String to draw.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the color and texture of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that specifies the upper-left corner of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>Draws the specified text string at the specified location with the specified <ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> objects using the formatting attributes of the specified <ph id="ph3">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>String to draw.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the color and texture of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that specifies the upper-left corner of the drawn text.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>Closes the current graphics container and restores the state of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the state saved by a call to the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.BeginContainer"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method with the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method to create nested graphics containers.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph>, an information block that holds the state of the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> is put on a stack.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph> that identifies that information block.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass the identifying object to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, the information block is removed from the stack and is used to restore the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Containers can be nested; that is, you can call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method several times before you call the <ph id="ph2">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method, an information block is put on the stack, and you receive a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph> for the information block.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass one of those objects to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is returned to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call that returned that particular <ph id="ph4">&lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information block placed on the stack by that <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call is removed from the stack, and all information blocks placed on that stack after that <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call are also removed.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method place information blocks on the same stack as calls to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Just as an <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method call is paired with a <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call, a <ph id="ph3">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method call is paired with a <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, when you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsContainer"&gt;&lt;/xref&gt;</ph> that represents the container this method restores.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Sends the records of the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>Sends the records of a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>Sends the records of the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>Sends the records of a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point.</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>Sends the records of a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the<ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram.</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structures that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source>Sends the records of a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>Sends the records of a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>Sends the records of a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the method of the specific <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point.</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram.</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point.</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the<ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram.</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>Sends the records of the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point.</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram.</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>Sends the records of the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram.</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>Sends the records of the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>Sends the records of the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the location and size of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point.</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`destPoints`</ph> parameter specifies three points of a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth point is extrapolated from the first three to form a parallelogram.</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT">
          <source>The drawn metafile is scaled and sheared to fit the parallelogram.</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image attributes specified by the <ph id="ph1">`imageAttr`</ph> parameter replace those specified when the metafile was written.</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>Array of three <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define a parallelogram that determines the size and location of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.ImageAttributes"&gt;&lt;/xref&gt;</ph> that specifies image attribute information for the drawn image.</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>Sends the records in a selected rectangle from a <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point.</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any drawing that takes place outside of the rectangle specified by the <ph id="ph1">`srcRect`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">srcRect</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains.</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>Sends the records in the specified <ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph>, one at a time, to a callback method for display at a specified point.</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enumerates the records contained in the specified metafile.</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each record is individually sent to a callback method specified by the <ph id="ph1">`callback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the callback method calls the <ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method to "play back", or draw, the record.</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method calls<ph id="ph1">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph>, it must do so by calling the <ph id="ph2">&lt;xref:System.Drawing.Imaging.Metafile.PlayRecord%2A&gt;</ph> method of the specific <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph> that is being enumerated.</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Imaging.Metafile"&gt;&lt;/xref&gt;</ph> to enumerate.</source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that specifies the location of the upper-left corner of the drawn metafile.</source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.EnumerateMetafileProc"&gt;&lt;/xref&gt;</ph> delegate that specifies the method to which the metafile records are sent.</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>Internal pointer that is required, but ignored.</source>
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph> for this parameter.</source>
        </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>Updates the clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to exclude the area specified by a <ph id="ph2">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method excludes the area specified by the <ph id="ph1">`region`</ph> parameter from the current clip region and assigns the resulting area to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Clip%2A&gt;</ph> property of this <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> that specifies the region to exclude from the clip region.</source>
        </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>Updates the clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to exclude the area specified by a <ph id="ph2">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method excludes the area specified by the <ph id="ph1">`rect`</ph> parameter from the current clip region and assigns the resulting area to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Clip%2A&gt;</ph> property of this <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that specifies the rectangle to exclude from the clip region.</source>
        </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>Fills the interior of a closed cardinal spline curve defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a default tension of 0.5.</source>
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>Fills the interior of a closed cardinal spline curve defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.PointF&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a default tension of 0.5.</source>
        </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve">
          <source>Fills the interior of a closed cardinal spline curve defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures using the specified fill mode.</source>
        </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a default tension of 0.5.</source>
        </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.FillMode"&gt;&lt;/xref&gt;</ph> enumeration that determines how the curve is filled.</source>
        </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve">
          <source>Fills the interior of a closed cardinal spline curve defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures using the specified fill mode.</source>
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a default tension of 0.5.</source>
        </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.FillMode"&gt;&lt;/xref&gt;</ph> enumeration that determines how the curve is filled.</source>
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve">
          <source>Fills the interior of a closed cardinal spline curve defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures using the specified fill mode and tension.</source>
        </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`tension`</ph> parameter determines the shape of the spline.</source>
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.</source>
        </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, the <ph id="ph1">`tension`</ph> parameter is less than or equal to 1.0F.</source>
        </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values over 1.0F produce unusual results.</source>
        </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.FillMode"&gt;&lt;/xref&gt;</ph> enumeration that determines how the curve is filled.</source>
        </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve">
          <source>Value greater than or equal to 0.0F that specifies the tension of the curve.</source>
        </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>Fills the interior of a closed cardinal spline curve defined by an array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures using the specified fill mode and tension.</source>
        </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of a closed cardinal spline that passes through each point in the array.</source>
        </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array of points must contain at least four <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`tension`</ph> parameter determines the shape of the spline.</source>
        </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.</source>
        </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, the <ph id="ph1">`tension`</ph> parameter is less than or equal to 1.0F.</source>
        </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values over 1.0F produce unusual results.</source>
        </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that define the spline.</source>
        </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.FillMode"&gt;&lt;/xref&gt;</ph> enumeration that determines how the curve is filled.</source>
        </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>Value greater than or equal to 0.0F that specifies the tension of the curve.</source>
        </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve">
          <source>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.</source>
        </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of an ellipse with a <ph id="ph1">&lt;xref:System.Drawing.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle represented by the <ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source>Width of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>Height of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve">
          <source>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.</source>
        </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of an ellipse with a <ph id="ph1">&lt;xref:System.Drawing.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle represented by the <ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve">
          <source>Width of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve">
          <source>Height of the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve">
          <source>Fills the interior of an ellipse defined by a bounding rectangle specified by a <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of an ellipse with a <ph id="ph1">&lt;xref:System.Drawing.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle represented by the <ph id="ph1">`rect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that represents the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve">
          <source>Fills the interior of an ellipse defined by a bounding rectangle specified by a <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of an ellipse with a <ph id="ph1">&lt;xref:System.Drawing.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle represented by the <ph id="ph1">`rect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that represents the bounding rectangle that defines the ellipse.</source>
        </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve">
          <source>Fills the interior of a <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsPath"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> consists of a series of line and curve segments.</source>
        </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the path represented by the <ph id="ph1">`path`</ph> parameter is not closed, an additional segment is added from the last point to the first point to close the path.</source>
        </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsPath"&gt;&lt;/xref&gt;</ph> that represents the path to fill.</source>
        </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source>Fills the interior of a pie section defined by an ellipse specified by a <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure and two radial lines.</source>
        </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.</source>
        </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pie section consists of the two radial lines defined by the <ph id="ph1">`startAngle`</ph> and <ph id="ph2">`sweepAngle`</ph> parameters and the arc between the intersections of those radial lines with the ellipse.</source>
        </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</source>
        </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes.</source>
        </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the x-axis to the first side of the pie section.</source>
        </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the second side of the pie section.</source>
        </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source>Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.</source>
        </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.</source>
        </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pie section consists of the two radial lines defined by the <ph id="ph1">`startAngle`</ph> and <ph id="ph2">`sweepAngle`</ph> parameters and the arc between the intersections of those radial lines with the ellipse.</source>
        </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</source>
        </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.</source>
        </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.</source>
        </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>Width of the bounding rectangle that defines the ellipse from which the pie section comes.</source>
        </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source>Height of the bounding rectangle that defines the ellipse from which the pie section comes.</source>
        </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the x-axis to the first side of the pie section.</source>
        </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the second side of the pie section.</source>
        </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve">
          <source>Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.</source>
        </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.</source>
        </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ellipse is defined by the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pie section consists of the two radial lines defined by the <ph id="ph1">`startAngle`</ph> and <ph id="ph2">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.</source>
        </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</source>
        </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.</source>
        </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.</source>
        </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve">
          <source>Width of the bounding rectangle that defines the ellipse from which the pie section comes.</source>
        </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>Height of the bounding rectangle that defines the ellipse from which the pie section comes.</source>
        </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the x-axis to the first side of the pie section.</source>
        </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve">
          <source>Angle in degrees measured clockwise from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startAngle</ph><ept id="p1">&lt;/code&gt;</ept> parameter to the second side of the pie section.</source>
        </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve">
          <source>Fills the interior of a polygon defined by an array of points specified by <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every two consecutive points in the array specify a side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that represent the vertices of the polygon to fill.</source>
        </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve">
          <source>Fills the interior of a polygon defined by an array of points specified by <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every two consecutive points in the array specify a side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that represent the vertices of the polygon to fill.</source>
        </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve">
          <source>Fills the interior of a polygon defined by an array of points specified by <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures using the specified fill mode.</source>
        </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every two consecutive points in the array specify a side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that represent the vertices of the polygon to fill.</source>
        </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.FillMode"&gt;&lt;/xref&gt;</ph> enumeration that determines the style of the fill.</source>
        </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve">
          <source>Fills the interior of a polygon defined by an array of points specified by <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures using the specified fill mode.</source>
        </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every two consecutive points in the array specify a side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</source>
        </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that represent the vertices of the polygon to fill.</source>
        </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.FillMode"&gt;&lt;/xref&gt;</ph> enumeration that determines the style of the fill.</source>
        </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;points&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve">
          <source>Fills the interior of a rectangle specified by a <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of the rectangle defined by the <ph id="ph1">`rect`</ph> parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.</source>
        </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that represents the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve">
          <source>Fills the interior of a rectangle specified by a <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of the rectangle defined by the <ph id="ph1">`rect`</ph> parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.</source>
        </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that represents the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.</source>
        </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of the rectangle defined by the<ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.</source>
        </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve">
          <source>Width of the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve">
          <source>Height of the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve">
          <source>Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.</source>
        </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method fills the interior of the rectangle defined by the <ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>, <ph id="ph3">`width`</ph>, and <ph id="ph4">`height`</ph> parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.</source>
        </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve">
          <source>Width of the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve">
          <source>Height of the rectangle to fill.</source>
        </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve">
          <source>Fills the interiors of a series of rectangles specified by <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structures that represent the rectangles to fill.</source>
        </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rects&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Rects&lt;/code&gt;</ph> is a zero-length array.</source>
        </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve">
          <source>Fills the interiors of a series of rectangles specified by <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structures that represent the rectangles to fill.</source>
        </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rects&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rects&lt;/code&gt;</ph> is a zero-length array.</source>
        </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve">
          <source>Fills the interior of a <ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Drawing.Region&gt;</ph> is composed of rectangles and paths.</source>
        </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the region is not closed, an additional segment is added from the last point to the first point to close it.</source>
        </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Brush"&gt;&lt;/xref&gt;</ph> that determines the characteristics of the fill.</source>
        </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> that represents the area to fill.</source>
        </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;brush&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;region&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve">
          <source>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</source>
        </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve">
          <source>Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.</source>
        </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method starts a flush and returns immediately without waiting for any currently executing graphics operation to finish.</source>
        </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source>Forces execution of all pending graphics operations with the method waiting or not waiting, as specified, to return before the operations finish.</source>
        </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.FlushIntention.Flush&gt;</ph> for the <ph id="ph2">`intention`</ph> parameter specifies that the method return immediately after beginning the flush, while a value of <ph id="ph3">&lt;xref:System.Drawing.Drawing2D.FlushIntention.Sync&gt;</ph> specifies that the method wait before returning until any existing operations finish.</source>
        </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.FlushIntention"&gt;&lt;/xref&gt;</ph> enumeration that specifies whether the method returns immediately or waits for any existing operations to finish.</source>
        </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> from the specified handle to a device context.</source>
        </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should always call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Dispose%2A&gt;</ph> method to release the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> and related resources created by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.FromHdc%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even if the display device has an associated ICM color profile, <ph id="ph1">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> will not use that profile by default.</source>
        </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable ICM for a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph>, construct the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> from an HDC after you pass the HDC (and ICM_ON) to the <ph id="ph3">`SetICMMode`</ph> function.</source>
        </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then any drawing done by the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> will be adjusted according to the ICM profile associated with the display device.</source>
        </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enabling ICM will result in slower performance.</source>
        </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" extradata="MT">
          <source>The state of the device context (mapping mode, logical unit, and the like) at the time you call <ph id="ph1">&lt;xref:System.Drawing.Graphics.FromHdc%2A&gt;</ph> can affect rendering done by the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve">
          <source>Handle to a device context.</source>
        </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve">
          <source>This method returns a new <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the specified device context.</source>
        </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> from the specified handle to a device context and handle to a device.</source>
        </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should always call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Dispose%2A&gt;</ph> method to release the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> and related resources created by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.FromHdc%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even if the display device has an associated ICM color profile, <ph id="ph1">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> will not use that profile by default.</source>
        </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable ICM for a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph>, construct the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> from an HDC after you pass the HDC (and ICM_ON) to the <ph id="ph3">`SetICMMode`</ph> function.</source>
        </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then any drawing done by the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> will be adjusted according to the ICM profile associated with the display device.</source>
        </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enabling ICM will result in slower performance.</source>
        </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT">
          <source>The state of the device context (mapping mode, logical unit, and the like) at the time you call <ph id="ph1">&lt;xref:System.Drawing.Graphics.FromHdc%2A&gt;</ph> can affect rendering done by the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT">
          <source>The device handle is typically used to query specific printer capabilities.</source>
        </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve">
          <source>Handle to a device context.</source>
        </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve">
          <source>Handle to a device.</source>
        </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve">
          <source>This method returns a new <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the specified device context and device.</source>
        </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the specified device context.</source>
        </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should not be used.</source>
        </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source>Handle to a device context.</source>
        </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the specified device context.</source>
        </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> from the specified handle to a window.</source>
        </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should always call the<ph id="ph1">&lt;xref:System.Drawing.Graphics.Dispose%2A&gt;</ph> method to release the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> and related resources created by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.FromHwnd%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve">
          <source>Handle to a window.</source>
        </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve">
          <source>This method returns a new <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the specified window handle.</source>
        </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the specified windows handle.</source>
        </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should not be used.</source>
        </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve">
          <source>Handle to a window.</source>
        </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the specified window handle.</source>
        </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> from the specified <ph id="ph2">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the image has an indexed pixel format, this method throws an exception with the message, "A Graphics object cannot be created from an image that has an indexed pixel format."</source>
        </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" extradata="MT">
          <source>The indexed pixel formats are shown in the following list.</source>
        </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can save the indexed image as another format by using the <ph id="ph1">&lt;xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29&gt;</ph> method and then retrieve a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object for the new image.</source>
        </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method also throws an exception if the image has any of the following pixel formats.</source>
        </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should always call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Dispose%2A&gt;</ph> method to release the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> and related resources created by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.FromImage%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> from which to create the new <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve">
          <source>This method returns a new <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the specified <ph id="ph2">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;image&lt;/code&gt;</ph> has an indexed pixel format or its format is undefined.</source>
        </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve">
          <source>Gets the cumulative graphics context.</source>
        </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is an object array where the first element contains the cumulative clip region and the second element contains the cumulative translate/transform matrix.</source>
        </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> representing the cumulative graphics context.</source>
        </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>Gets a handle to the current Windows halftone palette.</source>
        </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of the <ph id="ph1">&lt;xref:System.Drawing.Graphics.GetHalftonePalette%2A&gt;</ph> method is to enable <ph id="ph2">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> to produce a better quality halftone when the display uses 8 bits per pixel.</source>
        </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT">
          <source>To display an image using the halftone palette, use the following procedure.</source>
        </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source>Internal pointer that specifies the handle to the palette.</source>
        </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>Gets the handle to the device context associated with this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT">
          <source>The device context is a Windows structure based on <ph id="ph1">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output.</source>
        </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns that device context with the exception of a font.</source>
        </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a font is not selected, calls to the <ph id="ph1">&lt;xref:System.Drawing.Font.FromHdc%2A&gt;</ph> method using a handle returned from the <ph id="ph2">&lt;xref:System.Drawing.Graphics.GetHdc%2A&gt;</ph> method will fail.</source>
        </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.GetHdc%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt;</ph> methods must appear in pairs.</source>
        </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT">
          <source>During the scope of a <ph id="ph1">&lt;xref:System.Drawing.Graphics.GetHdc%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt;</ph> method pair, you usually make only calls to <ph id="ph3">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> functions.</source>
        </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls in that scope made to <ph id="ph1">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> methods of the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> that produced the <ph id="ph3">`hdc`</ph> parameter fail with an <ph id="ph4">`ObjectBusy`</ph> error.</source>
        </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, <ph id="ph1">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> ignores any state changes made to the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> of the <ph id="ph3">`hdc`</ph> parameter in subsequent operations.</source>
        </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>Handle to the device context associated with this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source>Gets the nearest color to the specified <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> structure for which to find a match.</source>
        </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> structure that represents the nearest color to the one specified with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">color</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve">
          <source>Gets or sets the interpolation mode associated with this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT">
          <source>The interpolation mode determines how intermediate values between two endpoints are calculated.</source>
        </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.InterpolationMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve">
          <source>Updates the clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the intersection of the current clip region and the specified <ph id="ph2">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method assigns to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Clip%2A&gt;</ph> property of this <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> the area represented by the intersection of the current clip region and the rectangle specified by the <ph id="ph3">`rect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure to intersect with the current clip region.</source>
        </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>Updates the clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the intersection of the current clip region and the specified <ph id="ph2">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method assigns to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Clip%2A&gt;</ph> property of this <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> the area represented by the intersection of the current clip region and the rectangle specified by the <ph id="ph3">`rect`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure to intersect with the current clip region.</source>
        </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve">
          <source>Updates the clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the intersection of the current clip region and the specified <ph id="ph2">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method assigns to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Clip%2A&gt;</ph> property of this <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> the area represented by the intersection of the current clip region and the region specified by the <ph id="ph3">`region`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> to intersect with the current region.</source>
        </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the clipping region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> is empty; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve">
          <source>Indicates whether the specified <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure is contained within the visible clip region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the point specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">point</ph><ept id="p1">&lt;/code&gt;</ept> parameter is contained within the visible clip region of this <ph id="ph3">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve">
          <source>Indicates whether the specified <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure is contained within the visible clip region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the point specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">point</ph><ept id="p1">&lt;/code&gt;</ept> parameter is contained within the visible clip region of this <ph id="ph3">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve">
          <source>Indicates whether the rectangle specified by a <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure is contained within the visible clip region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">rect</ph><ept id="p1">&lt;/code&gt;</ept> parameter is contained within the visible clip region of this <ph id="ph3">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve">
          <source>Indicates whether the rectangle specified by a <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure is contained within the visible clip region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the rectangle specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">rect</ph><ept id="p1">&lt;/code&gt;</ept> parameter is contained within the visible clip region of this <ph id="ph3">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source>Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the point to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the point to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the point defined by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">x</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">y</ph><ept id="p2">&lt;/code&gt;</ept> parameters is contained within the visible clip region of this <ph id="ph4">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the point to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the point to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the point defined by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">x</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">y</ph><ept id="p2">&lt;/code&gt;</ept> parameters is contained within the visible clip region of this <ph id="ph4">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source>Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the rectangle to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the rectangle to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve">
          <source>Width of the rectangle to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve">
          <source>Height of the rectangle to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the rectangle defined by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">x</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">y</ph><ept id="p2">&lt;/code&gt;</ept>, <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">width</ph><ept id="p3">&lt;/code&gt;</ept>, and <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">height</ph><ept id="p4">&lt;/code&gt;</ept> parameters is contained within the visible clip region of this <ph id="ph6">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph7">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve">
          <source>Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the upper-left corner of the rectangle to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the upper-left corner of the rectangle to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve">
          <source>Width of the rectangle to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve">
          <source>Height of the rectangle to test for visibility.</source>
        </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the rectangle defined by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">x</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">y</ph><ept id="p2">&lt;/code&gt;</ept>, <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">width</ph><ept id="p3">&lt;/code&gt;</ept>, and <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">height</ph><ept id="p4">&lt;/code&gt;</ept> parameters is contained within the visible clip region of this <ph id="ph6">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph7">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the visible clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" extradata="MT">
          <source>The visible clipping region is the intersection of the clipping region of this <ph id="ph1">`Graphics`</ph> and the clipping region of the window.</source>
        </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the visible portion of the clipping region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> is empty; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve">
          <source>Gets an array of <ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> objects, each of which bounds a range of character positions within the specified string.</source>
        </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT">
          <source>The regions returned by this method are resolution-dependent, so there might be a slight loss of accuracy if strings are recorded in a metafile at one resolution and later played back at a different resolution.</source>
        </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve">
          <source>String to measure.</source>
        </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that specifies the layout rectangle for the string.</source>
        </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph> that represents formatting information, such as line spacing, for the string.</source>
        </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve">
          <source>This method returns an array of <ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> objects, each of which bounds a range of character positions within the specified string.</source>
        </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve">
          <source>Measures the specified string when drawn with the specified <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.</source>
        </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawString%2A&gt;</ph> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt;</ph> method or one of the <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> methods that takes a <ph id="ph3">&lt;xref:System.Drawing.StringFormat&gt;</ph>, and pass <ph id="ph4">&lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, ensure the <ph id="ph1">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is <ph id="ph3">&lt;xref:System.Drawing.Text.TextRenderingHint.AntiAlias&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve">
          <source>String to measure.</source>
        </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that represents the size, in the units specified by the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.PageUnit"&gt;&lt;/xref&gt;</ph> property, of the string specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">text</ph><ept id="p1">&lt;/code&gt;</ept> parameter as drawn with the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">font</ph><ept id="p2">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;font&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve">
          <source>Measures the specified string when drawn with the specified <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> within the specified layout area.</source>
        </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.</source>
        </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawString%2A&gt;</ph> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt;</ph> method or one of the <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> methods that takes a <ph id="ph3">&lt;xref:System.Drawing.StringFormat&gt;</ph>, and pass <ph id="ph4">&lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, ensure the <ph id="ph1">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is <ph id="ph3">&lt;xref:System.Drawing.Text.TextRenderingHint.AntiAlias&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve">
          <source>String to measure.</source>
        </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that specifies the maximum layout area for the text.</source>
        </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that represents the size, in the units specified by the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.PageUnit"&gt;&lt;/xref&gt;</ph> property, of the string specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">text</ph><ept id="p1">&lt;/code&gt;</ept> parameter as drawn with the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">font</ph><ept id="p2">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;font&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve">
          <source>Measures the specified string when drawn with the specified <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`width`</ph> parameter specifies the maximum value of the width component of the returned <ph id="ph2">&lt;xref:System.Drawing.SizeF&gt;</ph> structure (<ph id="ph3">&lt;xref:System.Drawing.SizeF.Width%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`width`</ph> parameter is less than the actual width of the string, the returned <ph id="ph2">&lt;xref:System.Drawing.SizeF.Width%2A&gt;</ph> component is truncated to a value representing the maximum number of characters that will fit within the specified width.</source>
        </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT">
          <source>To accommodate the entire string, the returned <ph id="ph1">&lt;xref:System.Drawing.SizeF.Height%2A&gt;</ph> component is adjusted to a value that allows displaying the string with character wrap.</source>
        </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.</source>
        </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawString%2A&gt;</ph> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt;</ph> method or one of the <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> methods that takes a <ph id="ph3">&lt;xref:System.Drawing.StringFormat&gt;</ph>, and pass <ph id="ph4">&lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, ensure the <ph id="ph1">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is <ph id="ph3">&lt;xref:System.Drawing.Text.TextRenderingHint.AntiAlias&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve">
          <source>String to measure.</source>
        </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the format of the string.</source>
        </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve">
          <source>Maximum width of the string in pixels.</source>
        </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that represents the size, in the units specified by the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.PageUnit"&gt;&lt;/xref&gt;</ph> property, of the string specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">text</ph><ept id="p1">&lt;/code&gt;</ept> parameter as drawn with the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">font</ph><ept id="p2">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;font&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve">
          <source>Measures the specified string when drawn with the specified <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> and formatted with the specified <ph id="ph2">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.</source>
        </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawString%2A&gt;</ph> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt;</ph> method or one of the <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> methods that takes a <ph id="ph3">&lt;xref:System.Drawing.StringFormat&gt;</ph>, and pass <ph id="ph4">&lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, ensure the <ph id="ph1">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is <ph id="ph3">&lt;xref:System.Drawing.Text.TextRenderingHint.AntiAlias&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve">
          <source>String to measure.</source>
        </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structure that represents the upper-left corner of the string.</source>
        </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph> that represents formatting information, such as line spacing, for the string.</source>
        </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that represents the size, in the units specified by the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.PageUnit"&gt;&lt;/xref&gt;</ph> property, of the string specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">text</ph><ept id="p1">&lt;/code&gt;</ept> parameter as drawn with the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">font</ph><ept id="p2">&lt;/code&gt;</ept> parameter and the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">stringFormat</ph><ept id="p3">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;font&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve">
          <source>Measures the specified string when drawn with the specified <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> and formatted with the specified <ph id="ph2">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.</source>
        </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawString%2A&gt;</ph> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt;</ph> method or one of the <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> methods that takes a <ph id="ph3">&lt;xref:System.Drawing.StringFormat&gt;</ph>, and pass <ph id="ph4">&lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, ensure the <ph id="ph1">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is <ph id="ph3">&lt;xref:System.Drawing.Text.TextRenderingHint.AntiAlias&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve">
          <source>String to measure.</source>
        </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that specifies the maximum layout area for the text.</source>
        </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph> that represents formatting information, such as line spacing, for the string.</source>
        </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that represents the size, in the units specified by the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.PageUnit"&gt;&lt;/xref&gt;</ph> property, of the string specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">text</ph><ept id="p1">&lt;/code&gt;</ept> parameter as drawn with the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">font</ph><ept id="p2">&lt;/code&gt;</ept> parameter and the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">stringFormat</ph><ept id="p3">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;font&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve">
          <source>Measures the specified string when drawn with the specified <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> and formatted with the specified <ph id="ph2">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.</source>
        </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawString%2A&gt;</ph> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt;</ph> method or one of the <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> methods that takes a <ph id="ph3">&lt;xref:System.Drawing.StringFormat&gt;</ph>, and pass <ph id="ph4">&lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, ensure the <ph id="ph1">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is <ph id="ph3">&lt;xref:System.Drawing.Text.TextRenderingHint.AntiAlias&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve">
          <source>String to measure.</source>
        </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve">
          <source>Maximum width of the string.</source>
        </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph> that represents formatting information, such as line spacing, for the string.</source>
        </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that represents the size, in the units specified by the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.PageUnit"&gt;&lt;/xref&gt;</ph> property, of the string specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">text</ph><ept id="p1">&lt;/code&gt;</ept> parameter as drawn with the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">font</ph><ept id="p2">&lt;/code&gt;</ept> parameter and the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">stringFormat</ph><ept id="p3">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;font&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve">
          <source>Measures the specified string when drawn with the specified <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> and formatted with the specified <ph id="ph2">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.</source>
        </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawString%2A&gt;</ph> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <ph id="ph1">&lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt;</ph> method or one of the <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;</ph> methods that takes a <ph id="ph3">&lt;xref:System.Drawing.StringFormat&gt;</ph> and pass <ph id="ph4">&lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also ensure the <ph id="ph1">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is <ph id="ph3">&lt;xref:System.Drawing.Text.TextRenderingHint.AntiAlias&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve">
          <source>String to measure.</source>
        </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> that defines the text format of the string.</source>
        </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that specifies the maximum layout area for the text.</source>
        </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.StringFormat"&gt;&lt;/xref&gt;</ph> that represents formatting information, such as line spacing, for the string.</source>
        </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve">
          <source>Number of characters in the string.</source>
        </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve">
          <source>Number of text lines in the string.</source>
        </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> structure that represents the size of the string, in the units specified by the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.PageUnit"&gt;&lt;/xref&gt;</ph> property, of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">text</ph><ept id="p1">&lt;/code&gt;</ept> parameter as drawn with the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">font</ph><ept id="p2">&lt;/code&gt;</ept> parameter and the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">stringFormat</ph><ept id="p3">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;font&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve">
          <source>Multiplies the world transformation of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> and specified the <ph id="ph2">&lt;xref href="System.Drawing.Drawing2D.Matrix"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method prepends the matrix specified by the <ph id="ph1">`matrix`</ph> parameter, so that the result is <ph id="ph2">`matrix`</ph> x world transformation.</source>
        </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve">
          <source>4x4 <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.Matrix"&gt;&lt;/xref&gt;</ph> that multiplies the world transformation.</source>
        </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve">
          <source>Multiplies the world transformation of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> and specified the <ph id="ph2">&lt;xref href="System.Drawing.Drawing2D.Matrix"&gt;&lt;/xref&gt;</ph> in the specified order.</source>
        </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of<ph id="ph1">&lt;xref:System.Drawing.Drawing2D.MatrixOrder.Prepend&gt;</ph> for the <ph id="ph2">`order`</ph> parameter specifies that the order of the multiplication is <ph id="ph3">`matrix`</ph> x world transformation.</source>
        </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.MatrixOrder.Append&gt;</ph> for <ph id="ph2">`order`</ph> specifies that the order of the multiplication is world transformation x <ph id="ph3">`matrix`</ph>.</source>
        </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve">
          <source>4x4 <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.Matrix"&gt;&lt;/xref&gt;</ph> that multiplies the world transformation.</source>
        </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.MatrixOrder"&gt;&lt;/xref&gt;</ph> enumeration that determines the order of the multiplication.</source>
        </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve">
          <source>Gets or sets the scaling between world units and page units for this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve">
          <source>This property specifies a value for the scaling between world units and page units for this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve">
          <source>Gets or sets the unit of measure used for page coordinates in this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" extradata="MT">
          <source>The graphics unit is the unit of measure used for page coordinates in this <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.GraphicsUnit"&gt;&lt;/xref&gt;</ph> values other than <ph id="ph2">&lt;xref href="System.Drawing.GraphicsUnit.World"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics.PageUnit"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Drawing.GraphicsUnit.World"&gt;&lt;/xref&gt;</ph>, which is not a physical unit.</source>
        </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve">
          <source>Gets or set a value specifying how pixels are offset during rendering of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to specify either higher quality, slower rendering, or lower quality, faster rendering of the contents of this<ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph>object.</source>
        </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve">
          <source>This property specifies a member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.PixelOffsetMode"&gt;&lt;/xref&gt;</ph> enumeration</source>
        </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve">
          <source>Releases a device context handle obtained by a previous call to the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.GetHdc"&gt;&lt;/xref&gt;</ph> method of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Drawing.Graphics.GetHdc%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt;</ph> are two methods that allow you to get and release the handle for a Windows device.</source>
        </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should always follow a call to <ph id="ph1">&lt;xref:System.Drawing.Graphics.GetHdc%2A&gt;</ph> with a call to <ph id="ph2">&lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt;</ph> when you are finished with the Windows handle.</source>
        </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve">
          <source>Releases a device context handle obtained by a previous call to the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.GetHdc"&gt;&lt;/xref&gt;</ph> method of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT">
          <source>The device context is a Windows structure based on <ph id="ph1">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output.</source>
        </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.GetHdc%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt;</ph> methods must appear in pairs.</source>
        </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT">
          <source>During the scope of a <ph id="ph1">&lt;xref:System.Drawing.Graphics.GetHdc%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt;</ph> method pair, you usually make calls only to <ph id="ph3">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> functions.</source>
        </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls in that scope made to <ph id="ph1">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> methods of the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> that produced the <ph id="ph3">`hdc`</ph> parameter fail with an <ph id="ph4">`ObjectBusy`</ph> error.</source>
        </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, <ph id="ph1">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> ignores any state changes made to the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> of the <ph id="ph3">`hdc`</ph> parameter in subsequent operations.</source>
        </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve">
          <source>Handle to a device context obtained by a previous call to the <ph id="ph1">&lt;xref href="System.Drawing.Graphics.GetHdc"&gt;&lt;/xref&gt;</ph> method of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve">
          <source>Releases a handle to a device context.</source>
        </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve">
          <source>Handle to a device context.</source>
        </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve">
          <source>Gets or sets the rendering origin of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for dithering and for hatch brushes.</source>
        </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structure that represents the dither origin for 8-bits-per-pixel and 16-bits-per-pixel dithering and is also used to set the origin for hatch brushes.</source>
        </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve">
          <source>Resets the clip region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to an infinite region.</source>
        </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the clipping region of a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> is infinite, items that this <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> draws are not clipped.</source>
        </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve">
          <source>Resets the world transformation matrix of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the identity matrix.</source>
        </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The identity matrix represents a transformation with no scaling, rotation, or translation.</source>
        </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resetting the world transformation of this <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> to the identity matrix means that its world transformation does not change the geometry of transformed items.</source>
        </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve">
          <source>Restores the state of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the state represented by a <ph id="ph2">&lt;xref href="System.Drawing.Drawing2D.GraphicsState"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph>, an information block that holds the state of the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> is put on a stack.</source>
        </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph> that identifies that information block.</source>
        </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass the identifying <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph> to the<ph id="ph2">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, the information block is removed from the stack and is used to restore the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> to the state it was in at the time of the <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph> returned by a given call to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method can be passed only once to the <ph id="ph3">`Restore`</ph> method.</source>
        </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method can be nested; that is, you can call the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method several times before you call the <ph id="ph3">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method, an information block is put on the stack, and you receive a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph> for the information block.</source>
        </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass one of those objects to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is returned to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call that returned that particular <ph id="ph4">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information block placed on the stack by that <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call is removed from the stack, and all information blocks placed on that stack after that <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call are also removed.</source>
        </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method place information blocks on the same stack as calls to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Just as a <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> call is paired with a <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> call, a <ph id="ph3">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method call is paired with a <ph id="ph4">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, when you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsState"&gt;&lt;/xref&gt;</ph> that represents the state to which to restore this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve">
          <source>Applies the specified rotation to the transformation matrix of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the <ph id="ph1">`angle`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method applies the rotation by prepending it to the transformation matrix.</source>
        </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve">
          <source>Angle of rotation in degrees.</source>
        </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve">
          <source>Applies the specified rotation to the transformation matrix of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> in the specified order.</source>
        </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the <ph id="ph1">`angle`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method prepends or appends the transformation matrix of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> by the rotation matrix according to the <ph id="ph2">`order`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve">
          <source>Angle of rotation in degrees.</source>
        </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.MatrixOrder"&gt;&lt;/xref&gt;</ph> enumeration that specifies whether the rotation is appended or prepended to the matrix transformation.</source>
        </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve">
          <source>Saves the current state of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> and identifies the saved state with a <ph id="ph2">&lt;xref href="System.Drawing.Drawing2D.GraphicsState"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph>, an information block that holds the state of the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> is put on a stack.</source>
        </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph> that identifies that information block.</source>
        </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass the identifying <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph> to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, the information block is removed from the stack and is used to restore the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> to the state it was in at the time of the <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph> returned by a given call to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method can be passed only once to the <ph id="ph3">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method can be nested; that is, you can call the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method several times before you call the <ph id="ph3">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method, an information block is put on the stack, and you receive a<ph id="ph2">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph> for the information block.</source>
        </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass one of those objects to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> is returned to the state it was in at the time of the <ph id="ph3">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call that returned that particular <ph id="ph4">&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information block placed on the stack by that <ph id="ph1">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call is removed from the stack, and all information blocks placed on that stack after that <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method call are also removed.</source>
        </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method place information blocks on the same stack as calls to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Just as a <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> call is paired with a <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> call, a <ph id="ph3">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method call is paired with a <ph id="ph4">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Restore%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, When you call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> method, all information blocks placed on the stack (by the <ph id="ph2">&lt;xref:System.Drawing.Graphics.Save%2A&gt;</ph> method or by the <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method) after the corresponding call to the <ph id="ph4">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method are removed from the stack.</source>
        </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsState"&gt;&lt;/xref&gt;</ph> that represents the saved state of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve">
          <source>Applies the specified scaling operation to the transformation matrix of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> by prepending it to the object's transformation matrix.</source>
        </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (<ph id="ph1">`sx`</ph>, <ph id="ph2">`sy`</ph>, 1).</source>
        </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method prepends the transformation matrix of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> by the scaling matrix.</source>
        </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve">
          <source>Scale factor in the x direction.</source>
        </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve">
          <source>Scale factor in the y direction.</source>
        </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve">
          <source>Applies the specified scaling operation to the transformation matrix of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> in the specified order.</source>
        </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (<ph id="ph1">`sx`</ph>, <ph id="ph2">`sy`</ph>, 1).</source>
        </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method prepends or appends the transformation matrix of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> by the scaling matrix according to the <ph id="ph2">`order`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve">
          <source>Scale factor in the x direction.</source>
        </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve">
          <source>Scale factor in the y direction.</source>
        </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.MatrixOrder"&gt;&lt;/xref&gt;</ph> enumeration that specifies whether the scaling operation is prepended or appended to the transformation matrix.</source>
        </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve">
          <source>Sets the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the result of the specified operation combining the current clip region and the specified <ph id="ph2">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> to combine.</source>
        </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve">
          <source>Member from the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CombineMode"&gt;&lt;/xref&gt;</ph> enumeration that specifies the combining operation to use.</source>
        </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve">
          <source>Sets the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the result of the specified operation combining the current clip region and the rectangle specified by a <ph id="ph2">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure to combine.</source>
        </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CombineMode"&gt;&lt;/xref&gt;</ph> enumeration that specifies the combining operation to use.</source>
        </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve">
          <source>Sets the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the result of the specified operation combining the current clip region and the rectangle specified by a <ph id="ph2">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure to combine.</source>
        </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CombineMode"&gt;&lt;/xref&gt;</ph> enumeration that specifies the combining operation to use.</source>
        </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve">
          <source>Sets the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the result of the specified operation combining the current clip region and the specified <ph id="ph2">&lt;xref href="System.Drawing.Drawing2D.GraphicsPath"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the graphics path represented by the <ph id="ph1">`path`</ph> parameter is not closed, an additional segment is added from the last point to the first point to close the path.</source>
        </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsPath"&gt;&lt;/xref&gt;</ph> to combine.</source>
        </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CombineMode"&gt;&lt;/xref&gt;</ph> enumeration that specifies the combining operation to use.</source>
        </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve">
          <source>Sets the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the result of the specified combining operation of the current clip region and the <ph id="ph2">&lt;xref href="System.Drawing.Graphics.Clip"&gt;&lt;/xref&gt;</ph> property of the specified <ph id="ph3">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> that specifies the clip region to combine.</source>
        </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CombineMode"&gt;&lt;/xref&gt;</ph> enumeration that specifies the combining operation to use.</source>
        </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve">
          <source>Sets the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the rectangle specified by a <ph id="ph2">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> structure that represents the new clip region.</source>
        </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve">
          <source>Sets the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the <ph id="ph2">`Clip`</ph> property of the specified <ph id="ph3">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> from which to take the new clip region.</source>
        </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve">
          <source>Sets the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the specified <ph id="ph2">&lt;xref href="System.Drawing.Drawing2D.GraphicsPath"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the graphics path represented by the <ph id="ph1">`path`</ph> parameter is not closed, an additional segment is added from the last point to the first point to close the path.</source>
        </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.GraphicsPath"&gt;&lt;/xref&gt;</ph> that represents the new clip region.</source>
        </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve">
          <source>Sets the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> to the rectangle specified by a <ph id="ph2">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that represents the new clip region.</source>
        </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve">
          <source>Gets or sets the rendering quality for this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The smoothing mode specifies whether lines, curves, and the edges of filled areas use smoothing (also called antialiasing).</source>
        </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT">
          <source>One exception is that path gradient brushes do not obey the smoothing mode.</source>
        </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Areas filled using a <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.PathGradientBrush&gt;</ph> are rendered the same way (aliased) regardless of the <ph id="ph2">&lt;xref:System.Drawing.Graphics.SmoothingMode%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.SmoothingMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve">
          <source>Gets or sets the gamma correction value for rendering text.</source>
        </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The gamma correction value must be between 0 and 12.</source>
        </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value is 4.</source>
        </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve">
          <source>The gamma correction value used for rendering antialiased and ClearType text.</source>
        </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve">
          <source>Gets or sets the rendering mode for text associated with this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text rendering hint specifies whether text renders with antialiasing.</source>
        </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not use a <ph id="ph1">&lt;xref:System.Drawing.Graphics.CompositingMode%2A&gt;</ph> property value of <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy&gt;</ph> when the <ph id="ph3">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> property is set to <ph id="ph4">&lt;xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception could occur or the image may not render correctly.</source>
        </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.Text.TextRenderingHint"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve">
          <source>Gets or sets a copy of the geometric world transformation for this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" extradata="MT">
          <source>GDI+ uses three coordinate spaces: world, page, and device.</source>
        </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT">
          <source>World coordinates are the coordinates used to model a particular graphic world and are the coordinates you pass to methods in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Page coordinates refer to the coordinate system used by a drawing surface, such as a form or a control.</source>
        </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Device coordinates are the coordinates used by the physical device being drawn on, such as a screen or a printer.</source>
        </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics.Transform%2A&gt;</ph> property represents the world transformation, which maps world coordinates to page coordinates.</source>
        </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the matrix returned and by the <ph id="ph1">&lt;xref:System.Drawing.Graphics.Transform%2A&gt;</ph> property is a copy of the geometric transform, you should dispose of the matrix when you no longer need it.</source>
        </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve">
          <source>A copy of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.Matrix"&gt;&lt;/xref&gt;</ph> that represents the geometric world transformation for this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve">
          <source>Transforms an array of points from one coordinate space to another using the current world and page transformations of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CoordinateSpace"&gt;&lt;/xref&gt;</ph> enumeration that specifies the destination coordinate space.</source>
        </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CoordinateSpace"&gt;&lt;/xref&gt;</ph> enumeration that specifies the source coordinate space.</source>
        </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> structures that represents the points to transformation.</source>
        </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve">
          <source>Transforms an array of points from one coordinate space to another using the current world and page transformations of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CoordinateSpace"&gt;&lt;/xref&gt;</ph> enumeration that specifies the destination coordinate space.</source>
        </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.CoordinateSpace"&gt;&lt;/xref&gt;</ph> enumeration that specifies the source coordinate space.</source>
        </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve">
          <source>Array of <ph id="ph1">&lt;xref href="System.Drawing.PointF"&gt;&lt;/xref&gt;</ph> structures that represent the points to transform.</source>
        </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve">
          <source>Translates the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> by specified amounts in the horizontal and vertical directions.</source>
        </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the translation.</source>
        </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the translation.</source>
        </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve">
          <source>Translates the clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> by specified amounts in the horizontal and vertical directions.</source>
        </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the translation.</source>
        </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the translation.</source>
        </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve">
          <source>Changes the origin of the coordinate system by applying the specified translation to the transformation matrix of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> in the specified order.</source>
        </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT">
          <source>The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the <ph id="ph1">`dx`</ph> and <ph id="ph2">`dy`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method prepends or appends the transformation matrix of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> by the translation matrix according to the <ph id="ph2">`order`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the translation.</source>
        </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the translation.</source>
        </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve">
          <source>Member of the <ph id="ph1">&lt;xref href="System.Drawing.Drawing2D.MatrixOrder"&gt;&lt;/xref&gt;</ph> enumeration that specifies whether the translation is prepended or appended to the transformation matrix.</source>
        </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve">
          <source>Changes the origin of the coordinate system by prepending the specified translation to the transformation matrix of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The origin is typically the upper-left-hand corner of the drawing surface.</source>
        </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the <ph id="ph1">`dx`</ph> and <ph id="ph2">`dy`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method applies the translation by prepending the translation matrix to the transformation matrix.</source>
        </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the translation.</source>
        </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the translation.</source>
        </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve">
          <source>Gets the bounding rectangle of the visible clipping region of this <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The unit for resulting rectangle is designated by the <ph id="ph1">&lt;xref:System.Drawing.Graphics.PageUnit%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default unit is pixels.</source>
        </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.</source>
        </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT">
          <source>The visible clipping region is the intersection of the clipping region of this <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> and the clipping region of the window.</source>
        </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.RectangleF"&gt;&lt;/xref&gt;</ph> structure that represents a bounding rectangle for the visible clipping region of this <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>