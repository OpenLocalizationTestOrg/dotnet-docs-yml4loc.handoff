### YamlMime:ManagedReference
items:
- uid: System.Windows.ValidateValueCallback
  commentId: T:System.Windows.ValidateValueCallback
  id: ValidateValueCallback
  langs:
  - csharp
  name: ValidateValueCallback
  nameWithType: ValidateValueCallback
  fullName: System.Windows.ValidateValueCallback
  type: Delegate
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: Represents a method used as a callback that validates the effective value of a  dependency property.
  remarks: "Callbacks based on this delegate are used by certain signatures of <xref:System.Windows.DependencyProperty.Register%2A?displayProperty=fullName> and related methods, such as <xref:System.Windows.DependencyProperty.RegisterAttached%2A> and read-only equivalents. You should use signatures that take the `validateValueCallback` parameter if you want specific validation of the property value each time that its effective is set. You should then implement this callback such that it performs the actual validation of the proposed value. The callback should return `true` if the value submitted to the callback is valid, and `false` otherwise. A `false` value will produce an exception in the specific portion of the property system where the invalid property set was attempted, so your application should be prepared to handle these exceptions.  \n  \n Validation callbacks are stored on dependency property identifiers, rather than dependency property metadata. Your validation callback does not have access to a specific instance of a <xref:System.Windows.DependencyObject> on which the property is set, and can only influence what values are accepted for the property in general. If you need a callback that can change property values based on a specific instance, you should use a combination of a <xref:System.Windows.CoerceValueCallback> and <xref:System.Windows.PropertyChangedCallback> callbacks as applied to the property metadata of your property. You might also apply these callbacks to related properties that should influence your property's value. For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)."
  example:
  - "The following example includes an implementation of this callback to validate a range of values for a custom dependency property. In this case the property value expects an enumeration, and the validation assures that the provided value evaluates to a member of that enumeration.  \n  \n [!code-csharp[DPCustom#ValidateValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#validatevaluecallback)]\n [!code-vb[DPCustom#ValidateValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#validatevaluecallback)]"
  syntax:
    content: public delegate bool ValidateValueCallback(object value);
  inheritance:
  - System.Object
  - System.Delegate
  extensionMethods:
  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ValidateValueCallback.xml
  ms.technology:
  - dotnet-wpf
  ms.author: kempb
  manager: ghogen
references:
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetMethodInfo(Delegate)
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
