{"nodes":[{"content":"The exception that is thrown when an attempt is made to open a system mutex, semaphore, or event wait handle that does not exist.","nodes":[{"pos":[0,129],"content":"The exception that is thrown when an attempt is made to open a system mutex, semaphore, or event wait handle that does not exist.","nodes":[{"content":"The exception that is thrown when an attempt is made to open a system mutex, semaphore, or event wait handle that does not exist.","pos":[0,129]}]}],"pos":[891,1021],"yaml":true},{"content":"Instances of the <xref:System.Threading.Mutex>, <xref:System.Threading.Semaphore>, and  <xref:System.Threading.EventWaitHandle> classes can represent named system synchronization objects. When you use the <xref:System.Threading.Mutex.OpenExisting%2A?displayProperty=fullName> method, the <xref:System.Threading.Semaphore.OpenExisting%2A?displayProperty=fullName> method, or the  <xref:System.Threading.EventWaitHandle.OpenExisting%2A?displayProperty=fullName> method to open a named system object that does not exist, a <xref:System.Threading.WaitHandleCannotBeOpenedException> exception is thrown.","nodes":[{"pos":[0,598],"content":"Instances of the <xref:System.Threading.Mutex>, <xref:System.Threading.Semaphore>, and  <xref:System.Threading.EventWaitHandle> classes can represent named system synchronization objects. When you use the <xref:System.Threading.Mutex.OpenExisting%2A?displayProperty=fullName> method, the <xref:System.Threading.Semaphore.OpenExisting%2A?displayProperty=fullName> method, or the  <xref:System.Threading.EventWaitHandle.OpenExisting%2A?displayProperty=fullName> method to open a named system object that does not exist, a <xref:System.Threading.WaitHandleCannotBeOpenedException> exception is thrown.","nodes":[{"content":"Instances of the <xref:System.Threading.Mutex>, <xref:System.Threading.Semaphore>, and  <xref:System.Threading.EventWaitHandle> classes can represent named system synchronization objects. When you use the <xref:System.Threading.Mutex.OpenExisting%2A?displayProperty=fullName> method, the <xref:System.Threading.Semaphore.OpenExisting%2A?displayProperty=fullName> method, or the  <xref:System.Threading.EventWaitHandle.OpenExisting%2A?displayProperty=fullName> method to open a named system object that does not exist, a <xref:System.Threading.WaitHandleCannotBeOpenedException> exception is thrown.","pos":[0,598],"nodes":[{"content":"Instances of the <ph id=\"ph1\">&lt;xref:System.Threading.Mutex&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Semaphore&gt;</ph>, and  <ph id=\"ph3\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> classes can represent named system synchronization objects.","pos":[0,187],"source":"Instances of the <xref:System.Threading.Mutex>, <xref:System.Threading.Semaphore>, and  <xref:System.Threading.EventWaitHandle> classes can represent named system synchronization objects."},{"content":"When you use the <ph id=\"ph1\">&lt;xref:System.Threading.Mutex.OpenExisting%2A?displayProperty=fullName&gt;</ph> method, the <ph id=\"ph2\">&lt;xref:System.Threading.Semaphore.OpenExisting%2A?displayProperty=fullName&gt;</ph> method, or the  <ph id=\"ph3\">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%2A?displayProperty=fullName&gt;</ph> method to open a named system object that does not exist, a <ph id=\"ph4\">&lt;xref:System.Threading.WaitHandleCannotBeOpenedException&gt;</ph> exception is thrown.","pos":[188,598],"source":" When you use the <xref:System.Threading.Mutex.OpenExisting%2A?displayProperty=fullName> method, the <xref:System.Threading.Semaphore.OpenExisting%2A?displayProperty=fullName> method, or the  <xref:System.Threading.EventWaitHandle.OpenExisting%2A?displayProperty=fullName> method to open a named system object that does not exist, a <xref:System.Threading.WaitHandleCannotBeOpenedException> exception is thrown."}]}]}],"pos":[1032,1631],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with default values.","nodes":[{"pos":[0,132],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"&gt;&lt;/xref&gt;</ph> class with default values.","source":"Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with default values."}],"pos":[4307,4440],"yaml":true},{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"No handle of the given name exists.\" This message takes into account the current system culture.  \n  \n The following table shows the initial property values for an instance of <xref:System.Threading.WaitHandleCannotBeOpenedException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|`null`.|  \n|<xref:System.Exception.Message%2A>|The system-supplied error message string.|","nodes":[{"pos":[0,257],"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"No handle of the given name exists.\" This message takes into account the current system culture.","nodes":[{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"No handle of the given name exists.\" This message takes into account the current system culture.","pos":[0,257],"nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as \"No handle of the given name exists.\"","pos":[0,197],"source":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"No handle of the given name exists.\""},{"content":"This message takes into account the current system culture.","pos":[198,257]}]}]},{"pos":[264,395],"content":"The following table shows the initial property values for an instance of <xref:System.Threading.WaitHandleCannotBeOpenedException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandleCannotBeOpenedException&gt;</ph>.","pos":[0,131],"source":"The following table shows the initial property values for an instance of <xref:System.Threading.WaitHandleCannotBeOpenedException>."}]},{"pos":[402,410],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[411,416],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[452,493],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[494,501],"content":"<ph id=\"ph1\">`null`</ph>.","source":"`null`."},{"pos":[506,540],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[541,582],"content":"The system-supplied error message string.","nodes":[{"content":"The system-supplied error message string.","pos":[0,41]}]}],"pos":[4451,5046],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with a specified error message.","nodes":[{"pos":[0,143],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"&gt;&lt;/xref&gt;</ph> class with a specified error message.","source":"Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with a specified error message."}],"pos":[6902,7046],"yaml":true},{"content":"The content of `message` is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  \n  \n The following table shows the initial property values for an instance of <xref:System.Threading.WaitHandleCannotBeOpenedException> initialized with this constructor.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|`null`.|  \n|<xref:System.Exception.Message%2A>|`message`.|","nodes":[{"pos":[0,185],"content":"The content of `message` is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.","nodes":[{"content":"The content of <ph id=\"ph1\">`message`</ph> is intended to be understood by humans.","pos":[0,64],"source":"The content of `message` is intended to be understood by humans."},{"content":"The caller of this constructor is required to ensure that this string has been localized for the current system culture.","pos":[65,185]}]},{"pos":[192,357],"content":"The following table shows the initial property values for an instance of <xref:System.Threading.WaitHandleCannotBeOpenedException> initialized with this constructor.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandleCannotBeOpenedException&gt;</ph> initialized with this constructor.","pos":[0,165],"source":"The following table shows the initial property values for an instance of <xref:System.Threading.WaitHandleCannotBeOpenedException> initialized with this constructor."}]},{"pos":[364,372],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[373,378],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[414,455],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[456,463],"content":"<ph id=\"ph1\">`null`</ph>.","source":"`null`."},{"pos":[468,502],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[503,513],"content":"<ph id=\"ph1\">`message`</ph>.","source":"`message`."}],"pos":[7057,7581],"yaml":true,"extradata":"MT"},{"content":"The error message that explains the reason for the exception.","nodes":[{"pos":[0,61],"content":"The error message that explains the reason for the exception.","nodes":[{"content":"The error message that explains the reason for the exception.","pos":[0,61]}]}],"pos":[7742,7804],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with serialized data.","nodes":[{"pos":[0,133],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"&gt;&lt;/xref&gt;</ph> class with serialized data.","source":"Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with serialized data."}],"pos":[9897,10031],"yaml":true},{"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).","nodes":[{"pos":[0,231],"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).","nodes":[{"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.","pos":[0,113]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XML and SOAP Serialization<ept id=\"p1\">](~/docs/framework/serialization/xml-and-soap-serialization.md)</ept>.","pos":[114,231],"source":" For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md)."}]}],"pos":[10042,10274],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized object data about the exception being thrown.","nodes":[{"pos":[0,150],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object that holds the serialized object data about the exception being thrown.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized object data about the exception being thrown."}],"pos":[10560,10711],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object that contains contextual information about the source or destination.","nodes":[{"pos":[0,147],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> object that contains contextual information about the source or destination.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object that contains contextual information about the source or destination."}],"pos":[10806,10954],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.","nodes":[{"pos":[0,218],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"&gt;&lt;/xref&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.","source":"Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception."}],"pos":[12503,12722],"yaml":true},{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","nodes":[{"pos":[0,427],"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[0,182],"source":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id=\"ph2\">`null`</ph> if the <ph id=\"ph3\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.","pos":[183,427],"source":" The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor."}]}],"pos":[12733,13161],"yaml":true,"extradata":"MT"},{"content":"The error message that explains the reason for the exception.","nodes":[{"pos":[0,61],"content":"The error message that explains the reason for the exception.","nodes":[{"content":"The error message that explains the reason for the exception.","pos":[0,61]}]}],"pos":[13348,13410],"yaml":true},{"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"pos":[0,202],"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]},{"content":"If the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">innerException</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph>, the current exception is raised in a <ph id=\"ph3\">`catch`</ph> block that handles the inner exception.","pos":[58,202],"source":" If the <code>innerException</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception."}]}],"pos":[13483,13686],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.WaitHandleCannotBeOpenedException\n  commentId: T:System.Threading.WaitHandleCannotBeOpenedException\n  id: WaitHandleCannotBeOpenedException\n  children:\n  - System.Threading.WaitHandleCannotBeOpenedException.#ctor\n  - System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)\n  - System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)\n  langs:\n  - csharp\n  name: WaitHandleCannotBeOpenedException\n  nameWithType: WaitHandleCannotBeOpenedException\n  fullName: System.Threading.WaitHandleCannotBeOpenedException\n  type: Class\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The exception that is thrown when an attempt is made to open a system mutex, semaphore, or event wait handle that does not exist.\n  remarks: Instances of the <xref:System.Threading.Mutex>, <xref:System.Threading.Semaphore>, and  <xref:System.Threading.EventWaitHandle> classes can represent named system synchronization objects. When you use the <xref:System.Threading.Mutex.OpenExisting%2A?displayProperty=fullName> method, the <xref:System.Threading.Semaphore.OpenExisting%2A?displayProperty=fullName> method, or the  <xref:System.Threading.EventWaitHandle.OpenExisting%2A?displayProperty=fullName> method to open a named system object that does not exist, a <xref:System.Threading.WaitHandleCannotBeOpenedException> exception is thrown.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class WaitHandleCannotBeOpenedException : ApplicationException\n  inheritance:\n  - System.Object\n  - System.Exception\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleCannotBeOpenedException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor\n  commentId: M:System.Threading.WaitHandleCannotBeOpenedException.#ctor\n  id: '#ctor'\n  parent: System.Threading.WaitHandleCannotBeOpenedException\n  langs:\n  - csharp\n  name: WaitHandleCannotBeOpenedException()\n  nameWithType: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException()\n  fullName: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException()\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with default values.\n  remarks: \"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \\\"No handle of the given name exists.\\\" This message takes into account the current system culture.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.Threading.WaitHandleCannotBeOpenedException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|`null`.|  \\n|<xref:System.Exception.Message%2A>|The system-supplied error message string.|\"\n  syntax:\n    content: public WaitHandleCannotBeOpenedException ();\n    parameters: []\n  overload: System.Threading.WaitHandleCannotBeOpenedException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleCannotBeOpenedException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)\n  commentId: M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Threading.WaitHandleCannotBeOpenedException\n  langs:\n  - csharp\n  name: WaitHandleCannotBeOpenedException(String)\n  nameWithType: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(String)\n  fullName: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(String)\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with a specified error message.\n  remarks: \"The content of `message` is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.Threading.WaitHandleCannotBeOpenedException> initialized with this constructor.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|`null`.|  \\n|<xref:System.Exception.Message%2A>|`message`.|\"\n  syntax:\n    content: public WaitHandleCannotBeOpenedException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The error message that explains the reason for the exception.\n  overload: System.Threading.WaitHandleCannotBeOpenedException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleCannotBeOpenedException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Threading.WaitHandleCannotBeOpenedException\n  langs:\n  - csharp\n  name: WaitHandleCannotBeOpenedException(SerializationInfo, StreamingContext)\n  nameWithType: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(SerializationInfo, StreamingContext)\n  fullName: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(SerializationInfo, StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with serialized data.\n  remarks: This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).\n  syntax:\n    content: protected WaitHandleCannotBeOpenedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object that contains contextual information about the source or destination.\n  overload: System.Threading.WaitHandleCannotBeOpenedException.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleCannotBeOpenedException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)\n  commentId: M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.Threading.WaitHandleCannotBeOpenedException\n  langs:\n  - csharp\n  name: WaitHandleCannotBeOpenedException(String, Exception)\n  nameWithType: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(String, Exception)\n  fullName: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(String, Exception)\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.\n  remarks: An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.\n  syntax:\n    content: public WaitHandleCannotBeOpenedException (string message, Exception innerException);\n    parameters:\n    - id: message\n      type: System.String\n      description: The error message that explains the reason for the exception.\n    - id: innerException\n      type: System.Exception\n      description: The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.\n  overload: System.Threading.WaitHandleCannotBeOpenedException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleCannotBeOpenedException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor\n  parent: System.Threading.WaitHandleCannotBeOpenedException\n  isExternal: false\n  name: WaitHandleCannotBeOpenedException()\n  nameWithType: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException()\n  fullName: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException()\n- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)\n  parent: System.Threading.WaitHandleCannotBeOpenedException\n  isExternal: false\n  name: WaitHandleCannotBeOpenedException(String)\n  nameWithType: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(String)\n  fullName: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Threading.WaitHandleCannotBeOpenedException\n  isExternal: false\n  name: WaitHandleCannotBeOpenedException(SerializationInfo, StreamingContext)\n  nameWithType: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(SerializationInfo, StreamingContext)\n  fullName: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)\n  parent: System.Threading.WaitHandleCannotBeOpenedException\n  isExternal: false\n  name: WaitHandleCannotBeOpenedException(String, Exception)\n  nameWithType: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(String, Exception)\n  fullName: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(String, Exception)\n- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor*\n  parent: System.Threading.WaitHandleCannotBeOpenedException\n  isExternal: false\n  name: WaitHandleCannotBeOpenedException\n  nameWithType: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException\n  fullName: WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleCannotBeOpenedException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Exception.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}