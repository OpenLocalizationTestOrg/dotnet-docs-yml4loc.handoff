{"nodes":[{"content":"Represents a node or an attribute in an XML tree.","nodes":[{"pos":[0,49],"content":"Represents a node or an attribute in an XML tree.","nodes":[{"content":"Represents a node or an attribute in an XML tree.","pos":[0,49]}]}],"pos":[1122,1172],"yaml":true},{"content":"This class is the abstract common base class for <xref:System.Xml.Linq.XNode> and <xref:System.Xml.Linq.XAttribute>. It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.  \n  \n Note that annotations are not part of the XML infoset; they are not serialized or deserialized.","nodes":[{"pos":[0,250],"content":"This class is the abstract common base class for <xref:System.Xml.Linq.XNode> and <xref:System.Xml.Linq.XAttribute>. It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.","nodes":[{"content":"This class is the abstract common base class for <xref:System.Xml.Linq.XNode> and <xref:System.Xml.Linq.XAttribute>. It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.","pos":[0,250],"nodes":[{"content":"This class is the abstract common base class for <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>.","pos":[0,116],"source":"This class is the abstract common base class for <xref:System.Xml.Linq.XNode> and <xref:System.Xml.Linq.XAttribute>."},{"content":"It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.","pos":[117,250]}]}]},{"pos":[257,352],"content":"Note that annotations are not part of the XML infoset; they are not serialized or deserialized.","nodes":[{"content":"Note that annotations are not part of the XML infoset; they are not serialized or deserialized.","pos":[0,95]}]}],"pos":[1183,1540],"yaml":true,"extradata":"MT"},{"content":"Adds an object to the annotation list of this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,91],"content":"Adds an object to the annotation list of this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Adds an object to the annotation list of this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[3551,3643],"yaml":true},{"content":"Note that annotations are not part of the infoset; they are not persisted, or displayed by <xref:System.Xml.Linq.XNode.ToString%2A>. Also, if you import an XML Namespace into your VB project and call AddAnnotation with the SaveOptions.OmitDuplicateNamespaces enumeration value, then only one element will contain the XML Namespace attribute instead of every element. For more information, see [Removing duplicate namespaces in XML Literals](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx).","nodes":[{"pos":[0,563],"content":"Note that annotations are not part of the infoset; they are not persisted, or displayed by <xref:System.Xml.Linq.XNode.ToString%2A>. Also, if you import an XML Namespace into your VB project and call AddAnnotation with the SaveOptions.OmitDuplicateNamespaces enumeration value, then only one element will contain the XML Namespace attribute instead of every element. For more information, see [Removing duplicate namespaces in XML Literals](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx).","nodes":[{"content":"Note that annotations are not part of the infoset; they are not persisted, or displayed by <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.ToString%2A&gt;</ph>.","pos":[0,132],"source":"Note that annotations are not part of the infoset; they are not persisted, or displayed by <xref:System.Xml.Linq.XNode.ToString%2A>."},{"content":"Also, if you import an XML Namespace into your VB project and call AddAnnotation with the SaveOptions.OmitDuplicateNamespaces enumeration value, then only one element will contain the XML Namespace attribute instead of every element.","pos":[133,366]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Removing duplicate namespaces in XML Literals<ept id=\"p1\">](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx)</ept>.","pos":[367,563],"source":" For more information, see [Removing duplicate namespaces in XML Literals](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx)."}]}],"pos":[3654,4218],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> that contains the annotation to add.","nodes":[{"pos":[0,74],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that contains the annotation to add.","source":"An <xref href=\"System.Object\"></xref> that contains the annotation to add."}],"pos":[5930,6005],"yaml":true},{"content":"Gets the first annotation object of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,110],"content":"Gets the first annotation object of the specified type from this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the first annotation object of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[7529,7640],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the annotation to retrieve.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the annotation to retrieve.","source":"The <xref href=\"System.Type\"></xref> of the annotation to retrieve."}],"pos":[9426,9494],"yaml":true},{"content":"The <xref href=\"System.Object\"></xref> that contains the first annotation object that matches the specified type, or `null` if no annotation is of the specified type.","nodes":[{"pos":[0,166],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that contains the first annotation object that matches the specified type, or <ph id=\"ph2\">`null`</ph> if no annotation is of the specified type.","source":"The <xref href=\"System.Object\"></xref> that contains the first annotation object that matches the specified type, or `null` if no annotation is of the specified type."}],"pos":[9551,9718],"yaml":true},{"content":"Get the first annotation object of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,109],"content":"Get the first annotation object of the specified type from this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Get the first annotation object of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[11206,11316],"yaml":true},{"content":"The type of the annotation to retrieve.","nodes":[{"pos":[0,39],"content":"The type of the annotation to retrieve.","nodes":[{"content":"The type of the annotation to retrieve.","pos":[0,39]}]}],"pos":[13003,13043],"yaml":true},{"content":"The first annotation object that matches the specified type, or `null` if no annotation is of the specified type.","nodes":[{"pos":[0,113],"content":"The first annotation object that matches the specified type, or <ph id=\"ph1\">`null`</ph> if no annotation is of the specified type.","source":"The first annotation object that matches the specified type, or `null` if no annotation is of the specified type."}],"pos":[13088,13202],"yaml":true},{"content":"Gets a collection of annotations of the specified type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,109],"content":"Gets a collection of annotations of the specified type for this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a collection of annotations of the specified type for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[14732,14842],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the annotations to retrieve.","nodes":[{"pos":[0,68],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the annotations to retrieve.","source":"The <xref href=\"System.Type\"></xref> of the annotations to retrieve."}],"pos":[17677,17746],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Object\"></xref> that contains the annotations that match the specified type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,217],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that contains the annotations that match the specified type for this <ph id=\"ph3\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Object\"></xref> that contains the annotations that match the specified type for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[17843,18061],"yaml":true},{"content":"Gets a collection of annotations of the specified type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,109],"content":"Gets a collection of annotations of the specified type for this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a collection of annotations of the specified type for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[19556,19666],"yaml":true},{"content":"The type of the annotations to retrieve.","nodes":[{"pos":[0,40],"content":"The type of the annotations to retrieve.","nodes":[{"content":"The type of the annotations to retrieve.","pos":[0,40]}]}],"pos":[22377,22418],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the annotations for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,149],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the annotations for this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the annotations for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[22502,22652],"yaml":true},{"content":"Gets the base URI for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,72],"content":"Gets the base URI for this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the base URI for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[24104,24177],"yaml":true},{"content":"Using LINQ to XML, you can deserialize XML in a number of fashions. You can parse it from a string, load it from a file, or read it from a <xref:System.IO.TextReader> or an <xref:System.Xml.XmlReader>. In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <xref:System.Xml.XmlReader>.  \n  \n Sometimes the <xref:System.Xml.XmlReader> has the base URI, and sometimes it does not. For instance, when loading from a file, the <xref:System.Xml.XmlReader> knows the base URI, but when reading from an <xref:System.Xml.XmlReader> that was created because of calling the <xref:System.Xml.Linq.XElement.Parse%2A> method, there is no possibility of the <xref:System.Xml.XmlReader> reporting a base URI; the XML was in a string.  \n  \n If, when parsing or loading the XML, you specify <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, LINQ to XML will request the base URI for each node as the <xref:System.Xml.XmlReader> returns the node. If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node. This property returns that information. If the underlying <xref:System.Xml.XmlReader> does not have the base URI, then this property will return an empty string.  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> when loading an XML tree will result in slower parsing.  \n  \n When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree. This property is a computed property, and navigates up the tree to find the base URI.","nodes":[{"pos":[0,315],"content":"Using LINQ to XML, you can deserialize XML in a number of fashions. You can parse it from a string, load it from a file, or read it from a <xref:System.IO.TextReader> or an <xref:System.Xml.XmlReader>. In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <xref:System.Xml.XmlReader>.","nodes":[{"content":"Using LINQ to XML, you can deserialize XML in a number of fashions. You can parse it from a string, load it from a file, or read it from a <xref:System.IO.TextReader> or an <xref:System.Xml.XmlReader>. In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <xref:System.Xml.XmlReader>.","pos":[0,315],"nodes":[{"content":"Using LINQ to XML, you can deserialize XML in a number of fashions.","pos":[0,67]},{"content":"You can parse it from a string, load it from a file, or read it from a <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[68,201],"source":" You can parse it from a string, load it from a file, or read it from a <xref:System.IO.TextReader> or an <xref:System.Xml.XmlReader>."},{"content":"In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[202,315],"source":" In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <xref:System.Xml.XmlReader>."}]}]},{"pos":[322,748],"content":"Sometimes the <xref:System.Xml.XmlReader> has the base URI, and sometimes it does not. For instance, when loading from a file, the <xref:System.Xml.XmlReader> knows the base URI, but when reading from an <xref:System.Xml.XmlReader> that was created because of calling the <xref:System.Xml.Linq.XElement.Parse%2A> method, there is no possibility of the <xref:System.Xml.XmlReader> reporting a base URI; the XML was in a string.","nodes":[{"content":"Sometimes the <xref:System.Xml.XmlReader> has the base URI, and sometimes it does not. For instance, when loading from a file, the <xref:System.Xml.XmlReader> knows the base URI, but when reading from an <xref:System.Xml.XmlReader> that was created because of calling the <xref:System.Xml.Linq.XElement.Parse%2A> method, there is no possibility of the <xref:System.Xml.XmlReader> reporting a base URI; the XML was in a string.","pos":[0,426],"nodes":[{"content":"Sometimes the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> has the base URI, and sometimes it does not.","pos":[0,86],"source":"Sometimes the <xref:System.Xml.XmlReader> has the base URI, and sometimes it does not."},{"content":"For instance, when loading from a file, the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> knows the base URI, but when reading from an <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> that was created because of calling the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> method, there is no possibility of the <ph id=\"ph4\">&lt;xref:System.Xml.XmlReader&gt;</ph> reporting a base URI; the XML was in a string.","pos":[87,426],"source":" For instance, when loading from a file, the <xref:System.Xml.XmlReader> knows the base URI, but when reading from an <xref:System.Xml.XmlReader> that was created because of calling the <xref:System.Xml.Linq.XElement.Parse%2A> method, there is no possibility of the <xref:System.Xml.XmlReader> reporting a base URI; the XML was in a string."}]}]},{"pos":[755,1214],"content":"If, when parsing or loading the XML, you specify <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, LINQ to XML will request the base URI for each node as the <xref:System.Xml.XmlReader> returns the node. If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node. This property returns that information. If the underlying <xref:System.Xml.XmlReader> does not have the base URI, then this property will return an empty string.","nodes":[{"content":"If, when parsing or loading the XML, you specify <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, LINQ to XML will request the base URI for each node as the <xref:System.Xml.XmlReader> returns the node. If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node. This property returns that information. If the underlying <xref:System.Xml.XmlReader> does not have the base URI, then this property will return an empty string.","pos":[0,459],"nodes":[{"content":"If, when parsing or loading the XML, you specify <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, LINQ to XML will request the base URI for each node as the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> returns the node.","pos":[0,200],"source":"If, when parsing or loading the XML, you specify <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, LINQ to XML will request the base URI for each node as the <xref:System.Xml.XmlReader> returns the node."},{"content":"If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node.","pos":[201,297]},{"content":"This property returns that information.","pos":[298,337]},{"content":"If the underlying <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> does not have the base URI, then this property will return an empty string.","pos":[338,459],"source":" If the underlying <xref:System.Xml.XmlReader> does not have the base URI, then this property will return an empty string."}]}]},{"pos":[1221,1330],"content":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> when loading an XML tree will result in slower parsing.","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> when loading an XML tree will result in slower parsing.","pos":[0,109],"source":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> when loading an XML tree will result in slower parsing."}]},{"pos":[1337,1521],"content":"When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree. This property is a computed property, and navigates up the tree to find the base URI.","nodes":[{"content":"When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree. This property is a computed property, and navigates up the tree to find the base URI.","pos":[0,184],"nodes":[{"content":"When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree.","pos":[0,98]},{"content":"This property is a computed property, and navigates up the tree to find the base URI.","pos":[99,184]}]}]}],"pos":[24188,25720],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains the base URI for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the base URI for this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.String\"></xref> that contains the base URI for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[28880,28999],"yaml":true},{"content":"Raised when this <xref href=\"System.Xml.Linq.XObject\"></xref> or any of its descendants have changed.","nodes":[{"pos":[0,101],"content":"Raised when this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph> or any of its descendants have changed.","source":"Raised when this <xref href=\"System.Xml.Linq.XObject\"></xref> or any of its descendants have changed."}],"pos":[30441,30543],"yaml":true},{"content":"Events are raised only when an XML tree is modified, not when it is constructed. This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>. You cannot get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.  \n  \n You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.","nodes":[{"pos":[0,466],"content":"Events are raised only when an XML tree is modified, not when it is constructed. This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>. You cannot get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.","nodes":[{"content":"Events are raised only when an XML tree is modified, not when it is constructed. This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>. You cannot get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.","pos":[0,466],"nodes":[{"content":"Events are raised only when an XML tree is modified, not when it is constructed.","pos":[0,80]},{"content":"This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.","pos":[81,274],"source":" This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>."},{"content":"You cannot get a reference to an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph> before the XML tree is constructed.","pos":[275,374],"source":" You cannot get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed."},{"content":"This means that during functional construction of an XML tree, you will not receive events.","pos":[375,466]}]}]},{"pos":[473,1254],"content":"You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.","nodes":[{"content":"You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.","pos":[0,781],"nodes":[{"content":"You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.","pos":[0,129]},{"content":"For example, if you receive a <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> event, and while the event is being processed you remove the node from the tree, you might not receive the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> event.","pos":[130,352],"source":" For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event."},{"content":"When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.","pos":[353,623]},{"content":"However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.","pos":[624,781]}]}]}],"pos":[30554,31813],"yaml":true,"extradata":"MT"},{"content":"Raised when this <xref href=\"System.Xml.Linq.XObject\"></xref> or any of its descendants are about to change.","nodes":[{"pos":[0,108],"content":"Raised when this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph> or any of its descendants are about to change.","source":"Raised when this <xref href=\"System.Xml.Linq.XObject\"></xref> or any of its descendants are about to change."}],"pos":[40252,40361],"yaml":true},{"content":"Events are raised only from modification of an XML tree, not from construction of an XML tree. You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>. You can't get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.  \n  \n You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.","nodes":[{"pos":[0,462],"content":"Events are raised only from modification of an XML tree, not from construction of an XML tree. You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>. You can't get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.","nodes":[{"content":"Events are raised only from modification of an XML tree, not from construction of an XML tree. You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>. You can't get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.","pos":[0,462],"nodes":[{"content":"Events are raised only from modification of an XML tree, not from construction of an XML tree.","pos":[0,94]},{"content":"You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.","pos":[95,271],"source":" You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>."},{"content":"You can't get a reference to an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph> before the XML tree is constructed.","pos":[272,370],"source":" You can't get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed."},{"content":"This means that during functional construction of an XML tree, you will not receive events.","pos":[371,462]}]}]},{"pos":[469,1250],"content":"You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.","nodes":[{"content":"You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.","pos":[0,781],"nodes":[{"content":"You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.","pos":[0,129]},{"content":"For example, if you receive a <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> event, and while the event is being processed you remove the node from the tree, you might not receive the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> event.","pos":[130,352],"source":" For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event."},{"content":"When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.","pos":[353,623]},{"content":"However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.","pos":[624,781]}]}]}],"pos":[40372,41627],"yaml":true,"extradata":"MT"},{"content":"Gets the <xref href=\"System.Xml.Linq.XDocument\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,110],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> for this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the <xref href=\"System.Xml.Linq.XDocument\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[45566,45677],"yaml":true},{"content":"The <xref href=\"System.Xml.Linq.XDocument\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,105],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> for this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Xml.Linq.XDocument\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[46870,46976],"yaml":true},{"content":"Gets the node type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,73],"content":"Gets the node type for this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the node type for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[48428,48502],"yaml":true},{"content":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each node in the collection.","nodes":[{"pos":[0,308],"content":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each node in the collection.","nodes":[{"content":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each node in the collection.","pos":[0,308],"nodes":[{"content":"Because all classes that derive from <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of concrete subclass of <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.","pos":[0,234],"source":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>."},{"content":"Your code can then test for the node type of each node in the collection.","pos":[235,308]}]}]}],"pos":[48513,48822],"yaml":true,"extradata":"MT"},{"content":"The node type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,68],"content":"The node type for this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"The node type for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[50877,50946],"yaml":true},{"content":"Gets the parent <xref href=\"System.Xml.Linq.XElement\"></xref> of this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,115],"content":"Gets the parent <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the parent <xref href=\"System.Xml.Linq.XElement\"></xref> of this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[52386,52502],"yaml":true},{"content":"If this <xref:System.Xml.Linq.XObject> has no parent element, this property returns `null`.  \n  \n> [!NOTE]\n>  This property returns the parent element, and as children nodes of an <xref:System.Xml.Linq.XDocument> have no parent element, this property returns `null` for them.","nodes":[{"pos":[0,91],"content":"If this <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph> has no parent element, this property returns <ph id=\"ph2\">`null`</ph>.","source":"If this <xref:System.Xml.Linq.XObject> has no parent element, this property returns `null`."},{"pos":[99,275],"content":"[!NOTE]\n This property returns the parent element, and as children nodes of an <xref:System.Xml.Linq.XDocument> have no parent element, this property returns `null` for them.","leadings":["","> "],"nodes":[{"content":"This property returns the parent element, and as children nodes of an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> have no parent element, this property returns <ph id=\"ph2\">`null`</ph> for them.","pos":[9,174],"source":" This property returns the parent element, and as children nodes of an <xref:System.Xml.Linq.XDocument> have no parent element, this property returns `null` for them."}]}],"pos":[52513,52794],"yaml":true,"extradata":"MT"},{"content":"The parent <xref href=\"System.Xml.Linq.XElement\"></xref> of this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,110],"content":"The parent <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"The parent <xref href=\"System.Xml.Linq.XElement\"></xref> of this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[53755,53866],"yaml":true},{"content":"Removes the annotations of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,101],"content":"Removes the annotations of the specified type from this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the annotations of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[55425,55527],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of annotations to remove.","nodes":[{"pos":[0,62],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of annotations to remove.","source":"The <xref href=\"System.Type\"></xref> of annotations to remove."}],"pos":[57791,57854],"yaml":true},{"content":"Removes the annotations of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,101],"content":"Removes the annotations of the specified type from this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the annotations of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[59391,59493],"yaml":true},{"content":"The type of annotations to remove.","nodes":[{"pos":[0,34],"content":"The type of annotations to remove.","nodes":[{"content":"The type of annotations to remove.","pos":[0,34]}]}],"pos":[61745,61780],"yaml":true},{"content":"Gets a value indicating whether or not this <xref href=\"System.Xml.Linq.XObject\"></xref> has line information.","nodes":[{"pos":[0,110],"content":"Gets a value indicating whether or not this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph> has line information.","source":"Gets a value indicating whether or not this <xref href=\"System.Xml.Linq.XObject\"></xref> has line information."}],"pos":[63391,63502],"yaml":true},{"content":"You can call this method to determine whether the <xref:System.Xml.Linq.XObject> contains valid line information.  \n  \n This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.","nodes":[{"pos":[0,113],"content":"You can call this method to determine whether the <xref:System.Xml.Linq.XObject> contains valid line information.","nodes":[{"content":"You can call this method to determine whether the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contains valid line information.","pos":[0,113],"source":"You can call this method to determine whether the <xref:System.Xml.Linq.XObject> contains valid line information."}]},{"pos":[120,331],"content":"This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.","nodes":[{"content":"This method is an explicit interface member implementation of a method in the <ph id=\"ph1\">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface, so in order to call this method, it is necessary to cast to <ph id=\"ph2\">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>.","pos":[0,211],"source":"This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>."}]}],"pos":[63513,63849],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Xml.Linq.XObject\"></xref> has line information, otherwise `false`.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph> has line information, otherwise <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Xml.Linq.XObject\"></xref> has line information, otherwise `false`."}],"pos":[67431,67533],"yaml":true},{"content":"Gets the line number that the underlying <xref href=\"System.Xml.XmlReader\"></xref> reported for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,146],"content":"Gets the line number that the underlying <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> reported for this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the line number that the underlying <xref href=\"System.Xml.XmlReader\"></xref> reported for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[69149,69296],"yaml":true},{"content":"This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.","nodes":[{"pos":[0,211],"content":"This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.","nodes":[{"content":"This method is an explicit interface member implementation of a method in the <ph id=\"ph1\">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface, so in order to call this method, it is necessary to cast to <ph id=\"ph2\">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>.","pos":[0,211],"source":"This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>."}]}],"pos":[69307,69519],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Int32\"></xref> that contains the line number reported by the <xref href=\"System.Xml.XmlReader\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,179],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> that contains the line number reported by the <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> for this <ph id=\"ph3\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Int32\"></xref> that contains the line number reported by the <xref href=\"System.Xml.XmlReader\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[73094,73274],"yaml":true},{"content":"Gets the line position that the underlying <xref href=\"System.Xml.XmlReader\"></xref> reported for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,148],"content":"Gets the line position that the underlying <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> reported for this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the line position that the underlying <xref href=\"System.Xml.XmlReader\"></xref> reported for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[74864,75013],"yaml":true},{"content":"This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.","nodes":[{"pos":[0,211],"content":"This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.","nodes":[{"content":"This method is an explicit interface member implementation of a method in the <ph id=\"ph1\">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface, so in order to call this method, it is necessary to cast to <ph id=\"ph2\">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>.","pos":[0,211],"source":"This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>."}]}],"pos":[75024,75236],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Int32\"></xref> that contains the line position reported by the <xref href=\"System.Xml.XmlReader\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,181],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> that contains the line position reported by the <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> for this <ph id=\"ph3\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Int32\"></xref> that contains the line position reported by the <xref href=\"System.Xml.XmlReader\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[78813,78995],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.Linq.XObject\n  commentId: T:System.Xml.Linq.XObject\n  id: XObject\n  children:\n  - System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  - System.Xml.Linq.XObject.Annotation(System.Type)\n  - System.Xml.Linq.XObject.Annotation``1\n  - System.Xml.Linq.XObject.Annotations(System.Type)\n  - System.Xml.Linq.XObject.Annotations``1\n  - System.Xml.Linq.XObject.BaseUri\n  - System.Xml.Linq.XObject.Changed\n  - System.Xml.Linq.XObject.Changing\n  - System.Xml.Linq.XObject.Document\n  - System.Xml.Linq.XObject.NodeType\n  - System.Xml.Linq.XObject.Parent\n  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  - System.Xml.Linq.XObject.RemoveAnnotations``1\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  langs:\n  - csharp\n  name: XObject\n  nameWithType: XObject\n  fullName: System.Xml.Linq.XObject\n  type: Class\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Represents a node or an attribute in an XML tree.\n  remarks: \"This class is the abstract common base class for <xref:System.Xml.Linq.XNode> and <xref:System.Xml.Linq.XAttribute>. It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.  \\n  \\n Note that annotations are not part of the XML infoset; they are not serialized or deserialized.\"\n  syntax:\n    content: 'public abstract class XObject : System.Xml.IXmlLineInfo'\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Xml.Linq.XAttribute\n  - System.Xml.Linq.XNode\n  implements:\n  - System.Xml.IXmlLineInfo\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  commentId: M:System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  id: AddAnnotation(System.Object)\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: AddAnnotation(Object)\n  nameWithType: XObject.AddAnnotation(Object)\n  fullName: XObject.AddAnnotation(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Adds an object to the annotation list of this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: Note that annotations are not part of the infoset; they are not persisted, or displayed by <xref:System.Xml.Linq.XNode.ToString%2A>. Also, if you import an XML Namespace into your VB project and call AddAnnotation with the SaveOptions.OmitDuplicateNamespaces enumeration value, then only one element will contain the XML Namespace attribute instead of every element. For more information, see [Removing duplicate namespaces in XML Literals](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx).\n  example:\n  - \"The following example adds an annotation to an <xref:System.Xml.Linq.XElement>.  \\n  \\n```csharp  \\n  \\n                public class MyAnnotation {  \\n    private string tag;  \\n    public string Tag {get{return tag;} set{tag=value;}}  \\n    public MyAnnotation(string tag) {  \\n        this.tag = tag;  \\n    }  \\n}  \\n  \\npublic class Program {  \\n    public static void Main(string[] args) {     \\n        MyAnnotation ma = new MyAnnotation(\\\"T1\\\");  \\n        XElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\n        root.AddAnnotation(ma);  \\n  \\n        MyAnnotation ma2 = (MyAnnotation)root.Annotation<MyAnnotation>();  \\n        Console.WriteLine(ma2.Tag);  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Public Class MyAnnotation  \\n    Private _tag As String  \\n  \\n    Property Tag() As String  \\n        Get  \\n            Return Me._tag  \\n        End Get  \\n        Set(ByVal Value As String)  \\n            Me._tag = Value  \\n        End Set  \\n    End Property  \\n  \\n    Public Sub New(ByVal tag As String)  \\n        Me._tag = tag  \\n    End Sub  \\nEnd Class  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim ma As MyAnnotation = New MyAnnotation(\\\"T1\\\")  \\n        Dim root As XElement = <Root>content</Root>  \\n        root.AddAnnotation(ma)  \\n  \\n        Dim ma2 As MyAnnotation = DirectCast(root.Annotation(Of MyAnnotation)(), MyAnnotation)  \\n        Console.WriteLine(ma2.Tag)  \\n    End Sub  \\n  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nT1  \\n```\"\n  syntax:\n    content: public void AddAnnotation (object annotation);\n    parameters:\n    - id: annotation\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that contains the annotation to add.\n  overload: System.Xml.Linq.XObject.AddAnnotation*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.Annotation(System.Type)\n  commentId: M:System.Xml.Linq.XObject.Annotation(System.Type)\n  id: Annotation(System.Type)\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: Annotation(Type)\n  nameWithType: XObject.Annotation(Type)\n  fullName: XObject.Annotation(Type)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the first annotation object of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example adds an annotation to an <xref:System.Xml.Linq.XElement>. It then retrieves the annotation, specifying the type to retrieve.  \\n  \\n```csharp  \\n  \\n                public class MyAnnotation {  \\n    private string tag;  \\n    public string Tag {get{return tag;} set{tag=value;}}  \\n    public MyAnnotation(string tag) {  \\n        this.tag = tag;  \\n    }  \\n}  \\n  \\npublic class Program {  \\n    public static void Main(string[] args) {     \\n        MyAnnotation ma = new MyAnnotation(\\\"T1\\\");  \\n        XElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\n        root.AddAnnotation(ma);  \\n  \\n        MyAnnotation ma2 = (MyAnnotation)root.Annotation(typeof(MyAnnotation));  \\n        Console.WriteLine(ma2.Tag);  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Public Class MyAnnotation  \\n    Private _tag As String  \\n  \\n    Property Tag() As String  \\n        Get  \\n            Return Me._tag  \\n        End Get  \\n        Set(ByVal Value As String)  \\n            Me._tag = Value  \\n        End Set  \\n    End Property  \\n  \\n    Public Sub New(ByVal tag As String)  \\n        Me._tag = tag  \\n    End Sub  \\nEnd Class  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim ma As MyAnnotation = New MyAnnotation(\\\"T1\\\")  \\n        Dim root As XElement = <Root>content</Root>  \\n        root.AddAnnotation(ma)  \\n  \\n        Dim ma2 As MyAnnotation = DirectCast(root.Annotation(GetType(MyAnnotation)), MyAnnotation)  \\n        Console.WriteLine(ma2.Tag)  \\n    End Sub  \\n  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nT1  \\n```\"\n  syntax:\n    content: public object Annotation (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the annotation to retrieve.\n    return:\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> that contains the first annotation object that matches the specified type, or `null` if no annotation is of the specified type.\n  overload: System.Xml.Linq.XObject.Annotation*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.Annotation``1\n  commentId: M:System.Xml.Linq.XObject.Annotation``1\n  id: Annotation``1\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: Annotation<T>()\n  nameWithType: XObject.Annotation<T>()\n  fullName: XObject.Annotation<T>()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Get the first annotation object of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example adds an annotation to an element, and then retrieves it through this method.  \\n  \\n```csharp  \\n  \\n                public class MyAnnotation {  \\n    private string tag;  \\n    public string Tag {get{return tag;} set{tag=value;}}  \\n    public MyAnnotation(string tag) {  \\n        this.tag = tag;  \\n    }  \\n}  \\n  \\npublic class Program {  \\n    public static void Main(string[] args) {     \\n        MyAnnotation ma = new MyAnnotation(\\\"T1\\\");  \\n        XElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\n        root.AddAnnotation(ma);  \\n  \\n        MyAnnotation ma2 = root.Annotation<MyAnnotation>();  \\n        Console.WriteLine(ma2.Tag);  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Public Class MyAnnotation  \\n    Private _tag As String  \\n  \\n    Property Tag() As String  \\n        Get  \\n            Return Me._tag  \\n        End Get  \\n        Set(ByVal Value As String)  \\n            Me._tag = Value  \\n        End Set  \\n    End Property  \\n  \\n    Public Sub New(ByVal tag As String)  \\n        Me._tag = tag  \\n    End Sub  \\nEnd Class  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim ma As MyAnnotation = New MyAnnotation(\\\"T1\\\")  \\n        Dim root As XElement = <Root>content</Root>  \\n        root.AddAnnotation(ma)  \\n  \\n        Dim ma2 As MyAnnotation = root.Annotation(Of MyAnnotation)()  \\n        Console.WriteLine(ma2.Tag)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nT1  \\n```\"\n  syntax:\n    content: 'public T Annotation<T> () where T : class;'\n    parameters: []\n    typeParameters:\n    - id: T\n      description: The type of the annotation to retrieve.\n    return:\n      type: T\n      description: The first annotation object that matches the specified type, or `null` if no annotation is of the specified type.\n  overload: System.Xml.Linq.XObject.Annotation``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.Annotations(System.Type)\n  commentId: M:System.Xml.Linq.XObject.Annotations(System.Type)\n  id: Annotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: Annotations(Type)\n  nameWithType: XObject.Annotations(Type)\n  fullName: XObject.Annotations(Type)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a collection of annotations of the specified type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example adds some annotations to an <xref:System.Xml.Linq.XElement>, then retrieves a collection of annotations by using this method.  \\n  \\n```csharp  \\n  \\n                public class MyAnnotation  \\n{  \\n    private string tag;  \\n    public string Tag { get { return tag; } set { tag = value; } }  \\n    public MyAnnotation(string tag)  \\n    {  \\n        this.tag = tag;  \\n    }  \\n}  \\n  \\nclass Program  \\n{  \\n    static void Main(string[] args)  \\n    {  \\n        XElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\n        root.AddAnnotation(new MyAnnotation(\\\"T1\\\"));  \\n        root.AddAnnotation(new MyAnnotation(\\\"T2\\\"));  \\n        root.AddAnnotation(\\\"abc\\\");  \\n        root.AddAnnotation(\\\"def\\\");  \\n  \\n        IEnumerable<object> annotationList;  \\n        annotationList = root.Annotations(typeof(MyAnnotation));  \\n        foreach (object ma in annotationList)  \\n            Console.WriteLine(((MyAnnotation)ma).Tag);  \\n        Console.WriteLine(\\\"----\\\");  \\n  \\n        IEnumerable<object> stringAnnotationList;  \\n        stringAnnotationList = root.Annotations(typeof(string));  \\n        foreach (object str in stringAnnotationList)  \\n            Console.WriteLine((string)str);  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Public Class MyAnnotation  \\n    Private _tag As String  \\n  \\n    Property Tag() As String  \\n        Get  \\n            Return Me._tag  \\n        End Get  \\n        Set(ByVal Value As String)  \\n            Me._tag = Value  \\n        End Set  \\n    End Property  \\n  \\n    Public Sub New(ByVal tag As String)  \\n        Me._tag = tag  \\n    End Sub  \\nEnd Class  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <Root>content</Root>  \\n        root.AddAnnotation(New MyAnnotation(\\\"T1\\\"))  \\n        root.AddAnnotation(New MyAnnotation(\\\"T2\\\"))  \\n        root.AddAnnotation(\\\"abc\\\")  \\n        root.AddAnnotation(\\\"def\\\")  \\n  \\n        Dim annotationList As IEnumerable(Of Object)  \\n        annotationList = root.Annotations(GetType(MyAnnotation))  \\n        For Each ma As MyAnnotation In annotationList  \\n            Console.WriteLine(ma.Tag)  \\n        Next  \\n  \\n        Console.WriteLine(\\\"----\\\")  \\n  \\n        Dim stringAnnotationList As IEnumerable(Of Object)  \\n        stringAnnotationList = root.Annotations(GetType(String))  \\n        For Each str As String In stringAnnotationList  \\n            Console.WriteLine(str)  \\n        Next  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                T1  \\nT2  \\n----  \\nabc  \\ndef  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<object> Annotations (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the annotations to retrieve.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Object}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Object\"></xref> that contains the annotations that match the specified type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  overload: System.Xml.Linq.XObject.Annotations*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.Annotations``1\n  commentId: M:System.Xml.Linq.XObject.Annotations``1\n  id: Annotations``1\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: Annotations<T>()\n  nameWithType: XObject.Annotations<T>()\n  fullName: XObject.Annotations<T>()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a collection of annotations of the specified type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example uses this method to retrieve annotations on an element.  \\n  \\n```csharp  \\n  \\n                public class MyAnnotation {  \\n    private string tag;  \\n    public string Tag {get{return tag;} set{tag=value;}}  \\n    public MyAnnotation(string tag) {  \\n        this.tag = tag;  \\n    }  \\n}  \\n  \\nclass Program {  \\n    static void Main(string[] args) {     \\n        XElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\n        root.AddAnnotation(new MyAnnotation(\\\"T1\\\"));  \\n        root.AddAnnotation(new MyAnnotation(\\\"T2\\\"));  \\n        root.AddAnnotation(\\\"abc\\\");  \\n        root.AddAnnotation(\\\"def\\\");  \\n  \\n        IEnumerable<MyAnnotation> annotationList;  \\n        annotationList = root.Annotations<MyAnnotation>();  \\n        foreach (MyAnnotation ma in annotationList)  \\n            Console.WriteLine(ma.Tag);  \\n        Console.WriteLine(\\\"----\\\");  \\n  \\n        IEnumerable<string> stringAnnotationList;  \\n        stringAnnotationList = root.Annotations<string>();  \\n        foreach (string str in stringAnnotationList)  \\n            Console.WriteLine(str);  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Public Class MyAnnotation  \\n    Private _tag As String  \\n  \\n    Property Tag() As String  \\n        Get  \\n            Return Me._tag  \\n        End Get  \\n        Set(ByVal Value As String)  \\n            Me._tag = Value  \\n        End Set  \\n    End Property  \\n  \\n    Public Sub New(ByVal tag As String)  \\n        Me._tag = tag  \\n    End Sub  \\nEnd Class  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <Root>content</Root>  \\n        root.AddAnnotation(New MyAnnotation(\\\"T1\\\"))  \\n        root.AddAnnotation(New MyAnnotation(\\\"T2\\\"))  \\n        root.AddAnnotation(\\\"abc\\\")  \\n        root.AddAnnotation(\\\"def\\\")  \\n  \\n        Dim annotationList As IEnumerable(Of MyAnnotation)  \\n        annotationList = root.Annotations(Of MyAnnotation)()  \\n        For Each ma As MyAnnotation In annotationList  \\n            Console.WriteLine(ma.Tag)  \\n        Next  \\n        Console.WriteLine(\\\"----\\\")  \\n  \\n        Dim stringAnnotationList As IEnumerable(Of String)  \\n        stringAnnotationList = root.Annotations(Of String)()  \\n        For Each str As String In stringAnnotationList  \\n            Console.WriteLine(str)  \\n        Next  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                T1  \\nT2  \\n----  \\nabc  \\ndef  \\n```\"\n  syntax:\n    content: 'public System.Collections.Generic.IEnumerable<T> Annotations<T> () where T : class;'\n    parameters: []\n    typeParameters:\n    - id: T\n      description: The type of the annotations to retrieve.\n    return:\n      type: System.Collections.Generic.IEnumerable`1\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the annotations for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  overload: System.Xml.Linq.XObject.Annotations``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.BaseUri\n  commentId: P:System.Xml.Linq.XObject.BaseUri\n  id: BaseUri\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: BaseUri\n  nameWithType: XObject.BaseUri\n  fullName: XObject.BaseUri\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the base URI for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: \"Using LINQ to XML, you can deserialize XML in a number of fashions. You can parse it from a string, load it from a file, or read it from a <xref:System.IO.TextReader> or an <xref:System.Xml.XmlReader>. In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <xref:System.Xml.XmlReader>.  \\n  \\n Sometimes the <xref:System.Xml.XmlReader> has the base URI, and sometimes it does not. For instance, when loading from a file, the <xref:System.Xml.XmlReader> knows the base URI, but when reading from an <xref:System.Xml.XmlReader> that was created because of calling the <xref:System.Xml.Linq.XElement.Parse%2A> method, there is no possibility of the <xref:System.Xml.XmlReader> reporting a base URI; the XML was in a string.  \\n  \\n If, when parsing or loading the XML, you specify <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, LINQ to XML will request the base URI for each node as the <xref:System.Xml.XmlReader> returns the node. If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node. This property returns that information. If the underlying <xref:System.Xml.XmlReader> does not have the base URI, then this property will return an empty string.  \\n  \\n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> when loading an XML tree will result in slower parsing.  \\n  \\n When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree. This property is a computed property, and navigates up the tree to find the base URI.\"\n  example:\n  - \"The following example loads the base URI and line information as it loads the file. It then prints the base URI and the line information.  \\n  \\n This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).  \\n  \\n```csharp  \\n  \\n                XElement po = XElement.Load(\\\"PurchaseOrder.xml\\\",  \\n    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  \\nstring[] splitUri = po.BaseUri.Split('/');  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri[splitUri.Length - 1]);  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"Element Name\\\".PadRight(20),  \\n    \\\"Line\\\".PadRight(5),  \\n    \\\"Position\\\");  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"------------\\\".PadRight(20),  \\n    \\\"----\\\".PadRight(5),  \\n    \\\"--------\\\");  \\nforeach (XElement e in po.DescendantsAndSelf())  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \\n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \\n        ((IXmlLineInfo)e).LinePosition);  \\n```  \\n  \\n```vb  \\n  \\n                Dim po As XElement = XElement.Load(\\\"PurchaseOrder.xml\\\", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  \\nDim splitUri() As String = po.BaseUri.Split(\\\"/\\\"c)  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri(splitUri.Length - 1))  \\nConsole.WriteLine()  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"Element Name\\\".PadRight(20), _  \\n    \\\"Line\\\".PadRight(5), _  \\n    \\\"Position\\\")  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"------------\\\".PadRight(20), _  \\n    \\\"----\\\".PadRight(5), _  \\n    \\\"--------\\\")  \\nFor Each e As XElement In po.DescendantsAndSelf()  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \\n        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  \\n        DirectCast(e, IXmlLineInfo).LinePosition)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                BaseUri: PurchaseOrder.xml  \\n  \\nElement Name        Line Position  \\n------------        ---- --------  \\nPurchaseOrder       2    2  \\n  Address           3    4  \\n    Name            4    6  \\n    Street          5    6  \\n    City            6    6  \\n    State           7    6  \\n    Zip             8    6  \\n    Country         9    6  \\n  Address           11   4  \\n    Name            12   6  \\n    Street          13   6  \\n    City            14   6  \\n    State           15   6  \\n    Zip             16   6  \\n    Country         17   6  \\n  DeliveryNotes     19   4  \\n  Items             20   4  \\n    Item            21   6  \\n      ProductName   22   8  \\n      Quantity      23   8  \\n      USPrice       24   8  \\n      Comment       25   8  \\n    Item            27   6  \\n      ProductName   28   8  \\n      Quantity      29   8  \\n      USPrice       30   8  \\n      ShipDate      31   8  \\n```\"\n  syntax:\n    content: public string BaseUri { get; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the base URI for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  overload: System.Xml.Linq.XObject.BaseUri*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.Changed\n  commentId: E:System.Xml.Linq.XObject.Changed\n  id: Changed\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: Changed\n  nameWithType: XObject.Changed\n  fullName: XObject.Changed\n  type: Event\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Raised when this <xref href=\"System.Xml.Linq.XObject\"></xref> or any of its descendants have changed.\n  remarks: \"Events are raised only when an XML tree is modified, not when it is constructed. This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>. You cannot get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.  \\n  \\n You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.\"\n  example:\n  - \"The following example adds an event handler to the root element of an XML tree. It then modifies the tree, causing LINQ to XML to raise some events.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\nroot.Changing += new EventHandler<XObjectChangeEventArgs>(  \\n    (sender, cea) =>  \\n    {  \\n        Console.WriteLine(\\\"Changing event raised\\\");  \\n        XElement xSender = (XElement)sender;  \\n        Console.WriteLine(\\\"  Sender: {0}\\\", xSender.Name);  \\n        Console.WriteLine(\\\"  ObjectChange: {0}\\\", cea.ObjectChange);  \\n    }  \\n);  \\nroot.Changed += new EventHandler<XObjectChangeEventArgs>(  \\n    (sender, cea) =>  \\n    {  \\n        Console.WriteLine(\\\"Changed event raised\\\");  \\n        XElement xSender = (XElement)sender;  \\n        Console.WriteLine(\\\"  Sender: {0}\\\", xSender.Name);  \\n        Console.WriteLine(\\\"  ObjectChange: {0}\\\", cea.ObjectChange);  \\n    }  \\n);  \\nroot.Add(new XElement(\\\"Child\\\", \\\"child content\\\"));  \\n```  \\n  \\n```vb  \\n  \\n                Module Module1  \\n    WithEvents root As XElement = <Root>content</Root>  \\n  \\n    Sub Main()  \\n        root.Add(<Child>child content</Child>)  \\n    End Sub  \\n  \\n    Private Sub root_Changing( _  \\n            ByVal sender As Object, _  \\n            ByVal e As XObjectChangeEventArgs) _  \\n            Handles root.Changing  \\n        Dim xSender As XElement = DirectCast(sender, XElement)  \\n        Console.WriteLine(\\\"Changing event raised\\\")  \\n        Console.WriteLine(\\\"  Sender: {0}\\\", xSender.Name)  \\n        Console.WriteLine(\\\"  ObjectChange: {0}\\\", e.ObjectChange)  \\n    End Sub  \\n  \\n    Private Sub root_Changed( _  \\n            ByVal sender As Object, _  \\n            ByVal e As XObjectChangeEventArgs) _  \\n            Handles root.Changed  \\n        Dim xSender As XElement = DirectCast(sender, XElement)  \\n        Console.WriteLine(\\\"Changed event raised\\\")  \\n        Console.WriteLine(\\\"  Sender: {0}\\\", xSender.Name)  \\n        Console.WriteLine(\\\"  ObjectChange: {0}\\\", e.ObjectChange)  \\n    End Sub  \\nEnd Module  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Changing event raised  \\n  Sender: Child  \\n  ObjectChange: Add  \\nChanged event raised  \\n  Sender: Child  \\n  ObjectChange: Add  \\n```  \\n  \\n Events are useful when you want to maintain some aggregate information in an XML tree. For example, you may want maintain an invoice total that is the sum of the line items of the invoice. This example uses events to maintain the total of all of the child elements under the complex element `Items`.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Total\\\", 0),  \\n    new XElement(\\\"Items\\\")  \\n);  \\nXElement total = root.Element(\\\"Total\\\");  \\nXElement items = root.Element(\\\"Items\\\");  \\nitems.Changed += (object sender, XObjectChangeEventArgs cea) =>  \\n{  \\n    switch (cea.ObjectChange)  \\n    {  \\n        case XObjectChange.Add:  \\n            if (sender is XElement)  \\n                total.Value = ((int)total + (int)(XElement)sender).ToString();  \\n            if (sender is XText)  \\n                total.Value = ((int)total + (int)((XText)sender).Parent).ToString();  \\n            break;  \\n        case XObjectChange.Remove:  \\n            if (sender is XElement)  \\n                total.Value = ((int)total - (int)(XElement)sender).ToString();  \\n            if (sender is XText)  \\n                total.Value = ((int)total - Int32.Parse(((XText)sender).Value)).ToString();  \\n            break;  \\n    }  \\n    Console.WriteLine(\\\"Changed {0} {1}\\\", sender.GetType().ToString(), cea.ObjectChange.ToString());  \\n};  \\nitems.SetElementValue(\\\"Item1\\\", 25);  \\nitems.SetElementValue(\\\"Item2\\\", 50);  \\nitems.SetElementValue(\\\"Item2\\\", 75);  \\nitems.SetElementValue(\\\"Item3\\\", 133);  \\nitems.SetElementValue(\\\"Item1\\\", null);  \\nitems.SetElementValue(\\\"Item4\\\", 100);  \\nConsole.WriteLine(\\\"Total:{0}\\\", (int)total);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Module Module1  \\n    Private total As XElement = Nothing  \\n    Private WithEvents items As XElement = Nothing  \\n    Private root As XElement = _  \\n            <Root>  \\n                <Total>0</Total>  \\n                <Items></Items>  \\n            </Root>  \\n  \\n    Sub Main()  \\n        total = root.<Total>(0)  \\n        items = root.<Items>(0)  \\n        items.SetElementValue(\\\"Item1\\\", 25)  \\n        items.SetElementValue(\\\"Item2\\\", 50)  \\n        items.SetElementValue(\\\"Item2\\\", 75)  \\n        items.SetElementValue(\\\"Item3\\\", 133)  \\n        items.SetElementValue(\\\"Item1\\\", Nothing)  \\n        items.SetElementValue(\\\"Item4\\\", 100)  \\n        Console.WriteLine(\\\"Total:{0}\\\", CInt(total))  \\n        Console.WriteLine(root)  \\n    End Sub  \\n  \\n    Private Sub XObjectChanged( _  \\n            ByVal sender As Object, _  \\n            ByVal cea As XObjectChangeEventArgs) _  \\n            Handles items.Changed  \\n        Select Case cea.ObjectChange  \\n            Case XObjectChange.Add  \\n                If sender.GetType() Is GetType(XElement) Then  \\n                    total.Value = CStr(CInt(total.Value) + _  \\n                            CInt((DirectCast(sender, XElement)).Value))  \\n                End If  \\n                If sender.GetType() Is GetType(XText) Then  \\n                    total.Value = CStr(CInt(total.Value) + _  \\n                            CInt((DirectCast(sender, XText)).Value))  \\n                End If  \\n            Case XObjectChange.Remove  \\n                If sender.GetType() Is GetType(XElement) Then  \\n                    total.Value = CStr(CInt(total.Value) - _  \\n                            CInt((DirectCast(sender, XElement)).Value))  \\n                End If  \\n                If sender.GetType() Is GetType(XText) Then  \\n                    total.Value = CStr(CInt(total.Value) - _  \\n                            CInt((DirectCast(sender, XText)).Value))  \\n                End If  \\n        End Select  \\n        Console.WriteLine(\\\"Changed {0} {1}\\\", _  \\n                            sender.GetType().ToString(), _  \\n                            cea.ObjectChange.ToString())  \\n    End Sub  \\nEnd Module  \\n  \\n```  \\n  \\n This code produces the following output:  \\n  \\n```  \\n  \\n                Changed System.Xml.Linq.XElement Add  \\nChanged System.Xml.Linq.XElement Add  \\nChanged System.Xml.Linq.XText Remove  \\nChanged System.Xml.Linq.XText Add  \\nChanged System.Xml.Linq.XElement Add  \\nChanged System.Xml.Linq.XElement Remove  \\nChanged System.Xml.Linq.XElement Add  \\nTotal:308  \\n<Root>  \\n  <Total>308</Total>  \\n  <Items>  \\n    <Item2>75</Item2>  \\n    <Item3>133</Item3>  \\n    <Item4>100</Item4>  \\n  </Items>  \\n</Root>  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Xml.Linq.XObjectChangeEventArgs> Changed;\n    return:\n      type: System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.Changing\n  commentId: E:System.Xml.Linq.XObject.Changing\n  id: Changing\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: Changing\n  nameWithType: XObject.Changing\n  fullName: XObject.Changing\n  type: Event\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Raised when this <xref href=\"System.Xml.Linq.XObject\"></xref> or any of its descendants are about to change.\n  remarks: \"Events are raised only from modification of an XML tree, not from construction of an XML tree. You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>. You can't get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.  \\n  \\n You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.\"\n  example:\n  - \"The following example adds an event handler to the root element of an XML tree. It then modifies the tree, causing LINQ to XML to raise some events.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\nroot.Changing += new EventHandler<XObjectChangeEventArgs>(  \\n    (sender, cea) =>  \\n    {  \\n        Console.WriteLine(\\\"Changing event raised\\\");  \\n        XElement xSender = (XElement)sender;  \\n        Console.WriteLine(\\\"  Sender: {0}\\\", xSender.Name);  \\n        Console.WriteLine(\\\"  ObjectChange: {0}\\\", cea.ObjectChange);  \\n    }  \\n);  \\nroot.Changed += new EventHandler<XObjectChangeEventArgs>(  \\n    (sender, cea) =>  \\n    {  \\n        Console.WriteLine(\\\"Changed event raised\\\");  \\n        XElement xSender = (XElement)sender;  \\n        Console.WriteLine(\\\"  Sender: {0}\\\", xSender.Name);  \\n        Console.WriteLine(\\\"  ObjectChange: {0}\\\", cea.ObjectChange);  \\n    }  \\n);  \\nroot.Add(new XElement(\\\"Child\\\", \\\"child content\\\"));  \\n```  \\n  \\n```vb  \\n  \\n                Module Module1  \\n    WithEvents root As XElement = <Root>content</Root>  \\n  \\n    Sub Main()  \\n        root.Add(<Child>child content</Child>)  \\n    End Sub  \\n  \\n    Private Sub root_Changing( _  \\n            ByVal sender As Object, _  \\n            ByVal e As XObjectChangeEventArgs) _  \\n            Handles root.Changing  \\n        Dim xSender As XElement = CType(sender, XElement)  \\n        Console.WriteLine(\\\"Changing event raised\\\")  \\n        Console.WriteLine(\\\"  Sender: {0}\\\", xSender.Name)  \\n        Console.WriteLine(\\\"  ObjectChange: {0}\\\", e.ObjectChange)  \\n    End Sub  \\n  \\n    Private Sub root_Changed( _  \\n            ByVal sender As Object, _  \\n            ByVal e As XObjectChangeEventArgs) _  \\n            Handles root.Changed  \\n        Dim xSender As XElement = CType(sender, XElement)  \\n        Console.WriteLine(\\\"Changed event raised\\\")  \\n        Console.WriteLine(\\\"  Sender: {0}\\\", xSender.Name)  \\n        Console.WriteLine(\\\"  ObjectChange: {0}\\\", e.ObjectChange)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Changing event raised  \\n  Sender: Child  \\n  ObjectChange: Add  \\nChanged event raised  \\n  Sender: Child  \\n  ObjectChange: Add  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Xml.Linq.XObjectChangeEventArgs> Changing;\n    return:\n      type: System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.Document\n  commentId: P:System.Xml.Linq.XObject.Document\n  id: Document\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: Document\n  nameWithType: XObject.Document\n  fullName: XObject.Document\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the <xref href=\"System.Xml.Linq.XDocument\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates a document with some complex content. It then uses this property to retrieve the document for the `Child` element.  \\n  \\n```csharp  \\n  \\n                XDocument doc = new XDocument(  \\n    new XComment(\\\"A comment in the document.\\\"),  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child\\\", \\\"content\\\")  \\n    )  \\n);  \\nXElement child = doc.Descendants(\\\"Child\\\").First();  \\nXDocument documentOfChild = child.Document;  \\nConsole.WriteLine(documentOfChild.FirstNode);  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc As XDocument = _  \\n        <?xml version=\\\"1.0\\\"?>  \\n        <!--A comment in the document.-->  \\n        <Root>  \\n            <Child>content</Child>  \\n         </Root>  \\nDim child As XElement = doc.Descendants(\\\"Child\\\").First()  \\nDim documentOfChild As XDocument = child.Document  \\nConsole.WriteLine(documentOfChild.FirstNode)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n<!--A comment in the document.-->  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XDocument Document { get; }\n    return:\n      type: System.Xml.Linq.XDocument\n      description: The <xref href=\"System.Xml.Linq.XDocument\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  overload: System.Xml.Linq.XObject.Document*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.NodeType\n  commentId: P:System.Xml.Linq.XObject.NodeType\n  id: NodeType\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: NodeType\n  nameWithType: XObject.NodeType\n  fullName: XObject.NodeType\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the node type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each node in the collection.\n  example:\n  - \"The following example uses this method to retrieve the node type for a variety of nodes.  \\n  \\n```csharp  \\n  \\n                // Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  \\nXDocument xmlTree = new XDocument(  \\n    new XComment(\\\"a comment\\\"),  \\n    new XProcessingInstruction(\\\"xml-stylesheet\\\", \\\"type=\\\\\\\"text/xsl\\\\\\\" href=\\\\\\\"hello.xsl\\\\\\\"\\\"),  \\n    new XElement(\\\"Root\\\",  \\n        new XAttribute(\\\"Att\\\", \\\"attContent\\\"),  \\n        new XElement(\\\"Child1\\\",  \\n            new XCData(\\\"CDATA content\\\")  \\n        ),  \\n        new XElement(\\\"Child2\\\",  \\n            new XText(\\\"Text content\\\")  \\n        )  \\n    )  \\n);  \\n  \\nforeach (XNode node in xmlTree.DescendantNodes())  \\n{  \\n    Console.WriteLine(node.NodeType);  \\n    if (node.NodeType == XmlNodeType.Element)  \\n    {  \\n        foreach (XAttribute att in ((XElement)node).Attributes())  \\n            Console.WriteLine(att.NodeType);  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                ' Note that XNode uses XmlNodeType, which is in the System.Xml  namespace.  \\nDim xmlTree As XDocument = _   \\n    <?xml version=\\\"1.0\\\"?>  \\n    <!--a comment-->  \\n    <?xml-stylesheet type=\\\"text/xsl\\\" href=\\\"hello.xsl\\\"?>  \\n    <Root Att=\\\"attContent\\\">  \\n        <Child1><![CDATA[CDATA content]]></Child1>  \\n        <Child2>Text content</Child2>  \\n     </Root>  \\n  \\nFor Each node As XNode In xmlTree.DescendantNodes  \\n    Console.WriteLine(node.NodeType.ToString())  \\n    If node.NodeType = XmlNodeType.Element Then  \\n        For Each att In DirectCast(node, XElement).Attributes  \\n            Console.WriteLine(att.NodeType.ToString())  \\n        Next  \\n    End If  \\nNext  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Comment  \\nProcessingInstruction  \\nElement  \\nAttribute  \\nElement  \\nCDATA  \\nElement  \\nText  \\n```\"\n  syntax:\n    content: public abstract System.Xml.XmlNodeType NodeType { get; }\n    return:\n      type: System.Xml.XmlNodeType\n      description: The node type for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  overload: System.Xml.Linq.XObject.NodeType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.Parent\n  commentId: P:System.Xml.Linq.XObject.Parent\n  id: Parent\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: Parent\n  nameWithType: XObject.Parent\n  fullName: XObject.Parent\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the parent <xref href=\"System.Xml.Linq.XElement\"></xref> of this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: \"If this <xref:System.Xml.Linq.XObject> has no parent element, this property returns `null`.  \\n  \\n> [!NOTE]\\n>  This property returns the parent element, and as children nodes of an <xref:System.Xml.Linq.XDocument> have no parent element, this property returns `null` for them.\"\n  example:\n  - \"The following example uses this method.  \\n  \\n```csharp  \\n  \\n                XDocument doc = new XDocument(  \\n    new XComment(\\\"A comment in the document.\\\"),  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child\\\", \\\"content\\\")  \\n    )  \\n);  \\nXElement child = doc.Descendants(\\\"Child\\\").First();  \\nXElement root = child.Parent;  \\nConsole.WriteLine(root.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc As XDocument = _   \\n    <?xml version=\\\"1.0\\\"?>  \\n    <!--A comment in the document.-->  \\n    <Root>  \\n        <Child>content</Child>  \\n    </Root>  \\nDim child As XElement = doc.Descendants(\\\"Child\\\").First()  \\nDim root As XElement = child.Parent  \\nConsole.WriteLine(root.Name)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nRoot  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XElement Parent { get; }\n    return:\n      type: System.Xml.Linq.XElement\n      description: The parent <xref href=\"System.Xml.Linq.XElement\"></xref> of this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  overload: System.Xml.Linq.XObject.Parent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  commentId: M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  id: RemoveAnnotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: RemoveAnnotations(Type)\n  nameWithType: XObject.RemoveAnnotations(Type)\n  fullName: XObject.RemoveAnnotations(Type)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Removes the annotations of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates an element with four annotations on it. It then uses this method to remove two of them.  \\n  \\n```csharp  \\n  \\n                public class MyAnnotation {  \\n    private string tag;  \\n    public string Tag {get{return tag;} set{tag=value;}}  \\n    public MyAnnotation(string tag) {  \\n        this.tag = tag;  \\n    }  \\n}  \\n  \\nclass Program  \\n{  \\n    static void Main(string[] args)  \\n    {     \\n        XElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\n        root.AddAnnotation(new MyAnnotation(\\\"T1\\\"));  \\n        root.AddAnnotation(new MyAnnotation(\\\"T2\\\"));  \\n        root.AddAnnotation(\\\"abc\\\");  \\n        root.AddAnnotation(\\\"def\\\");  \\n  \\n        Console.WriteLine(\\\"Count before removing: {0}\\\", root.Annotations<object>().Count());  \\n        root.RemoveAnnotations(typeof(MyAnnotation));  \\n        Console.WriteLine(\\\"Count after removing: {0}\\\", root.Annotations<object>().Count());  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Public Class MyAnnotation  \\n    Private _tag As String  \\n  \\n    Property Tag() As String  \\n        Get  \\n            Return Me._tag  \\n        End Get  \\n        Set(ByVal Value As String)  \\n            Me._tag = Value  \\n        End Set  \\n    End Property  \\n  \\n    Public Sub New(ByVal tag As String)  \\n        Me._tag = tag  \\n    End Sub  \\nEnd Class  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <Root>content</Root>  \\n        root.AddAnnotation(New MyAnnotation(\\\"T1\\\"))  \\n        root.AddAnnotation(New MyAnnotation(\\\"T2\\\"))  \\n        root.AddAnnotation(\\\"abc\\\")  \\n        root.AddAnnotation(\\\"def\\\")  \\n  \\n        Console.WriteLine(\\\"Count before removing: {0}\\\", root.Annotations(Of Object)().Count())  \\n        root.RemoveAnnotations(GetType(MyAnnotation))  \\n        Console.WriteLine(\\\"Count after removing: {0}\\\", root.Annotations(Of Object)().Count())  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Count before removing: 4  \\nCount after removing: 2  \\n```\"\n  syntax:\n    content: public void RemoveAnnotations (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of annotations to remove.\n  overload: System.Xml.Linq.XObject.RemoveAnnotations*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.RemoveAnnotations``1\n  commentId: M:System.Xml.Linq.XObject.RemoveAnnotations``1\n  id: RemoveAnnotations``1\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: RemoveAnnotations<T>()\n  nameWithType: XObject.RemoveAnnotations<T>()\n  fullName: XObject.RemoveAnnotations<T>()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Removes the annotations of the specified type from this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates an element with four annotations on it. It then uses this method to remove two of them.  \\n  \\n```csharp  \\n  \\n                public class MyAnnotation {  \\n    private string tag;  \\n    public string Tag {get{return tag;} set{tag=value;}}  \\n    public MyAnnotation(string tag) {  \\n        this.tag = tag;  \\n    }  \\n}  \\n  \\nclass Program {  \\n    static void Main(string[] args) {     \\n        XElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\n        root.AddAnnotation(new MyAnnotation(\\\"T1\\\"));  \\n        root.AddAnnotation(new MyAnnotation(\\\"T2\\\"));  \\n        root.AddAnnotation(\\\"abc\\\");  \\n        root.AddAnnotation(\\\"def\\\");  \\n  \\n        Console.WriteLine(\\\"Count before removing: {0}\\\", root.Annotations<object>().Count());  \\n        root.RemoveAnnotations<MyAnnotation>();  \\n        Console.WriteLine(\\\"Count after removing: {0}\\\", root.Annotations<object>().Count());  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Public Class MyAnnotation  \\n    Private _tag As String  \\n  \\n    Property Tag() As String  \\n        Get  \\n            Return Me._tag  \\n        End Get  \\n        Set(ByVal Value As String)  \\n            Me._tag = Value  \\n        End Set  \\n    End Property  \\n  \\n    Public Sub New(ByVal tag As String)  \\n        Me._tag = tag  \\n    End Sub  \\nEnd Class  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <Root>content</Root>  \\n        root.AddAnnotation(New MyAnnotation(\\\"T1\\\"))  \\n        root.AddAnnotation(New MyAnnotation(\\\"T2\\\"))  \\n        root.AddAnnotation(\\\"abc\\\")  \\n        root.AddAnnotation(\\\"def\\\")  \\n  \\n        Console.WriteLine(\\\"Count before removing: {0}\\\", root.Annotations(Of Object)().Count())  \\n        root.RemoveAnnotations(Of MyAnnotation)()  \\n        Console.WriteLine(\\\"Count after removing: {0}\\\", root.Annotations(Of Object)().Count())  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Count before removing: 4  \\nCount after removing: 2  \\n```\"\n  syntax:\n    content: 'public void RemoveAnnotations<T> () where T : class;'\n    parameters: []\n    typeParameters:\n    - id: T\n      description: The type of annotations to remove.\n  overload: System.Xml.Linq.XObject.RemoveAnnotations``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  commentId: M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  id: System#Xml#IXmlLineInfo#HasLineInfo\n  isEii: true\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: IXmlLineInfo.HasLineInfo()\n  nameWithType: XObject.IXmlLineInfo.HasLineInfo()\n  fullName: XObject.IXmlLineInfo.HasLineInfo()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a value indicating whether or not this <xref href=\"System.Xml.Linq.XObject\"></xref> has line information.\n  remarks: \"You can call this method to determine whether the <xref:System.Xml.Linq.XObject> contains valid line information.  \\n  \\n This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.\"\n  example:\n  - \"This example loads a small XML tree from a file, setting the options to set base URI and retain line information. It then adds another element that does not have line information. It then prints the line information for each element in the tree.  \\n  \\n```csharp  \\n  \\n                string markup = @\\\"<Root>  \\n    <Child1 />  \\n    <Child2 />  \\n    <Child4 />  \\n</Root>\\\";  \\n  \\nFile.WriteAllText(\\\"Test.xml\\\", markup);  \\n  \\nXElement po = XElement.Load(\\\"Test.xml\\\",  \\n    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  \\n  \\n// add a node to the tree.  \\n// the newly added node will not have line information.  \\npo.Element(\\\"Child2\\\").AddAfterSelf(new XElement(\\\"Child3\\\"));  \\n  \\nstring[] splitUri = po.BaseUri.Split('/');  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri[splitUri.Length - 1]);  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"Element Name\\\".PadRight(20),  \\n    \\\"Line\\\".PadRight(5),  \\n    \\\"Position\\\");  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"------------\\\".PadRight(20),  \\n    \\\"----\\\".PadRight(5),  \\n    \\\"--------\\\");  \\nforeach (XElement e in po.DescendantsAndSelf())  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \\n        ((IXmlLineInfo)e).HasLineInfo() ?  \\n            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  \\n            \\\"\\\",  \\n        ((IXmlLineInfo)e).HasLineInfo() ?  \\n            ((IXmlLineInfo)e).LinePosition.ToString() :  \\n            \\\"No Line Information\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim markup As String = _  \\n    \\\"<Root>\\\" & Environment.NewLine & _  \\n    \\\"    <Child1 />\\\" & Environment.NewLine & _  \\n    \\\"    <Child2 />\\\" & Environment.NewLine & _  \\n    \\\"    <Child4 />\\\" & Environment.NewLine & _  \\n    \\\"</Root>\\\"  \\n  \\nFile.WriteAllText(\\\"Test.xml\\\", markup)  \\n  \\nDim po As XElement = XElement.Load(\\\"Test.xml\\\", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  \\n  \\n' add a node to the tree.  \\n' the newly added node will not have line information.  \\npo.Element(\\\"Child2\\\").AddAfterSelf(New XElement(\\\"Child3\\\"))  \\n  \\nDim splitUri() As String = po.BaseUri.Split(\\\"/\\\"c)  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri(splitUri.Length - 1))  \\nConsole.WriteLine()  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"Element Name\\\".PadRight(20), _  \\n    \\\"Line\\\".PadRight(5), _  \\n    \\\"Position\\\")  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"------------\\\".PadRight(20), _  \\n    \\\"----\\\".PadRight(5), _  \\n    \\\"--------\\\")  \\nFor Each e As XElement In po.DescendantsAndSelf()  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \\n        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  \\n            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  \\n            \\\"\\\"), _  \\n        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  \\n            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  \\n            \\\"No Line Information\\\"))  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                BaseUri: Test.xml  \\n  \\nElement Name        Line Position  \\n------------        ---- --------  \\nRoot                1    2  \\n  Child1            2    6  \\n  Child2            3    6  \\n  Child3            No Line Information  \\n  Child4            4    6  \\n```\"\n  syntax:\n    content: bool IXmlLineInfo.HasLineInfo ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Xml.Linq.XObject\"></xref> has line information, otherwise `false`.'\n  overload: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  commentId: P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  id: System#Xml#IXmlLineInfo#LineNumber\n  isEii: true\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: IXmlLineInfo.LineNumber\n  nameWithType: XObject.IXmlLineInfo.LineNumber\n  fullName: XObject.IXmlLineInfo.LineNumber\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the line number that the underlying <xref href=\"System.Xml.XmlReader\"></xref> reported for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.\n  example:\n  - \"This example loads a small XML tree from a file, setting the options to set base URI and retain line information. It then adds another element that does not have line information. It then prints the line information for each element in the tree.  \\n  \\n```csharp  \\n  \\n                string markup = @\\\"<Root>  \\n    <Child1 />  \\n    <Child2 />  \\n    <Child4 />  \\n</Root>\\\";  \\n  \\nFile.WriteAllText(\\\"Test.xml\\\", markup);  \\n  \\nXElement po = XElement.Load(\\\"Test.xml\\\",  \\n    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  \\n  \\n// add a node to the tree.  \\n// the newly added node will not have line information.  \\npo.Element(\\\"Child2\\\").AddAfterSelf(new XElement(\\\"Child3\\\"));  \\n  \\nstring[] splitUri = po.BaseUri.Split('/');  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri[splitUri.Length - 1]);  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"Element Name\\\".PadRight(20),  \\n    \\\"Line\\\".PadRight(5),  \\n    \\\"Position\\\");  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"------------\\\".PadRight(20),  \\n    \\\"----\\\".PadRight(5),  \\n    \\\"--------\\\");  \\nforeach (XElement e in po.DescendantsAndSelf())  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \\n        ((IXmlLineInfo)e).HasLineInfo() ?  \\n            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  \\n            \\\"\\\",  \\n        ((IXmlLineInfo)e).HasLineInfo() ?  \\n            ((IXmlLineInfo)e).LinePosition.ToString() :  \\n            \\\"No Line Information\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim markup As String = _  \\n    \\\"<Root>\\\" & Environment.NewLine & _  \\n    \\\"    <Child1 />\\\" & Environment.NewLine & _  \\n    \\\"    <Child2 />\\\" & Environment.NewLine & _  \\n    \\\"    <Child4 />\\\" & Environment.NewLine & _  \\n    \\\"</Root>\\\"  \\n  \\nFile.WriteAllText(\\\"Test.xml\\\", markup)  \\n  \\nDim po As XElement = XElement.Load(\\\"Test.xml\\\", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  \\n  \\n' add a node to the tree.  \\n' the newly added node will not have line information.  \\npo.Element(\\\"Child2\\\").AddAfterSelf(New XElement(\\\"Child3\\\"))  \\n  \\nDim splitUri() As String = po.BaseUri.Split(\\\"/\\\"c)  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri(splitUri.Length - 1))  \\nConsole.WriteLine()  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"Element Name\\\".PadRight(20), _  \\n    \\\"Line\\\".PadRight(5), _  \\n    \\\"Position\\\")  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"------------\\\".PadRight(20), _  \\n    \\\"----\\\".PadRight(5), _  \\n    \\\"--------\\\")  \\nFor Each e As XElement In po.DescendantsAndSelf()  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \\n        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  \\n            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  \\n            \\\"\\\"), _  \\n        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  \\n            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  \\n            \\\"No Line Information\\\"))  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                BaseUri: Test.xml  \\n  \\nElement Name        Line Position  \\n------------        ---- --------  \\nRoot                1    2  \\n  Child1            2    6  \\n  Child2            3    6  \\n  Child3            No Line Information  \\n  Child4            4    6  \\n```\"\n  syntax:\n    content: int System.Xml.IXmlLineInfo.LineNumber { get; }\n    return:\n      type: System.Int32\n      description: An <xref href=\"System.Int32\"></xref> that contains the line number reported by the <xref href=\"System.Xml.XmlReader\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  overload: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  commentId: P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  id: System#Xml#IXmlLineInfo#LinePosition\n  isEii: true\n  parent: System.Xml.Linq.XObject\n  langs:\n  - csharp\n  name: IXmlLineInfo.LinePosition\n  nameWithType: XObject.IXmlLineInfo.LinePosition\n  fullName: XObject.IXmlLineInfo.LinePosition\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the line position that the underlying <xref href=\"System.Xml.XmlReader\"></xref> reported for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  remarks: This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.\n  example:\n  - \"This example loads a small XML tree from a file, setting the options to set base URI and retain line information. It then adds another element that does not have line information. It then prints the line information for each element in the tree.  \\n  \\n```csharp  \\n  \\n                string markup = @\\\"<Root>  \\n    <Child1 />  \\n    <Child2 />  \\n    <Child4 />  \\n</Root>\\\";  \\n  \\nFile.WriteAllText(\\\"Test.xml\\\", markup);  \\n  \\nXElement po = XElement.Load(\\\"Test.xml\\\",  \\n    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  \\n  \\n// add a node to the tree.  \\n// the newly added node will not have line information.  \\npo.Element(\\\"Child2\\\").AddAfterSelf(new XElement(\\\"Child3\\\"));  \\n  \\nstring[] splitUri = po.BaseUri.Split('/');  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri[splitUri.Length - 1]);  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"Element Name\\\".PadRight(20),  \\n    \\\"Line\\\".PadRight(5),  \\n    \\\"Position\\\");  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"------------\\\".PadRight(20),  \\n    \\\"----\\\".PadRight(5),  \\n    \\\"--------\\\");  \\nforeach (XElement e in po.DescendantsAndSelf())  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \\n        ((IXmlLineInfo)e).HasLineInfo() ?  \\n            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  \\n            \\\"\\\",  \\n        ((IXmlLineInfo)e).HasLineInfo() ?  \\n            ((IXmlLineInfo)e).LinePosition.ToString() :  \\n            \\\"No Line Information\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim markup As String = _  \\n    \\\"<Root>\\\" & Environment.NewLine & _  \\n    \\\"    <Child1 />\\\" & Environment.NewLine & _  \\n    \\\"    <Child2 />\\\" & Environment.NewLine & _  \\n    \\\"    <Child4 />\\\" & Environment.NewLine & _  \\n    \\\"</Root>\\\"  \\n  \\nFile.WriteAllText(\\\"Test.xml\\\", markup)  \\n  \\nDim po As XElement = XElement.Load(\\\"Test.xml\\\", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  \\n  \\n' add a node to the tree.  \\n' the newly added node will not have line information.  \\npo.Element(\\\"Child2\\\").AddAfterSelf(New XElement(\\\"Child3\\\"))  \\n  \\nDim splitUri() As String = po.BaseUri.Split(\\\"/\\\"c)  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri(splitUri.Length - 1))  \\nConsole.WriteLine()  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"Element Name\\\".PadRight(20), _  \\n    \\\"Line\\\".PadRight(5), _  \\n    \\\"Position\\\")  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"------------\\\".PadRight(20), _  \\n    \\\"----\\\".PadRight(5), _  \\n    \\\"--------\\\")  \\nFor Each e As XElement In po.DescendantsAndSelf()  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \\n        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  \\n            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  \\n            \\\"\\\"), _  \\n        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  \\n            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  \\n            \\\"No Line Information\\\"))  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                BaseUri: Test.xml  \\n  \\nElement Name        Line Position  \\n------------        ---- --------  \\nRoot                1    2  \\n  Child1            2    6  \\n  Child2            3    6  \\n  Child3            No Line Information  \\n  Child4            4    6  \\n```\"\n  syntax:\n    content: int System.Xml.IXmlLineInfo.LinePosition { get; }\n    return:\n      type: System.Int32\n      description: An <xref href=\"System.Int32\"></xref> that contains the line position reported by the <xref href=\"System.Xml.XmlReader\"></xref> for this <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  overload: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: AddAnnotation(Object)\n  nameWithType: XObject.AddAnnotation(Object)\n  fullName: XObject.AddAnnotation(Object)\n- uid: System.Xml.Linq.XObject.Annotation(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation(Type)\n  nameWithType: XObject.Annotation(Type)\n  fullName: XObject.Annotation(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Xml.Linq.XObject.Annotation``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation<T>()\n  nameWithType: XObject.Annotation<T>()\n  fullName: XObject.Annotation<T>()\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Xml.Linq.XObject.Annotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations(Type)\n  nameWithType: XObject.Annotations(Type)\n  fullName: XObject.Annotations(Type)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.Object}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Object>\n  nameWithType: IEnumerable<Object>\n  fullName: System.Collections.Generic.IEnumerable<System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XObject.Annotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations<T>()\n  nameWithType: XObject.Annotations<T>()\n  fullName: XObject.Annotations<T>()\n- uid: System.Xml.Linq.XObject.BaseUri\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: BaseUri\n  nameWithType: XObject.BaseUri\n  fullName: XObject.BaseUri\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Xml.Linq.XObject.Changed\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changed\n  nameWithType: XObject.Changed\n  fullName: XObject.Changed\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Xml.Linq.XObjectChangeEventArgs\n  name: XObjectChangeEventArgs\n  nameWithType: XObjectChangeEventArgs\n  fullName: System.Xml.Linq.XObjectChangeEventArgs\n- uid: System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<XObjectChangeEventArgs>\n  nameWithType: EventHandler<XObjectChangeEventArgs>\n  fullName: System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XObjectChangeEventArgs\n    name: XObjectChangeEventArgs\n    nameWithType: XObjectChangeEventArgs\n    fullName: System.Xml.Linq.XObjectChangeEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XObject.Changing\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changing\n  nameWithType: XObject.Changing\n  fullName: XObject.Changing\n- uid: System.Xml.Linq.XObject.Document\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Document\n  nameWithType: XObject.Document\n  fullName: XObject.Document\n- uid: System.Xml.Linq.XDocument\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XDocument\n  nameWithType: XDocument\n  fullName: System.Xml.Linq.XDocument\n- uid: System.Xml.Linq.XObject.NodeType\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: NodeType\n  nameWithType: XObject.NodeType\n  fullName: XObject.NodeType\n- uid: System.Xml.XmlNodeType\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeType\n  nameWithType: XmlNodeType\n  fullName: System.Xml.XmlNodeType\n- uid: System.Xml.Linq.XObject.Parent\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Parent\n  nameWithType: XObject.Parent\n  fullName: XObject.Parent\n- uid: System.Xml.Linq.XElement\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XElement\n  nameWithType: XElement\n  fullName: System.Xml.Linq.XElement\n- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations(Type)\n  nameWithType: XObject.RemoveAnnotations(Type)\n  fullName: XObject.RemoveAnnotations(Type)\n- uid: System.Xml.Linq.XObject.RemoveAnnotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations<T>()\n  nameWithType: XObject.RemoveAnnotations<T>()\n  fullName: XObject.RemoveAnnotations<T>()\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.HasLineInfo()\n  nameWithType: XObject.IXmlLineInfo.HasLineInfo()\n  fullName: XObject.IXmlLineInfo.HasLineInfo()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.LineNumber\n  nameWithType: XObject.IXmlLineInfo.LineNumber\n  fullName: XObject.IXmlLineInfo.LineNumber\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.LinePosition\n  nameWithType: XObject.IXmlLineInfo.LinePosition\n  fullName: XObject.IXmlLineInfo.LinePosition\n- uid: System.Xml.Linq.XObject.AddAnnotation*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: AddAnnotation\n  nameWithType: XObject.AddAnnotation\n  fullName: XObject.AddAnnotation\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.Annotation*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation\n  nameWithType: XObject.Annotation\n  fullName: XObject.Annotation\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.Annotation``1*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation<T>\n  nameWithType: XObject.Annotation<T>\n  fullName: XObject.Annotation<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.Annotations*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations\n  nameWithType: XObject.Annotations\n  fullName: XObject.Annotations\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.Annotations``1*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations<T>\n  nameWithType: XObject.Annotations<T>\n  fullName: XObject.Annotations<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.BaseUri*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: BaseUri\n  nameWithType: XObject.BaseUri\n  fullName: XObject.BaseUri\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.Document*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Document\n  nameWithType: XObject.Document\n  fullName: XObject.Document\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.NodeType*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: NodeType\n  nameWithType: XObject.NodeType\n  fullName: XObject.NodeType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.Parent*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Parent\n  nameWithType: XObject.Parent\n  fullName: XObject.Parent\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.RemoveAnnotations*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations\n  nameWithType: XObject.RemoveAnnotations\n  fullName: XObject.RemoveAnnotations\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.RemoveAnnotations``1*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations<T>\n  nameWithType: XObject.RemoveAnnotations<T>\n  fullName: XObject.RemoveAnnotations<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: System.Xml.IXmlLineInfo.HasLineInfo\n  nameWithType: XObject.System.Xml.IXmlLineInfo.HasLineInfo\n  fullName: XObject.System.Xml.IXmlLineInfo.HasLineInfo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: System.Xml.IXmlLineInfo.LineNumber\n  nameWithType: XObject.System.Xml.IXmlLineInfo.LineNumber\n  fullName: XObject.System.Xml.IXmlLineInfo.LineNumber\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition*\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: System.Xml.IXmlLineInfo.LinePosition\n  nameWithType: XObject.System.Xml.IXmlLineInfo.LinePosition\n  fullName: XObject.System.Xml.IXmlLineInfo.LinePosition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XObject.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Xml.IXmlLineInfo\n  parent: System.Xml\n  isExternal: false\n  name: IXmlLineInfo\n  nameWithType: IXmlLineInfo\n  fullName: System.Xml.IXmlLineInfo\n"}