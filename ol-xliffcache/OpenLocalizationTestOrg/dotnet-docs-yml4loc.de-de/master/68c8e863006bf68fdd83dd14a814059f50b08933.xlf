<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68c8e863006bf68fdd83dd14a814059f50b08933</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.MarshalByRefObject.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db8d2582d93586a4615a532f4e4eb49c7bc17513</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9578d30fce9f5124d37b722dc069fb473e2b4bf7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enables access to objects across application domain boundaries in applications that support remoting.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application domain is a partition in an operating system process where one or more applications reside.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects in the same application domain communicate directly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects in different application domains communicate either by transporting copies of objects across application domain boundaries, or by using a proxy to exchange messages.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> is the base class for objects that communicate across application domain boundaries by exchanging messages using a proxy.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that do not inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> are implicitly marshal by value.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a remote application references a marshal by value object, a copy of the object is passed across application domain boundaries.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objects are accessed directly within the boundaries of the local application domain.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first time an application in a remote application domain accesses a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, a proxy is passed to the remote application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent calls on the proxy are marshaled back to the object residing in the local application domain.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Types must inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> when the type is used across application domain boundaries, and the state of the object must not be copied because the members of the object are not usable outside the application domain where they were created.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you derive an object from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> for use across application domain boundaries, you should not override any of its members, nor should you call its methods directly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime recognizes that classes derived from  <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> should be marshaled across app domain boundaries.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.MarshalByRefObject"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The<ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> method is called by remote object creation methods such as <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, there is no need to override this method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the object that the new <ph id="ph2">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> will reference.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Information required to generate a proxy.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This instance is not a valid remoting object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Lifetime.ILease"&gt;&lt;/xref&gt;</ph> used to control the lifetime policy for this instance.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Obtains a lifetime service object to control the lifetime policy for this instance.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Lifetime.ILease"&gt;&lt;/xref&gt;</ph> used to control the lifetime policy for this instance.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creates a shallow copy of the current <ph id="ph1">&lt;xref href="System.MarshalByRefObject"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method creates a shallow copy by creating a new <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> object, and then copying the nonstatic fields of the current <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object to the new object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a field is a value type, a bit-by-bit copy of the field is performed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, consider a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy C. Use a class that implements the <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> interface to perform a deep or shallow copy of an object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The identity of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object is defined as the remote server object that is the target of a remoting client call.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the memberwise clone of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object has the same identity as the original object, which is typically not the correct behavior for clones of server-side objects that are marshaled across a remoting boundary to the client side.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify <ph id="ph1">`false`</ph>, which is usually appropriate, to delete the identity of the clone and cause a new identity to be assigned when the clone is marshaled across a remoting boundary, or <ph id="ph2">`true`</ph> to cause the clone to retain the identity of the original <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method is intended to be used by developers implementing remote server objects.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> to delete the current <ph id="ph2">&lt;xref href="System.MarshalByRefObject"&gt;&lt;/xref&gt;</ph> object's identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`false`</ph> is usually appropriate.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to copy the current <ph id="ph2">&lt;xref href="System.MarshalByRefObject"&gt;&lt;/xref&gt;</ph> object's identity to its clone, which will cause remoting client calls to be routed to the remote server object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A shallow copy of the current <ph id="ph1">&lt;xref href="System.MarshalByRefObject"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>