{"nodes":[{"content":"Provides blocking and bounding capabilities for thread-safe collections that implement <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"></xref>.","nodes":[{"pos":[0,168],"content":"Provides blocking and bounding capabilities for thread-safe collections that implement <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"Provides blocking and bounding capabilities for thread-safe collections that implement <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"></xref>."}],"pos":[4993,5162],"yaml":true},{"content":"<xref:System.Collections.Concurrent.BlockingCollection%601> is a thread-safe collection class that provides the following:  \n  \n-   An implementation of the producer/consumer pattern; <xref:System.Collections.Concurrent.BlockingCollection%601> is a wrapper for the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface.  \n  \n-   Concurrent addition and removal of items from multiple threads with the <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and  <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> methods.  \n  \n-   A bounded collection that blocks <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations when the collection is full or empty.  \n  \n-   Cancellation of <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations by using a <xref:System.Threading.CancellationToken> object in the  <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic. Also, note that the <xref:System.Collections.Concurrent.BlockingCollection%601.Dispose> method is not thread-safe. All other public and protected members of <xref:System.Collections.Concurrent.BlockingCollection%601> are thread-safe and may be used concurrently from multiple threads.  \n  \n <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> represents a collection that allows for thread-safe adding and removal of data. <xref:System.Collections.Concurrent.BlockingCollection%601> is used as a wrapper for an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> instance, and allows removal attempts from the collection to block until data is available to be removed. Similarly, you can create a <xref:System.Collections.Concurrent.BlockingCollection%601> to enforce an upper bound on the number of data elements allowed in the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>; addition attempts to the collection may then block until space is available to store the added items. In this manner, <xref:System.Collections.Concurrent.BlockingCollection%601> is similar to a traditional blocking queue data structure, except that the underlying data storage mechanism is abstracted away as an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>.  \n  \n <xref:System.Collections.Concurrent.BlockingCollection%601> supports bounding and blocking. Bounding means that you can set the maximum capacity of the collection. Bounding is important in certain scenarios because it enables you to control the maximum size of the collection in memory, and it prevents the producing threads from moving too far ahead of the consuming threads.Multiple threads or tasks can add items to the collection concurrently, and if the collection reaches its specified maximum capacity, the producing threads will block until an item is removed. Multiple consumers can remove items concurrently, and if the collection becomes empty, the consuming threads will block until a producer adds an item. A producing thread can call the <xref:System.Collections.Concurrent.BlockingCollection%601.CompleteAdding%2A> method to indicate that no more items will be added. Consumers monitor the <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> property to know when the collection is empty and no more items will be added.  \n  \n <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations are typically performed in a loop. You can cancel a loop by passing in a <xref:System.Threading.CancellationToken> object to the <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method, and then checking the value of the token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on each iteration. If the value is `true`, it is up to you to respond the cancellation request by cleaning up any resources and exiting the loop.  \n  \n When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify not only the bounded capacity but also the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.  \n  \n Do not modify the underlying collection directly. Use <xref:System.Collections.Concurrent.BlockingCollection%601> methods to add or remove elements. The <xref:System.Collections.Concurrent.BlockingCollection%601> object can become corrupted if you change the underlying collection directly.","nodes":[{"pos":[0,122],"content":"<xref:System.Collections.Concurrent.BlockingCollection%601> is a thread-safe collection class that provides the following:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is a thread-safe collection class that provides the following:","pos":[0,122],"source":"<xref:System.Collections.Concurrent.BlockingCollection%601> is a thread-safe collection class that provides the following:"}]},{"pos":[132,344],"content":"An implementation of the producer/consumer pattern; <xref:System.Collections.Concurrent.BlockingCollection%601> is a wrapper for the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface.","nodes":[{"content":"An implementation of the producer/consumer pattern; <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is a wrapper for the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> interface.","pos":[0,212],"source":"An implementation of the producer/consumer pattern; <xref:System.Collections.Concurrent.BlockingCollection%601> is a wrapper for the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface."}]},{"pos":[354,574],"content":"Concurrent addition and removal of items from multiple threads with the <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and  <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> methods.","nodes":[{"content":"Concurrent addition and removal of items from multiple threads with the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A&gt;</ph> and  <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A&gt;</ph> methods.","pos":[0,220],"source":"Concurrent addition and removal of items from multiple threads with the <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and  <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> methods."}]},{"pos":[584,804],"content":"A bounded collection that blocks <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations when the collection is full or empty.","nodes":[{"content":"A bounded collection that blocks <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A&gt;</ph> operations when the collection is full or empty.","pos":[0,220],"source":"A bounded collection that blocks <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations when the collection is full or empty."}]},{"pos":[814,1198],"content":"Cancellation of <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations by using a <xref:System.Threading.CancellationToken> object in the  <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method.","nodes":[{"content":"Cancellation of <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A&gt;</ph> operations by using a <ph id=\"ph3\">&lt;xref:System.Threading.CancellationToken&gt;</ph> object in the  <ph id=\"ph4\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A&gt;</ph> method.","pos":[0,384],"source":"Cancellation of <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations by using a <xref:System.Threading.CancellationToken> object in the  <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method."}]},{"pos":[1206,2017],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic. Also, note that the <xref:System.Collections.Concurrent.BlockingCollection%601.Dispose> method is not thread-safe. All other public and protected members of <xref:System.Collections.Concurrent.BlockingCollection%601> are thread-safe and may be used concurrently from multiple threads.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic. Also, note that the <xref:System.Collections.Concurrent.BlockingCollection%601.Dispose> method is not thread-safe. All other public and protected members of <xref:System.Collections.Concurrent.BlockingCollection%601> are thread-safe and may be used concurrently from multiple threads.","pos":[13,809],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."},{"content":"Also, note that the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Dispose&gt;</ph> method is not thread-safe.","pos":[512,626],"source":" Also, note that the <xref:System.Collections.Concurrent.BlockingCollection%601.Dispose> method is not thread-safe."},{"content":"All other public and protected members of <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> are thread-safe and may be used concurrently from multiple threads.","pos":[627,796],"source":" All other public and protected members of <xref:System.Collections.Concurrent.BlockingCollection%601> are thread-safe and may be used concurrently from multiple threads."}]}]},{"pos":[2024,3047],"content":"<xref:System.Collections.Concurrent.IProducerConsumerCollection%601> represents a collection that allows for thread-safe adding and removal of data. <xref:System.Collections.Concurrent.BlockingCollection%601> is used as a wrapper for an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> instance, and allows removal attempts from the collection to block until data is available to be removed. Similarly, you can create a <xref:System.Collections.Concurrent.BlockingCollection%601> to enforce an upper bound on the number of data elements allowed in the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>; addition attempts to the collection may then block until space is available to store the added items. In this manner, <xref:System.Collections.Concurrent.BlockingCollection%601> is similar to a traditional blocking queue data structure, except that the underlying data storage mechanism is abstracted away as an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>.","nodes":[{"content":"<xref:System.Collections.Concurrent.IProducerConsumerCollection%601> represents a collection that allows for thread-safe adding and removal of data. <xref:System.Collections.Concurrent.BlockingCollection%601> is used as a wrapper for an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> instance, and allows removal attempts from the collection to block until data is available to be removed. Similarly, you can create a <xref:System.Collections.Concurrent.BlockingCollection%601> to enforce an upper bound on the number of data elements allowed in the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>; addition attempts to the collection may then block until space is available to store the added items. In this manner, <xref:System.Collections.Concurrent.BlockingCollection%601> is similar to a traditional blocking queue data structure, except that the underlying data storage mechanism is abstracted away as an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>.","pos":[0,1023],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> represents a collection that allows for thread-safe adding and removal of data.","pos":[0,148],"source":"<xref:System.Collections.Concurrent.IProducerConsumerCollection%601> represents a collection that allows for thread-safe adding and removal of data."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is used as a wrapper for an <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> instance, and allows removal attempts from the collection to block until data is available to be removed.","pos":[149,411],"source":" <xref:System.Collections.Concurrent.BlockingCollection%601> is used as a wrapper for an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> instance, and allows removal attempts from the collection to block until data is available to be removed."},{"content":"Similarly, you can create a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> to enforce an upper bound on the number of data elements allowed in the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph>; addition attempts to the collection may then block until space is available to store the added items.","pos":[412,743],"source":" Similarly, you can create a <xref:System.Collections.Concurrent.BlockingCollection%601> to enforce an upper bound on the number of data elements allowed in the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>; addition attempts to the collection may then block until space is available to store the added items."},{"content":"In this manner, <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is similar to a traditional blocking queue data structure, except that the underlying data storage mechanism is abstracted away as an <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph>.","pos":[744,1023],"source":" In this manner, <xref:System.Collections.Concurrent.BlockingCollection%601> is similar to a traditional blocking queue data structure, except that the underlying data storage mechanism is abstracted away as an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>."}]}]},{"pos":[3054,4112],"content":"<xref:System.Collections.Concurrent.BlockingCollection%601> supports bounding and blocking. Bounding means that you can set the maximum capacity of the collection. Bounding is important in certain scenarios because it enables you to control the maximum size of the collection in memory, and it prevents the producing threads from moving too far ahead of the consuming threads.Multiple threads or tasks can add items to the collection concurrently, and if the collection reaches its specified maximum capacity, the producing threads will block until an item is removed. Multiple consumers can remove items concurrently, and if the collection becomes empty, the consuming threads will block until a producer adds an item. A producing thread can call the <xref:System.Collections.Concurrent.BlockingCollection%601.CompleteAdding%2A> method to indicate that no more items will be added. Consumers monitor the <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> property to know when the collection is empty and no more items will be added.","nodes":[{"content":"<xref:System.Collections.Concurrent.BlockingCollection%601> supports bounding and blocking. Bounding means that you can set the maximum capacity of the collection. Bounding is important in certain scenarios because it enables you to control the maximum size of the collection in memory, and it prevents the producing threads from moving too far ahead of the consuming threads.Multiple threads or tasks can add items to the collection concurrently, and if the collection reaches its specified maximum capacity, the producing threads will block until an item is removed. Multiple consumers can remove items concurrently, and if the collection becomes empty, the consuming threads will block until a producer adds an item. A producing thread can call the <xref:System.Collections.Concurrent.BlockingCollection%601.CompleteAdding%2A> method to indicate that no more items will be added. Consumers monitor the <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> property to know when the collection is empty and no more items will be added.","pos":[0,1058],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> supports bounding and blocking.","pos":[0,91],"source":"<xref:System.Collections.Concurrent.BlockingCollection%601> supports bounding and blocking."},{"content":"Bounding means that you can set the maximum capacity of the collection.","pos":[92,163]},{"content":"Bounding is important in certain scenarios because it enables you to control the maximum size of the collection in memory, and it prevents the producing threads from moving too far ahead of the consuming threads.Multiple threads or tasks can add items to the collection concurrently, and if the collection reaches its specified maximum capacity, the producing threads will block until an item is removed.","pos":[164,568]},{"content":"Multiple consumers can remove items concurrently, and if the collection becomes empty, the consuming threads will block until a producer adds an item.","pos":[569,719]},{"content":"A producing thread can call the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.CompleteAdding%2A&gt;</ph> method to indicate that no more items will be added.","pos":[720,882],"source":" A producing thread can call the <xref:System.Collections.Concurrent.BlockingCollection%601.CompleteAdding%2A> method to indicate that no more items will be added."},{"content":"Consumers monitor the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A&gt;</ph> property to know when the collection is empty and no more items will be added.","pos":[883,1058],"source":" Consumers monitor the <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> property to know when the collection is empty and no more items will be added."}]}]},{"pos":[4119,4816],"content":"<xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations are typically performed in a loop. You can cancel a loop by passing in a <xref:System.Threading.CancellationToken> object to the <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method, and then checking the value of the token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on each iteration. If the value is `true`, it is up to you to respond the cancellation request by cleaning up any resources and exiting the loop.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A&gt;</ph> operations are typically performed in a loop.","pos":[0,184],"source":"<xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations are typically performed in a loop."},{"content":"You can cancel a loop by passing in a <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> object to the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A&gt;</ph> method, and then checking the value of the token's <ph id=\"ph4\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property on each iteration.","pos":[185,570],"source":" You can cancel a loop by passing in a <xref:System.Threading.CancellationToken> object to the <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method, and then checking the value of the token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on each iteration."},{"content":"If the value is <ph id=\"ph1\">`true`</ph>, it is up to you to respond the cancellation request by cleaning up any resources and exiting the loop.","pos":[571,697],"source":" If the value is `true`, it is up to you to respond the cancellation request by cleaning up any resources and exiting the loop."}]},{"pos":[4823,5527],"content":"When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify not only the bounded capacity but also the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"content":"When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify not only the bounded capacity but also the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","pos":[0,704],"nodes":[{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> object, you can specify not only the bounded capacity but also the type of collection to use.","pos":[0,171],"source":"When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify not only the bounded capacity but also the type of collection to use."},{"content":"For example, you could specify a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> object for first in, first out (FIFO) behavior, or a <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> object for last in, first out (LIFO) behavior.","pos":[172,418],"source":" For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior."},{"content":"You can use any collection class that implements the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> interface.","pos":[419,551],"source":" You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface."},{"content":"The default collection type for <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.","pos":[552,704],"source":" The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."}]}]},{"pos":[5534,5824],"content":"Do not modify the underlying collection directly. Use <xref:System.Collections.Concurrent.BlockingCollection%601> methods to add or remove elements. The <xref:System.Collections.Concurrent.BlockingCollection%601> object can become corrupted if you change the underlying collection directly.","nodes":[{"content":"Do not modify the underlying collection directly. Use <xref:System.Collections.Concurrent.BlockingCollection%601> methods to add or remove elements. The <xref:System.Collections.Concurrent.BlockingCollection%601> object can become corrupted if you change the underlying collection directly.","pos":[0,290],"nodes":[{"content":"Do not modify the underlying collection directly.","pos":[0,49]},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> methods to add or remove elements.","pos":[50,148],"source":" Use <xref:System.Collections.Concurrent.BlockingCollection%601> methods to add or remove elements."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> object can become corrupted if you change the underlying collection directly.","pos":[149,290],"source":" The <xref:System.Collections.Concurrent.BlockingCollection%601> object can become corrupted if you change the underlying collection directly."}]}]}],"pos":[5173,11023],"yaml":true,"extradata":"MT"},{"content":"The type of elements in the collection.","nodes":[{"pos":[0,39],"content":"The type of elements in the collection.","nodes":[{"content":"The type of elements in the collection.","pos":[0,39]}]}],"pos":[11836,11876],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class without an upper-bound.","nodes":[{"pos":[0,135],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> class without an upper-bound.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class without an upper-bound."}],"pos":[40861,40997],"yaml":true},{"content":"The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object, which provides first in, first out (FIFO) behavior.","nodes":[{"pos":[0,155],"content":"The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object, which provides first in, first out (FIFO) behavior.","nodes":[{"content":"The default underlying collection is a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> object, which provides first in, first out (FIFO) behavior.","pos":[0,155],"source":"The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object, which provides first in, first out (FIFO) behavior."}]}],"pos":[41008,41164],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class without an upper-bound and using the provided <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"></xref> as its underlying data store.","nodes":[{"pos":[0,268],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> class without an upper-bound and using the provided <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"&gt;&lt;/xref&gt;</ph> as its underlying data store.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class without an upper-bound and using the provided <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"></xref> as its underlying data store."}],"pos":[43142,43411],"yaml":true},{"content":"The collection to use as the underlying data store.","nodes":[{"pos":[0,51],"content":"The collection to use as the underlying data store.","nodes":[{"content":"The collection to use as the underlying data store.","pos":[0,51]}]}],"pos":[43663,43715],"yaml":true},{"content":"The <code>collection</code> argument is null.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collection</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collection</code> argument is null."}],"pos":[43901,43947],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class with the specified upper-bound.","nodes":[{"pos":[0,143],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> class with the specified upper-bound.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class with the specified upper-bound."}],"pos":[45544,45688],"yaml":true},{"content":"The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"pos":[0,96],"content":"The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"content":"The default underlying collection is a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.","pos":[0,96],"source":"The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601>."}]}],"pos":[45699,45796],"yaml":true,"extradata":"MT"},{"content":"The bounded size of the collection.","nodes":[{"pos":[0,35],"content":"The bounded size of the collection.","nodes":[{"content":"The bounded size of the collection.","pos":[0,35]}]}],"pos":[45954,45990],"yaml":true},{"content":"The <code>boundedCapacity</code> is not a positive value.","nodes":[{"pos":[0,57],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">boundedCapacity</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a positive value.","source":"The <code>boundedCapacity</code> is not a positive value."}],"pos":[46188,46246],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class with the specified upper-bound and using the provided <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"></xref> as its underlying data store.","nodes":[{"pos":[0,276],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> class with the specified upper-bound and using the provided <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"&gt;&lt;/xref&gt;</ph> as its underlying data store.","source":"Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class with the specified upper-bound and using the provided <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"></xref> as its underlying data store."}],"pos":[48125,48402],"yaml":true},{"content":"The collection to use as the underlying data store.","nodes":[{"pos":[0,51],"content":"The collection to use as the underlying data store.","nodes":[{"content":"The collection to use as the underlying data store.","pos":[0,51]}]}],"pos":[48675,48727],"yaml":true},{"content":"The bounded size of the collection.","nodes":[{"pos":[0,35],"content":"The bounded size of the collection.","nodes":[{"content":"The bounded size of the collection.","pos":[0,35]}]}],"pos":[48797,48833],"yaml":true},{"content":"The <code>collection</code> argument is null.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collection</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collection</code> argument is null."}],"pos":[49019,49065],"yaml":true},{"content":"The <code>boundedCapacity</code> is not a positive value.","nodes":[{"pos":[0,57],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">boundedCapacity</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a positive value.","source":"The <code>boundedCapacity</code> is not a positive value."}],"pos":[49179,49237],"yaml":true},{"content":"The supplied <code>collection</code> contains more values than is permitted by <code>boundedCapacity</code>.","nodes":[{"pos":[0,108],"content":"The supplied <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collection</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains more values than is permitted by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">boundedCapacity</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The supplied <code>collection</code> contains more values than is permitted by <code>boundedCapacity</code>."}],"pos":[49331,49440],"yaml":true},{"content":"Adds the item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.","nodes":[{"pos":[0,93],"content":"Adds the item to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"Adds the item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>."}],"pos":[50928,51022],"yaml":true},{"content":"If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to Add may block until space is available to store the provided item.","nodes":[{"pos":[0,211],"content":"If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to Add may block until space is available to store the provided item.","nodes":[{"content":"If a bounded capacity was specified when this instance of <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> was initialized, a call to Add may block until space is available to store the provided item.","pos":[0,211],"source":"If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to Add may block until space is available to store the provided item."}]}],"pos":[51033,51245],"yaml":true,"extradata":"MT"},{"content":"The item to be added to the collection. The value can be a null reference.","nodes":[{"pos":[0,74],"content":"The item to be added to the collection. The value can be a null reference.","nodes":[{"content":"The item to be added to the collection. The value can be a null reference.","pos":[0,74],"nodes":[{"content":"The item to be added to the collection.","pos":[0,39]},{"content":"The value can be a null reference.","pos":[40,74]}]}]}],"pos":[51358,51433],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[51621,51716],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item.","nodes":[{"pos":[0,130],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been marked as complete with regards to additions.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,197],"content":"The underlying collection didn't accept the item.","nodes":[{"content":"The underlying collection didn't accept the item.","pos":[0,49]}]}],"pos":[51826,52032],"yaml":true},{"content":"Adds the item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.","nodes":[{"pos":[0,93],"content":"Adds the item to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"Adds the item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>."}],"pos":[53682,53776],"yaml":true},{"content":"If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> may block until space is available to store the provided item.  \n  \n This method can return early with an <xref:System.OperationCanceledException> if the `cancellationToken` is canceled.","nodes":[{"pos":[0,274],"content":"If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> may block until space is available to store the provided item.","nodes":[{"content":"If a bounded capacity was specified when this instance of <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> was initialized, a call to <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A&gt;</ph> may block until space is available to store the provided item.","pos":[0,274],"source":"If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> may block until space is available to store the provided item."}]},{"pos":[281,398],"content":"This method can return early with an <ph id=\"ph1\">&lt;xref:System.OperationCanceledException&gt;</ph> if the <ph id=\"ph2\">`cancellationToken`</ph> is canceled.","source":"This method can return early with an <xref:System.OperationCanceledException> if the `cancellationToken` is canceled."}],"pos":[53787,54190],"yaml":true,"extradata":"MT"},{"content":"The item to be added to the collection. The value can be a null reference.","nodes":[{"pos":[0,74],"content":"The item to be added to the collection. The value can be a null reference.","nodes":[{"content":"The item to be added to the collection. The value can be a null reference.","pos":[0,74],"nodes":[{"content":"The item to be added to the collection.","pos":[0,39]},{"content":"The value can be a null reference.","pos":[40,74]}]}]}],"pos":[54357,54432],"yaml":true},{"content":"A cancellation token to observe.","nodes":[{"pos":[0,32],"content":"A cancellation token to observe.","nodes":[{"content":"A cancellation token to observe.","pos":[0,32]}]}],"pos":[54526,54559],"yaml":true},{"content":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,75],"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[54753,54829],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that owns <code>cancellationToken</code> has been disposed.","nodes":[{"pos":[0,222],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed or the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that owns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that owns <code>cancellationToken</code> has been disposed."}],"pos":[54935,55158],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item.","nodes":[{"pos":[0,130],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been marked as complete with regards to additions.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,197],"content":"The underlying collection didn't accept the item.","nodes":[{"content":"The underlying collection didn't accept the item.","pos":[0,49]}]}],"pos":[55268,55474],"yaml":true},{"content":"Adds the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,134],"content":"Adds the specified item to any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Adds the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[57232,57367],"yaml":true},{"content":"If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item.","nodes":[{"pos":[0,247],"content":"If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item.","nodes":[{"content":"If a bounded capacity was specified when all of the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item.","pos":[0,247],"source":"If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item."}]}],"pos":[57378,57626],"yaml":true,"extradata":"MT"},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[57876,57902],"yaml":true},{"content":"The item to be added to one of the collections.","nodes":[{"pos":[0,47],"content":"The item to be added to one of the collections.","nodes":[{"content":"The item to be added to one of the collections.","pos":[0,47]}]}],"pos":[57950,57998],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array to which the item was added.","nodes":[{"pos":[0,94],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array to which the item was added.","source":"The index of the collection in the <code>collections</code> array to which the item was added."}],"pos":[58054,58149],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[58342,58463],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[58565,58612],"yaml":true},{"content":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,100],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[58726,58827],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","nodes":[{"pos":[0,156],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","source":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding."}],"pos":[58921,59078],"yaml":true},{"content":"At least one underlying collection didn't accept the item.","nodes":[{"pos":[0,58],"content":"At least one underlying collection didn't accept the item.","nodes":[{"content":"At least one underlying collection didn't accept the item.","pos":[0,58]}]}],"pos":[59188,59247],"yaml":true},{"content":"Adds the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,134],"content":"Adds the specified item to any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Adds the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[61167,61302],"yaml":true},{"content":"If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item. This method may return before the item is added to any collection if the `cancellationToken` is canceled before space is available.","nodes":[{"pos":[0,379],"content":"If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item. This method may return before the item is added to any collection if the `cancellationToken` is canceled before space is available.","nodes":[{"content":"If a bounded capacity was specified when all of the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item.","pos":[0,247],"source":"If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item."},{"content":"This method may return before the item is added to any collection if the <ph id=\"ph1\">`cancellationToken`</ph> is canceled before space is available.","pos":[248,379],"source":" This method may return before the item is added to any collection if the `cancellationToken` is canceled before space is available."}]}],"pos":[61313,61693],"yaml":true,"extradata":"MT"},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[61997,62023],"yaml":true},{"content":"The item to be added to one of the collections.","nodes":[{"pos":[0,47],"content":"The item to be added to one of the collections.","nodes":[{"content":"The item to be added to one of the collections.","pos":[0,47]}]}],"pos":[62071,62119],"yaml":true},{"content":"A cancellation token to observe.","nodes":[{"pos":[0,32],"content":"A cancellation token to observe.","nodes":[{"content":"A cancellation token to observe.","pos":[0,32]}]}],"pos":[62213,62246],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array to which the item was added.","nodes":[{"pos":[0,94],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array to which the item was added.","source":"The index of the collection in the <code>collections</code> array to which the item was added."}],"pos":[62302,62397],"yaml":true},{"content":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,75],"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[62596,62672],"yaml":true},{"content":"At least one underlying collection didn't accept the item.","nodes":[{"pos":[0,58],"content":"At least one underlying collection didn't accept the item.","nodes":[{"content":"At least one underlying collection didn't accept the item.","pos":[0,58]}]}],"pos":[62782,62841],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[62943,62990],"yaml":true},{"content":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,100],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[63104,63205],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","nodes":[{"pos":[0,156],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","source":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding."}],"pos":[63299,63456],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed, or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.","nodes":[{"pos":[0,252],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed, or the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed, or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed."}],"pos":[63562,63815],"yaml":true},{"content":"Gets the bounded capacity of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,115],"content":"Gets the bounded capacity of this <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"Gets the bounded capacity of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[65356,65472],"yaml":true},{"content":"The bounded capacity of this collection, or int.MaxValue if no bound was supplied.","nodes":[{"pos":[0,82],"content":"The bounded capacity of this collection, or int.MaxValue if no bound was supplied.","nodes":[{"content":"The bounded capacity of this collection, or int.MaxValue if no bound was supplied.","pos":[0,82]}]}],"pos":[65587,65670],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[65870,65965],"yaml":true},{"content":"Marks the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances as not accepting any more additions.","nodes":[{"pos":[0,128],"content":"Marks the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances as not accepting any more additions.","source":"Marks the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances as not accepting any more additions."}],"pos":[67504,67633],"yaml":true},{"content":"After a collection has been marked as complete for adding, adding to the collection is not permitted and attempts to remove from the collection will not wait when the collection is empty.","nodes":[{"pos":[0,187],"content":"After a collection has been marked as complete for adding, adding to the collection is not permitted and attempts to remove from the collection will not wait when the collection is empty.","nodes":[{"content":"After a collection has been marked as complete for adding, adding to the collection is not permitted and attempts to remove from the collection will not wait when the collection is empty.","pos":[0,187]}]}],"pos":[67644,67832],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[68104,68199],"yaml":true},{"content":"Copies all of the items in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array.","nodes":[{"pos":[0,203],"content":"Copies all of the items in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance to a compatible one-dimensional array, starting at the specified index of the target array.","source":"Copies all of the items in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array."}],"pos":[69777,69981],"yaml":true},{"content":"CopyTo represents a snapshot of the collection at a precise point in time. If other threads are adding or removing items while CopyTo is executing, then the elements returned by CopyTo might not represent the state of the collection.","nodes":[{"pos":[0,233],"content":"CopyTo represents a snapshot of the collection at a precise point in time. If other threads are adding or removing items while CopyTo is executing, then the elements returned by CopyTo might not represent the state of the collection.","nodes":[{"content":"CopyTo represents a snapshot of the collection at a precise point in time. If other threads are adding or removing items while CopyTo is executing, then the elements returned by CopyTo might not represent the state of the collection.","pos":[0,233],"nodes":[{"content":"CopyTo represents a snapshot of the collection at a precise point in time.","pos":[0,74]},{"content":"If other threads are adding or removing items while CopyTo is executing, then the elements returned by CopyTo might not represent the state of the collection.","pos":[75,233]}]}]}],"pos":[69992,70226],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance. The array must have zero-based indexing.","nodes":[{"pos":[0,204],"content":"The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance. The array must have zero-based indexing.","nodes":[{"content":"The one-dimensional array that is the destination of the elements copied from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","pos":[0,163],"source":"The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."},{"content":"The array must have zero-based indexing.","pos":[164,204]}]}],"pos":[70359,70564],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[70624,70692],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[70883,70978],"yaml":true},{"content":"The <code>array</code> argument is null.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>array</code> argument is null."}],"pos":[71080,71121],"yaml":true},{"content":"The <code>index</code> argument is less than zero.","nodes":[{"pos":[0,50],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than zero.","source":"The <code>index</code> argument is less than zero."}],"pos":[71235,71286],"yaml":true},{"content":"The <code>index</code> argument is equal to or greater than the length of the <code>array</code>.  \n  \n The destination array is too small to hold all of the BlockingCcollection elements.  \n  \n The array rank doesn't match.  \n  \n The array type is incompatible with the type of the BlockingCollection elements.","nodes":[{"pos":[0,97],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is equal to or greater than the length of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <code>index</code> argument is equal to or greater than the length of the <code>array</code>."},{"pos":[104,187],"content":"The destination array is too small to hold all of the BlockingCcollection elements.","nodes":[{"content":"The destination array is too small to hold all of the BlockingCcollection elements.","pos":[0,83]}]},{"pos":[194,223],"content":"The array rank doesn't match.","nodes":[{"content":"The array rank doesn't match.","pos":[0,29]}]},{"pos":[230,310],"content":"The array type is incompatible with the type of the BlockingCollection elements.","nodes":[{"content":"The array type is incompatible with the type of the BlockingCollection elements.","pos":[0,80]}]}],"pos":[71380,71699],"yaml":true},{"content":"Gets the number of items contained in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.","nodes":[{"pos":[0,114],"content":"Gets the number of items contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the number of items contained in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>."}],"pos":[73180,73295],"yaml":true},{"content":"If any method in BlockingCollection is executing while the Count property is being accessd, the return value is approximate. Count may reflect a number that is either greater than or less than the actual number of items in the BlockingCollection.","nodes":[{"pos":[0,246],"content":"If any method in BlockingCollection is executing while the Count property is being accessd, the return value is approximate. Count may reflect a number that is either greater than or less than the actual number of items in the BlockingCollection.","nodes":[{"content":"If any method in BlockingCollection is executing while the Count property is being accessd, the return value is approximate. Count may reflect a number that is either greater than or less than the actual number of items in the BlockingCollection.","pos":[0,246],"nodes":[{"content":"If any method in BlockingCollection is executing while the Count property is being accessd, the return value is approximate.","pos":[0,124]},{"content":"Count may reflect a number that is either greater than or less than the actual number of items in the BlockingCollection.","pos":[125,246]}]}]}],"pos":[73306,73553],"yaml":true,"extradata":"MT"},{"content":"The number of items contained in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.","nodes":[{"pos":[0,109],"content":"The number of items contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"The number of items contained in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>."}],"pos":[73658,73768],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[73958,74053],"yaml":true},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class.","nodes":[{"pos":[0,137],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class."}],"pos":[75550,75688],"yaml":true},{"content":"The `Dispose` method is not thread-safe.  \n  \n Call `Dispose` when you are finished using the <xref:System.Collections.Concurrent.BlockingCollection%601>. The `Dispose` method leaves the <xref:System.Collections.Concurrent.BlockingCollection%601> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Collections.Concurrent.BlockingCollection%601> so the garbage collector can reclaim the memory that the <xref:System.Collections.Concurrent.BlockingCollection%601> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Collections.Concurrent.BlockingCollection%601>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Collections.Concurrent.BlockingCollection%601> object's `Finalize` method.","nodes":[{"pos":[0,40],"content":"The <ph id=\"ph1\">`Dispose`</ph> method is not thread-safe.","source":"The `Dispose` method is not thread-safe."},{"pos":[47,524],"content":"Call `Dispose` when you are finished using the <xref:System.Collections.Concurrent.BlockingCollection%601>. The `Dispose` method leaves the <xref:System.Collections.Concurrent.BlockingCollection%601> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Collections.Concurrent.BlockingCollection%601> so the garbage collector can reclaim the memory that the <xref:System.Collections.Concurrent.BlockingCollection%601> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph>.","pos":[0,107],"source":"Call `Dispose` when you are finished using the <xref:System.Collections.Concurrent.BlockingCollection%601>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> in an unusable state.","pos":[108,221],"source":" The `Dispose` method leaves the <xref:System.Collections.Concurrent.BlockingCollection%601> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> was occupying.","pos":[222,477],"source":" After calling `Dispose`, you must release all references to the <xref:System.Collections.Concurrent.BlockingCollection%601> so the garbage collector can reclaim the memory that the <xref:System.Collections.Concurrent.BlockingCollection%601> was occupying."}]},{"pos":[531,736],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[744,1064],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Collections.Concurrent.BlockingCollection%601>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Collections.Concurrent.BlockingCollection%601> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Collections.Concurrent.BlockingCollection%601>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Collections.Concurrent.BlockingCollection%601> object's `Finalize` method.","pos":[8,318],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph>.","pos":[1,129],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Collections.Concurrent.BlockingCollection%601>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[130,310],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Collections.Concurrent.BlockingCollection%601> object's `Finalize` method."}]}]}],"pos":[75699,76773],"yaml":true,"extradata":"MT"},{"content":"Releases resources used by the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,112],"content":"Releases resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"Releases resources used by the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[78494,78607],"yaml":true},{"content":"Whether being disposed explicitly (true) or due to a finalizer (false).","nodes":[{"pos":[0,71],"content":"Whether being disposed explicitly (true) or due to a finalizer (false).","nodes":[{"content":"Whether being disposed explicitly (true) or due to a finalizer (false).","pos":[0,71]}]}],"pos":[78761,78833],"yaml":true},{"content":"Provides a consuming <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> for items in the collection.","nodes":[{"pos":[0,111],"content":"Provides a consuming <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> for items in the collection.","source":"Provides a consuming <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> for items in the collection."}],"pos":[80668,80780],"yaml":true},{"content":"This method enables client code to remove items from the collection by using a foreach loop (For Each in Visual Basic), or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> or a PLINQ query. The enumerator will continue to provide items (if any exist) until <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> returns true, and if <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> is false the loop blocks until an item becomes available or until the <xref:System.Threading.CancellationToken> is cancelled.","nodes":[{"pos":[0,579],"content":"This method enables client code to remove items from the collection by using a foreach loop (For Each in Visual Basic), or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> or a PLINQ query. The enumerator will continue to provide items (if any exist) until <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> returns true, and if <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> is false the loop blocks until an item becomes available or until the <xref:System.Threading.CancellationToken> is cancelled.","nodes":[{"content":"This method enables client code to remove items from the collection by using a foreach loop (For Each in Visual Basic), or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> or a PLINQ query. The enumerator will continue to provide items (if any exist) until <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> returns true, and if <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> is false the loop blocks until an item becomes available or until the <xref:System.Threading.CancellationToken> is cancelled.","pos":[0,579],"nodes":[{"content":"This method enables client code to remove items from the collection by using a foreach loop (For Each in Visual Basic), or <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> or a PLINQ query.","pos":[0,215],"source":"This method enables client code to remove items from the collection by using a foreach loop (For Each in Visual Basic), or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> or a PLINQ query."},{"content":"The enumerator will continue to provide items (if any exist) until <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A&gt;</ph> returns true, and if <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A&gt;</ph> is false the loop blocks until an item becomes available or until the <ph id=\"ph3\">&lt;xref:System.Threading.CancellationToken&gt;</ph> is cancelled.","pos":[216,579],"source":" The enumerator will continue to provide items (if any exist) until <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> returns true, and if <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> is false the loop blocks until an item becomes available or until the <xref:System.Threading.CancellationToken> is cancelled."}]}]}],"pos":[80791,81371],"yaml":true,"extradata":"MT"},{"content":"A cancellation token to observe.","nodes":[{"pos":[0,32],"content":"A cancellation token to observe.","nodes":[{"content":"A cancellation token to observe.","pos":[0,32]}]}],"pos":[81632,81665],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that removes and returns items from the collection.","nodes":[{"pos":[0,116],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that removes and returns items from the collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that removes and returns items from the collection."}],"pos":[81749,81866],"yaml":true},{"content":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,75],"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[82079,82155],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed","nodes":[{"pos":[0,224],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed or the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed"}],"pos":[82261,82486],"yaml":true},{"content":"Provides a consuming <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for items in the collection.","nodes":[{"pos":[0,111],"content":"Provides a consuming <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerator`1\"&gt;&lt;/xref&gt;</ph> for items in the collection.","source":"Provides a consuming <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for items in the collection."}],"pos":[84073,84185],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that removes and returns items from the collection.","nodes":[{"pos":[0,116],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that removes and returns items from the collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that removes and returns items from the collection."}],"pos":[84940,85057],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[85264,85359],"yaml":true},{"content":"Gets whether this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete for adding.","nodes":[{"pos":[0,129],"content":"Gets whether this <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been marked as complete for adding.","source":"Gets whether this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete for adding."}],"pos":[86912,87042],"yaml":true},{"content":"Whether this collection has been marked as complete for adding.","nodes":[{"pos":[0,63],"content":"Whether this collection has been marked as complete for adding.","nodes":[{"content":"Whether this collection has been marked as complete for adding.","pos":[0,63]}]}],"pos":[87162,87226],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[87428,87523],"yaml":true},{"content":"Gets whether this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete for adding and is empty.","nodes":[{"pos":[0,142],"content":"Gets whether this <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been marked as complete for adding and is empty.","source":"Gets whether this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete for adding and is empty."}],"pos":[89040,89183],"yaml":true},{"content":"Whether this collection has been marked as complete for adding and is empty.","nodes":[{"pos":[0,76],"content":"Whether this collection has been marked as complete for adding and is empty.","nodes":[{"content":"Whether this collection has been marked as complete for adding and is empty.","pos":[0,76]}]}],"pos":[89297,89374],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[89570,89665],"yaml":true},{"content":"Removes  an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.","nodes":[{"pos":[0,98],"content":"Removes  an item from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"Removes  an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>."}],"pos":[91144,91243],"yaml":true},{"content":"A call to <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> may block until an item is available to be removed.  \n  \n The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"pos":[0,129],"content":"A call to <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> may block until an item is available to be removed.","nodes":[{"content":"A call to <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A&gt;</ph> may block until an item is available to be removed.","pos":[0,129],"source":"A call to <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> may block until an item is available to be removed."}]},{"pos":[136,962],"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","pos":[0,826],"nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> instance.","pos":[0,160],"source":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance."},{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> object, you can specify the type of collection to use.","pos":[161,293],"source":" When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use."},{"content":"For example, you could specify a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> object for first in, first out (FIFO) behavior, or a <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> object for last in, first out (LIFO) behavior.","pos":[294,540],"source":" For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior."},{"content":"You can use any collection class that implements the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> interface.","pos":[541,673],"source":" You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface."},{"content":"The default collection type for <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.","pos":[674,826],"source":" The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."}]}]}],"pos":[91254,92221],"yaml":true,"extradata":"MT"},{"content":"The item removed from the collection.","nodes":[{"pos":[0,37],"content":"The item removed from the collection.","nodes":[{"content":"The item removed from the collection.","pos":[0,37]}]}],"pos":[92326,92364],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[92553,92648],"yaml":true},{"content":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance, or the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> is empty and the collection has been marked as complete for adding.","nodes":[{"pos":[0,283],"content":"The underlying collection was modified outside of this <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance, or the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> is empty and the collection has been marked as complete for adding.","source":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance, or the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> is empty and the collection has been marked as complete for adding."}],"pos":[92758,93042],"yaml":true},{"content":"Removes an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.","nodes":[{"pos":[0,97],"content":"Removes an item from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"Removes an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>."}],"pos":[94680,94778],"yaml":true},{"content":"A call to <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> may block until an item is available to be removed or the token is canceled.  \n  \n The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"pos":[0,154],"content":"A call to <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> may block until an item is available to be removed or the token is canceled.","nodes":[{"content":"A call to <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A&gt;</ph> may block until an item is available to be removed or the token is canceled.","pos":[0,154],"source":"A call to <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> may block until an item is available to be removed or the token is canceled."}]},{"pos":[161,987],"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","pos":[0,826],"nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> instance.","pos":[0,160],"source":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance."},{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> object, you can specify the type of collection to use.","pos":[161,293],"source":" When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use."},{"content":"For example, you could specify a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> object for first in, first out (FIFO) behavior, or a <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> object for last in, first out (LIFO) behavior.","pos":[294,540],"source":" For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior."},{"content":"You can use any collection class that implements the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> interface.","pos":[541,673],"source":" You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface."},{"content":"The default collection type for <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.","pos":[674,826],"source":" The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."}]}]}],"pos":[94789,95781],"yaml":true,"extradata":"MT"},{"content":"Object that can be used to cancel the take operation.","nodes":[{"pos":[0,53],"content":"Object that can be used to cancel the take operation.","nodes":[{"content":"Object that can be used to cancel the take operation.","pos":[0,53]}]}],"pos":[95984,96038],"yaml":true},{"content":"The item removed from the collection.","nodes":[{"pos":[0,37],"content":"The item removed from the collection.","nodes":[{"content":"The item removed from the collection.","pos":[0,37]}]}],"pos":[96083,96121],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,72],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[96316,96389],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token was canceled.","nodes":[{"pos":[0,199],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed or the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created the token was canceled.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token was canceled."}],"pos":[96495,96695],"yaml":true},{"content":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance or the BlockingCollection is marked as complete for adding, or the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> is empty.","nodes":[{"pos":[0,284],"content":"The underlying collection was modified outside of this <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance or the BlockingCollection is marked as complete for adding, or the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> is empty.","source":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance or the BlockingCollection is marked as complete for adding, or the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> is empty."}],"pos":[96805,97090],"yaml":true},{"content":"Takes an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,126],"content":"Takes an item from any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Takes an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[98869,98996],"yaml":true},{"content":"A call to TakeFromAny may block until an item is available to be removed.","nodes":[{"pos":[0,73],"content":"A call to TakeFromAny may block until an item is available to be removed.","nodes":[{"content":"A call to TakeFromAny may block until an item is available to be removed.","pos":[0,73]}]}],"pos":[99007,99081],"yaml":true,"extradata":"MT"},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[99338,99364],"yaml":true},{"content":"The item removed from one of the collections.","nodes":[{"pos":[0,45],"content":"The item removed from one of the collections.","nodes":[{"content":"The item removed from one of the collections.","pos":[0,45]}]}],"pos":[99412,99458],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array from which the item was removed.","nodes":[{"pos":[0,98],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array from which the item was removed.","source":"The index of the collection in the <code>collections</code> array from which the item was removed."}],"pos":[99514,99613],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[99809,99930],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[100032,100079],"yaml":true},{"content":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,100],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[100193,100294],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element or <xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\"></xref> has been called on the collection.","nodes":[{"pos":[0,209],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element or <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\"&gt;&lt;/xref&gt;</ph> has been called on the collection.","source":"The <code>collections</code> argument is a 0-length array or contains a null element or <xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\"></xref> has been called on the collection."}],"pos":[100388,100598],"yaml":true},{"content":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,152],"content":"At least one of the underlying collections was modified outside of its <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[100708,100861],"yaml":true},{"content":"Takes an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances while observing the specified cancellation token.","nodes":[{"pos":[0,175],"content":"Takes an item from any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances while observing the specified cancellation token.","source":"Takes an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances while observing the specified cancellation token."}],"pos":[102802,102978],"yaml":true},{"content":"A call to TakeFromAny may block until an item is available to be removed. The method will return early with an OperationCanceledException if the token is canceled.","nodes":[{"pos":[0,163],"content":"A call to TakeFromAny may block until an item is available to be removed. The method will return early with an OperationCanceledException if the token is canceled.","nodes":[{"content":"A call to TakeFromAny may block until an item is available to be removed. The method will return early with an OperationCanceledException if the token is canceled.","pos":[0,163],"nodes":[{"content":"A call to TakeFromAny may block until an item is available to be removed.","pos":[0,73]},{"content":"The method will return early with an OperationCanceledException if the token is canceled.","pos":[74,163]}]}]}],"pos":[102989,103153],"yaml":true,"extradata":"MT"},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[103464,103490],"yaml":true},{"content":"The item removed from one of the collections.","nodes":[{"pos":[0,45],"content":"The item removed from one of the collections.","nodes":[{"content":"The item removed from one of the collections.","pos":[0,45]}]}],"pos":[103538,103584],"yaml":true},{"content":"A cancellation token to observe.","nodes":[{"pos":[0,32],"content":"A cancellation token to observe.","nodes":[{"content":"A cancellation token to observe.","pos":[0,32]}]}],"pos":[103678,103711],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array from which the item was removed.","nodes":[{"pos":[0,98],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array from which the item was removed.","source":"The index of the collection in the <code>collections</code> array from which the item was removed."}],"pos":[103767,103866],"yaml":true},{"content":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,75],"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[104068,104144],"yaml":true},{"content":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,152],"content":"At least one of the underlying collections was modified outside of its <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[104254,104407],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[104509,104556],"yaml":true},{"content":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,100],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[104670,104771],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element, or <xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\"></xref> has been called on the collection.","nodes":[{"pos":[0,210],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element, or <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\"&gt;&lt;/xref&gt;</ph> has been called on the collection.","source":"The <code>collections</code> argument is a 0-length array or contains a null element, or <xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\"></xref> has been called on the collection."}],"pos":[104865,105076],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[105182,105303],"yaml":true},{"content":"Copies the items from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance into a new array.","nodes":[{"pos":[0,124],"content":"Copies the items from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance into a new array.","source":"Copies the items from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance into a new array."}],"pos":[106800,106925],"yaml":true},{"content":"The copied elements are not removed from the collection.  \n  \n If any method in BlockingCollection is executing while the ToArray method executes, the return value is approximate. ToArray  may include items that have already been removed, or exclude items that have already been inserted.","nodes":[{"pos":[0,56],"content":"The copied elements are not removed from the collection.","nodes":[{"content":"The copied elements are not removed from the collection.","pos":[0,56]}]},{"pos":[63,288],"content":"If any method in BlockingCollection is executing while the ToArray method executes, the return value is approximate. ToArray  may include items that have already been removed, or exclude items that have already been inserted.","nodes":[{"content":"If any method in BlockingCollection is executing while the ToArray method executes, the return value is approximate. ToArray  may include items that have already been removed, or exclude items that have already been inserted.","pos":[0,225],"nodes":[{"content":"If any method in BlockingCollection is executing while the ToArray method executes, the return value is approximate.","pos":[0,116]},{"content":"ToArray  may include items that have already been removed, or exclude items that have already been inserted.","pos":[117,225]}]}]}],"pos":[106936,107229],"yaml":true,"extradata":"MT"},{"content":"An array containing copies of the elements of the collection.","nodes":[{"pos":[0,61],"content":"An array containing copies of the elements of the collection.","nodes":[{"content":"An array containing copies of the elements of the collection.","pos":[0,61]}]}],"pos":[107341,107403],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[107595,107690],"yaml":true},{"content":"Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> within the specified time period.","nodes":[{"pos":[0,144],"content":"Tries to add the specified item to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> within the specified time period.","source":"Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> within the specified time period."}],"pos":[109256,109401],"yaml":true},{"content":"The item to be added to the collection.","nodes":[{"pos":[0,39],"content":"The item to be added to the collection.","nodes":[{"content":"The item to be added to the collection.","pos":[0,39]}]}],"pos":[109542,109582],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[109656,109777],"yaml":true},{"content":"true if the <code>item</code> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown.","nodes":[{"pos":[0,271],"content":"true if the <code>item</code> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown.","nodes":[{"content":"true if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> could be added to the collection within the specified time; otherwise, false.","pos":[0,107],"source":"true if the <code>item</code> could be added to the collection within the specified time; otherwise, false."},{"content":"If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <ph id=\"ph1\">&lt;xref href=\"System.InvalidOperationException\"&gt;&lt;/xref&gt;</ph> is thrown.","pos":[108,271],"source":" If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown."}]}],"pos":[109835,110107],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[110298,110393],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[110507,110615],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item.","nodes":[{"pos":[0,130],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been marked as complete with regards to additions.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,197],"content":"The underlying collection didn't accept the item.","nodes":[{"content":"The underlying collection didn't accept the item.","pos":[0,49]}]}],"pos":[110725,110931],"yaml":true},{"content":"Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> within the specified time period, while observing a cancellation token.","nodes":[{"pos":[0,182],"content":"Tries to add the specified item to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> within the specified time period, while observing a cancellation token.","source":"Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> within the specified time period, while observing a cancellation token."}],"pos":[112659,112842],"yaml":true},{"content":"The item to be added to the collection.","nodes":[{"pos":[0,39],"content":"The item to be added to the collection.","nodes":[{"content":"The item to be added to the collection.","pos":[0,39]}]}],"pos":[113037,113077],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[113151,113272],"yaml":true},{"content":"A cancellation token to observe.","nodes":[{"pos":[0,32],"content":"A cancellation token to observe.","nodes":[{"content":"A cancellation token to observe.","pos":[0,32]}]}],"pos":[113366,113399],"yaml":true},{"content":"true if the <code>item</code> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown.","nodes":[{"pos":[0,271],"content":"true if the <code>item</code> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown.","nodes":[{"content":"true if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> could be added to the collection within the specified time; otherwise, false.","pos":[0,107],"source":"true if the <code>item</code> could be added to the collection within the specified time; otherwise, false."},{"content":"If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <ph id=\"ph1\">&lt;xref href=\"System.InvalidOperationException\"&gt;&lt;/xref&gt;</ph> is thrown.","pos":[108,271],"source":" If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown."}]}],"pos":[113457,113729],"yaml":true},{"content":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,75],"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[113926,114002],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the underlying <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,192],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed or the underlying <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the underlying <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[114108,114301],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[114415,114523],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item.","nodes":[{"pos":[0,130],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been marked as complete with regards to additions.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,197],"content":"The underlying collection didn't accept the item.","nodes":[{"content":"The underlying collection didn't accept the item.","pos":[0,49]}]}],"pos":[114633,114839],"yaml":true},{"content":"Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.","nodes":[{"pos":[0,111],"content":"Tries to add the specified item to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>."}],"pos":[116345,116457],"yaml":true},{"content":"If the collection is a bounded collection, and is full, this method immediately returns false without adding the item.","nodes":[{"pos":[0,118],"content":"If the collection is a bounded collection, and is full, this method immediately returns false without adding the item.","nodes":[{"content":"If the collection is a bounded collection, and is full, this method immediately returns false without adding the item.","pos":[0,118]}]}],"pos":[116468,116587],"yaml":true,"extradata":"MT"},{"content":"The item to be added to the collection.","nodes":[{"pos":[0,39],"content":"The item to be added to the collection.","nodes":[{"content":"The item to be added to the collection.","pos":[0,39]}]}],"pos":[116703,116743],"yaml":true},{"content":"true if <code>item</code> could be added; otherwise false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown.","nodes":[{"pos":[0,222],"content":"true if <code>item</code> could be added; otherwise false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown.","nodes":[{"content":"true if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> could be added; otherwise false.","pos":[0,58],"source":"true if <code>item</code> could be added; otherwise false."},{"content":"If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <ph id=\"ph1\">&lt;xref href=\"System.InvalidOperationException\"&gt;&lt;/xref&gt;</ph> is thrown.","pos":[59,222],"source":" If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown."}]}],"pos":[116801,117024],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[117215,117310],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item.","nodes":[{"pos":[0,130],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been marked as complete with regards to additions.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,197],"content":"The underlying collection didn't accept the item.","nodes":[{"content":"The underlying collection didn't accept the item.","pos":[0,49]}]}],"pos":[117420,117626],"yaml":true},{"content":"Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.","nodes":[{"pos":[0,111],"content":"Tries to add the specified item to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>."}],"pos":[119210,119322],"yaml":true},{"content":"The item to be added to the collection.","nodes":[{"pos":[0,39],"content":"The item to be added to the collection.","nodes":[{"content":"The item to be added to the collection.","pos":[0,39]}]}],"pos":[119456,119496],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[119561,119748],"yaml":true},{"content":"true if the <code>item</code> could be added to the collection within the specified time span; otherwise, false.","nodes":[{"pos":[0,112],"content":"true if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> could be added to the collection within the specified time span; otherwise, false.","source":"true if the <code>item</code> could be added to the collection within the specified time span; otherwise, false."}],"pos":[119806,119919],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[120110,120205],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[120319,120500],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item.","nodes":[{"pos":[0,130],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been marked as complete with regards to additions.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete with regards to additions."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,197],"content":"The underlying collection didn't accept the item.","nodes":[{"content":"The underlying collection didn't accept the item.","pos":[0,49]}]}],"pos":[120610,120816],"yaml":true},{"content":"Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,142],"content":"Tries to add the specified item to any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[122814,122957],"yaml":true},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[123289,123315],"yaml":true},{"content":"The item to be added to one of the collections.","nodes":[{"pos":[0,47],"content":"The item to be added to one of the collections.","nodes":[{"content":"The item to be added to one of the collections.","pos":[0,47]}]}],"pos":[123363,123411],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[123485,123606],"yaml":true},{"content":"A cancellation token to observe.","nodes":[{"pos":[0,32],"content":"A cancellation token to observe.","nodes":[{"content":"A cancellation token to observe.","pos":[0,32]}]}],"pos":[123700,123733],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.","nodes":[{"pos":[0,132],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array to which the item was added, or -1 if the item could not be added.","source":"The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added."}],"pos":[123789,123922],"yaml":true},{"content":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,75],"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[124124,124200],"yaml":true},{"content":"At least one underlying collection didn't accept the item.","nodes":[{"pos":[0,58],"content":"At least one underlying collection didn't accept the item.","nodes":[{"content":"At least one underlying collection didn't accept the item.","pos":[0,58]}]}],"pos":[124310,124369],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[124471,124518],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,225],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[124632,124864],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","nodes":[{"pos":[0,156],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","source":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding."}],"pos":[124958,125115],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[125221,125342],"yaml":true},{"content":"Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances while observing the specified cancellation token.","nodes":[{"pos":[0,191],"content":"Tries to add the specified item to any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances while observing the specified cancellation token.","source":"Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances while observing the specified cancellation token."}],"pos":[127196,127388],"yaml":true},{"content":"This method can return early if the cancellationToken is cancelled before space was available for the Add operation.","nodes":[{"pos":[0,116],"content":"This method can return early if the cancellationToken is cancelled before space was available for the Add operation.","nodes":[{"content":"This method can return early if the cancellationToken is cancelled before space was available for the Add operation.","pos":[0,116]}]}],"pos":[127399,127516],"yaml":true,"extradata":"MT"},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[127787,127813],"yaml":true},{"content":"The item to be added to one of the collections.","nodes":[{"pos":[0,47],"content":"The item to be added to one of the collections.","nodes":[{"content":"The item to be added to one of the collections.","pos":[0,47]}]}],"pos":[127861,127909],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[127974,128161],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.","nodes":[{"pos":[0,132],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array to which the item was added, or -1 if the item could not be added.","source":"The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added."}],"pos":[128217,128350],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.","nodes":[{"pos":[0,233],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances or the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed."}],"pos":[128546,128780],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[128882,128929],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>."},{"pos":[187,191],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[198,298],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[129043,129350],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","nodes":[{"pos":[0,156],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","source":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding."}],"pos":[129444,129601],"yaml":true},{"content":"At least one underlying collection didn't accept the item.","nodes":[{"pos":[0,58],"content":"At least one underlying collection didn't accept the item.","nodes":[{"content":"At least one underlying collection didn't accept the item.","pos":[0,58]}]}],"pos":[129711,129770],"yaml":true},{"content":"Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,142],"content":"Tries to add the specified item to any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[131606,131749],"yaml":true},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[132027,132053],"yaml":true},{"content":"The item to be added to one of the collections.","nodes":[{"pos":[0,47],"content":"The item to be added to one of the collections.","nodes":[{"content":"The item to be added to one of the collections.","pos":[0,47]}]}],"pos":[132101,132149],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[132223,132344],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.","nodes":[{"pos":[0,132],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array to which the item was added, or -1 if the item could not be added.","source":"The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added."}],"pos":[132400,132533],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[132729,132850],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[132952,132999],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,225],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[133113,133345],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","nodes":[{"pos":[0,156],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","source":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding."}],"pos":[133439,133596],"yaml":true},{"content":"At least one underlying collection didn't accept the item.","nodes":[{"pos":[0,58],"content":"At least one underlying collection didn't accept the item.","nodes":[{"content":"At least one underlying collection didn't accept the item.","pos":[0,58]}]}],"pos":[133706,133765],"yaml":true},{"content":"Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,142],"content":"Tries to add the specified item to any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[135541,135684],"yaml":true},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[135937,135963],"yaml":true},{"content":"The item to be added to one of the collections.","nodes":[{"pos":[0,47],"content":"The item to be added to one of the collections.","nodes":[{"content":"The item to be added to one of the collections.","pos":[0,47]}]}],"pos":[136011,136059],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.","nodes":[{"pos":[0,132],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array to which the item was added, or -1 if the item could not be added.","source":"The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added."}],"pos":[136115,136248],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[136444,136565],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[136667,136714],"yaml":true},{"content":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,100],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[136828,136929],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","nodes":[{"pos":[0,156],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.","source":"The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding."}],"pos":[137023,137180],"yaml":true},{"content":"At least one underlying collection didn't accept the item.","nodes":[{"pos":[0,58],"content":"At least one underlying collection didn't accept the item.","nodes":[{"content":"At least one underlying collection didn't accept the item.","pos":[0,58]}]}],"pos":[137290,137349],"yaml":true},{"content":"Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.","nodes":[{"pos":[0,105],"content":"Tries to remove an item from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph>.","source":"Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>."}],"pos":[138864,138970],"yaml":true},{"content":"If the collection is empty, this method immediately returns false.  \n  \n The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"pos":[0,66],"content":"If the collection is empty, this method immediately returns false.","nodes":[{"content":"If the collection is empty, this method immediately returns false.","pos":[0,66]}]},{"pos":[73,899],"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","pos":[0,826],"nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> instance.","pos":[0,160],"source":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance."},{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> object, you can specify the type of collection to use.","pos":[161,293],"source":" When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use."},{"content":"For example, you could specify a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> object for first in, first out (FIFO) behavior, or a <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> object for last in, first out (LIFO) behavior.","pos":[294,540],"source":" For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior."},{"content":"You can use any collection class that implements the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> interface.","pos":[541,673],"source":" You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface."},{"content":"The default collection type for <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.","pos":[674,826],"source":" The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."}]}]}],"pos":[138981,139885],"yaml":true,"extradata":"MT"},{"content":"The item to be removed from the collection.","nodes":[{"pos":[0,43],"content":"The item to be removed from the collection.","nodes":[{"content":"The item to be removed from the collection.","pos":[0,43]}]}],"pos":[140006,140050],"yaml":true},{"content":"`true` if an item could be removed; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> if an item could be removed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if an item could be removed; otherwise, `false`."}],"pos":[140108,140166],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[140358,140453],"yaml":true},{"content":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,136],"content":"The underlying collection was modified outside of this <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[140563,140700],"yaml":true},{"content":"Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> in the specified time period.","nodes":[{"pos":[0,134],"content":"Tries to remove an item from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> in the specified time period.","source":"Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> in the specified time period."}],"pos":[142293,142428],"yaml":true},{"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"pos":[0,826],"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","pos":[0,826],"nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> instance.","pos":[0,160],"source":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance."},{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> object, you can specify the type of collection to use.","pos":[161,293],"source":" When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use."},{"content":"For example, you could specify a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> object for first in, first out (FIFO) behavior, or a <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> object for last in, first out (LIFO) behavior.","pos":[294,540],"source":" For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior."},{"content":"You can use any collection class that implements the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> interface.","pos":[541,673],"source":" You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface."},{"content":"The default collection type for <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.","pos":[674,826],"source":" The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."}]}]}],"pos":[142439,143266],"yaml":true,"extradata":"MT"},{"content":"The item to be removed from the collection.","nodes":[{"pos":[0,43],"content":"The item to be removed from the collection.","nodes":[{"content":"The item to be removed from the collection.","pos":[0,43]}]}],"pos":[143405,143449],"yaml":true},{"content":"An object that represents the number of milliseconds to wait, or an object that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,128],"content":"An object that represents the number of milliseconds to wait, or an object that represents -1 milliseconds to wait indefinitely.","nodes":[{"content":"An object that represents the number of milliseconds to wait, or an object that represents -1 milliseconds to wait indefinitely.","pos":[0,128]}]}],"pos":[143514,143643],"yaml":true},{"content":"`true` if an item could be removed from the collection within the specified  time; otherwise, `false`.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">`true`</ph> if an item could be removed from the collection within the specified  time; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if an item could be removed from the collection within the specified  time; otherwise, `false`."}],"pos":[143701,143806],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[143998,144093],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \n  \n -or-  \n  \n <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out."},{"pos":[115,119],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[126,206],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[144207,144422],"yaml":true},{"content":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,136],"content":"The underlying collection was modified outside of this <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[144532,144669],"yaml":true},{"content":"Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> in the specified time period while observing a cancellation token.","nodes":[{"pos":[0,171],"content":"Tries to remove an item from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> in the specified time period while observing a cancellation token.","source":"Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> in the specified time period while observing a cancellation token."}],"pos":[146406,146578],"yaml":true},{"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"pos":[0,826],"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","pos":[0,826],"nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> instance.","pos":[0,160],"source":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance."},{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> object, you can specify the type of collection to use.","pos":[161,293],"source":" When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use."},{"content":"For example, you could specify a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> object for first in, first out (FIFO) behavior, or a <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> object for last in, first out (LIFO) behavior.","pos":[294,540],"source":" For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior."},{"content":"You can use any collection class that implements the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> interface.","pos":[541,673],"source":" You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface."},{"content":"The default collection type for <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.","pos":[674,826],"source":" The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."}]}]}],"pos":[146589,147416],"yaml":true,"extradata":"MT"},{"content":"The item to be removed from the collection.","nodes":[{"pos":[0,43],"content":"The item to be removed from the collection.","nodes":[{"content":"The item to be removed from the collection.","pos":[0,43]}]}],"pos":[147616,147660],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[147734,147855],"yaml":true},{"content":"A cancellation token to observe.","nodes":[{"pos":[0,32],"content":"A cancellation token to observe.","nodes":[{"content":"A cancellation token to observe.","pos":[0,32]}]}],"pos":[147949,147982],"yaml":true},{"content":"`true` if an item could be removed from the collection within the specified  time; otherwise, `false`.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">`true`</ph> if an item could be removed from the collection within the specified  time; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if an item could be removed from the collection within the specified  time; otherwise, `false`."}],"pos":[148040,148145],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> has been canceled.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has been canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> has been canceled."}],"pos":[148343,148422],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the underlying <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,192],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed or the underlying <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the underlying <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[148528,148721],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[148835,148943],"yaml":true},{"content":"The underlying collection was modified outside this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,133],"content":"The underlying collection was modified outside this <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"The underlying collection was modified outside this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[149053,149187],"yaml":true},{"content":"Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> in the specified time period.","nodes":[{"pos":[0,134],"content":"Tries to remove an item from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> in the specified time period.","source":"Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> in the specified time period."}],"pos":[150762,150897],"yaml":true},{"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601>, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"pos":[0,819],"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601>, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601>, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.","pos":[0,819],"nodes":[{"content":"The order in which an item is removed depends on the type of collection used to create the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> instance.","pos":[0,160],"source":"The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance."},{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph>, you can specify the type of collection to use.","pos":[161,286],"source":" When you create a <xref:System.Collections.Concurrent.BlockingCollection%601>, you can specify the type of collection to use."},{"content":"For example, you could specify a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> object for first in, first out (FIFO) behavior, or a <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> object for last in, first out (LIFO) behavior.","pos":[287,533],"source":" For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior."},{"content":"You can use any collection class that implements the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.IProducerConsumerCollection%601&gt;</ph> interface.","pos":[534,666],"source":" You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface."},{"content":"The default collection type for <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.","pos":[667,819],"source":" The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."}]}]}],"pos":[150908,151728],"yaml":true,"extradata":"MT"},{"content":"The item to be removed from the collection.","nodes":[{"pos":[0,43],"content":"The item to be removed from the collection.","nodes":[{"content":"The item to be removed from the collection.","pos":[0,43]}]}],"pos":[151874,151918],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[151992,152113],"yaml":true},{"content":"`true` if an item could be removed from the collection within the specified  time; otherwise, `false`.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">`true`</ph> if an item could be removed from the collection within the specified  time; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if an item could be removed from the collection within the specified  time; otherwise, `false`."}],"pos":[152171,152276],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[152468,152563],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[152677,152785],"yaml":true},{"content":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,136],"content":"The underlying collection was modified outside of this <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[152895,153032],"yaml":true},{"content":"Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,136],"content":"Tries to remove an item from any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[154829,154966],"yaml":true},{"content":"A call to TryTakeFromAny may block until an item is available to be removed.","nodes":[{"pos":[0,76],"content":"A call to TryTakeFromAny may block until an item is available to be removed.","nodes":[{"content":"A call to TryTakeFromAny may block until an item is available to be removed.","pos":[0,76]}]}],"pos":[154977,155054],"yaml":true,"extradata":"MT"},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[155870,155896],"yaml":true},{"content":"The item removed from one of the collections.","nodes":[{"pos":[0,45],"content":"The item removed from one of the collections.","nodes":[{"content":"The item removed from one of the collections.","pos":[0,45]}]}],"pos":[155944,155990],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.","nodes":[{"pos":[0,137],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array from which the item was removed, or -1 if an item could not be removed.","source":"The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed."}],"pos":[156046,156184],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[156383,156504],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[156606,156653],"yaml":true},{"content":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,100],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[156767,156868],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element.","nodes":[{"pos":[0,85],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element.","source":"The <code>collections</code> argument is a 0-length array or contains a null element."}],"pos":[156962,157048],"yaml":true},{"content":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,152],"content":"At least one of the underlying collections was modified outside of its <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[157158,157311],"yaml":true},{"content":"Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,136],"content":"Tries to remove an item from any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[159168,159305],"yaml":true},{"content":"A call to TryTakeFromAny may block until an item is available to be removed.","nodes":[{"pos":[0,76],"content":"A call to TryTakeFromAny may block until an item is available to be removed.","nodes":[{"content":"A call to TryTakeFromAny may block until an item is available to be removed.","pos":[0,76]}]}],"pos":[159316,159393],"yaml":true,"extradata":"MT"},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[159678,159704],"yaml":true},{"content":"The item removed from one of the collections.","nodes":[{"pos":[0,45],"content":"The item removed from one of the collections.","nodes":[{"content":"The item removed from one of the collections.","pos":[0,45]}]}],"pos":[159752,159798],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[159872,159993],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.","nodes":[{"pos":[0,137],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array from which the item was removed, or -1 if an item could not be removed.","source":"The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed."}],"pos":[160049,160187],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[160386,160507],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[160609,160656],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,225],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[160770,161002],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element.","nodes":[{"pos":[0,85],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element.","source":"The <code>collections</code> argument is a 0-length array or contains a null element."}],"pos":[161096,161182],"yaml":true},{"content":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,152],"content":"At least one of the underlying collections was modified outside of its <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[161292,161445],"yaml":true},{"content":"Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,136],"content":"Tries to remove an item from any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[163464,163601],"yaml":true},{"content":"A call to TryTakeFromAny may block until an item is available to be removed.","nodes":[{"pos":[0,76],"content":"A call to TryTakeFromAny may block until an item is available to be removed.","nodes":[{"content":"A call to TryTakeFromAny may block until an item is available to be removed.","pos":[0,76]}]}],"pos":[163612,163689],"yaml":true,"extradata":"MT"},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[164028,164054],"yaml":true},{"content":"The item removed from one of the collections.","nodes":[{"pos":[0,45],"content":"The item removed from one of the collections.","nodes":[{"content":"The item removed from one of the collections.","pos":[0,45]}]}],"pos":[164102,164148],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[164222,164343],"yaml":true},{"content":"A cancellation token to observe.","nodes":[{"pos":[0,32],"content":"A cancellation token to observe.","nodes":[{"content":"A cancellation token to observe.","pos":[0,32]}]}],"pos":[164437,164470],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.","nodes":[{"pos":[0,137],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array from which the item was removed, or -1 if an item could not be removed.","source":"The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed."}],"pos":[164526,164664],"yaml":true},{"content":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,75],"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[164869,164945],"yaml":true},{"content":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,152],"content":"At least one of the underlying collections was modified outside of its <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[165055,165208],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[165310,165357],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,225],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[165471,165703],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element.","nodes":[{"pos":[0,85],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element.","source":"The <code>collections</code> argument is a 0-length array or contains a null element."}],"pos":[165797,165883],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[165989,166110],"yaml":true},{"content":"Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.","nodes":[{"pos":[0,136],"content":"Tries to remove an item from any one of the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances."}],"pos":[167985,168122],"yaml":true},{"content":"A call to TryTakeFromAny may block until an item is available to be removed.","nodes":[{"pos":[0,76],"content":"A call to TryTakeFromAny may block until an item is available to be removed.","nodes":[{"content":"A call to TryTakeFromAny may block until an item is available to be removed.","pos":[0,76]}]}],"pos":[168133,168210],"yaml":true,"extradata":"MT"},{"content":"The array of collections.","nodes":[{"pos":[0,25],"content":"The array of collections.","nodes":[{"content":"The array of collections.","pos":[0,25]}]}],"pos":[168488,168514],"yaml":true},{"content":"The item removed from one of the collections.","nodes":[{"pos":[0,45],"content":"The item removed from one of the collections.","nodes":[{"content":"The item removed from one of the collections.","pos":[0,45]}]}],"pos":[168562,168608],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[168673,168860],"yaml":true},{"content":"The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.","nodes":[{"pos":[0,137],"content":"The index of the collection in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> array from which the item was removed, or -1 if an item could not be removed.","source":"The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed."}],"pos":[168916,169054],"yaml":true},{"content":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.","nodes":[{"pos":[0,120],"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instances has been disposed.","source":"At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed."}],"pos":[169253,169374],"yaml":true},{"content":"The <code>collections</code> argument is null.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>collections</code> argument is null."}],"pos":[169476,169523],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>."},{"pos":[187,191],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[198,298],"content":"The count of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the maximum size of 62 for STA and 63 for MTA.","source":"The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."}],"pos":[169637,169944],"yaml":true},{"content":"The <code>collections</code> argument is a 0-length array or contains a null element.","nodes":[{"pos":[0,85],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collections</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a 0-length array or contains a null element.","source":"The <code>collections</code> argument is a 0-length array or contains a null element."}],"pos":[170038,170124],"yaml":true},{"content":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.","nodes":[{"pos":[0,152],"content":"At least one of the underlying collections was modified outside of its <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."}],"pos":[170234,170387],"yaml":true},{"content":"Provides an <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for items in the collection.","nodes":[{"pos":[0,102],"content":"Provides an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerator`1\"&gt;&lt;/xref&gt;</ph> for items in the collection.","source":"Provides an <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for items in the collection."}],"pos":[172105,172208],"yaml":true},{"content":"Unlike <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A>, <xref:System.Collections.Concurrent.BlockingCollection%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A?displayProperty=fullName> returns a standard enumerator that does not modify the underlying collection. If other threads are adding or removing elements concurrently when GetEnumerator is called, then the elements returned by the enumerator might not represent the current state of the collection.","nodes":[{"pos":[0,521],"content":"Unlike <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A>, <xref:System.Collections.Concurrent.BlockingCollection%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A?displayProperty=fullName> returns a standard enumerator that does not modify the underlying collection. If other threads are adding or removing elements concurrently when GetEnumerator is called, then the elements returned by the enumerator might not represent the current state of the collection.","nodes":[{"content":"Unlike <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A>, <xref:System.Collections.Concurrent.BlockingCollection%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A?displayProperty=fullName> returns a standard enumerator that does not modify the underlying collection. If other threads are adding or removing elements concurrently when GetEnumerator is called, then the elements returned by the enumerator might not represent the current state of the collection.","pos":[0,521],"nodes":[{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A?displayProperty=fullName&gt;</ph> returns a standard enumerator that does not modify the underlying collection.","pos":[0,327],"source":"Unlike <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A>, <xref:System.Collections.Concurrent.BlockingCollection%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A?displayProperty=fullName> returns a standard enumerator that does not modify the underlying collection."},{"content":"If other threads are adding or removing elements concurrently when GetEnumerator is called, then the elements returned by the enumerator might not represent the current state of the collection.","pos":[328,521]}]}]}],"pos":[172219,172741],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for the items in the collection.","nodes":[{"pos":[0,97],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerator`1\"&gt;&lt;/xref&gt;</ph> for the items in the collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for the items in the collection."}],"pos":[172942,173040],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[173280,173375],"yaml":true},{"content":"Copies all of the items in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array.","nodes":[{"pos":[0,203],"content":"Copies all of the items in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance to a compatible one-dimensional array, starting at the specified index of the target array.","source":"Copies all of the items in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array."}],"pos":[175126,175330],"yaml":true},{"content":"The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance. The array must have zero-based indexing.","nodes":[{"pos":[0,204],"content":"The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance. The array must have zero-based indexing.","nodes":[{"content":"The one-dimensional array that is the destination of the elements copied from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> instance.","pos":[0,163],"source":"The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance."},{"content":"The array must have zero-based indexing.","pos":[164,204]}]}],"pos":[175479,175684],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[175744,175812],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[176034,176129],"yaml":true},{"content":"The <code>array</code> argument is null.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>array</code> argument is null."}],"pos":[176231,176272],"yaml":true},{"content":"The <code>index</code> argument is less than zero.","nodes":[{"pos":[0,50],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than zero.","source":"The <code>index</code> argument is less than zero."}],"pos":[176386,176437],"yaml":true},{"content":"The <code>index</code> argument is equal to or greater than the length of the <code>array</code>, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array.","nodes":[{"pos":[0,236],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is equal to or greater than the length of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array.","source":"The <code>index</code> argument is equal to or greater than the length of the <code>array</code>, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array."}],"pos":[176531,176768],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized.","nodes":[{"pos":[0,114],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized.","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized."}],"pos":[178446,178561],"yaml":true},{"content":"always returns false.","nodes":[{"pos":[0,21],"content":"always returns false.","nodes":[{"content":"always returns false.","pos":[0,21]}]}],"pos":[178702,178724],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[178954,179049],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>. This property is not supported.","nodes":[{"pos":[0,145],"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>. This property is not supported.","nodes":[{"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,113],"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"This property is not supported.","pos":[114,145]}]}],"pos":[180654,180800],"yaml":true},{"content":"returns null.","nodes":[{"pos":[0,13],"content":"returns null.","nodes":[{"content":"returns null.","pos":[0,13]}]}],"pos":[180936,180950],"yaml":true},{"content":"The SyncRoot property is not supported.","nodes":[{"pos":[0,39],"content":"The SyncRoot property is not supported.","nodes":[{"content":"The SyncRoot property is not supported.","pos":[0,39]}]}],"pos":[181170,181210],"yaml":true},{"content":"Provides an <xref href=\"System.Collections.IEnumerator\"></xref> for items in the collection.","nodes":[{"pos":[0,92],"content":"Provides an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for items in the collection.","source":"Provides an <xref href=\"System.Collections.IEnumerator\"></xref> for items in the collection."}],"pos":[182849,182942],"yaml":true},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the items in the collection.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for the items in the collection.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the items in the collection."}],"pos":[183119,183207],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.BlockingCollection`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed."}],"pos":[183436,183531],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.BlockingCollection`1\n  commentId: T:System.Collections.Concurrent.BlockingCollection`1\n  id: BlockingCollection`1\n  children:\n  - System.Collections.Concurrent.BlockingCollection`1.#ctor\n  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})\n  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)\n  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)\n  - System.Collections.Concurrent.BlockingCollection`1.Add(`0)\n  - System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)\n  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)\n  - System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity\n  - System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\n  - System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Concurrent.BlockingCollection`1.Count\n  - System.Collections.Concurrent.BlockingCollection`1.Dispose\n  - System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)\n  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)\n  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable\n  - System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted\n  - System.Collections.Concurrent.BlockingCollection`1.IsCompleted\n  - System.Collections.Concurrent.BlockingCollection`1.Take\n  - System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)\n  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)\n  - System.Collections.Concurrent.BlockingCollection`1.ToArray\n  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)\n  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)\n  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)\n  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)\n  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)\n  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)\n  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)\n  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)\n  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)\n  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)\n  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)\n  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)\n  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)\n  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)\n  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: BlockingCollection<T>\n  nameWithType: BlockingCollection<T>\n  fullName: System.Collections.Concurrent.BlockingCollection<T>\n  type: Class\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Provides blocking and bounding capabilities for thread-safe collections that implement <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"></xref>.\n  remarks: \"<xref:System.Collections.Concurrent.BlockingCollection%601> is a thread-safe collection class that provides the following:  \\n  \\n-   An implementation of the producer/consumer pattern; <xref:System.Collections.Concurrent.BlockingCollection%601> is a wrapper for the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface.  \\n  \\n-   Concurrent addition and removal of items from multiple threads with the <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and  <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> methods.  \\n  \\n-   A bounded collection that blocks <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations when the collection is full or empty.  \\n  \\n-   Cancellation of <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations by using a <xref:System.Threading.CancellationToken> object in the  <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic. Also, note that the <xref:System.Collections.Concurrent.BlockingCollection%601.Dispose> method is not thread-safe. All other public and protected members of <xref:System.Collections.Concurrent.BlockingCollection%601> are thread-safe and may be used concurrently from multiple threads.  \\n  \\n <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> represents a collection that allows for thread-safe adding and removal of data. <xref:System.Collections.Concurrent.BlockingCollection%601> is used as a wrapper for an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> instance, and allows removal attempts from the collection to block until data is available to be removed. Similarly, you can create a <xref:System.Collections.Concurrent.BlockingCollection%601> to enforce an upper bound on the number of data elements allowed in the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>; addition attempts to the collection may then block until space is available to store the added items. In this manner, <xref:System.Collections.Concurrent.BlockingCollection%601> is similar to a traditional blocking queue data structure, except that the underlying data storage mechanism is abstracted away as an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>.  \\n  \\n <xref:System.Collections.Concurrent.BlockingCollection%601> supports bounding and blocking. Bounding means that you can set the maximum capacity of the collection. Bounding is important in certain scenarios because it enables you to control the maximum size of the collection in memory, and it prevents the producing threads from moving too far ahead of the consuming threads.Multiple threads or tasks can add items to the collection concurrently, and if the collection reaches its specified maximum capacity, the producing threads will block until an item is removed. Multiple consumers can remove items concurrently, and if the collection becomes empty, the consuming threads will block until a producer adds an item. A producing thread can call the <xref:System.Collections.Concurrent.BlockingCollection%601.CompleteAdding%2A> method to indicate that no more items will be added. Consumers monitor the <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> property to know when the collection is empty and no more items will be added.  \\n  \\n <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations are typically performed in a loop. You can cancel a loop by passing in a <xref:System.Threading.CancellationToken> object to the <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method, and then checking the value of the token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on each iteration. If the value is `true`, it is up to you to respond the cancellation request by cleaning up any resources and exiting the loop.  \\n  \\n When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify not only the bounded capacity but also the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.  \\n  \\n Do not modify the underlying collection directly. Use <xref:System.Collections.Concurrent.BlockingCollection%601> methods to add or remove elements. The <xref:System.Collections.Concurrent.BlockingCollection%601> object can become corrupted if you change the underlying collection directly.\"\n  example:\n  - \"The following example shows how to add and take items concurrently from a blocking collection:  \\n  \\n [!code-csharp[System.Collections.Concurrent.BlockingCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.blockingcollection/cs/blockingcoll.cs#1)]\\n [!code-vb[System.Collections.Concurrent.BlockingCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.blockingcollection/vb/blockingcoll.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class BlockingCollection<T> : IDisposable, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection\n    typeParameters:\n    - id: T\n      description: The type of elements in the collection.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IEnumerable{T}\n  - System.Collections.Generic.IReadOnlyCollection{T}\n  - System.Collections.ICollection\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: BlockingCollection<T>()\n  nameWithType: BlockingCollection<T>.BlockingCollection<T>()\n  fullName: BlockingCollection<T>.BlockingCollection<T>()\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class without an upper-bound.\n  remarks: The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object, which provides first in, first out (FIFO) behavior.\n  syntax:\n    content: public BlockingCollection ();\n    parameters: []\n  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})\n  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})'\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: BlockingCollection<T>(IProducerConsumerCollection<T>)\n  nameWithType: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>)\n  fullName: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class without an upper-bound and using the provided <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"></xref> as its underlying data store.\n  syntax:\n    content: public BlockingCollection (System.Collections.Concurrent.IProducerConsumerCollection<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Concurrent.IProducerConsumerCollection`1\n      description: The collection to use as the underlying data store.\n  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collection</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: BlockingCollection<T>(Int32)\n  nameWithType: BlockingCollection<T>.BlockingCollection<T>(Int32)\n  fullName: BlockingCollection<T>.BlockingCollection<T>(Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class with the specified upper-bound.\n  remarks: The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601>.\n  syntax:\n    content: public BlockingCollection (int boundedCapacity);\n    parameters:\n    - id: boundedCapacity\n      type: System.Int32\n      description: The bounded size of the collection.\n  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>boundedCapacity</code> is not a positive value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)\n  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)'\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: BlockingCollection<T>(IProducerConsumerCollection<T>, Int32)\n  nameWithType: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>, Int32)\n  fullName: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>, Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class with the specified upper-bound and using the provided <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\"></xref> as its underlying data store.\n  syntax:\n    content: public BlockingCollection (System.Collections.Concurrent.IProducerConsumerCollection<T> collection, int boundedCapacity);\n    parameters:\n    - id: collection\n      type: System.Collections.Concurrent.IProducerConsumerCollection`1\n      description: The collection to use as the underlying data store.\n    - id: boundedCapacity\n      type: System.Int32\n      description: The bounded size of the collection.\n  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collection</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>boundedCapacity</code> is not a positive value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The supplied <code>collection</code> contains more values than is permitted by <code>boundedCapacity</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)\n  id: Add(`0)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: Add(T)\n  nameWithType: BlockingCollection<T>.Add(T)\n  fullName: BlockingCollection<T>.Add(T)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Adds the item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.\n  remarks: If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to Add may block until space is available to store the provided item.\n  syntax:\n    content: public void Add (T item);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be added to the collection. The value can be a null reference.\n  overload: System.Collections.Concurrent.BlockingCollection`1.Add*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.BlockingCollection`1\\\"></xref> has been marked as complete with regards to additions.  \\n  \\n -or-  \\n  \\n The underlying collection didn't accept the item.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)\n  id: Add(`0,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: Add(T, CancellationToken)\n  nameWithType: BlockingCollection<T>.Add(T, CancellationToken)\n  fullName: BlockingCollection<T>.Add(T, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Adds the item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.\n  remarks: \"If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> may block until space is available to store the provided item.  \\n  \\n This method can return early with an <xref:System.OperationCanceledException> if the `cancellationToken` is canceled.\"\n  syntax:\n    content: public void Add (T item, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be added to the collection. The value can be a null reference.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe.\n  overload: System.Collections.Concurrent.BlockingCollection`1.Add*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that owns <code>cancellationToken</code> has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.BlockingCollection`1\\\"></xref> has been marked as complete with regards to additions.  \\n  \\n -or-  \\n  \\n The underlying collection didn't accept the item.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: AddToAny(BlockingCollection<T>[], T)\n  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T)\n  fullName: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Adds the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  remarks: If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item.\n  syntax:\n    content: public static int AddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item to be added to one of the collections.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array to which the item was added.\n  overload: System.Collections.Concurrent.BlockingCollection`1.AddToAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one underlying collection didn't accept the item.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)\n  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: AddToAny(BlockingCollection<T>[], T, CancellationToken)\n  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T, CancellationToken)\n  fullName: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Adds the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  remarks: If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item. This method may return before the item is added to any collection if the `cancellationToken` is canceled before space is available.\n  syntax:\n    content: public static int AddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item to be added to one of the collections.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array to which the item was added.\n  overload: System.Collections.Concurrent.BlockingCollection`1.AddToAny*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one underlying collection didn't accept the item.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed, or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity\n  commentId: P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity\n  id: BoundedCapacity\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: BoundedCapacity\n  nameWithType: BlockingCollection<T>.BoundedCapacity\n  fullName: BlockingCollection<T>.BoundedCapacity\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets the bounded capacity of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  syntax:\n    content: public int BoundedCapacity { get; }\n    return:\n      type: System.Int32\n      description: The bounded capacity of this collection, or int.MaxValue if no bound was supplied.\n  overload: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\n  id: CompleteAdding\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: CompleteAdding()\n  nameWithType: BlockingCollection<T>.CompleteAdding()\n  fullName: BlockingCollection<T>.CompleteAdding()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Marks the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances as not accepting any more additions.\n  remarks: After a collection has been marked as complete for adding, adding to the collection is not permitted and attempts to remove from the collection will not wait when the collection is empty.\n  syntax:\n    content: public void CompleteAdding ();\n    parameters: []\n  overload: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: CopyTo(T[], Int32)\n  nameWithType: BlockingCollection<T>.CopyTo(T[], Int32)\n  fullName: BlockingCollection<T>.CopyTo(T[], Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Copies all of the items in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array.\n  remarks: CopyTo represents a snapshot of the collection at a precise point in time. If other threads are adding or removing items while CopyTo is executing, then the elements returned by CopyTo might not represent the state of the collection.\n  syntax:\n    content: public void CopyTo (T[] array, int index);\n    parameters:\n    - id: array\n      type: T[]\n      description: The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance. The array must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.Concurrent.BlockingCollection`1.CopyTo*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>array</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>index</code> argument is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>index</code> argument is equal to or greater than the length of the <code>array</code>.  \\n  \\n The destination array is too small to hold all of the BlockingCcollection elements.  \\n  \\n The array rank doesn't match.  \\n  \\n The array type is incompatible with the type of the BlockingCollection elements.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.Count\n  commentId: P:System.Collections.Concurrent.BlockingCollection`1.Count\n  id: Count\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: BlockingCollection<T>.Count\n  fullName: BlockingCollection<T>.Count\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets the number of items contained in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.\n  remarks: If any method in BlockingCollection is executing while the Count property is being accessd, the return value is approximate. Count may reflect a number that is either greater than or less than the actual number of items in the BlockingCollection.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of items contained in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.\n  overload: System.Collections.Concurrent.BlockingCollection`1.Count*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Dispose\n  id: Dispose\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: BlockingCollection<T>.Dispose()\n  fullName: BlockingCollection<T>.Dispose()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> class.\n  remarks: \"The `Dispose` method is not thread-safe.  \\n  \\n Call `Dispose` when you are finished using the <xref:System.Collections.Concurrent.BlockingCollection%601>. The `Dispose` method leaves the <xref:System.Collections.Concurrent.BlockingCollection%601> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Collections.Concurrent.BlockingCollection%601> so the garbage collector can reclaim the memory that the <xref:System.Collections.Concurrent.BlockingCollection%601> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Collections.Concurrent.BlockingCollection%601>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Collections.Concurrent.BlockingCollection%601> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Collections.Concurrent.BlockingCollection`1.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: BlockingCollection<T>.Dispose(Boolean)\n  fullName: BlockingCollection<T>.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Releases resources used by the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: Whether being disposed explicitly (true) or due to a finalizer (false).\n  overload: System.Collections.Concurrent.BlockingCollection`1.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)\n  id: GetConsumingEnumerable(System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: GetConsumingEnumerable(CancellationToken)\n  nameWithType: BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)\n  fullName: BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Provides a consuming <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> for items in the collection.\n  remarks: This method enables client code to remove items from the collection by using a foreach loop (For Each in Visual Basic), or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> or a PLINQ query. The enumerator will continue to provide items (if any exist) until <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> returns true, and if <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> is false the loop blocks until an item becomes available or until the <xref:System.Threading.CancellationToken> is cancelled.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe.\n    return:\n      type: System.Collections.Generic.IEnumerable`1\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that removes and returns items from the collection.\n  overload: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable\n  id: GetConsumingEnumerable\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: GetConsumingEnumerable()\n  nameWithType: BlockingCollection<T>.GetConsumingEnumerable()\n  fullName: BlockingCollection<T>.GetConsumingEnumerable()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Provides a consuming <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for items in the collection.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A> method:  \\n  \\n [!code-csharp[System.Collections.Concurrent.BlockingCollection#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.blockingcollection/cs/blockingcoll.cs#4)]\\n [!code-vb[System.Collections.Concurrent.BlockingCollection#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.blockingcollection/vb/blockingcoll.vb#4)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable`1\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that removes and returns items from the collection.\n  overload: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted\n  commentId: P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted\n  id: IsAddingCompleted\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: IsAddingCompleted\n  nameWithType: BlockingCollection<T>.IsAddingCompleted\n  fullName: BlockingCollection<T>.IsAddingCompleted\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets whether this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete for adding.\n  syntax:\n    content: public bool IsAddingCompleted { get; }\n    return:\n      type: System.Boolean\n      description: Whether this collection has been marked as complete for adding.\n  overload: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted\n  commentId: P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted\n  id: IsCompleted\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: IsCompleted\n  nameWithType: BlockingCollection<T>.IsCompleted\n  fullName: BlockingCollection<T>.IsCompleted\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets whether this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been marked as complete for adding and is empty.\n  syntax:\n    content: public bool IsCompleted { get; }\n    return:\n      type: System.Boolean\n      description: Whether this collection has been marked as complete for adding and is empty.\n  overload: System.Collections.Concurrent.BlockingCollection`1.IsCompleted*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.Take\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Take\n  id: Take\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: Take()\n  nameWithType: BlockingCollection<T>.Take()\n  fullName: BlockingCollection<T>.Take()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Removes  an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.\n  remarks: \"A call to <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> may block until an item is available to be removed.  \\n  \\n The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.\"\n  syntax:\n    content: public T Take ();\n    parameters: []\n    return:\n      type: T\n      description: The item removed from the collection.\n  overload: System.Collections.Concurrent.BlockingCollection`1.Take*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance, or the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> is empty and the collection has been marked as complete for adding.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)\n  id: Take(System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: Take(CancellationToken)\n  nameWithType: BlockingCollection<T>.Take(CancellationToken)\n  fullName: BlockingCollection<T>.Take(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Removes an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.\n  remarks: \"A call to <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> may block until an item is available to be removed or the token is canceled.  \\n  \\n The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.\"\n  syntax:\n    content: public T Take (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: Object that can be used to cancel the take operation.\n    return:\n      type: T\n      description: The item removed from the collection.\n  overload: System.Collections.Concurrent.BlockingCollection`1.Take*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token was canceled.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance or the BlockingCollection is marked as complete for adding, or the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TakeFromAny(BlockingCollection<T>[], T)\n  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], T)\n  fullName: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], T)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Takes an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  remarks: A call to TakeFromAny may block until an item is available to be removed.\n  syntax:\n    content: public static int TakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item removed from one of the collections.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array from which the item was removed.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element or <xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\"></xref> has been called on the collection.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)\n  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TakeFromAny(BlockingCollection<T>[], T, CancellationToken)\n  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], T, CancellationToken)\n  fullName: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], T, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Takes an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances while observing the specified cancellation token.\n  remarks: A call to TakeFromAny may block until an item is available to be removed. The method will return early with an OperationCanceledException if the token is canceled.\n  syntax:\n    content: public static int TakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item removed from one of the collections.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array from which the item was removed.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element, or <xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\"></xref> has been called on the collection.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.ToArray\n  id: ToArray\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: BlockingCollection<T>.ToArray()\n  fullName: BlockingCollection<T>.ToArray()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Copies the items from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance into a new array.\n  remarks: \"The copied elements are not removed from the collection.  \\n  \\n If any method in BlockingCollection is executing while the ToArray method executes, the return value is approximate. ToArray  may include items that have already been removed, or exclude items that have already been inserted.\"\n  syntax:\n    content: public T[] ToArray ();\n    parameters: []\n    return:\n      type: T[]\n      description: An array containing copies of the elements of the collection.\n  overload: System.Collections.Concurrent.BlockingCollection`1.ToArray*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)\n  id: TryAdd(`0,System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryAdd(T, Int32)\n  nameWithType: BlockingCollection<T>.TryAdd(T, Int32)\n  fullName: BlockingCollection<T>.TryAdd(T, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> within the specified time period.\n  syntax:\n    content: public bool TryAdd (T item, int millisecondsTimeout);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be added to the collection.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: true if the <code>item</code> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.BlockingCollection`1\\\"></xref> has been marked as complete with regards to additions.  \\n  \\n -or-  \\n  \\n The underlying collection didn't accept the item.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)\n  id: TryAdd(`0,System.Int32,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryAdd(T, Int32, CancellationToken)\n  nameWithType: BlockingCollection<T>.TryAdd(T, Int32, CancellationToken)\n  fullName: BlockingCollection<T>.TryAdd(T, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> within the specified time period, while observing a cancellation token.\n  syntax:\n    content: public bool TryAdd (T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be added to the collection.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe.\n    return:\n      type: System.Boolean\n      description: true if the <code>item</code> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the underlying <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.BlockingCollection`1\\\"></xref> has been marked as complete with regards to additions.  \\n  \\n -or-  \\n  \\n The underlying collection didn't accept the item.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)\n  id: TryAdd(`0)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryAdd(T)\n  nameWithType: BlockingCollection<T>.TryAdd(T)\n  fullName: BlockingCollection<T>.TryAdd(T)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.\n  remarks: If the collection is a bounded collection, and is full, this method immediately returns false without adding the item.\n  syntax:\n    content: public bool TryAdd (T item);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be added to the collection.\n    return:\n      type: System.Boolean\n      description: true if <code>item</code> could be added; otherwise false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\"></xref> is thrown.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.BlockingCollection`1\\\"></xref> has been marked as complete with regards to additions.  \\n  \\n -or-  \\n  \\n The underlying collection didn't accept the item.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)\n  id: TryAdd(`0,System.TimeSpan)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryAdd(T, TimeSpan)\n  nameWithType: BlockingCollection<T>.TryAdd(T, TimeSpan)\n  fullName: BlockingCollection<T>.TryAdd(T, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.\n  syntax:\n    content: public bool TryAdd (T item, TimeSpan timeout);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be added to the collection.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: true if the <code>item</code> could be added to the collection within the specified time span; otherwise, false.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.BlockingCollection`1\\\"></xref> has been marked as complete with regards to additions.  \\n  \\n -or-  \\n  \\n The underlying collection didn't accept the item.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)\n  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryAddToAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  fullName: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  syntax:\n    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item to be added to one of the collections.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one underlying collection didn't accept the item.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)\n  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryAddToAny(BlockingCollection<T>[], T, TimeSpan)\n  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, TimeSpan)\n  fullName: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances while observing the specified cancellation token.\n  remarks: This method can return early if the cancellationToken is cancelled before space was available for the Add operation.\n  syntax:\n    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, TimeSpan timeout);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item to be added to one of the collections.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.  \\n  \\n -or-  \\n  \\n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one underlying collection didn't accept the item.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)\n  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryAddToAny(BlockingCollection<T>[], T, Int32)\n  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32)\n  fullName: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  syntax:\n    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item to be added to one of the collections.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one underlying collection didn't accept the item.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryAddToAny(BlockingCollection<T>[], T)\n  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T)\n  fullName: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  syntax:\n    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item to be added to one of the collections.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one underlying collection didn't accept the item.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)\n  id: TryTake(`0@)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryTake(T)\n  nameWithType: BlockingCollection<T>.TryTake(T)\n  fullName: BlockingCollection<T>.TryTake(T)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref>.\n  remarks: \"If the collection is empty, this method immediately returns false.  \\n  \\n The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.\"\n  syntax:\n    content: public bool TryTake (out T item);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be removed from the collection.\n    return:\n      type: System.Boolean\n      description: '`true` if an item could be removed; otherwise, `false`.'\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)\n  id: TryTake(`0@,System.TimeSpan)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryTake(T, TimeSpan)\n  nameWithType: BlockingCollection<T>.TryTake(T, TimeSpan)\n  fullName: BlockingCollection<T>.TryTake(T, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> in the specified time period.\n  remarks: The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.\n  syntax:\n    content: public bool TryTake (out T item, TimeSpan timeout);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be removed from the collection.\n    - id: timeout\n      type: System.TimeSpan\n      description: An object that represents the number of milliseconds to wait, or an object that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: '`true` if an item could be removed from the collection within the specified  time; otherwise, `false`.'\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n <code>timeout</code> is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)\n  id: TryTake(`0@,System.Int32,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryTake(T, Int32, CancellationToken)\n  nameWithType: BlockingCollection<T>.TryTake(T, Int32, CancellationToken)\n  fullName: BlockingCollection<T>.TryTake(T, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> in the specified time period while observing a cancellation token.\n  remarks: The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.\n  syntax:\n    content: public bool TryTake (out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be removed from the collection.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe.\n    return:\n      type: System.Boolean\n      description: '`true` if an item could be removed from the collection within the specified  time; otherwise, `false`.'\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed or the underlying <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying collection was modified outside this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)\n  id: TryTake(`0@,System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryTake(T, Int32)\n  nameWithType: BlockingCollection<T>.TryTake(T, Int32)\n  fullName: BlockingCollection<T>.TryTake(T, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> in the specified time period.\n  remarks: The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601>, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.\n  syntax:\n    content: public bool TryTake (out T item, int millisecondsTimeout);\n    parameters:\n    - id: item\n      type: T\n      description: The item to be removed from the collection.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: '`true` if an item could be removed from the collection within the specified  time; otherwise, `false`.'\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryTakeFromAny(BlockingCollection<T>[], T)\n  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T)\n  fullName: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  remarks: A call to TryTakeFromAny may block until an item is available to be removed.\n  example:\n  - \"The following example shows how to use the <xref:System.Collections.Concurrent.BlockingCollection%601.TryTakeFromAny%2A?displayProperty=fullName> method:  \\n  \\n [!code-csharp[System.Collections.Concurrent.BlockingCollection#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.blockingcollection/cs/blockingcoll.cs#3)]\\n [!code-vb[System.Collections.Concurrent.BlockingCollection#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.blockingcollection/vb/blockingcoll.vb#3)]\"\n  syntax:\n    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item removed from one of the collections.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)\n  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryTakeFromAny(BlockingCollection<T>[], T, Int32)\n  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, Int32)\n  fullName: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  remarks: A call to TryTakeFromAny may block until an item is available to be removed.\n  syntax:\n    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item removed from one of the collections.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)\n  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryTakeFromAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  fullName: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  remarks: A call to TryTakeFromAny may block until an item is available to be removed.\n  syntax:\n    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item removed from one of the collections.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: If the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)\n  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: TryTakeFromAny(BlockingCollection<T>[], T, TimeSpan)\n  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, TimeSpan)\n  fullName: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances.\n  remarks: A call to TryTakeFromAny may block until an item is available to be removed.\n  syntax:\n    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, TimeSpan timeout);\n    parameters:\n    - id: collections\n      type: System.Collections.Concurrent.BlockingCollection{T}[]\n      description: The array of collections.\n    - id: item\n      type: T\n      description: The item removed from one of the collections.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Int32\n      description: The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.\n  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instances has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>collections</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.  \\n  \\n -or-  \\n  \\n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>collections</code> argument is a 0-length array or contains a null element.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  isEii: true\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: IEnumerable<T>.GetEnumerator()\n  nameWithType: BlockingCollection<T>.IEnumerable<T>.GetEnumerator()\n  fullName: BlockingCollection<T>.IEnumerable<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Provides an <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for items in the collection.\n  remarks: Unlike <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A>, <xref:System.Collections.Concurrent.BlockingCollection%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A?displayProperty=fullName> returns a standard enumerator that does not modify the underlying collection. If other threads are adding or removing elements concurrently when GetEnumerator is called, then the elements returned by the enumerator might not represent the current state of the collection.\n  syntax:\n    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator`1\n      description: An <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> for the items in the collection.\n  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: BlockingCollection<T>.ICollection.CopyTo(Array, Int32)\n  fullName: BlockingCollection<T>.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Copies all of the items in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> instance. The array must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>array</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>index</code> argument is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>index</code> argument is equal to or greater than the length of the <code>array</code>, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: BlockingCollection<T>.ICollection.IsSynchronized\n  fullName: BlockingCollection<T>.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized.\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: always returns false.\n  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: BlockingCollection<T>.ICollection.SyncRoot\n  fullName: BlockingCollection<T>.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>. This property is not supported.\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: returns null.\n  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The SyncRoot property is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: BlockingCollection<T>.IEnumerable.GetEnumerator()\n  fullName: BlockingCollection<T>.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - System\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Provides an <xref href=\"System.Collections.IEnumerator\"></xref> for items in the collection.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> for the items in the collection.\n  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  nameWithType: OperationCanceledException\n  fullName: System.OperationCanceledException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: BlockingCollection<T>()\n  nameWithType: BlockingCollection<T>.BlockingCollection<T>()\n  fullName: BlockingCollection<T>.BlockingCollection<T>()\n- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: BlockingCollection<T>(IProducerConsumerCollection<T>)\n  nameWithType: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>)\n  fullName: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>)\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: IProducerConsumerCollection<T>\n  nameWithType: IProducerConsumerCollection<T>\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>\n- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: BlockingCollection<T>(Int32)\n  nameWithType: BlockingCollection<T>.BlockingCollection<T>(Int32)\n  fullName: BlockingCollection<T>.BlockingCollection<T>(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: BlockingCollection<T>(IProducerConsumerCollection<T>, Int32)\n  nameWithType: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>, Int32)\n  fullName: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>, Int32)\n- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Add(T)\n  nameWithType: BlockingCollection<T>.Add(T)\n  fullName: BlockingCollection<T>.Add(T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Add(T, CancellationToken)\n  nameWithType: BlockingCollection<T>.Add(T, CancellationToken)\n  fullName: BlockingCollection<T>.Add(T, CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: AddToAny(BlockingCollection<T>[], T)\n  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T)\n  fullName: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T)\n- uid: System.Collections.Concurrent.BlockingCollection`1\n  name: BlockingCollection<T>\n  nameWithType: BlockingCollection<T>\n  fullName: System.Collections.Concurrent.BlockingCollection<T>\n- uid: System.Collections.Concurrent.BlockingCollection{T}[]\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: BlockingCollection<T>[]\n  nameWithType: BlockingCollection<T>[]\n  fullName: System.Collections.Concurrent.BlockingCollection<T>[]\n  spec.csharp:\n  - uid: System.Collections.Concurrent.BlockingCollection`1\n    name: BlockingCollection\n    nameWithType: BlockingCollection\n    fullName: System.Collections.Concurrent.BlockingCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: AddToAny(BlockingCollection<T>[], T, CancellationToken)\n  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T, CancellationToken)\n  fullName: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T, CancellationToken)\n- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: BoundedCapacity\n  nameWithType: BlockingCollection<T>.BoundedCapacity\n  fullName: BlockingCollection<T>.BoundedCapacity\n- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: CompleteAdding()\n  nameWithType: BlockingCollection<T>.CompleteAdding()\n  fullName: BlockingCollection<T>.CompleteAdding()\n- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: CopyTo(T[], Int32)\n  nameWithType: BlockingCollection<T>.CopyTo(T[], Int32)\n  fullName: BlockingCollection<T>.CopyTo(T[], Int32)\n- uid: T[]\n  isExternal: true\n  name: T[]\n  nameWithType: T[]\n  fullName: T[]\n  spec.csharp:\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Concurrent.BlockingCollection`1.Count\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Count\n  nameWithType: BlockingCollection<T>.Count\n  fullName: BlockingCollection<T>.Count\n- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Dispose()\n  nameWithType: BlockingCollection<T>.Dispose()\n  fullName: BlockingCollection<T>.Dispose()\n- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: BlockingCollection<T>.Dispose(Boolean)\n  fullName: BlockingCollection<T>.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: GetConsumingEnumerable(CancellationToken)\n  nameWithType: BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)\n  fullName: BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: GetConsumingEnumerable()\n  nameWithType: BlockingCollection<T>.GetConsumingEnumerable()\n  fullName: BlockingCollection<T>.GetConsumingEnumerable()\n- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: IsAddingCompleted\n  nameWithType: BlockingCollection<T>.IsAddingCompleted\n  fullName: BlockingCollection<T>.IsAddingCompleted\n- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: IsCompleted\n  nameWithType: BlockingCollection<T>.IsCompleted\n  fullName: BlockingCollection<T>.IsCompleted\n- uid: System.Collections.Concurrent.BlockingCollection`1.Take\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Take()\n  nameWithType: BlockingCollection<T>.Take()\n  fullName: BlockingCollection<T>.Take()\n- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Take(CancellationToken)\n  nameWithType: BlockingCollection<T>.Take(CancellationToken)\n  fullName: BlockingCollection<T>.Take(CancellationToken)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TakeFromAny(BlockingCollection<T>[], T)\n  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], T)\n  fullName: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], T)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TakeFromAny(BlockingCollection<T>[], T, CancellationToken)\n  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], T, CancellationToken)\n  fullName: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], T, CancellationToken)\n- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: ToArray()\n  nameWithType: BlockingCollection<T>.ToArray()\n  fullName: BlockingCollection<T>.ToArray()\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAdd(T, Int32)\n  nameWithType: BlockingCollection<T>.TryAdd(T, Int32)\n  fullName: BlockingCollection<T>.TryAdd(T, Int32)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAdd(T, Int32, CancellationToken)\n  nameWithType: BlockingCollection<T>.TryAdd(T, Int32, CancellationToken)\n  fullName: BlockingCollection<T>.TryAdd(T, Int32, CancellationToken)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAdd(T)\n  nameWithType: BlockingCollection<T>.TryAdd(T)\n  fullName: BlockingCollection<T>.TryAdd(T)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAdd(T, TimeSpan)\n  nameWithType: BlockingCollection<T>.TryAdd(T, TimeSpan)\n  fullName: BlockingCollection<T>.TryAdd(T, TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAddToAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  fullName: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAddToAny(BlockingCollection<T>[], T, TimeSpan)\n  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, TimeSpan)\n  fullName: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, TimeSpan)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAddToAny(BlockingCollection<T>[], T, Int32)\n  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32)\n  fullName: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAddToAny(BlockingCollection<T>[], T)\n  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T)\n  fullName: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTake(T)\n  nameWithType: BlockingCollection<T>.TryTake(T)\n  fullName: BlockingCollection<T>.TryTake(T)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTake(T, TimeSpan)\n  nameWithType: BlockingCollection<T>.TryTake(T, TimeSpan)\n  fullName: BlockingCollection<T>.TryTake(T, TimeSpan)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTake(T, Int32, CancellationToken)\n  nameWithType: BlockingCollection<T>.TryTake(T, Int32, CancellationToken)\n  fullName: BlockingCollection<T>.TryTake(T, Int32, CancellationToken)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTake(T, Int32)\n  nameWithType: BlockingCollection<T>.TryTake(T, Int32)\n  fullName: BlockingCollection<T>.TryTake(T, Int32)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTakeFromAny(BlockingCollection<T>[], T)\n  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T)\n  fullName: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTakeFromAny(BlockingCollection<T>[], T, Int32)\n  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, Int32)\n  fullName: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, Int32)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTakeFromAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n  fullName: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, Int32, CancellationToken)\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTakeFromAny(BlockingCollection<T>[], T, TimeSpan)\n  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, TimeSpan)\n  fullName: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], T, TimeSpan)\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: IEnumerable<T>.GetEnumerator()\n  nameWithType: BlockingCollection<T>.IEnumerable<T>.GetEnumerator()\n  fullName: BlockingCollection<T>.IEnumerable<T>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: BlockingCollection<T>.ICollection.CopyTo(Array, Int32)\n  fullName: BlockingCollection<T>.ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: BlockingCollection<T>.ICollection.IsSynchronized\n  fullName: BlockingCollection<T>.ICollection.IsSynchronized\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: BlockingCollection<T>.ICollection.SyncRoot\n  fullName: BlockingCollection<T>.ICollection.SyncRoot\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: BlockingCollection<T>.IEnumerable.GetEnumerator()\n  fullName: BlockingCollection<T>.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTake\n  nameWithType: BlockingCollection<T>.TryTake\n  fullName: BlockingCollection<T>.TryTake\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: BlockingCollection<T>\n  nameWithType: BlockingCollection<T>.BlockingCollection<T>\n  fullName: BlockingCollection<T>.BlockingCollection<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.Add*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Add\n  nameWithType: BlockingCollection<T>.Add\n  fullName: BlockingCollection<T>.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: AddToAny\n  nameWithType: BlockingCollection<T>.AddToAny\n  fullName: BlockingCollection<T>.AddToAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: BoundedCapacity\n  nameWithType: BlockingCollection<T>.BoundedCapacity\n  fullName: BlockingCollection<T>.BoundedCapacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: CompleteAdding\n  nameWithType: BlockingCollection<T>.CompleteAdding\n  fullName: BlockingCollection<T>.CompleteAdding\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: CopyTo\n  nameWithType: BlockingCollection<T>.CopyTo\n  fullName: BlockingCollection<T>.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.Count*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Count\n  nameWithType: BlockingCollection<T>.Count\n  fullName: BlockingCollection<T>.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Dispose\n  nameWithType: BlockingCollection<T>.Dispose\n  fullName: BlockingCollection<T>.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: GetConsumingEnumerable\n  nameWithType: BlockingCollection<T>.GetConsumingEnumerable\n  fullName: BlockingCollection<T>.GetConsumingEnumerable\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: IsAddingCompleted\n  nameWithType: BlockingCollection<T>.IsAddingCompleted\n  fullName: BlockingCollection<T>.IsAddingCompleted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: IsCompleted\n  nameWithType: BlockingCollection<T>.IsCompleted\n  fullName: BlockingCollection<T>.IsCompleted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.Take*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: Take\n  nameWithType: BlockingCollection<T>.Take\n  fullName: BlockingCollection<T>.Take\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TakeFromAny\n  nameWithType: BlockingCollection<T>.TakeFromAny\n  fullName: BlockingCollection<T>.TakeFromAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: ToArray\n  nameWithType: BlockingCollection<T>.ToArray\n  fullName: BlockingCollection<T>.ToArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAdd\n  nameWithType: BlockingCollection<T>.TryAdd\n  fullName: BlockingCollection<T>.TryAdd\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryAddToAny\n  nameWithType: BlockingCollection<T>.TryAddToAny\n  fullName: BlockingCollection<T>.TryAddToAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: TryTakeFromAny\n  nameWithType: BlockingCollection<T>.TryTakeFromAny\n  fullName: BlockingCollection<T>.TryTakeFromAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  nameWithType: BlockingCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  fullName: BlockingCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: BlockingCollection<T>.System.Collections.ICollection.CopyTo\n  fullName: BlockingCollection<T>.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: BlockingCollection<T>.System.Collections.ICollection.IsSynchronized\n  fullName: BlockingCollection<T>.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: BlockingCollection<T>.System.Collections.ICollection.SyncRoot\n  fullName: BlockingCollection<T>.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Concurrent.BlockingCollection`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator\n  fullName: BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/BlockingCollection`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableArray\n  isExternal: false\n  name: ToImmutableArray<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableList\n  isExternal: false\n  name: ToImmutableList<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(IEnumerable<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>)\n  fullName: Extensions.Attributes(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)\n  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)\n  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodesAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>)\n  fullName: Extensions.Elements<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: InDocumentOrder<T>(IEnumerable<T>)\n  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Nodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)\n  fullName: Extensions.Nodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove(IEnumerable<XAttribute>)\n  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)\n  fullName: Extensions.Remove(IEnumerable<XAttribute>)\n- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove<T>(IEnumerable<T>)\n  nameWithType: Extensions.Remove<T>(IEnumerable<T>)\n  fullName: Extensions.Remove<T>(IEnumerable<T>)\n- uid: System.Collections.Generic.IReadOnlyCollection`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IReadOnlyCollection<T>\n  nameWithType: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}