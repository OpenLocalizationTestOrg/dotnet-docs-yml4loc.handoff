{"nodes":[{"content":"Provides a Message Queuing internal transaction.","nodes":[{"pos":[0,48],"content":"Provides a Message Queuing internal transaction.","nodes":[{"content":"Provides a Message Queuing internal transaction.","pos":[0,48]}]}],"pos":[850,899],"yaml":true},{"content":"To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> method that takes a `transaction` parameter. Messages sent as part of a transaction must be sent to transactional queues. Messages received from transactional queues must be received using a specified transaction.  \n  \n In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier. See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.  \n  \n Messages sent to transactional queues are removed if the transaction is committed. Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.  \n  \n If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates \"Wrong Transaction Usage.\"  \n  \n <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.  \n  \n```vb  \n<System.MTAThreadAttribute>  \n public sub Main()  \n```","nodes":[{"pos":[0,553],"content":"To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> method that takes a `transaction` parameter. Messages sent as part of a transaction must be sent to transactional queues. Messages received from transactional queues must be received using a specified transaction.","nodes":[{"content":"To send or receive a message as part of a transaction, you can use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> class to create a transaction and pass it to an overload of the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName&gt;</ph> method or the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName&gt;</ph> method that takes a <ph id=\"ph4\">`transaction`</ph> parameter.","pos":[0,384],"source":"To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> method that takes a `transaction` parameter."},{"content":"Messages sent as part of a transaction must be sent to transactional queues.","pos":[385,461]},{"content":"Messages received from transactional queues must be received using a specified transaction.","pos":[462,553]}]},{"pos":[560,944],"content":"In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier. See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.","nodes":[{"content":"In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier. See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.","pos":[0,384],"nodes":[{"content":"In addition to the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, you can receive messages with a specified identifier or specified correlation identifier.","pos":[0,164],"source":"In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier."},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;</ph> methods for more information about selectively receiving messages from transactional queues.","pos":[165,384],"source":" See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues."}]}]},{"pos":[951,1149],"content":"Messages sent to transactional queues are removed if the transaction is committed. Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.","nodes":[{"content":"Messages sent to transactional queues are removed if the transaction is committed. Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.","pos":[0,198],"nodes":[{"content":"Messages sent to transactional queues are removed if the transaction is committed.","pos":[0,82]},{"content":"Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.","pos":[83,198]}]}]},{"pos":[1156,1552],"content":"If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates \"Wrong Transaction Usage.\"","nodes":[{"content":"If you instantiate a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> and pass it to an applicable overload of the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;</ph> method or <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates \"Wrong Transaction Usage.\"","pos":[0,396],"source":"If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates \"Wrong Transaction Usage.\""}]},{"pos":[1559,2073],"content":"<xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> is threading apartment aware, so if your apartment state is <ph id=\"ph2\">`STA`</ph>, you cannot use the transaction in multiple threads.","pos":[0,166],"source":"<xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads."},{"content":"Visual Basic sets the state of the main thread to <ph id=\"ph1\">`STA`</ph>, so you must apply the <ph id=\"ph2\">&lt;xref:System.MTAThreadAttribute&gt;</ph> in the <ph id=\"ph3\">`Main`</ph> subroutine.","pos":[167,304],"source":" Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine."},{"content":"Otherwise, sending a transactional message using another thread throws a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueException&gt;</ph> exception.","pos":[305,434],"source":" Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception."},{"content":"You apply the <ph id=\"ph1\">&lt;xref:System.MTAThreadAttribute&gt;</ph> by using the following fragment.","pos":[435,514],"source":" You apply the <xref:System.MTAThreadAttribute> by using the following fragment."}]}],"pos":[910,3069],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> class.","nodes":[{"pos":[0,102],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> class."}],"pos":[4505,4608],"yaml":true},{"content":"This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.","nodes":[{"pos":[0,110],"content":"This constructor sets the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</ph> property to <ph id=\"ph2\">`Initialized`</ph>.","source":"This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`."}],"pos":[4619,4730],"yaml":true,"extradata":"MT"},{"content":"Rolls back the pending internal transaction.","nodes":[{"pos":[0,44],"content":"Rolls back the pending internal transaction.","nodes":[{"content":"Rolls back the pending internal transaction.","pos":[0,44]}]}],"pos":[5819,5864],"yaml":true},{"content":"<xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  \n  \n Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.  \n  \n <xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.","nodes":[{"pos":[0,180],"content":"<xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> marks the unsuccessful completion of a process begun at a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.","pos":[0,180],"source":"<xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>."}]},{"pos":[187,514],"content":"Typically, one makes a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> within a <ph id=\"ph2\">`Try...Catch`</ph> exception-handling block, putting a call to <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> in the <ph id=\"ph4\">`Try`</ph> clause, and a call to <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> in the <ph id=\"ph6\">`Catch`</ph> clause.","source":"Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause."},{"pos":[521,732],"content":"<xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.","nodes":[{"content":"<xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.","pos":[0,211],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> rolls back the entire transaction.","pos":[0,91],"source":"<xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction."},{"content":"This includes all messages sent or received after the call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.","pos":[92,211],"source":" This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>."}]}]}],"pos":[5875,6614],"yaml":true,"extradata":"MT"},{"content":"The internal transaction you are attempting to roll back has not started.","nodes":[{"pos":[0,73],"content":"The internal transaction you are attempting to roll back has not started.","nodes":[{"content":"The internal transaction you are attempting to roll back has not started.","pos":[0,73]}]}],"pos":[6862,6936],"yaml":true},{"content":"An internal Message Queuing error occurs.","nodes":[{"pos":[0,41],"content":"An internal Message Queuing error occurs.","nodes":[{"content":"An internal Message Queuing error occurs.","pos":[0,41]}]}],"pos":[7058,7100],"yaml":true},{"content":"Begins a new Message Queuing internal transaction.","nodes":[{"pos":[0,50],"content":"Begins a new Message Queuing internal transaction.","nodes":[{"content":"Begins a new Message Queuing internal transaction.","pos":[0,50]}]}],"pos":[8035,8086],"yaml":true},{"content":"<xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction. If an exception occurs during processing, the entire transaction is rolled back. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  \n  \n Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.","nodes":[{"pos":[0,371],"content":"<xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction. If an exception occurs during processing, the entire transaction is rolled back. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.","nodes":[{"content":"<xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction. If an exception occurs during processing, the entire transaction is rolled back. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.","pos":[0,371],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.","pos":[0,170],"source":"<xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction."},{"content":"If an exception occurs during processing, the entire transaction is rolled back.","pos":[171,251]},{"content":"This includes all messages sent or received after the call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.","pos":[252,371],"source":" This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>."}]}]},{"pos":[378,705],"content":"Typically, one makes a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> within a <ph id=\"ph2\">`Try...Catch`</ph> exception-handling block, putting a call to <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> in the <ph id=\"ph4\">`Try`</ph> clause, and a call to <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> in the <ph id=\"ph6\">`Catch`</ph> clause.","source":"Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause."}],"pos":[8097,8807],"yaml":true,"extradata":"MT"},{"content":"The transaction has already been started.","nodes":[{"pos":[0,41],"content":"The transaction has already been started.","nodes":[{"content":"The transaction has already been started.","pos":[0,41]}]}],"pos":[9055,9097],"yaml":true},{"content":"An internal Message Queuing error occurs.","nodes":[{"pos":[0,41],"content":"An internal Message Queuing error occurs.","nodes":[{"content":"An internal Message Queuing error occurs.","pos":[0,41]}]}],"pos":[9219,9261],"yaml":true},{"content":"Commits a pending internal transaction.","nodes":[{"pos":[0,39],"content":"Commits a pending internal transaction.","nodes":[{"content":"Commits a pending internal transaction.","pos":[0,39]}]}],"pos":[10202,10242],"yaml":true},{"content":"<xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>. If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  \n  \n Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.","nodes":[{"pos":[0,515],"content":"<xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>. If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.","nodes":[{"content":"<xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>. If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.","pos":[0,515],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> marks the successful completion of processing begun at a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.","pos":[0,180],"source":"<xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>."},{"content":"If an exception occurs between the call the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> and the call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph>, the entire transaction is rolled back.","pos":[181,395],"source":" If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back."},{"content":"This includes all messages sent or received after the call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.","pos":[396,515],"source":" This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>."}]}]},{"pos":[522,849],"content":"Typically, one makes a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> within a <ph id=\"ph2\">`Try...Catch`</ph> exception-handling block, putting a call to <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> in the <ph id=\"ph4\">`Try`</ph> clause, and a call to <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> in the <ph id=\"ph6\">`Catch`</ph> clause.","source":"Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause."}],"pos":[10253,11107],"yaml":true,"extradata":"MT"},{"content":"The transaction you are trying to commit has not started.","nodes":[{"pos":[0,57],"content":"The transaction you are trying to commit has not started.","nodes":[{"content":"The transaction you are trying to commit has not started.","pos":[0,57]}]}],"pos":[11357,11415],"yaml":true},{"content":"An internal Message Queuing error occurs.","nodes":[{"pos":[0,41],"content":"An internal Message Queuing error occurs.","nodes":[{"content":"An internal Message Queuing error occurs.","pos":[0,41]}]}],"pos":[11537,11579],"yaml":true},{"content":"Releases all resources used by the <xref href=\"System.Messaging.MessageQueueTransaction\"></xref>.","nodes":[{"pos":[0,97],"content":"Releases all resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph>.","source":"Releases all resources used by the <xref href=\"System.Messaging.MessageQueueTransaction\"></xref>."}],"pos":[12526,12624],"yaml":true},{"content":"Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  \n  \n Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.","nodes":[{"pos":[0,311],"content":"Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</ph> allows the resources used by the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> to be reallocated for other purposes.","pos":[0,185],"source":"Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.","pos":[186,311],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)."}]},{"pos":[318,430],"content":"Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.","nodes":[{"content":"Any pending internal transactions are rolled back by <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</ph>.","pos":[0,112],"source":"Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>."}]}],"pos":[12635,13070],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,153],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> and optionally releases the managed resources."}],"pos":[14231,14385],"yaml":true},{"content":"This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"pos":[0,338],"content":"This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,150],"source":"This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[151,254],"source":"`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[255,338],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[345,587],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> references.","pos":[0,174],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[175,242],"source":" This method invokes the `Dispose` method of each referenced object."}]}],"pos":[14396,14988],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[15142,15245],"yaml":true},{"content":"Releases the resources held by the current instance.","nodes":[{"pos":[0,52],"content":"Releases the resources held by the current instance.","nodes":[{"content":"Releases the resources held by the current instance.","pos":[0,52]}]}],"pos":[16277,16330],"yaml":true},{"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \n  \n For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).","nodes":[{"pos":[0,407],"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.","nodes":[{"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.","pos":[0,407],"nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;</ph>.","pos":[0,80],"source":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>."},{"content":"Application code should not call this method; an object's <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Finalize%2A&gt;</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id=\"ph2\">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt;</ph> method.","pos":[81,407],"source":" Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method."}]}]},{"pos":[414,737],"content":"For more information, see <bpt id=\"p1\">[</bpt>Finalize Methods and Destructors<ept id=\"p1\">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id=\"p2\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p2\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, and <bpt id=\"p3\">[</bpt>Overriding the Finalize Method<ept id=\"p3\">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.","source":"For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."}],"pos":[16341,17083],"yaml":true,"extradata":"MT"},{"content":"Gets the status of the transaction.","nodes":[{"pos":[0,35],"content":"Gets the status of the transaction.","nodes":[{"content":"Gets the status of the transaction.","pos":[0,35]}]}],"pos":[18171,18207],"yaml":true},{"content":"When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`. After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.","nodes":[{"pos":[0,490],"content":"When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`. After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.","nodes":[{"content":"When an instance of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> class has been created, the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</ph> is set by the constructor to <ph id=\"ph3\">`Initialized`</ph>.","pos":[0,201],"source":"When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`."},{"content":"After a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> but before a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>, the <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</ph> is <ph id=\"ph5\">`Pending`</ph>.","pos":[202,490],"source":" After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`."}]}],"pos":[18218,18709],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionStatus\"></xref> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.","nodes":[{"pos":[0,181],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionStatus\"&gt;&lt;/xref&gt;</ph> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionStatus\"></xref> values that indicates whether the transaction has been committed, aborted, initialized, or is pending."}],"pos":[18892,19074],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.MessageQueueTransaction\n  commentId: T:System.Messaging.MessageQueueTransaction\n  id: MessageQueueTransaction\n  children:\n  - System.Messaging.MessageQueueTransaction.#ctor\n  - System.Messaging.MessageQueueTransaction.Abort\n  - System.Messaging.MessageQueueTransaction.Begin\n  - System.Messaging.MessageQueueTransaction.Commit\n  - System.Messaging.MessageQueueTransaction.Dispose\n  - System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)\n  - System.Messaging.MessageQueueTransaction.Finalize\n  - System.Messaging.MessageQueueTransaction.Status\n  langs:\n  - csharp\n  name: MessageQueueTransaction\n  nameWithType: MessageQueueTransaction\n  fullName: System.Messaging.MessageQueueTransaction\n  type: Class\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Provides a Message Queuing internal transaction.\n  remarks: \"To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> method that takes a `transaction` parameter. Messages sent as part of a transaction must be sent to transactional queues. Messages received from transactional queues must be received using a specified transaction.  \\n  \\n In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier. See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.  \\n  \\n Messages sent to transactional queues are removed if the transaction is committed. Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.  \\n  \\n If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates \\\"Wrong Transaction Usage.\\\"  \\n  \\n <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.  \\n  \\n```vb  \\n<System.MTAThreadAttribute>  \\n public sub Main()  \\n```\"\n  syntax:\n    content: 'public class MessageQueueTransaction : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueueTransaction.#ctor\n  commentId: M:System.Messaging.MessageQueueTransaction.#ctor\n  id: '#ctor'\n  parent: System.Messaging.MessageQueueTransaction\n  langs:\n  - csharp\n  name: MessageQueueTransaction()\n  nameWithType: MessageQueueTransaction.MessageQueueTransaction()\n  fullName: MessageQueueTransaction.MessageQueueTransaction()\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> class.\n  remarks: This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.\n  syntax:\n    content: public MessageQueueTransaction ();\n    parameters: []\n  overload: System.Messaging.MessageQueueTransaction.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueueTransaction.Abort\n  commentId: M:System.Messaging.MessageQueueTransaction.Abort\n  id: Abort\n  parent: System.Messaging.MessageQueueTransaction\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: MessageQueueTransaction.Abort()\n  fullName: MessageQueueTransaction.Abort()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Rolls back the pending internal transaction.\n  remarks: \"<xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  \\n  \\n Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.  \\n  \\n <xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.\"\n  syntax:\n    content: public void Abort ();\n    parameters: []\n  overload: System.Messaging.MessageQueueTransaction.Abort*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The internal transaction you are attempting to roll back has not started.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An internal Message Queuing error occurs.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueueTransaction.Begin\n  commentId: M:System.Messaging.MessageQueueTransaction.Begin\n  id: Begin\n  parent: System.Messaging.MessageQueueTransaction\n  langs:\n  - csharp\n  name: Begin()\n  nameWithType: MessageQueueTransaction.Begin()\n  fullName: MessageQueueTransaction.Begin()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Begins a new Message Queuing internal transaction.\n  remarks: \"<xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction. If an exception occurs during processing, the entire transaction is rolled back. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  \\n  \\n Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.\"\n  syntax:\n    content: public void Begin ();\n    parameters: []\n  overload: System.Messaging.MessageQueueTransaction.Begin*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The transaction has already been started.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An internal Message Queuing error occurs.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueueTransaction.Commit\n  commentId: M:System.Messaging.MessageQueueTransaction.Commit\n  id: Commit\n  parent: System.Messaging.MessageQueueTransaction\n  langs:\n  - csharp\n  name: Commit()\n  nameWithType: MessageQueueTransaction.Commit()\n  fullName: MessageQueueTransaction.Commit()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Commits a pending internal transaction.\n  remarks: \"<xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>. If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back. This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.  \\n  \\n Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.\"\n  syntax:\n    content: public void Commit ();\n    parameters: []\n  overload: System.Messaging.MessageQueueTransaction.Commit*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The transaction you are trying to commit has not started.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An internal Message Queuing error occurs.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueueTransaction.Dispose\n  commentId: M:System.Messaging.MessageQueueTransaction.Dispose\n  id: Dispose\n  parent: System.Messaging.MessageQueueTransaction\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: MessageQueueTransaction.Dispose()\n  fullName: MessageQueueTransaction.Dispose()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Releases all resources used by the <xref href=\"System.Messaging.MessageQueueTransaction\"></xref>.\n  remarks: \"Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  \\n  \\n Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Messaging.MessageQueueTransaction.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)\n  commentId: M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Messaging.MessageQueueTransaction\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: MessageQueueTransaction.Dispose(Boolean)\n  fullName: MessageQueueTransaction.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references. This method invokes the `Dispose` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Messaging.MessageQueueTransaction.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueueTransaction.Finalize\n  commentId: M:System.Messaging.MessageQueueTransaction.Finalize\n  id: Finalize\n  parent: System.Messaging.MessageQueueTransaction\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: MessageQueueTransaction.Finalize()\n  fullName: MessageQueueTransaction.Finalize()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Releases the resources held by the current instance.\n  remarks: \"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \\n  \\n For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).\"\n  syntax:\n    content: ~MessageQueueTransaction ();\n    parameters: []\n  overload: System.Messaging.MessageQueueTransaction.Finalize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueueTransaction.Status\n  commentId: P:System.Messaging.MessageQueueTransaction.Status\n  id: Status\n  parent: System.Messaging.MessageQueueTransaction\n  langs:\n  - csharp\n  name: Status\n  nameWithType: MessageQueueTransaction.Status\n  fullName: MessageQueueTransaction.Status\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the status of the transaction.\n  remarks: When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`. After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.\n  syntax:\n    content: public System.Messaging.MessageQueueTransactionStatus Status { get; }\n    return:\n      type: System.Messaging.MessageQueueTransactionStatus\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionStatus\"></xref> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.\n  overload: System.Messaging.MessageQueueTransaction.Status*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Messaging.MessageQueueException\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueException\n  nameWithType: MessageQueueException\n  fullName: System.Messaging.MessageQueueException\n- uid: System.Messaging.MessageQueueTransaction.#ctor\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: MessageQueueTransaction()\n  nameWithType: MessageQueueTransaction.MessageQueueTransaction()\n  fullName: MessageQueueTransaction.MessageQueueTransaction()\n- uid: System.Messaging.MessageQueueTransaction.Abort\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Abort()\n  nameWithType: MessageQueueTransaction.Abort()\n  fullName: MessageQueueTransaction.Abort()\n- uid: System.Messaging.MessageQueueTransaction.Begin\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Begin()\n  nameWithType: MessageQueueTransaction.Begin()\n  fullName: MessageQueueTransaction.Begin()\n- uid: System.Messaging.MessageQueueTransaction.Commit\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Commit()\n  nameWithType: MessageQueueTransaction.Commit()\n  fullName: MessageQueueTransaction.Commit()\n- uid: System.Messaging.MessageQueueTransaction.Dispose\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Dispose()\n  nameWithType: MessageQueueTransaction.Dispose()\n  fullName: MessageQueueTransaction.Dispose()\n- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: MessageQueueTransaction.Dispose(Boolean)\n  fullName: MessageQueueTransaction.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Messaging.MessageQueueTransaction.Finalize\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Finalize()\n  nameWithType: MessageQueueTransaction.Finalize()\n  fullName: MessageQueueTransaction.Finalize()\n- uid: System.Messaging.MessageQueueTransaction.Status\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Status\n  nameWithType: MessageQueueTransaction.Status\n  fullName: MessageQueueTransaction.Status\n- uid: System.Messaging.MessageQueueTransactionStatus\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransactionStatus\n  nameWithType: MessageQueueTransactionStatus\n  fullName: System.Messaging.MessageQueueTransactionStatus\n- uid: System.Messaging.MessageQueueTransaction.#ctor*\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: MessageQueueTransaction\n  nameWithType: MessageQueueTransaction.MessageQueueTransaction\n  fullName: MessageQueueTransaction.MessageQueueTransaction\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n- uid: System.Messaging.MessageQueueTransaction.Abort*\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Abort\n  nameWithType: MessageQueueTransaction.Abort\n  fullName: MessageQueueTransaction.Abort\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n- uid: System.Messaging.MessageQueueTransaction.Begin*\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Begin\n  nameWithType: MessageQueueTransaction.Begin\n  fullName: MessageQueueTransaction.Begin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n- uid: System.Messaging.MessageQueueTransaction.Commit*\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Commit\n  nameWithType: MessageQueueTransaction.Commit\n  fullName: MessageQueueTransaction.Commit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n- uid: System.Messaging.MessageQueueTransaction.Dispose*\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Dispose\n  nameWithType: MessageQueueTransaction.Dispose\n  fullName: MessageQueueTransaction.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n- uid: System.Messaging.MessageQueueTransaction.Finalize*\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Finalize\n  nameWithType: MessageQueueTransaction.Finalize\n  fullName: MessageQueueTransaction.Finalize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n- uid: System.Messaging.MessageQueueTransaction.Status*\n  parent: System.Messaging.MessageQueueTransaction\n  isExternal: false\n  name: Status\n  nameWithType: MessageQueueTransaction.Status\n  fullName: MessageQueueTransaction.Status\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransaction.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}