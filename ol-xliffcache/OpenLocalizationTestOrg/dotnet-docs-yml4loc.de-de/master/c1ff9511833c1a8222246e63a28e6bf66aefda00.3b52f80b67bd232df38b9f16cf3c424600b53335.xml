{"nodes":[{"content":"Generates an event after a set interval, with an option to generate recurring events.","nodes":[{"pos":[0,85],"content":"Generates an event after a set interval, with an option to generate recurring events.","nodes":[{"content":"Generates an event after a set interval, with an option to generate recurring events.","pos":[0,85]}]}],"pos":[825,911],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed. You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property. Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed. You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Timers.Timer> class is available in the .NET Framework only. It is not included in the .NET Standard Library and is not available on other platforms, such as .NET Core or the Universal Windows Platform. On these platforms, as well as for portability across all .NET platforms, you should use the <xref:System.Threading.Timer?displayProperty=fullName> class instead.  \n  \n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n The server-based <xref:System.Timers.Timer?displayProperty=fullName> class is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.  \n  \n The <xref:System.Timers.Timer?displayProperty=fullName> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property. You can handle this event to perform the processing you need. For example, suppose that you have an online sales application that continuously posts sales orders to a database. The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually. You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.  \n  \n> [!IMPORTANT]\n>  The System.Timers.Timer class has the same resolution as the system clock. This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock. For more information, see the <xref:System.Timers.Timer.Interval%2A> property.  \n  \n When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=fullName> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed. To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.  \n  \n The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event. This behavior is subject to change in future releases of the .NET Framework. Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic). Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates. For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).  \n  \n [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]\n [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  \n  \n If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread. If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread. In this situation, the event handler should be reentrant.  \n  \n> [!NOTE]\n>  The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.  \n  \n Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.  \n  \n If you use the <xref:System.Timers.Timer?displayProperty=fullName> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.  \n  \n For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.  \n  \n> [!TIP]\n>  Be aware that the .NET Framework Class Library includes four classes named `Timer`, each of which offers different functionality:  \n>   \n>  -   <xref:System.Timers.Timer?displayProperty=fullName> (this topic): fires an event at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  \n> -   <xref:System.Threading.Timer?displayProperty=fullName>: executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  \n> -   <xref:System.Windows.Forms.Timer?displayProperty=fullName>: a Windows Forms component that fires an event at regular intervals. The component has no user interface and is designed for use in a single-threaded environment.  \n> -   <xref:System.Web.UI.Timer?displayProperty=fullName>: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.","nodes":[{"pos":[2,425],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,421],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)</ept>.","pos":[1,184],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[185,413],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[432,1423],"content":"The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed. You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property. Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed. You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.","nodes":[{"content":"The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed. You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property. Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed. You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.","pos":[0,991],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> component is a server-based timer that raises an <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event in your application after the number of milliseconds in the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property has elapsed.","pos":[0,241],"source":"The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed."},{"content":"You can configure the <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> object to raise the event just once or repeatedly using the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property.","pos":[242,400],"source":" You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property."},{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> object is declared at the class level so that it stays in scope as long as it is needed.","pos":[401,529],"source":" Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed."},{"content":"You can then handle its <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to provide regular processing.","pos":[530,625],"source":" You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing."},{"content":"For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.","pos":[626,730]},{"content":"You could create a service that uses a <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> object to periodically check the server and ensure that the system is up and running.","pos":[731,882],"source":" You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running."},{"content":"If the system is not responding, the service could attempt to restart the server or notify an administrator.","pos":[883,991]}]}]},{"pos":[1431,1829],"content":"[!IMPORTANT]\n The <xref:System.Timers.Timer> class is available in the .NET Framework only. It is not included in the .NET Standard Library and is not available on other platforms, such as .NET Core or the Universal Windows Platform. On these platforms, as well as for portability across all .NET platforms, you should use the <xref:System.Threading.Timer?displayProperty=fullName> class instead.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Timers.Timer> class is available in the .NET Framework only. It is not included in the .NET Standard Library and is not available on other platforms, such as .NET Core or the Universal Windows Platform. On these platforms, as well as for portability across all .NET platforms, you should use the <xref:System.Threading.Timer?displayProperty=fullName> class instead.","pos":[13,396],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> class is available in the .NET Framework only.","pos":[1,78],"source":" The <xref:System.Timers.Timer> class is available in the .NET Framework only."},{"content":"It is not included in the .NET Standard Library and is not available on other platforms, such as .NET Core or the Universal Windows Platform.","pos":[79,220]},{"content":"On these platforms, as well as for portability across all .NET platforms, you should use the <ph id=\"ph1\">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph> class instead.","pos":[221,383],"source":" On these platforms, as well as for portability across all .NET platforms, you should use the <xref:System.Threading.Timer?displayProperty=fullName> class instead."}]}]},{"pos":[1836,2346],"content":"This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[0,61],"source":"This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[62,156]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[157,268],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[269,376],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[377,510],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]},{"pos":[2353,2676],"content":"The server-based <xref:System.Timers.Timer?displayProperty=fullName> class is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.","nodes":[{"content":"The server-based <xref:System.Timers.Timer?displayProperty=fullName> class is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.","pos":[0,323],"nodes":[{"content":"The server-based <ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> class is designed for use with worker threads in a multithreaded environment.","pos":[0,146],"source":"The server-based <xref:System.Timers.Timer?displayProperty=fullName> class is designed for use with worker threads in a multithreaded environment."},{"content":"Server timers can move among threads to handle the raised <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, resulting in more accuracy than Windows timers in raising the event on time.","pos":[147,323],"source":" Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time."}]}]},{"pos":[2683,3296],"content":"The <xref:System.Timers.Timer?displayProperty=fullName> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property. You can handle this event to perform the processing you need. For example, suppose that you have an online sales application that continuously posts sales orders to a database. The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually. You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.","nodes":[{"content":"The <xref:System.Timers.Timer?displayProperty=fullName> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property. You can handle this event to perform the processing you need. For example, suppose that you have an online sales application that continuously posts sales orders to a database. The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually. You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.","pos":[0,613],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> component raises the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, based on the value (in milliseconds) of the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.","pos":[0,211],"source":"The <xref:System.Timers.Timer?displayProperty=fullName> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property."},{"content":"You can handle this event to perform the processing you need.","pos":[212,273]},{"content":"For example, suppose that you have an online sales application that continuously posts sales orders to a database.","pos":[274,388]},{"content":"The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.","pos":[389,522]},{"content":"You could use a <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> to start the batch processing every 30 minutes.","pos":[523,613],"source":" You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes."}]}]},{"pos":[3304,3709],"content":"[!IMPORTANT]\n The System.Timers.Timer class has the same resolution as the system clock. This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock. For more information, see the <xref:System.Timers.Timer.Interval%2A> property.","leadings":["","> "],"nodes":[{"content":" The System.Timers.Timer class has the same resolution as the system clock. This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock. For more information, see the <xref:System.Timers.Timer.Interval%2A> property.","pos":[13,403],"nodes":[{"content":"The System.Timers.Timer class has the same resolution as the system clock.","pos":[1,75]},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.","pos":[76,311],"source":" This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.","pos":[312,390],"source":" For more information, see the <xref:System.Timers.Timer.Interval%2A> property."}]}]},{"pos":[3716,4196],"content":"When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=fullName> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed. To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id=\"ph2\">`false`</ph>, a <ph id=\"ph3\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> object raises the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, after the first <ph id=\"ph5\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> has elapsed.","pos":[0,255],"source":"When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=fullName> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed."},{"content":"To keep raising the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event regularly at the interval defined by the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, set <ph id=\"ph3\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> to <ph id=\"ph4\">`true`</ph>, which is the default value.","pos":[256,480],"source":" To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value."}]},{"pos":[4203,4901],"content":"The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event. This behavior is subject to change in future releases of the .NET Framework. Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic). Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates. For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.","pos":[0,153],"source":"The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event."},{"content":"This behavior is subject to change in future releases of the .NET Framework.","pos":[154,230]},{"content":"Note, however, that this is not true of event handlers that execute asynchronously and include the <ph id=\"ph1\">`await`</ph> operator (in C#)  or the <ph id=\"ph2\">`Await`</ph> operator (in Visual Basic).","pos":[231,398],"source":" Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic)."},{"content":"Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.","pos":[399,521]},{"content":"For more information on exceptions thrown in asynchronous methods, see   <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","pos":[522,698],"source":" For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}]},{"pos":[4908,5173],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Timers.Timer#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Timers.Timer#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]\n [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]"},{"pos":[5180,5623],"content":"If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread. If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread. In this situation, the event handler should be reentrant.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id=\"ph4\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.","pos":[0,179],"source":"If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread."},{"content":"If processing of the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id=\"ph3\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.","pos":[180,385],"source":" If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread."},{"content":"In this situation, the event handler should be reentrant.","pos":[386,443]}]},{"pos":[5631,6069],"content":"[!NOTE]\n The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.","leadings":["","> "],"nodes":[{"content":" The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.","pos":[8,436],"nodes":[{"content":"The event-handling method might run on one thread at the same time that another thread calls the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id=\"ph3\">`false`</ph>.","pos":[1,210],"source":" The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`."},{"content":"This might result in the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.","pos":[211,317],"source":" This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped."},{"content":"The example code for the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.","pos":[318,428],"source":" The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition."}]}]},{"pos":[6076,6686],"content":"Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.","nodes":[{"content":"Even if <ph id=\"ph1\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id=\"ph6\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id=\"ph7\">`false`</ph>, because the signal to raise the <ph id=\"ph8\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.","pos":[0,447],"source":"Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread."},{"content":"One way to resolve this race condition is to set a flag that tells the event handler for the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.","pos":[448,610],"source":" One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events."}]},{"pos":[6693,7081],"content":"If you use the <xref:System.Timers.Timer?displayProperty=fullName> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.","nodes":[{"content":"If you use the <ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <ph id=\"ph2\">&lt;xref:System.Timers.Timer&gt;</ph> to the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property, so that the event is marshaled to the user interface thread.","pos":[0,388],"source":"If you use the <xref:System.Timers.Timer?displayProperty=fullName> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread."}]},{"pos":[7088,7231],"content":"For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.","nodes":[{"content":"For a list of default property values for an instance of <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph>, see the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.%23ctor%2A&gt;</ph> constructor.","pos":[0,143],"source":"For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor."}]},{"pos":[7239,7378],"content":"[!TIP]\n Be aware that the .NET Framework Class Library includes four classes named `Timer`, each of which offers different functionality:","leadings":["","> "],"nodes":[{"content":"Be aware that the .NET Framework Class Library includes four classes named <ph id=\"ph1\">`Timer`</ph>, each of which offers different functionality:","pos":[8,137],"source":" Be aware that the .NET Framework Class Library includes four classes named `Timer`, each of which offers different functionality:"}]},{"pos":[7393,7652],"content":"<xref:System.Timers.Timer?displayProperty=fullName> (this topic): fires an event at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","nodes":[{"content":"<xref:System.Timers.Timer?displayProperty=fullName> (this topic): fires an event at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","pos":[0,259],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> (this topic): fires an event at regular intervals.","pos":[0,102],"source":"<xref:System.Timers.Timer?displayProperty=fullName> (this topic): fires an event at regular intervals."},{"content":"The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","pos":[103,259]}]}]},{"pos":[7661,8107],"content":"<xref:System.Threading.Timer?displayProperty=fullName>: executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","nodes":[{"content":"<xref:System.Threading.Timer?displayProperty=fullName>: executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","pos":[0,446],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph>: executes a single callback method on a thread pool thread at regular intervals.","pos":[0,135],"source":"<xref:System.Threading.Timer?displayProperty=fullName>: executes a single callback method on a thread pool thread at regular intervals."},{"content":"The callback method is defined when the timer is instantiated and cannot be changed.","pos":[136,220]},{"content":"Like the <ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","pos":[221,446],"source":" Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime."}]}]},{"pos":[8116,8337],"content":"<xref:System.Windows.Forms.Timer?displayProperty=fullName>: a Windows Forms component that fires an event at regular intervals. The component has no user interface and is designed for use in a single-threaded environment.","nodes":[{"content":"<xref:System.Windows.Forms.Timer?displayProperty=fullName>: a Windows Forms component that fires an event at regular intervals. The component has no user interface and is designed for use in a single-threaded environment.","pos":[0,221],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;</ph>: a Windows Forms component that fires an event at regular intervals.","pos":[0,127],"source":"<xref:System.Windows.Forms.Timer?displayProperty=fullName>: a Windows Forms component that fires an event at regular intervals."},{"content":"The component has no user interface and is designed for use in a single-threaded environment.","pos":[128,221]}]}]},{"pos":[8346,8503],"content":"<xref:System.Web.UI.Timer?displayProperty=fullName>: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Web.UI.Timer?displayProperty=fullName&gt;</ph>: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.","pos":[0,157],"source":"<xref:System.Web.UI.Timer?displayProperty=fullName>: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval."}]}],"pos":[922,9471],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Timers.Timer\"></xref> class, and sets all the properties to their initial values.","nodes":[{"pos":[0,134],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> class, and sets all the properties to their initial values.","source":"Initializes a new instance of the <xref href=\"System.Timers.Timer\"></xref> class, and sets all the properties to their initial values."}],"pos":[12382,12517],"yaml":true},{"content":"The following table shows initial property values for an instance of <xref:System.Timers.Timer>.  \n  \n|Property|Initial value|  \n|--------------|-------------------|  \n|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  \n|<xref:System.Timers.Timer.Enabled%2A>|`false`|  \n|<xref:System.Timers.Timer.Interval%2A>|100 milliseconds|  \n|<xref:System.Timers.Timer.SynchronizingObject%2A>|A null reference (`Nothing` in Visual Basic).|","nodes":[{"pos":[0,96],"content":"The following table shows initial property values for an instance of <xref:System.Timers.Timer>.","nodes":[{"content":"The following table shows initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph>.","pos":[0,96],"source":"The following table shows initial property values for an instance of <xref:System.Timers.Timer>."}]},{"pos":[103,111],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[112,125],"content":"Initial value","nodes":[{"content":"Initial value","pos":[0,13]}]},{"pos":[169,208],"content":"<xref:System.Timers.Timer.AutoReset%2A>","nodes":[]},{"pos":[220,257],"content":"<xref:System.Timers.Timer.Enabled%2A>","nodes":[]},{"pos":[270,308],"content":"<xref:System.Timers.Timer.Interval%2A>","nodes":[]},{"pos":[309,325],"content":"100 milliseconds","nodes":[{"content":"100 milliseconds","pos":[0,16]}]},{"pos":[330,379],"content":"<xref:System.Timers.Timer.SynchronizingObject%2A>","nodes":[]},{"pos":[380,425],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."}],"pos":[12528,12964],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Timers.Timer\"></xref> class, and sets the <xref href=\"System.Timers.Timer.Interval\"></xref> property to the specified number of milliseconds.","nodes":[{"pos":[0,194],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> class, and sets the <ph id=\"ph2\">&lt;xref href=\"System.Timers.Timer.Interval\"&gt;&lt;/xref&gt;</ph> property to the specified number of milliseconds.","source":"Initializes a new instance of the <xref href=\"System.Timers.Timer\"></xref> class, and sets the <xref href=\"System.Timers.Timer.Interval\"></xref> property to the specified number of milliseconds."}],"pos":[15009,15204],"yaml":true},{"content":"This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.","nodes":[{"pos":[0,131],"content":"This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.","nodes":[{"content":"This constructor sets the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property of the new timer instance, but does not enable the timer.","pos":[0,131],"source":"This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer."}]}],"pos":[15215,15347],"yaml":true,"extradata":"MT"},{"content":"The time, in milliseconds, between events. The value must be greater than zero and less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,148],"content":"The time, in milliseconds, between events. The value must be greater than zero and less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"content":"The time, in milliseconds, between events.","pos":[0,42]},{"content":"The value must be greater than zero and less than or equal to <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","pos":[43,148],"source":" The value must be greater than zero and less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>."}]}],"pos":[16181,16330],"yaml":true},{"content":"The value of the <code>interval</code> parameter is less than or equal to zero, or greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,139],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">interval</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to zero, or greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The value of the <code>interval</code> parameter is less than or equal to zero, or greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[16477,16617],"yaml":true},{"content":"Gets or sets a Boolean indicating whether the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event only once (`false`) or repeatedly (`true`).","nodes":[{"pos":[0,202],"content":"Gets or sets a Boolean indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> should raise the <ph id=\"ph2\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event only once (<ph id=\"ph3\">`false`</ph>) or repeatedly (<ph id=\"ph4\">`true`</ph>).","source":"Gets or sets a Boolean indicating whether the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event only once (`false`) or repeatedly (`true`)."}],"pos":[17695,17898],"yaml":true},{"content":"If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset. If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.  \n  \n Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.","nodes":[{"pos":[0,290],"content":"If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset. If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> is already enabled when the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method is called, the interval is reset.","pos":[0,138],"source":"If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.","pos":[139,290],"source":" If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again."}]},{"pos":[297,818],"content":"Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.","nodes":[{"content":"Resetting the interval affects when the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised.","pos":[0,91],"source":"Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised."},{"content":"For example, if you set the interval to 5 seconds and then set the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>, the count starts at the time <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.","pos":[92,291],"source":" For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set."},{"content":"If you reset the interval to 10 seconds when the count is 3 seconds, the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property was set to <ph id=\"ph3\">`true`</ph>.","pos":[292,521],"source":" If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`."}]}],"pos":[17909,18732],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event each time the interval elapses; `false` if it should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event only once, after the first time the interval elapses. The default is `true`.","nodes":[{"pos":[0,321],"content":"`true` if the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event each time the interval elapses; `false` if it should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event only once, after the first time the interval elapses. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> should raise the <ph id=\"ph3\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event each time the interval elapses; <ph id=\"ph4\">`false`</ph> if it should raise the <ph id=\"ph5\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event only once, after the first time the interval elapses.","pos":[0,298],"source":"`true` if the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event each time the interval elapses; `false` if it should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event only once, after the first time the interval elapses."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[299,321],"source":" The default is `true`."}]}],"pos":[19616,19940],"yaml":true},{"content":"Begins the run-time initialization of a <xref href=\"System.Timers.Timer\"></xref> that is used on a form or by another component.","nodes":[{"pos":[0,128],"content":"Begins the run-time initialization of a <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> that is used on a form or by another component.","source":"Begins the run-time initialization of a <xref href=\"System.Timers.Timer\"></xref> that is used on a form or by another component."}],"pos":[21147,21276],"yaml":true},{"content":"The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component. The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization. Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.","nodes":[{"pos":[0,425],"content":"The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component. The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization. Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.","nodes":[{"content":"The <ph id=\"ph1\">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to start the initialization of a component that is used on a form or by another component.","pos":[0,182],"source":"The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> method ends the initialization.","pos":[183,256],"source":" The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization."},{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.","pos":[257,425],"source":" Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized."}]}],"pos":[21287,21713],"yaml":true,"extradata":"MT"},{"content":"Releases the resources used by the <xref href=\"System.Timers.Timer\"></xref>.","nodes":[{"pos":[0,76],"content":"Releases the resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph>.","source":"Releases the resources used by the <xref href=\"System.Timers.Timer\"></xref>."}],"pos":[22899,22976],"yaml":true},{"content":"The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.","nodes":[{"pos":[0,82],"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Close%2A&gt;</ph> method in turn calls the <ph id=\"ph2\">`Dispose`</ph> method.","source":"The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method."}],"pos":[22987,23070],"yaml":true,"extradata":"MT"},{"content":"Releases all resources used by the current <xref href=\"System.Timers.Timer\"></xref>.","nodes":[{"pos":[0,84],"content":"Releases all resources used by the current <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph>.","source":"Releases all resources used by the current <xref href=\"System.Timers.Timer\"></xref>."}],"pos":[24329,24414],"yaml":true},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[24569,24672],"yaml":true},{"content":"Occurs when the interval elapses.","nodes":[{"pos":[0,33],"content":"Occurs when the interval elapses.","nodes":[{"content":"Occurs when the interval elapses.","pos":[0,33]}]}],"pos":[25793,25827],"yaml":true},{"content":"The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses. If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.  \n  \n If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.  \n  \n If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread. If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread. In this situation, the event handler should be reentrant.  \n  \n> [!NOTE]\n>  The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.  \n  \n Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.  \n  \n The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event. This behavior is subject to change in future releases of the .NET Framework.","nodes":[{"pos":[0,522],"content":"The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses. If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised if the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is <ph id=\"ph3\">`true`</ph> and the time interval (in milliseconds) defined by the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property elapses.","pos":[0,230],"source":"The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, the event is raised repeatedly at an interval defined by the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property; otherwise, the event is raised only once, the first time the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> value elapses.","pos":[231,522],"source":" If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses."}]},{"pos":[529,1047],"content":"If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> is set after the <ph id=\"ph2\">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.","pos":[0,118],"source":"If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset."},{"content":"For example, if you set the interval to 5 seconds and then set <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph>, the count starts at the time <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.","pos":[119,305],"source":" For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set."},{"content":"If you reset the interval to 10 seconds when count is 3 seconds, the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id=\"ph3\">`true`</ph>.","pos":[306,518],"source":" If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`."}]},{"pos":[1054,1500],"content":"If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread. If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread. In this situation, the event handler should be reentrant.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>,the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id=\"ph4\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.","pos":[0,178],"source":"If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread."},{"content":"If the processing of the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id=\"ph3\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.","pos":[179,388],"source":" If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread."},{"content":"In this situation, the event handler should be reentrant.","pos":[389,446]}]},{"pos":[1508,1946],"content":"[!NOTE]\n The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.","leadings":["","> "],"nodes":[{"content":" The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.","pos":[8,436],"nodes":[{"content":"The event-handling method might run on one thread at the same time that another thread calls the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id=\"ph3\">`false`</ph>.","pos":[1,210],"source":" The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`."},{"content":"This might result in the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.","pos":[211,317],"source":" This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped."},{"content":"The example code for the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.","pos":[318,428],"source":" The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition."}]}]},{"pos":[1953,2563],"content":"Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.","nodes":[{"content":"Even if <ph id=\"ph1\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id=\"ph6\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id=\"ph7\">`false`</ph>, because the signal to raise the <ph id=\"ph8\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.","pos":[0,447],"source":"Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread."},{"content":"One way to resolve this race condition is to set a flag that tells the event handler for the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.","pos":[448,610],"source":" One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events."}]},{"pos":[2570,2800],"content":"The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event. This behavior is subject to change in future releases of the .NET Framework.","nodes":[{"content":"The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event. This behavior is subject to change in future releases of the .NET Framework.","pos":[0,230],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.","pos":[0,153],"source":"The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event."},{"content":"This behavior is subject to change in future releases of the .NET Framework.","pos":[154,230]}]}]}],"pos":[25838,28652],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a value indicating whether the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event.","nodes":[{"pos":[0,157],"content":"Gets or sets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> should raise the <ph id=\"ph2\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event.","source":"Gets or sets a value indicating whether the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event."}],"pos":[30852,31010],"yaml":true},{"content":"Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.  \n  \n> [!NOTE]\n>  The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`. The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.  \n  \n If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.  \n  \n If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.  \n  \n> [!NOTE]\n>  Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.","nodes":[{"pos":[0,237],"content":"Setting <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> is the same as calling <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>, while setting <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id=\"ph5\">`false`</ph> is the same as calling <ph id=\"ph6\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>.","source":"Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>."},{"pos":[245,671],"content":"[!NOTE]\n The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`. The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.","leadings":["","> "],"nodes":[{"content":" The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`. The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.","pos":[8,424],"nodes":[{"content":"The signal to raise the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.","pos":[1,144],"source":" The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread."},{"content":"This might result in the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is set to <ph id=\"ph3\">`false`</ph>.","pos":[145,299],"source":" This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`."},{"content":"The code example for the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to work around this race condition.","pos":[300,416],"source":" The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition."}]}]},{"pos":[678,929],"content":"If <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id=\"ph2\">`true`</ph> and <ph id=\"ph3\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id=\"ph4\">`false`</ph>, the <ph id=\"ph5\">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id=\"ph6\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.","source":"If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses."},{"pos":[936,1441],"content":"If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.","nodes":[{"content":"If the interval is set after the <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.","pos":[0,92],"source":"If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset."},{"content":"For example, if you set the interval to 5 seconds and then set the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>, the count starts at the time <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.","pos":[93,292],"source":" For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set."},{"content":"If you reset the interval to 10 seconds when count is 3 seconds, the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id=\"ph3\">`true`</ph>.","pos":[293,505],"source":" If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`."}]},{"pos":[1449,1638],"content":"[!NOTE]\n Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.","leadings":["","> "],"nodes":[{"content":"Some visual designers, such as those in Microsoft Visual Studio, set the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph> when inserting a new <ph id=\"ph3\">&lt;xref:System.Timers.Timer&gt;</ph>.","pos":[9,187],"source":" Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>."}]}],"pos":[31021,32672],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,171],"content":"`true` if the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> should raise the <ph id=\"ph3\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event; otherwise, <ph id=\"ph4\">`false`</ph>.","pos":[0,147],"source":"`true` if the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[148,171],"source":" The default is `false`."}]}],"pos":[33720,33894],"yaml":true},{"content":"This property cannot be set because the timer has been disposed.","nodes":[{"pos":[0,64],"content":"This property cannot be set because the timer has been disposed.","nodes":[{"content":"This property cannot be set because the timer has been disposed.","pos":[0,64]}]}],"pos":[34055,34120],"yaml":true},{"content":"The <xref href=\"System.Timers.Timer.Interval\"></xref> property was set to a value greater than <xref href=\"System.Int32.MaxValue\"></xref> before the timer was enabled.","nodes":[{"pos":[0,167],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer.Interval\"&gt;&lt;/xref&gt;</ph> property was set to a value greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph> before the timer was enabled.","source":"The <xref href=\"System.Timers.Timer.Interval\"></xref> property was set to a value greater than <xref href=\"System.Int32.MaxValue\"></xref> before the timer was enabled."}],"pos":[34214,34382],"yaml":true},{"content":"Ends the run-time initialization of a <xref href=\"System.Timers.Timer\"></xref> that is used on a form or by another component.","nodes":[{"pos":[0,126],"content":"Ends the run-time initialization of a <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> that is used on a form or by another component.","source":"Ends the run-time initialization of a <xref href=\"System.Timers.Timer\"></xref> that is used on a form or by another component."}],"pos":[35517,35644],"yaml":true},{"content":"The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component. The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization. Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.","nodes":[{"pos":[0,427],"content":"The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component. The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization. Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.","nodes":[{"content":"The <ph id=\"ph1\">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to end the initialization of a component that is used on a form or by another component.","pos":[0,180],"source":"The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> method starts the initialization.","pos":[181,258],"source":" The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization."},{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.","pos":[259,427],"source":" Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized."}]}],"pos":[35655,36083],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the interval, expressed in milliseconds, at which to raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event.","nodes":[{"pos":[0,131],"content":"Gets or sets the interval, expressed in milliseconds, at which to raise the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event.","source":"Gets or sets the interval, expressed in milliseconds, at which to raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event."}],"pos":[37279,37411],"yaml":true},{"content":"You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired. Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock. This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock. The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds. When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.  \n  \n [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]\n [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  \n  \n You can use the following code to determine the resolution of the system clock on the current system:  \n  \n [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]\n [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  \n  \n If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](http://msdn.microsoft.com/library/aa964692.aspx).  \n  \n If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.  \n  \n If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses. <xref:System.Timers.Timer.Enabled%2A> is then set to `false`.  \n  \n> [!NOTE]\n>  If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`. To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.","nodes":[{"pos":[0,823],"content":"You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired. Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock. This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock. The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds. When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.","nodes":[{"content":"You use the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to determine the frequency at which the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is fired.","pos":[0,150],"source":"You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> class depends on the system clock, it has the same resolution as the system clock.","pos":[151,272],"source":" Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.","pos":[273,508],"source":" This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock."},{"content":"The following example sets the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to 5 milliseconds.","pos":[509,606],"source":" The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds."},{"content":"When run on a <ph id=\"ph1\">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.","pos":[607,823],"source":" When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds."}]},{"pos":[830,1119],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Timers.Timer.Interval#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Timers.Timer.Interval#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]\n [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]"},{"pos":[1126,1227],"content":"You can use the following code to determine the resolution of the system clock on the current system:","nodes":[{"content":"You can use the following code to determine the resolution of the system clock on the current system:","pos":[0,101]}]},{"pos":[1234,1527],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Timers.Timer.Interval#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Timers.Timer.Interval#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]\n [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]"},{"pos":[1534,1789],"content":"If your app requires greater resolution than that offered by the <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> class or the system clock, use the high-resolution multimedia timers; see <bpt id=\"p1\">[</bpt>How to: Use the High-Resolution Timer<ept id=\"p1\">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>.","source":"If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](http://msdn.microsoft.com/library/aa964692.aspx)."},{"pos":[1796,2301],"content":"If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.","nodes":[{"content":"If the interval is set after the <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.","pos":[0,92],"source":"If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset."},{"content":"For example, if you set the interval to 5 seconds and then set the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>, the count starts at the time <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.","pos":[93,292],"source":" For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set."},{"content":"If you reset the interval to 10 seconds when count is 3 seconds, the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id=\"ph3\">`true`</ph>.","pos":[293,505],"source":" If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`."}]},{"pos":[2308,2621],"content":"If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses. <xref:System.Timers.Timer.Enabled%2A> is then set to `false`.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id=\"ph2\">`true`</ph> and <ph id=\"ph3\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id=\"ph4\">`false`</ph>, the <ph id=\"ph5\">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id=\"ph6\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.","pos":[0,251],"source":"If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses."},{"content":"<ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is then set to <ph id=\"ph2\">`false`</ph>.","pos":[252,313],"source":" <xref:System.Timers.Timer.Enabled%2A> is then set to `false`."}]},{"pos":[2629,3316],"content":"[!NOTE]\n If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`. To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.","leadings":["","> "],"nodes":[{"content":" If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`. To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.","pos":[8,685],"nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> are both set to <ph id=\"ph3\">`false`</ph>, and the timer has previously been enabled, setting the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property causes the <ph id=\"ph5\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be raised once, as if the <ph id=\"ph6\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property had been set to <ph id=\"ph7\">`true`</ph>.","pos":[1,365],"source":" If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`."},{"content":"To set the interval without raising the event, you can temporarily set the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>, set the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to the desired time interval, and then immediately set the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property back to <ph id=\"ph5\">`false`</ph>.","pos":[366,677],"source":" To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`."}]}]}],"pos":[37422,40758],"yaml":true,"extradata":"MT"},{"content":"The time, in milliseconds, between <xref href=\"System.Timers.Timer.Elapsed\"></xref> events. The value must be greater than zero, and less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>. The default is 100 milliseconds.","nodes":[{"pos":[0,231],"content":"The time, in milliseconds, between <xref href=\"System.Timers.Timer.Elapsed\"></xref> events. The value must be greater than zero, and less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>. The default is 100 milliseconds.","nodes":[{"content":"The time, in milliseconds, between <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> events.","pos":[0,91],"source":"The time, in milliseconds, between <xref href=\"System.Timers.Timer.Elapsed\"></xref> events."},{"content":"The value must be greater than zero, and less than or equal to <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","pos":[92,198],"source":" The value must be greater than zero, and less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>."},{"content":"The default is 100 milliseconds.","pos":[199,231]}]}],"pos":[41833,42065],"yaml":true},{"content":"The interval is less than or equal to zero.  \n  \n -or-  \n  \n The interval is greater than <xref href=\"System.Int32.MaxValue\"></xref>, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)","nodes":[{"pos":[0,43],"content":"The interval is less than or equal to zero.","nodes":[{"content":"The interval is less than or equal to zero.","pos":[0,43]}]},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,259],"content":"The interval is greater than <xref href=\"System.Int32.MaxValue\"></xref>, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)","nodes":[{"content":"The interval is greater than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>, and the timer is currently enabled.","pos":[0,108],"source":"The interval is greater than <xref href=\"System.Int32.MaxValue\"></xref>, and the timer is currently enabled."},{"content":"(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)","pos":[109,198]}]}],"pos":[42215,42483],"yaml":true},{"content":"Gets or sets the site that binds the <xref href=\"System.Timers.Timer\"></xref> to its container in design mode.","nodes":[{"pos":[0,110],"content":"Gets or sets the site that binds the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> to its container in design mode.","source":"Gets or sets the site that binds the <xref href=\"System.Timers.Timer\"></xref> to its container in design mode."}],"pos":[43654,43765],"yaml":true},{"content":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.","nodes":[{"pos":[0,205],"content":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.","nodes":[{"content":"Sites bind a <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.ComponentModel.Container&gt;</ph> and enable communication between them, as well as providing a way for the container to manage its components.","pos":[0,205],"source":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components."}]}],"pos":[43776,43982],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.ComponentModel.ISite\"></xref> interface representing the site that binds the <xref href=\"System.Timers.Timer\"></xref> object to its container.","nodes":[{"pos":[0,164],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ISite\"&gt;&lt;/xref&gt;</ph> interface representing the site that binds the <ph id=\"ph2\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> object to its container.","source":"An <xref href=\"System.ComponentModel.ISite\"></xref> interface representing the site that binds the <xref href=\"System.Timers.Timer\"></xref> object to its container."}],"pos":[44139,44304],"yaml":true},{"content":"Starts raising the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event by setting <xref href=\"System.Timers.Timer.Enabled\"></xref> to `true`.","nodes":[{"pos":[0,144],"content":"Starts raising the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event by setting <ph id=\"ph2\">&lt;xref href=\"System.Timers.Timer.Enabled\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`true`</ph>.","source":"Starts raising the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event by setting <xref href=\"System.Timers.Timer.Enabled\"></xref> to `true`."}],"pos":[45417,45562],"yaml":true},{"content":"If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses. If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.  \n  \n You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.  \n  \n> [!NOTE]\n>  If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.  \n  \n A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.","nodes":[{"pos":[0,525],"content":"If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses. If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id=\"ph2\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id=\"ph3\">`false`</ph>, the <ph id=\"ph4\">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id=\"ph5\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.","pos":[0,242],"source":"If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id=\"ph2\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph>, the <ph id=\"ph4\">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id=\"ph5\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event the first time the interval elapses and continues to raise the event on the specified interval.","pos":[243,525],"source":" If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval."}]},{"pos":[532,617],"content":"You can also start timing by setting <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph>.","source":"You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`."},{"pos":[625,787],"content":"[!NOTE]\n If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.","leadings":["","> "],"nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.","pos":[9,160],"source":" If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again."}]},{"pos":[794,891],"content":"A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.","nodes":[{"content":"A call to the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method when the timer is enabled has no effect.","pos":[0,97],"source":"A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect."}]}],"pos":[45573,46474],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Timers.Timer\"></xref> is created with an interval equal to or greater than <xref href=\"System.Int32.MaxValue\"></xref> + 1, or set to an interval less than zero.","nodes":[{"pos":[0,183],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> is created with an interval equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph> + 1, or set to an interval less than zero.","source":"The <xref href=\"System.Timers.Timer\"></xref> is created with an interval equal to or greater than <xref href=\"System.Int32.MaxValue\"></xref> + 1, or set to an interval less than zero."}],"pos":[46705,46889],"yaml":true},{"content":"Stops raising the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event by setting <xref href=\"System.Timers.Timer.Enabled\"></xref> to `false`.","nodes":[{"pos":[0,144],"content":"Stops raising the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event by setting <ph id=\"ph2\">&lt;xref href=\"System.Timers.Timer.Enabled\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`false`</ph>.","source":"Stops raising the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event by setting <xref href=\"System.Timers.Timer.Enabled\"></xref> to `false`."}],"pos":[47941,48086],"yaml":true},{"content":"You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.  \n  \n> [!NOTE]\n>  The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called. The code example in the next section shows one way to work around this race condition.","nodes":[{"pos":[0,85],"content":"You can also stop timing by setting <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id=\"ph2\">`false`</ph>.","source":"You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`."},{"pos":[93,631],"content":"[!NOTE]\n The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called. The code example in the next section shows one way to work around this race condition.","leadings":["","> "],"nodes":[{"content":" The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called. The code example in the next section shows one way to work around this race condition.","pos":[8,536],"nodes":[{"content":"The signal to raise the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread, so the event-handling method might run on one thread at the same time that a call to the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method runs on another thread.","pos":[1,299],"source":" The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread."},{"content":"This might result in the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called.","pos":[300,441],"source":" This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called."},{"content":"The code example in the next section shows one way to work around this race condition.","pos":[442,528]}]}]}],"pos":[48097,48734],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.","nodes":[{"pos":[0,105],"content":"Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.","nodes":[{"content":"Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.","pos":[0,105]}]}],"pos":[53469,53575],"yaml":true},{"content":"When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool. For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.  \n  \n When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work. Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.  \n  \n> [!NOTE]\n>  Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.  \n  \n If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>. For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.","nodes":[{"pos":[0,270],"content":"When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool. For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is <ph id=\"ph2\">`null`</ph>, the method that handles the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is called on a thread from the system-thread pool.","pos":[0,185],"source":"When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool."},{"content":"For more information on system-thread pools, see <ph id=\"ph1\">&lt;xref:System.Threading.ThreadPool&gt;</ph>.","pos":[186,270],"source":" For more information on system-thread pools, see <xref:System.Threading.ThreadPool>."}]},{"pos":[277,758],"content":"When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work. Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.","nodes":[{"content":"When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work. Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.","pos":[0,481],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.","pos":[0,223],"source":"When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work."},{"content":"Avoid this effect by setting <ph id=\"ph1\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the method that handles the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be called on the same thread that the component was created on.","pos":[224,481],"source":" Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on."}]}]},{"pos":[766,1400],"content":"[!NOTE]\n Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.","leadings":["","> "],"nodes":[{"content":" Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.","pos":[8,632],"nodes":[{"content":"Even if the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is not <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id=\"ph6\">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id=\"ph7\">`false`</ph>, because the signal to raise the <ph id=\"ph8\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.","pos":[1,461],"source":" Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread."},{"content":"One way to resolve this race condition is to set a flag that tells the event handler for the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.","pos":[462,624],"source":" One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events."}]}]},{"pos":[1407,1895],"content":"If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>. For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> is used inside Visual Studio in a Windows Forms designer, <ph id=\"ph2\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is automatically set to the control that contains the <ph id=\"ph3\">&lt;xref:System.Timers.Timer&gt;</ph>.","pos":[0,223],"source":"If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>."},{"content":"For example, if you place a <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> on a designer for <ph id=\"ph2\">`Form1`</ph> (which inherits from <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Form&gt;</ph>), the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property of <ph id=\"ph5\">&lt;xref:System.Timers.Timer&gt;</ph> is set to the instance of <ph id=\"ph6\">`Form1`</ph>.","pos":[224,488],"source":" For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`."}]}],"pos":[53586,55491],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ComponentModel.ISynchronizeInvoke\"></xref> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is `null`.","nodes":[{"pos":[0,198],"content":"The <xref href=\"System.ComponentModel.ISynchronizeInvoke\"></xref> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ISynchronizeInvoke\"&gt;&lt;/xref&gt;</ph> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.","pos":[0,175],"source":"The <xref href=\"System.ComponentModel.ISynchronizeInvoke\"></xref> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed."},{"content":"The default is <ph id=\"ph1\">`null`</ph>.","pos":[176,198],"source":" The default is `null`."}]}],"pos":[57079,57278],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Timers.Timer\n  commentId: T:System.Timers.Timer\n  id: Timer\n  children:\n  - System.Timers.Timer.#ctor\n  - System.Timers.Timer.#ctor(System.Double)\n  - System.Timers.Timer.AutoReset\n  - System.Timers.Timer.BeginInit\n  - System.Timers.Timer.Close\n  - System.Timers.Timer.Dispose(System.Boolean)\n  - System.Timers.Timer.Elapsed\n  - System.Timers.Timer.Enabled\n  - System.Timers.Timer.EndInit\n  - System.Timers.Timer.Interval\n  - System.Timers.Timer.Site\n  - System.Timers.Timer.Start\n  - System.Timers.Timer.Stop\n  - System.Timers.Timer.SynchronizingObject\n  langs:\n  - csharp\n  name: Timer\n  nameWithType: Timer\n  fullName: System.Timers.Timer\n  type: Class\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Generates an event after a set interval, with an option to generate recurring events.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed. You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property. Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed. You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Timers.Timer> class is available in the .NET Framework only. It is not included in the .NET Standard Library and is not available on other platforms, such as .NET Core or the Universal Windows Platform. On these platforms, as well as for portability across all .NET platforms, you should use the <xref:System.Threading.Timer?displayProperty=fullName> class instead.  \\n  \\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n The server-based <xref:System.Timers.Timer?displayProperty=fullName> class is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.  \\n  \\n The <xref:System.Timers.Timer?displayProperty=fullName> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property. You can handle this event to perform the processing you need. For example, suppose that you have an online sales application that continuously posts sales orders to a database. The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually. You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.  \\n  \\n> [!IMPORTANT]\\n>  The System.Timers.Timer class has the same resolution as the system clock. This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock. For more information, see the <xref:System.Timers.Timer.Interval%2A> property.  \\n  \\n When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=fullName> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed. To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.  \\n  \\n The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event. This behavior is subject to change in future releases of the .NET Framework. Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic). Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates. For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).  \\n  \\n [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]\\n [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  \\n  \\n If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread. If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread. In this situation, the event handler should be reentrant.  \\n  \\n> [!NOTE]\\n>  The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.  \\n  \\n Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.  \\n  \\n If you use the <xref:System.Timers.Timer?displayProperty=fullName> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.  \\n  \\n For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.  \\n  \\n> [!TIP]\\n>  Be aware that the .NET Framework Class Library includes four classes named `Timer`, each of which offers different functionality:  \\n>   \\n>  -   <xref:System.Timers.Timer?displayProperty=fullName> (this topic): fires an event at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  \\n> -   <xref:System.Threading.Timer?displayProperty=fullName>: executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  \\n> -   <xref:System.Windows.Forms.Timer?displayProperty=fullName>: a Windows Forms component that fires an event at regular intervals. The component has no user interface and is designed for use in a single-threaded environment.  \\n> -   <xref:System.Web.UI.Timer?displayProperty=fullName>: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.\"\n  example:\n  - \"The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \\n  \\n [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]\\n [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]\"\n  syntax:\n    content: 'public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements:\n  - System.ComponentModel.ISupportInitialize\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.#ctor\n  commentId: M:System.Timers.Timer.#ctor\n  id: '#ctor'\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Timer()\n  nameWithType: Timer.Timer()\n  fullName: Timer.Timer()\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Initializes a new instance of the <xref href=\"System.Timers.Timer\"></xref> class, and sets all the properties to their initial values.\n  remarks: \"The following table shows initial property values for an instance of <xref:System.Timers.Timer>.  \\n  \\n|Property|Initial value|  \\n|--------------|-------------------|  \\n|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  \\n|<xref:System.Timers.Timer.Enabled%2A>|`false`|  \\n|<xref:System.Timers.Timer.Interval%2A>|100 milliseconds|  \\n|<xref:System.Timers.Timer.SynchronizingObject%2A>|A null reference (`Nothing` in Visual Basic).|\"\n  example:\n  - \"The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \\n  \\n [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]\\n [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]\\n [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]\"\n  syntax:\n    content: public Timer ();\n    parameters: []\n  overload: System.Timers.Timer.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.#ctor(System.Double)\n  commentId: M:System.Timers.Timer.#ctor(System.Double)\n  id: '#ctor(System.Double)'\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Timer(Double)\n  nameWithType: Timer.Timer(Double)\n  fullName: Timer.Timer(Double)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Initializes a new instance of the <xref href=\"System.Timers.Timer\"></xref> class, and sets the <xref href=\"System.Timers.Timer.Interval\"></xref> property to the specified number of milliseconds.\n  remarks: This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.\n  example:\n  - \"The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \\n  \\n [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]\\n [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]\"\n  syntax:\n    content: public Timer (double interval);\n    parameters:\n    - id: interval\n      type: System.Double\n      description: The time, in milliseconds, between events. The value must be greater than zero and less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>.\n  overload: System.Timers.Timer.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value of the <code>interval</code> parameter is less than or equal to zero, or greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.AutoReset\n  commentId: P:System.Timers.Timer.AutoReset\n  id: AutoReset\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: AutoReset\n  nameWithType: Timer.AutoReset\n  fullName: Timer.AutoReset\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Gets or sets a Boolean indicating whether the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event only once (`false`) or repeatedly (`true`).\n  remarks: \"If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset. If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.  \\n  \\n Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.\"\n  example:\n  - \"The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds. Its event handler then displays \\\"Hello World!\\\" on the console.  \\n  \\n [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]\\n [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Timers.TimersDescription(\"Indicates whether the timer will be restarted when it is enabled.\")]\n\n      public bool AutoReset { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event each time the interval elapses; `false` if it should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event only once, after the first time the interval elapses. The default is `true`.'\n  overload: System.Timers.Timer.AutoReset*\n  exceptions: []\n  attributes:\n  - type: System.Timers.TimersDescriptionAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.BeginInit\n  commentId: M:System.Timers.Timer.BeginInit\n  id: BeginInit\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: BeginInit()\n  nameWithType: Timer.BeginInit()\n  fullName: Timer.BeginInit()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Begins the run-time initialization of a <xref href=\"System.Timers.Timer\"></xref> that is used on a form or by another component.\n  remarks: The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component. The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization. Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.\n  syntax:\n    content: public void BeginInit ();\n    parameters: []\n  overload: System.Timers.Timer.BeginInit*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.Close\n  commentId: M:System.Timers.Timer.Close\n  id: Close\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: Timer.Close()\n  fullName: Timer.Close()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Releases the resources used by the <xref href=\"System.Timers.Timer\"></xref>.\n  remarks: The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Timers.Timer.Close*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.Dispose(System.Boolean)\n  commentId: M:System.Timers.Timer.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: Timer.Dispose(Boolean)\n  fullName: Timer.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Releases all resources used by the current <xref href=\"System.Timers.Timer\"></xref>.\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Timers.Timer.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.Elapsed\n  commentId: E:System.Timers.Timer.Elapsed\n  id: Elapsed\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Elapsed\n  nameWithType: Timer.Elapsed\n  fullName: Timer.Elapsed\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Occurs when the interval elapses.\n  remarks: \"The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses. If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.  \\n  \\n If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.  \\n  \\n If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread. If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread. In this situation, the event handler should be reentrant.  \\n  \\n> [!NOTE]\\n>  The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.  \\n  \\n Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.  \\n  \\n The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event. This behavior is subject to change in future releases of the .NET Framework.\"\n  example:\n  - \"The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \\n  \\n [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]\\n [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]\\n [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Timers.TimersDescription(\"Occurs when the Interval has elapsed.\")]\n\n      public event System.Timers.ElapsedEventHandler Elapsed;\n    return:\n      type: System.Timers.ElapsedEventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.Timers.TimersDescriptionAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.Enabled\n  commentId: P:System.Timers.Timer.Enabled\n  id: Enabled\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Enabled\n  nameWithType: Timer.Enabled\n  fullName: Timer.Enabled\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Gets or sets a value indicating whether the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event.\n  remarks: \"Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.  \\n  \\n> [!NOTE]\\n>  The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`. The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.  \\n  \\n If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.  \\n  \\n If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.  \\n  \\n> [!NOTE]\\n>  Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.\"\n  example:\n  - \"The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \\n  \\n [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]\\n [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]\\n [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Timers.TimersDescription(\"Indicates whether the timer is enabled to fire events at a defined interval.\")]\n\n      public bool Enabled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Timers.Timer\"></xref> should raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event; otherwise, `false`. The default is `false`.'\n  overload: System.Timers.Timer.Enabled*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This property cannot be set because the timer has been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Timers.Timer.Interval\"></xref> property was set to a value greater than <xref href=\"System.Int32.MaxValue\"></xref> before the timer was enabled.\n  attributes:\n  - type: System.Timers.TimersDescriptionAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.EndInit\n  commentId: M:System.Timers.Timer.EndInit\n  id: EndInit\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: EndInit()\n  nameWithType: Timer.EndInit()\n  fullName: Timer.EndInit()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Ends the run-time initialization of a <xref href=\"System.Timers.Timer\"></xref> that is used on a form or by another component.\n  remarks: The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component. The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization. Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.\n  syntax:\n    content: public void EndInit ();\n    parameters: []\n  overload: System.Timers.Timer.EndInit*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.Interval\n  commentId: P:System.Timers.Timer.Interval\n  id: Interval\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Interval\n  nameWithType: Timer.Interval\n  fullName: Timer.Interval\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Gets or sets the interval, expressed in milliseconds, at which to raise the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event.\n  remarks: \"You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired. Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock. This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock. The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds. When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.  \\n  \\n [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]\\n [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  \\n  \\n You can use the following code to determine the resolution of the system clock on the current system:  \\n  \\n [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]\\n [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  \\n  \\n If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](http://msdn.microsoft.com/library/aa964692.aspx).  \\n  \\n If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.  \\n  \\n If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses. <xref:System.Timers.Timer.Enabled%2A> is then set to `false`.  \\n  \\n> [!NOTE]\\n>  If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`. To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.\"\n  example:\n  - \"The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \\n  \\n [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]\\n [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]\\n [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.SettingsBindable(true)]\n\n      [System.Timers.TimersDescription(\"The number of milliseconds between timer events.\")]\n\n      public double Interval { get; set; }\n    return:\n      type: System.Double\n      description: The time, in milliseconds, between <xref href=\"System.Timers.Timer.Elapsed\"></xref> events. The value must be greater than zero, and less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>. The default is 100 milliseconds.\n  overload: System.Timers.Timer.Interval*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The interval is less than or equal to zero.  \\n  \\n -or-  \\n  \\n The interval is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)\"\n  attributes:\n  - type: System.ComponentModel.SettingsBindableAttribute\n  - type: System.Timers.TimersDescriptionAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.Site\n  commentId: P:System.Timers.Timer.Site\n  id: Site\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Site\n  nameWithType: Timer.Site\n  fullName: Timer.Site\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Gets or sets the site that binds the <xref href=\"System.Timers.Timer\"></xref> to its container in design mode.\n  remarks: Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.\n  syntax:\n    content: public override System.ComponentModel.ISite Site { get; set; }\n    return:\n      type: System.ComponentModel.ISite\n      description: An <xref href=\"System.ComponentModel.ISite\"></xref> interface representing the site that binds the <xref href=\"System.Timers.Timer\"></xref> object to its container.\n  overload: System.Timers.Timer.Site*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.Start\n  commentId: M:System.Timers.Timer.Start\n  id: Start\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: Timer.Start()\n  fullName: Timer.Start()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Starts raising the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event by setting <xref href=\"System.Timers.Timer.Enabled\"></xref> to `true`.\n  remarks: \"If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses. If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.  \\n  \\n You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.  \\n  \\n> [!NOTE]\\n>  If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.  \\n  \\n A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.\"\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Timers.Timer.Start*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <xref href=\"System.Timers.Timer\"></xref> is created with an interval equal to or greater than <xref href=\"System.Int32.MaxValue\"></xref> + 1, or set to an interval less than zero.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.Stop\n  commentId: M:System.Timers.Timer.Stop\n  id: Stop\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: Timer.Stop()\n  fullName: Timer.Stop()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Stops raising the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event by setting <xref href=\"System.Timers.Timer.Enabled\"></xref> to `false`.\n  remarks: \"You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.  \\n  \\n> [!NOTE]\\n>  The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called. The code example in the next section shows one way to work around this race condition.\"\n  example:\n  - \"The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised. When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.  \\n  \\n [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]\\n [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  \\n  \\n The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).  \\n  \\n The example executes 100 test runs. Each time the test is run, the timer is started with an interval of 150 milliseconds. The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> method to simulate a task that randomly varies in length from 50 to 200 milliseconds. The test method also starts a control thread that waits for a second and then stops the timer. If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.  \\n  \\n The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends. The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero. This is an atomic operation. If the return value is zero, the control variable has been set to 1 and the event handler proceeds. If the return value is non-zero, the event is simply discarded to avoid reentrancy. (If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero. The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.  \\n  \\n The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero. If the atomic operation returns non-zero, an event is currently executing. The control thread waits and tries again. The example records the number of times the control thread had to wait for an event to finish.  \\n  \\n [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]\\n [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]\"\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.Timers.Timer.Stop*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.Timer.SynchronizingObject\n  commentId: P:System.Timers.Timer.SynchronizingObject\n  id: SynchronizingObject\n  parent: System.Timers.Timer\n  langs:\n  - csharp\n  name: SynchronizingObject\n  nameWithType: Timer.SynchronizingObject\n  fullName: Timer.SynchronizingObject\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.\n  remarks: \"When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool. For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.  \\n  \\n When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work. Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.  \\n  \\n> [!NOTE]\\n>  Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.  \\n  \\n If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>. For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.\"\n  example:\n  - \"The following example is a Windows Forms app that serves as a very simple text file editor. When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.  To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.  \\n  \\n [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]\\n [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  \\n  \\n The example requires that you add the following controls to the form:  \\n  \\n-   A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).  \\n  \\n-   A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).  \\n  \\n-   A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Timers.TimersDescription(\"The object used to marshal the event handler calls issued when an interval has elapsed.\")]\n\n      public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    return:\n      type: System.ComponentModel.ISynchronizeInvoke\n      description: The <xref href=\"System.ComponentModel.ISynchronizeInvoke\"></xref> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is `null`.\n  overload: System.Timers.Timer.SynchronizingObject*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Timers.TimersDescriptionAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.Component\n  parent: System.ComponentModel\n  isExternal: false\n  name: Component\n  nameWithType: Component\n  fullName: System.ComponentModel.Component\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Timers.Timer.#ctor\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Timer()\n  nameWithType: Timer.Timer()\n  fullName: Timer.Timer()\n- uid: System.Timers.Timer.#ctor(System.Double)\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Timer(Double)\n  nameWithType: Timer.Timer(Double)\n  fullName: Timer.Timer(Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Timers.Timer.AutoReset\n  parent: System.Timers.Timer\n  isExternal: false\n  name: AutoReset\n  nameWithType: Timer.AutoReset\n  fullName: Timer.AutoReset\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Timers.Timer.BeginInit\n  parent: System.Timers.Timer\n  isExternal: false\n  name: BeginInit()\n  nameWithType: Timer.BeginInit()\n  fullName: Timer.BeginInit()\n- uid: System.Timers.Timer.Close\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Close()\n  nameWithType: Timer.Close()\n  fullName: Timer.Close()\n- uid: System.Timers.Timer.Dispose(System.Boolean)\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Timer.Dispose(Boolean)\n  fullName: Timer.Dispose(Boolean)\n- uid: System.Timers.Timer.Elapsed\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Elapsed\n  nameWithType: Timer.Elapsed\n  fullName: Timer.Elapsed\n- uid: System.Timers.ElapsedEventHandler\n  parent: System.Timers\n  isExternal: false\n  name: ElapsedEventHandler\n  nameWithType: ElapsedEventHandler\n  fullName: System.Timers.ElapsedEventHandler\n- uid: System.Timers.Timer.Enabled\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Enabled\n  nameWithType: Timer.Enabled\n  fullName: Timer.Enabled\n- uid: System.Timers.Timer.EndInit\n  parent: System.Timers.Timer\n  isExternal: false\n  name: EndInit()\n  nameWithType: Timer.EndInit()\n  fullName: Timer.EndInit()\n- uid: System.Timers.Timer.Interval\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Interval\n  nameWithType: Timer.Interval\n  fullName: Timer.Interval\n- uid: System.Timers.Timer.Site\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Site\n  nameWithType: Timer.Site\n  fullName: Timer.Site\n- uid: System.ComponentModel.ISite\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISite\n  nameWithType: ISite\n  fullName: System.ComponentModel.ISite\n- uid: System.Timers.Timer.Start\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Start()\n  nameWithType: Timer.Start()\n  fullName: Timer.Start()\n- uid: System.Timers.Timer.Stop\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Stop()\n  nameWithType: Timer.Stop()\n  fullName: Timer.Stop()\n- uid: System.Timers.Timer.SynchronizingObject\n  parent: System.Timers.Timer\n  isExternal: false\n  name: SynchronizingObject\n  nameWithType: Timer.SynchronizingObject\n  fullName: Timer.SynchronizingObject\n- uid: System.ComponentModel.ISynchronizeInvoke\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISynchronizeInvoke\n  nameWithType: ISynchronizeInvoke\n  fullName: System.ComponentModel.ISynchronizeInvoke\n- uid: System.Timers.Timer.#ctor*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Timer\n  nameWithType: Timer.Timer\n  fullName: Timer.Timer\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.AutoReset*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: AutoReset\n  nameWithType: Timer.AutoReset\n  fullName: Timer.AutoReset\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.BeginInit*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: BeginInit\n  nameWithType: Timer.BeginInit\n  fullName: Timer.BeginInit\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.Close*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Close\n  nameWithType: Timer.Close\n  fullName: Timer.Close\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.Dispose*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Dispose\n  nameWithType: Timer.Dispose\n  fullName: Timer.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.Enabled*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Enabled\n  nameWithType: Timer.Enabled\n  fullName: Timer.Enabled\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.EndInit*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: EndInit\n  nameWithType: Timer.EndInit\n  fullName: Timer.EndInit\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.Interval*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Interval\n  nameWithType: Timer.Interval\n  fullName: Timer.Interval\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.Site*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Site\n  nameWithType: Timer.Site\n  fullName: Timer.Site\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.Start*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Start\n  nameWithType: Timer.Start\n  fullName: Timer.Start\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.Stop*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: Stop\n  nameWithType: Timer.Stop\n  fullName: Timer.Stop\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Timers.Timer.SynchronizingObject*\n  parent: System.Timers.Timer\n  isExternal: false\n  name: SynchronizingObject\n  nameWithType: Timer.SynchronizingObject\n  fullName: Timer.SynchronizingObject\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/Timer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.ComponentModel.Component.ToString\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: ToString()\n  nameWithType: Component.ToString()\n  fullName: Component.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.ComponentModel.Component.CanRaiseEvents\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: CanRaiseEvents\n  nameWithType: Component.CanRaiseEvents\n  fullName: Component.CanRaiseEvents\n- uid: System.ComponentModel.Component.Container\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Container\n  nameWithType: Component.Container\n  fullName: Component.Container\n- uid: System.ComponentModel.Component.DesignMode\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: DesignMode\n  nameWithType: Component.DesignMode\n  fullName: Component.DesignMode\n- uid: System.ComponentModel.Component.Dispose\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Dispose()\n  nameWithType: Component.Dispose()\n  fullName: Component.Dispose()\n- uid: System.ComponentModel.Component.Disposed\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Disposed\n  nameWithType: Component.Disposed\n  fullName: Component.Disposed\n- uid: System.ComponentModel.Component.Events\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Events\n  nameWithType: Component.Events\n  fullName: Component.Events\n- uid: System.ComponentModel.Component.GetService(System.Type)\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: Component.GetService(Type)\n  fullName: Component.GetService(Type)\n- uid: System.ComponentModel.ISupportInitialize\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISupportInitialize\n  nameWithType: ISupportInitialize\n  fullName: System.ComponentModel.ISupportInitialize\n"}