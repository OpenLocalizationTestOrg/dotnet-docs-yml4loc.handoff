{"nodes":[{"content":"Client activity that models the synchronous invocation of a Windows Communication Foundation (WCF) service operation.","nodes":[{"pos":[0,117],"content":"Client activity that models the synchronous invocation of a Windows Communication Foundation (WCF) service operation.","nodes":[{"content":"Client activity that models the synchronous invocation of a Windows Communication Foundation (WCF) service operation.","pos":[0,117]}]}],"pos":[2055,2173],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \n  \n The <xref:System.Workflow.Activities.SendActivity> activity enables you to participate in a conversation with a [!INCLUDE[indigo2](~/includes/indigo2-md.md)] service using a predefined message exchange pattern.  \n  \n> [!NOTE]\n>  The <xref:System.Workflow.Activities.SendActivity> activity is a blocking activity, meaning that workflow execution is blocked until the activity completes execution.  \n  \n The message exchange patterns supported by the <xref:System.Workflow.Activities.SendActivity> activity include:  \n  \n-   One-way Send Message  \n  \n     The <xref:System.Workflow.Activities.SendActivity> activity sends a message but does not expect a response from the service.  \n  \n-   Send Request - Receive Reply  \n  \n     The <xref:System.Workflow.Activities.SendActivity> activity sends a message and waits until a response is received from the service.  \n  \n-   Send Request - Receive Fault  \n  \n     The <xref:System.Workflow.Activities.SendActivity> activity sends a message and waits until a response or a fault is received from the service. During execution, the send activity throws all of the faults that were received from the server. <xref:System.Workflow.ComponentModel.FaultHandlerActivity> activities can be used to handle the faults in the client workflow.  \n  \n> [!NOTE]\n>  This activity is part of [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]. For the equivalent activity in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], see <xref:System.ServiceModel.Activities.Send>.","nodes":[{"pos":[2,78],"content":"[!NOTE]\n [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]","leadings":["","> "],"nodes":[]},{"pos":[85,295],"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity enables you to participate in a conversation with a <ph id=\"ph2\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> service using a predefined message exchange pattern.","source":"The <xref:System.Workflow.Activities.SendActivity> activity enables you to participate in a conversation with a [!INCLUDE[indigo2](~/includes/indigo2-md.md)] service using a predefined message exchange pattern."},{"pos":[303,480],"content":"[!NOTE]\n The <xref:System.Workflow.Activities.SendActivity> activity is a blocking activity, meaning that workflow execution is blocked until the activity completes execution.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity is a blocking activity, meaning that workflow execution is blocked until the activity completes execution.","pos":[9,175],"source":" The <xref:System.Workflow.Activities.SendActivity> activity is a blocking activity, meaning that workflow execution is blocked until the activity completes execution."}]},{"pos":[487,598],"content":"The message exchange patterns supported by the <xref:System.Workflow.Activities.SendActivity> activity include:","nodes":[{"content":"The message exchange patterns supported by the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity include:","pos":[0,111],"source":"The message exchange patterns supported by the <xref:System.Workflow.Activities.SendActivity> activity include:"}]},{"pos":[608,628],"content":"One-way Send Message","nodes":[{"content":"One-way Send Message","pos":[0,20]}]},{"pos":[639,763],"content":"The <xref:System.Workflow.Activities.SendActivity> activity sends a message but does not expect a response from the service.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity sends a message but does not expect a response from the service.","pos":[0,124],"source":"The <xref:System.Workflow.Activities.SendActivity> activity sends a message but does not expect a response from the service."}]},{"pos":[773,801],"content":"Send Request - Receive Reply","nodes":[{"content":"Send Request - Receive Reply","pos":[0,28]}]},{"pos":[812,944],"content":"The <xref:System.Workflow.Activities.SendActivity> activity sends a message and waits until a response is received from the service.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity sends a message and waits until a response is received from the service.","pos":[0,132],"source":"The <xref:System.Workflow.Activities.SendActivity> activity sends a message and waits until a response is received from the service."}]},{"pos":[954,982],"content":"Send Request - Receive Fault","nodes":[{"content":"Send Request - Receive Fault","pos":[0,28]}]},{"pos":[993,1360],"content":"The <xref:System.Workflow.Activities.SendActivity> activity sends a message and waits until a response or a fault is received from the service. During execution, the send activity throws all of the faults that were received from the server. <xref:System.Workflow.ComponentModel.FaultHandlerActivity> activities can be used to handle the faults in the client workflow.","nodes":[{"content":"The <xref:System.Workflow.Activities.SendActivity> activity sends a message and waits until a response or a fault is received from the service. During execution, the send activity throws all of the faults that were received from the server. <xref:System.Workflow.ComponentModel.FaultHandlerActivity> activities can be used to handle the faults in the client workflow.","pos":[0,367],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity sends a message and waits until a response or a fault is received from the service.","pos":[0,143],"source":"The <xref:System.Workflow.Activities.SendActivity> activity sends a message and waits until a response or a fault is received from the service."},{"content":"During execution, the send activity throws all of the faults that were received from the server.","pos":[144,240]},{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.FaultHandlerActivity&gt;</ph> activities can be used to handle the faults in the client workflow.","pos":[241,367],"source":" <xref:System.Workflow.ComponentModel.FaultHandlerActivity> activities can be used to handle the faults in the client workflow."}]}]},{"pos":[1368,1600],"content":"[!NOTE]\n This activity is part of [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]. For the equivalent activity in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], see <xref:System.ServiceModel.Activities.Send>.","leadings":["","> "],"nodes":[{"content":" This activity is part of [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]. For the equivalent activity in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], see <xref:System.ServiceModel.Activities.Send>.","pos":[8,230],"nodes":[{"content":"This activity is part of <ph id=\"ph1\">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>.","pos":[1,84],"source":" This activity is part of [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]."},{"content":"For the equivalent activity in <ph id=\"ph1\">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, see <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph>.","pos":[85,222],"source":" For the equivalent activity in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], see <xref:System.ServiceModel.Activities.Send>."}]}]}],"pos":[2184,3810],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> class.","nodes":[{"pos":[0,101],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.SendActivity\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> class."}],"pos":[11832,11934],"yaml":true},{"content":"The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer.","nodes":[{"pos":[0,141],"content":"The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> constructor is typically invoked in the code-beside file created by the workflow designer.","pos":[0,141],"source":"The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer."}]}],"pos":[11945,12087],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> class with the specified `name` property.","nodes":[{"pos":[0,136],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.SendActivity\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">`name`</ph> property.","source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> class with the specified `name` property."}],"pos":[13520,13657],"yaml":true},{"content":"The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer.","nodes":[{"pos":[0,141],"content":"The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> constructor is typically invoked in the code-beside file created by the workflow designer.","pos":[0,141],"source":"The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer."}]}],"pos":[13668,13810],"yaml":true,"extradata":"MT"},{"content":"The value assigned to <xref href=\"System.Workflow.ComponentModel.Activity.Name\"></xref> when the activity is initialized.","nodes":[{"pos":[0,121],"content":"The value assigned to <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity.Name\"&gt;&lt;/xref&gt;</ph> when the activity is initialized.","source":"The value assigned to <xref href=\"System.Workflow.ComponentModel.Activity.Name\"></xref> when the activity is initialized."}],"pos":[14193,14315],"yaml":true},{"content":"Occurs after the response has been received from the service.","nodes":[{"pos":[0,61],"content":"Occurs after the response has been received from the service.","nodes":[{"content":"Occurs after the response has been received from the service.","pos":[0,61]}]}],"pos":[15320,15382],"yaml":true},{"content":"This event handler associated with this event can be used to read the return value from the service operation invoked.","nodes":[{"pos":[0,118],"content":"This event handler associated with this event can be used to read the return value from the service operation invoked.","nodes":[{"content":"This event handler associated with this event can be used to read the return value from the service operation invoked.","pos":[0,118]}]}],"pos":[15393,15512],"yaml":true,"extradata":"MT"},{"content":"Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref href=\"System.Workflow.Activities.SendActivity.AfterResponse\"></xref> event.","nodes":[{"pos":[0,184],"content":"Represents the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.DependencyProperty\"&gt;&lt;/xref&gt;</ph> that targets the <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Activities.SendActivity.AfterResponse\"&gt;&lt;/xref&gt;</ph> event.","source":"Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref href=\"System.Workflow.Activities.SendActivity.AfterResponse\"></xref> event."}],"pos":[17034,17219],"yaml":true},{"content":"This dependency event property can be used to bind the send activity's <xref:System.Workflow.Activities.SendActivity.AfterResponse> event to a public event handler on the workflow class.","nodes":[{"pos":[0,186],"content":"This dependency event property can be used to bind the send activity's <xref:System.Workflow.Activities.SendActivity.AfterResponse> event to a public event handler on the workflow class.","nodes":[{"content":"This dependency event property can be used to bind the send activity's <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity.AfterResponse&gt;</ph> event to a public event handler on the workflow class.","pos":[0,186],"source":"This dependency event property can be used to bind the send activity's <xref:System.Workflow.Activities.SendActivity.AfterResponse> event to a public event handler on the workflow class."}]}],"pos":[17230,17417],"yaml":true,"extradata":"MT"},{"content":"Occurs before the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> activity sends the message to the service.","nodes":[{"pos":[0,121],"content":"Occurs before the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.SendActivity\"&gt;&lt;/xref&gt;</ph> activity sends the message to the service.","source":"Occurs before the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> activity sends the message to the service."}],"pos":[18557,18679],"yaml":true},{"content":"This event handler associated with this event can be used to set the parameter values for the service operation being invoked.  \n  \n> [!NOTE]\n>  The context of a <xref:System.Workflow.Activities.SendActivity> cannot be set in this event handler.","nodes":[{"pos":[0,126],"content":"This event handler associated with this event can be used to set the parameter values for the service operation being invoked.","nodes":[{"content":"This event handler associated with this event can be used to set the parameter values for the service operation being invoked.","pos":[0,126]}]},{"pos":[134,245],"content":"[!NOTE]\n The context of a <xref:System.Workflow.Activities.SendActivity> cannot be set in this event handler.","leadings":["","> "],"nodes":[{"content":"The context of a <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> cannot be set in this event handler.","pos":[9,109],"source":" The context of a <xref:System.Workflow.Activities.SendActivity> cannot be set in this event handler."}]}],"pos":[18690,18941],"yaml":true,"extradata":"MT"},{"content":"Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref href=\"System.Workflow.Activities.SendActivity.BeforeSend\"></xref> event.","nodes":[{"pos":[0,181],"content":"Represents the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.DependencyProperty\"&gt;&lt;/xref&gt;</ph> that targets the <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Activities.SendActivity.BeforeSend\"&gt;&lt;/xref&gt;</ph> event.","source":"Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref href=\"System.Workflow.Activities.SendActivity.BeforeSend\"></xref> event."}],"pos":[20501,20683],"yaml":true},{"content":"This dependency event property can be used to bind the send activity's <xref:System.Workflow.Activities.SendActivity.BeforeSend> event to a public event handler on the workflow class.","nodes":[{"pos":[0,183],"content":"This dependency event property can be used to bind the send activity's <xref:System.Workflow.Activities.SendActivity.BeforeSend> event to a public event handler on the workflow class.","nodes":[{"content":"This dependency event property can be used to bind the send activity's <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity.BeforeSend&gt;</ph> event to a public event handler on the workflow class.","pos":[0,183],"source":"This dependency event property can be used to bind the send activity's <xref:System.Workflow.Activities.SendActivity.BeforeSend> event to a public event handler on the workflow class."}]}],"pos":[20694,20878],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Workflow.Activities.ChannelToken\"></xref> used by the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> to associate itself with a client channel.","nodes":[{"pos":[0,176],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.ChannelToken\"&gt;&lt;/xref&gt;</ph> used by the <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Activities.SendActivity\"&gt;&lt;/xref&gt;</ph> to associate itself with a client channel.","source":"<xref href=\"System.Workflow.Activities.ChannelToken\"></xref> used by the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> to associate itself with a client channel."}],"pos":[22030,22207],"yaml":true},{"content":"A channel token specifies the name of the channel, the scope of the channel, and the endpoint configuration name to be used in establishing the channel. The endpoint name in the configuration file has the address, binding, and contract information for a service that the <xref:System.Workflow.Activities.SendActivity> activity communicates with.  \n  \n The channel token also specifies a unique channel name and an owner activity name for the token. A channel token can be shared between multiple send activities that want to use the same endpoint to communicate with a service.","nodes":[{"pos":[0,345],"content":"A channel token specifies the name of the channel, the scope of the channel, and the endpoint configuration name to be used in establishing the channel. The endpoint name in the configuration file has the address, binding, and contract information for a service that the <xref:System.Workflow.Activities.SendActivity> activity communicates with.","nodes":[{"content":"A channel token specifies the name of the channel, the scope of the channel, and the endpoint configuration name to be used in establishing the channel. The endpoint name in the configuration file has the address, binding, and contract information for a service that the <xref:System.Workflow.Activities.SendActivity> activity communicates with.","pos":[0,345],"nodes":[{"content":"A channel token specifies the name of the channel, the scope of the channel, and the endpoint configuration name to be used in establishing the channel.","pos":[0,152]},{"content":"The endpoint name in the configuration file has the address, binding, and contract information for a service that the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity communicates with.","pos":[153,345],"source":" The endpoint name in the configuration file has the address, binding, and contract information for a service that the <xref:System.Workflow.Activities.SendActivity> activity communicates with."}]}]},{"pos":[352,577],"content":"The channel token also specifies a unique channel name and an owner activity name for the token. A channel token can be shared between multiple send activities that want to use the same endpoint to communicate with a service.","nodes":[{"content":"The channel token also specifies a unique channel name and an owner activity name for the token. A channel token can be shared between multiple send activities that want to use the same endpoint to communicate with a service.","pos":[0,225],"nodes":[{"content":"The channel token also specifies a unique channel name and an owner activity name for the token.","pos":[0,96]},{"content":"A channel token can be shared between multiple send activities that want to use the same endpoint to communicate with a service.","pos":[97,225]}]}]}],"pos":[22218,22800],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Workflow.Activities.ChannelToken\"></xref> defining a client channel that a <xref href=\"System.Workflow.Activities.SendActivity\"></xref> uses to communicate with a service.","nodes":[{"pos":[0,192],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.ChannelToken\"&gt;&lt;/xref&gt;</ph> defining a client channel that a <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Activities.SendActivity\"&gt;&lt;/xref&gt;</ph> uses to communicate with a service.","source":"A <xref href=\"System.Workflow.Activities.ChannelToken\"></xref> defining a client channel that a <xref href=\"System.Workflow.Activities.SendActivity\"></xref> uses to communicate with a service."}],"pos":[23245,23438],"yaml":true},{"content":"Returns a dictionary that contains the context used for communication between the client and the service it is communicating with, including such things as identification for correlation.","nodes":[{"pos":[0,187],"content":"Returns a dictionary that contains the context used for communication between the client and the service it is communicating with, including such things as identification for correlation.","nodes":[{"content":"Returns a dictionary that contains the context used for communication between the client and the service it is communicating with, including such things as identification for correlation.","pos":[0,187]}]}],"pos":[24434,24622],"yaml":true},{"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","nodes":[{"pos":[0,165],"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","nodes":[{"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","pos":[0,165]}]}],"pos":[24633,24799],"yaml":true,"extradata":"MT"},{"content":"A dictionary-based collection that contains <xref href=\"System.Xml.XmlQualifiedName\"></xref> keys and their associated <xref href=\"System.String\"></xref> values.","nodes":[{"pos":[0,161],"content":"A dictionary-based collection that contains <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlQualifiedName\"&gt;&lt;/xref&gt;</ph> keys and their associated <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> values.","source":"A dictionary-based collection that contains <xref href=\"System.Xml.XmlQualifiedName\"></xref> keys and their associated <xref href=\"System.String\"></xref> values."}],"pos":[25333,25495],"yaml":true},{"content":"Gets or sets the custom address used to communicate with a service.","nodes":[{"pos":[0,67],"content":"Gets or sets the custom address used to communicate with a service.","nodes":[{"content":"Gets or sets the custom address used to communicate with a service.","pos":[0,67]}]}],"pos":[26570,26638],"yaml":true},{"content":"If present, this value is used to define the endpoint address for the operation.","nodes":[{"pos":[0,80],"content":"If present, this value is used to define the endpoint address for the operation.","nodes":[{"content":"If present, this value is used to define the endpoint address for the operation.","pos":[0,80]}]}],"pos":[26649,26730],"yaml":true,"extradata":"MT"},{"content":"String value whose value is the address a service is listening on.","nodes":[{"pos":[0,66],"content":"String value whose value is the address a service is listening on.","nodes":[{"content":"String value whose value is the address a service is listening on.","pos":[0,66]}]}],"pos":[27118,27185],"yaml":true},{"content":"Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> for the <xref href=\"System.Workflow.Activities.SendActivity.CustomAddress\"></xref> property.","nodes":[{"pos":[0,178],"content":"Represents the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.DependencyProperty\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Activities.SendActivity.CustomAddress\"&gt;&lt;/xref&gt;</ph> property.","source":"Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> for the <xref href=\"System.Workflow.Activities.SendActivity.CustomAddress\"></xref> property."}],"pos":[28263,28442],"yaml":true},{"content":"If present, this value is used to define the endpoint address for the operation.","nodes":[{"pos":[0,80],"content":"If present, this value is used to define the endpoint address for the operation.","nodes":[{"content":"If present, this value is used to define the endpoint address for the operation.","pos":[0,80]}]}],"pos":[28453,28534],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the context information for a send operation.","nodes":[{"pos":[0,58],"content":"Gets or sets the context information for a send operation.","nodes":[{"content":"Gets or sets the context information for a send operation.","pos":[0,58]}]}],"pos":[31617,31676],"yaml":true},{"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","nodes":[{"pos":[0,165],"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","nodes":[{"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","pos":[0,165]}]}],"pos":[31687,31853],"yaml":true,"extradata":"MT"},{"content":"Activity whose context information is required.","nodes":[{"pos":[0,47],"content":"Activity whose context information is required.","nodes":[{"content":"Activity whose context information is required.","pos":[0,47]}]}],"pos":[32377,32425],"yaml":true},{"content":"Endpoint information for correlation with a service.","nodes":[{"pos":[0,52],"content":"Endpoint information for correlation with a service.","nodes":[{"content":"Endpoint information for correlation with a service.","pos":[0,52]}]}],"pos":[32515,32568],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the contract implemented by a service.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the contract implemented by a service.","source":"The <xref href=\"System.Type\"></xref> of the contract implemented by a service."}],"pos":[32634,32713],"yaml":true},{"content":"A dictionary-based collection that contains <xref href=\"System.Xml.XmlQualifiedName\"></xref> keys and their associated <xref href=\"System.String\"></xref> values.","nodes":[{"pos":[0,161],"content":"A dictionary-based collection that contains <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlQualifiedName\"&gt;&lt;/xref&gt;</ph> keys and their associated <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> values.","source":"A dictionary-based collection that contains <xref href=\"System.Xml.XmlQualifiedName\"></xref> keys and their associated <xref href=\"System.String\"></xref> values."}],"pos":[32824,32986],"yaml":true},{"content":"Static method that returns context information given an activity instance, an endpoint name used by that activity, the name of the owner activity, and a <xref href=\"System.Type\"></xref> object that represents the type of the contract.","nodes":[{"pos":[0,234],"content":"Static method that returns context information given an activity instance, an endpoint name used by that activity, the name of the owner activity, and a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the type of the contract.","source":"Static method that returns context information given an activity instance, an endpoint name used by that activity, the name of the owner activity, and a <xref href=\"System.Type\"></xref> object that represents the type of the contract."}],"pos":[34318,34553],"yaml":true},{"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","nodes":[{"pos":[0,165],"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","nodes":[{"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","pos":[0,165]}]}],"pos":[34564,34730],"yaml":true,"extradata":"MT"},{"content":"Activity whose context information is required.","nodes":[{"pos":[0,47],"content":"Activity whose context information is required.","nodes":[{"content":"Activity whose context information is required.","pos":[0,47]}]}],"pos":[35251,35299],"yaml":true},{"content":"Name of the endpoint used for correlation with a service.","nodes":[{"pos":[0,57],"content":"Name of the endpoint used for correlation with a service.","nodes":[{"content":"Name of the endpoint used for correlation with a service.","pos":[0,57]}]}],"pos":[35367,35425],"yaml":true},{"content":"The name of the owning activity.","nodes":[{"pos":[0,32],"content":"The name of the owning activity.","nodes":[{"content":"The name of the owning activity.","pos":[0,32]}]}],"pos":[35498,35531],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the contract implemented by a service.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the contract implemented by a service.","source":"The <xref href=\"System.Type\"></xref> of the contract implemented by a service."}],"pos":[35597,35676],"yaml":true},{"content":"A dictionary-based collection that contains <xref href=\"System.Xml.XmlQualifiedName\"></xref> keys and their associated <xref href=\"System.String\"></xref> values.","nodes":[{"pos":[0,161],"content":"A dictionary-based collection that contains <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlQualifiedName\"&gt;&lt;/xref&gt;</ph> keys and their associated <ph id=\"ph2\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> values.","source":"A dictionary-based collection that contains <xref href=\"System.Xml.XmlQualifiedName\"></xref> keys and their associated <xref href=\"System.String\"></xref> values."}],"pos":[35787,35949],"yaml":true},{"content":"Gets the collection of bindable parameters as found in the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] service's formal parameter list.","nodes":[{"pos":[0,137],"content":"Gets the collection of bindable parameters as found in the <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> service's formal parameter list.","source":"Gets the collection of bindable parameters as found in the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] service's formal parameter list."}],"pos":[38080,38218],"yaml":true},{"content":"<xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> can be used to specify bindings between the service operation parameters and public field and properties of the workflow that contains the <xref:System.Workflow.Activities.SendActivity> activity. When the <xref:System.Workflow.Activities.SendActivity> activity executes, the corresponding parameter values are read from the workflow properties they are bound to and are sent to the service as service operation parameters.  \n  \n <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> can also be used to retrieve the return values from a service operation.  \n  \n All parameters of the service operation should be bound. Unbound service operation parameters produce compiler warnings and the default values of the parameter are sent when the <xref:System.Workflow.Activities.SendActivity> is invoked.","nodes":[{"pos":[0,490],"content":"<xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> can be used to specify bindings between the service operation parameters and public field and properties of the workflow that contains the <xref:System.Workflow.Activities.SendActivity> activity. When the <xref:System.Workflow.Activities.SendActivity> activity executes, the corresponding parameter values are read from the workflow properties they are bound to and are sent to the service as service operation parameters.","nodes":[{"content":"<xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> can be used to specify bindings between the service operation parameters and public field and properties of the workflow that contains the <xref:System.Workflow.Activities.SendActivity> activity. When the <xref:System.Workflow.Activities.SendActivity> activity executes, the corresponding parameter values are read from the workflow properties they are bound to and are sent to the service as service operation parameters.","pos":[0,490],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A&gt;</ph> can be used to specify bindings between the service operation parameters and public field and properties of the workflow that contains the <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity.","pos":[0,263],"source":"<xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> can be used to specify bindings between the service operation parameters and public field and properties of the workflow that contains the <xref:System.Workflow.Activities.SendActivity> activity."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity executes, the corresponding parameter values are read from the workflow properties they are bound to and are sent to the service as service operation parameters.","pos":[264,490],"source":" When the <xref:System.Workflow.Activities.SendActivity> activity executes, the corresponding parameter values are read from the workflow properties they are bound to and are sent to the service as service operation parameters."}]}]},{"pos":[497,637],"content":"<xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> can also be used to retrieve the return values from a service operation.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A&gt;</ph> can also be used to retrieve the return values from a service operation.","pos":[0,140],"source":"<xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> can also be used to retrieve the return values from a service operation."}]},{"pos":[644,880],"content":"All parameters of the service operation should be bound. Unbound service operation parameters produce compiler warnings and the default values of the parameter are sent when the <xref:System.Workflow.Activities.SendActivity> is invoked.","nodes":[{"content":"All parameters of the service operation should be bound. Unbound service operation parameters produce compiler warnings and the default values of the parameter are sent when the <xref:System.Workflow.Activities.SendActivity> is invoked.","pos":[0,236],"nodes":[{"content":"All parameters of the service operation should be bound.","pos":[0,56]},{"content":"Unbound service operation parameters produce compiler warnings and the default values of the parameter are sent when the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> is invoked.","pos":[57,236],"source":" Unbound service operation parameters produce compiler warnings and the default values of the parameter are sent when the <xref:System.Workflow.Activities.SendActivity> is invoked."}]}]}],"pos":[38229,39116],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Workflow.ComponentModel.WorkflowParameterBindingCollection\"></xref> of parameters to bind to.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.WorkflowParameterBindingCollection\"&gt;&lt;/xref&gt;</ph> of parameters to bind to.","source":"The <xref href=\"System.Workflow.ComponentModel.WorkflowParameterBindingCollection\"></xref> of parameters to bind to."}],"pos":[39672,39789],"yaml":true},{"content":"Name of the property that is used for the return value sent by the service that the `SendActivity` activity is communicating with.","nodes":[{"pos":[0,130],"content":"Name of the property that is used for the return value sent by the service that the <ph id=\"ph1\">`SendActivity`</ph> activity is communicating with.","source":"Name of the property that is used for the return value sent by the service that the `SendActivity` activity is communicating with."}],"pos":[40931,41062],"yaml":true},{"content":"This string can be used to retrieve the return value from the <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> associated with the <xref:System.Workflow.Activities.SendActivity> activity in the <xref:System.Workflow.Activities.SendActivity.AfterResponse> event handler.","nodes":[{"pos":[0,288],"content":"This string can be used to retrieve the return value from the <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> associated with the <xref:System.Workflow.Activities.SendActivity> activity in the <xref:System.Workflow.Activities.SendActivity.AfterResponse> event handler.","nodes":[{"content":"This string can be used to retrieve the return value from the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity in the <ph id=\"ph3\">&lt;xref:System.Workflow.Activities.SendActivity.AfterResponse&gt;</ph> event handler.","pos":[0,288],"source":"This string can be used to retrieve the return value from the <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> associated with the <xref:System.Workflow.Activities.SendActivity> activity in the <xref:System.Workflow.Activities.SendActivity.AfterResponse> event handler."}]}],"pos":[41073,41362],"yaml":true,"extradata":"MT"},{"content":"Defines the contract and operation of the service that the `SendActivity` activity communicates with.","nodes":[{"pos":[0,101],"content":"Defines the contract and operation of the service that the <ph id=\"ph1\">`SendActivity`</ph> activity communicates with.","source":"Defines the contract and operation of the service that the `SendActivity` activity communicates with."}],"pos":[42689,42791],"yaml":true},{"content":"The <xref:System.Workflow.Activities.SendActivity> activity always refers to an existing contract and its defined operations. There is no provision that allows a <xref:System.Workflow.Activities.SendActivity> activity to define a contract itself.","nodes":[{"pos":[0,246],"content":"The <xref:System.Workflow.Activities.SendActivity> activity always refers to an existing contract and its defined operations. There is no provision that allows a <xref:System.Workflow.Activities.SendActivity> activity to define a contract itself.","nodes":[{"content":"The <xref:System.Workflow.Activities.SendActivity> activity always refers to an existing contract and its defined operations. There is no provision that allows a <xref:System.Workflow.Activities.SendActivity> activity to define a contract itself.","pos":[0,246],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity always refers to an existing contract and its defined operations.","pos":[0,125],"source":"The <xref:System.Workflow.Activities.SendActivity> activity always refers to an existing contract and its defined operations."},{"content":"There is no provision that allows a <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> activity to define a contract itself.","pos":[126,246],"source":" There is no provision that allows a <xref:System.Workflow.Activities.SendActivity> activity to define a contract itself."}]}]}],"pos":[42802,43049],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Workflow.Activities.TypedOperationInfo\"></xref> object that contains the contract name, the contract type, the operation name, (which may be distinct from the actual method name), whether the operation is a one-way operation, and method information including parameters about the operation.","nodes":[{"pos":[0,311],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.TypedOperationInfo\"&gt;&lt;/xref&gt;</ph> object that contains the contract name, the contract type, the operation name, (which may be distinct from the actual method name), whether the operation is a one-way operation, and method information including parameters about the operation.","source":"A <xref href=\"System.Workflow.Activities.TypedOperationInfo\"></xref> object that contains the contract name, the contract type, the operation name, (which may be distinct from the actual method name), whether the operation is a one-way operation, and method information including parameters about the operation."}],"pos":[43575,43887],"yaml":true},{"content":"A static method that sets context information for a <xref href=\"System.Workflow.Activities.SendActivity\"></xref> activity, given an activity instance, an endpoint used by that activity, a <xref href=\"System.Type\"></xref> object that represents the type of the contract, and the context information itself.","nodes":[{"pos":[0,305],"content":"A static method that sets context information for a <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.SendActivity\"&gt;&lt;/xref&gt;</ph> activity, given an activity instance, an endpoint used by that activity, a <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the type of the contract, and the context information itself.","source":"A static method that sets context information for a <xref href=\"System.Workflow.Activities.SendActivity\"></xref> activity, given an activity instance, an endpoint used by that activity, a <xref href=\"System.Type\"></xref> object that represents the type of the contract, and the context information itself."}],"pos":[45612,45918],"yaml":true},{"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","nodes":[{"pos":[0,165],"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","nodes":[{"content":"Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.","pos":[0,165]}]}],"pos":[45929,46095],"yaml":true,"extradata":"MT"},{"content":"The Activity instance to associate the context information with.","nodes":[{"pos":[0,64],"content":"The Activity instance to associate the context information with.","nodes":[{"content":"The Activity instance to associate the context information with.","pos":[0,64]}]}],"pos":[46517,46582],"yaml":true},{"content":"The endpoint used for correlation with a service.","nodes":[{"pos":[0,49],"content":"The endpoint used for correlation with a service.","nodes":[{"content":"The endpoint used for correlation with a service.","pos":[0,49]}]}],"pos":[46672,46722],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the contract implemented by a service.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the contract implemented by a service.","source":"The <xref href=\"System.Type\"></xref> of the contract implemented by a service."}],"pos":[46788,46867],"yaml":true},{"content":"The context information to set.","nodes":[{"pos":[0,31],"content":"The context information to set.","nodes":[{"content":"The context information to set.","pos":[0,31]}]}],"pos":[46984,47016],"yaml":true},{"content":"A static method that sets context information for a <xref href=\"System.Workflow.Activities.SendActivity\"></xref> activity, given an activity instance, an endpoint name used by that activity, the name of the owner activity, a <xref href=\"System.Type\"></xref> object that represents the type of the contract, and the context information itself.","nodes":[{"pos":[0,342],"content":"A static method that sets context information for a <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.SendActivity\"&gt;&lt;/xref&gt;</ph> activity, given an activity instance, an endpoint name used by that activity, the name of the owner activity, a <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the type of the contract, and the context information itself.","source":"A static method that sets context information for a <xref href=\"System.Workflow.Activities.SendActivity\"></xref> activity, given an activity instance, an endpoint name used by that activity, the name of the owner activity, a <xref href=\"System.Type\"></xref> object that represents the type of the contract, and the context information itself."}],"pos":[48636,48979],"yaml":true},{"content":"The Activity instance to associate the context information with.","nodes":[{"pos":[0,64],"content":"The Activity instance to associate the context information with.","nodes":[{"content":"The Activity instance to associate the context information with.","pos":[0,64]}]}],"pos":[49528,49593],"yaml":true},{"content":"The name of an endpoint used for correlation with a service.","nodes":[{"pos":[0,60],"content":"The name of an endpoint used for correlation with a service.","nodes":[{"content":"The name of an endpoint used for correlation with a service.","pos":[0,60]}]}],"pos":[49661,49722],"yaml":true},{"content":"The name of the owning activity","nodes":[{"pos":[0,31],"content":"The name of the owning activity","nodes":[{"content":"The name of the owning activity","pos":[0,31]}]}],"pos":[49795,49827],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the contract implemented by a service.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the contract implemented by a service.","source":"The <xref href=\"System.Type\"></xref> of the contract implemented by a service."}],"pos":[49893,49972],"yaml":true},{"content":"The context information to set.","nodes":[{"pos":[0,31],"content":"The context information to set.","nodes":[{"content":"The context information to set.","pos":[0,31]}]}],"pos":[50089,50121],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Activities.SendActivity\n  commentId: T:System.Workflow.Activities.SendActivity\n  id: SendActivity\n  children:\n  - System.Workflow.Activities.SendActivity.#ctor\n  - System.Workflow.Activities.SendActivity.#ctor(System.String)\n  - System.Workflow.Activities.SendActivity.AfterResponse\n  - System.Workflow.Activities.SendActivity.AfterResponseEvent\n  - System.Workflow.Activities.SendActivity.BeforeSend\n  - System.Workflow.Activities.SendActivity.BeforeSendEvent\n  - System.Workflow.Activities.SendActivity.ChannelToken\n  - System.Workflow.Activities.SendActivity.Context\n  - System.Workflow.Activities.SendActivity.CustomAddress\n  - System.Workflow.Activities.SendActivity.CustomAddressProperty\n  - System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)\n  - System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)\n  - System.Workflow.Activities.SendActivity.InitializeProperties\n  - System.Workflow.Activities.SendActivity.ParameterBindings\n  - System.Workflow.Activities.SendActivity.ReturnValuePropertyName\n  - System.Workflow.Activities.SendActivity.ServiceOperationInfo\n  - System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  - System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  langs:\n  - csharp\n  name: SendActivity\n  nameWithType: SendActivity\n  fullName: System.Workflow.Activities.SendActivity\n  type: Class\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Client activity that models the synchronous invocation of a Windows Communication Foundation (WCF) service operation.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \\n  \\n The <xref:System.Workflow.Activities.SendActivity> activity enables you to participate in a conversation with a [!INCLUDE[indigo2](~/includes/indigo2-md.md)] service using a predefined message exchange pattern.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Workflow.Activities.SendActivity> activity is a blocking activity, meaning that workflow execution is blocked until the activity completes execution.  \\n  \\n The message exchange patterns supported by the <xref:System.Workflow.Activities.SendActivity> activity include:  \\n  \\n-   One-way Send Message  \\n  \\n     The <xref:System.Workflow.Activities.SendActivity> activity sends a message but does not expect a response from the service.  \\n  \\n-   Send Request - Receive Reply  \\n  \\n     The <xref:System.Workflow.Activities.SendActivity> activity sends a message and waits until a response is received from the service.  \\n  \\n-   Send Request - Receive Fault  \\n  \\n     The <xref:System.Workflow.Activities.SendActivity> activity sends a message and waits until a response or a fault is received from the service. During execution, the send activity throws all of the faults that were received from the server. <xref:System.Workflow.ComponentModel.FaultHandlerActivity> activities can be used to handle the faults in the client workflow.  \\n  \\n> [!NOTE]\\n>  This activity is part of [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]. For the equivalent activity in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], see <xref:System.ServiceModel.Activities.Send>.\"\n  syntax:\n    content: >-\n      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.SendActivity), \"Design.Resources.SendActivity.png\")]\n\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.SendActivityValidator))]\n\n      public sealed class SendActivity : System.Workflow.ComponentModel.Activity\n  inheritance:\n  - System.Object\n  - System.Workflow.ComponentModel.DependencyObject\n  - System.Workflow.ComponentModel.Activity\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty\n  - System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.ComponentModel.Activity.Canceling\n  - System.Workflow.ComponentModel.Activity.CancelingEvent\n  - System.Workflow.ComponentModel.Activity.Clone\n  - System.Workflow.ComponentModel.Activity.Closed\n  - System.Workflow.ComponentModel.Activity.ClosedEvent\n  - System.Workflow.ComponentModel.Activity.Compensating\n  - System.Workflow.ComponentModel.Activity.CompensatingEvent\n  - System.Workflow.ComponentModel.Activity.Description\n  - System.Workflow.ComponentModel.Activity.Enabled\n  - System.Workflow.ComponentModel.Activity.Executing\n  - System.Workflow.ComponentModel.Activity.ExecutingEvent\n  - System.Workflow.ComponentModel.Activity.ExecutionResult\n  - System.Workflow.ComponentModel.Activity.ExecutionStatus\n  - System.Workflow.ComponentModel.Activity.Faulting\n  - System.Workflow.ComponentModel.Activity.FaultingEvent\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)\n  - System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)\n  - System.Workflow.ComponentModel.Activity.Initialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener{``0},``0)\n  - System.Workflow.ComponentModel.Activity.IsDynamicActivity\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.Name\n  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.Parent\n  - System.Workflow.ComponentModel.Activity.QualifiedName\n  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)\n  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)\n  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.StatusChanged\n  - System.Workflow.ComponentModel.Activity.StatusChangedEvent\n  - System.Workflow.ComponentModel.Activity.ToString\n  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)\n  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)\n  - System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId\n  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.DesignMode\n  - System.Workflow.ComponentModel.DependencyObject.Dispose\n  - System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)\n  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)\n  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)\n  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject\n  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)\n  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.Site\n  - System.Workflow.ComponentModel.DependencyObject.UserData\n  attributes:\n  - type: System.Drawing.ToolboxBitmapAttribute\n  - type: System.ObsoleteAttribute\n  - type: System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.#ctor\n  commentId: M:System.Workflow.Activities.SendActivity.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: SendActivity()\n  nameWithType: SendActivity.SendActivity()\n  fullName: SendActivity.SendActivity()\n  type: Constructor\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> class.\n  remarks: The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer.\n  example:\n  - \"The following example shows how to create a new instance of the <xref:System.Workflow.Activities.SendActivity> class.  This example was adapted from the `Conversations` SDK sample.  \\n  \\n [!code-csharp[SendActivity#16](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#16)]\"\n  syntax:\n    content: public SendActivity ();\n    parameters: []\n  overload: System.Workflow.Activities.SendActivity.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.#ctor(System.String)\n  commentId: M:System.Workflow.Activities.SendActivity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: SendActivity(String)\n  nameWithType: SendActivity.SendActivity(String)\n  fullName: SendActivity.SendActivity(String)\n  type: Constructor\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> class with the specified `name` property.\n  remarks: The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer.\n  example:\n  - \"The following example shows how to create a new instance of the <xref:System.Workflow.Activities.SendActivity> class.  \\n  \\n [!code-csharp[SendActivity#17](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#17)]\"\n  syntax:\n    content: public SendActivity (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The value assigned to <xref href=\"System.Workflow.ComponentModel.Activity.Name\"></xref> when the activity is initialized.\n  overload: System.Workflow.Activities.SendActivity.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.AfterResponse\n  commentId: E:System.Workflow.Activities.SendActivity.AfterResponse\n  id: AfterResponse\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: AfterResponse\n  nameWithType: SendActivity.AfterResponse\n  fullName: SendActivity.AfterResponse\n  type: Event\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Occurs after the response has been received from the service.\n  remarks: This event handler associated with this event can be used to read the return value from the service operation invoked.\n  example:\n  - \"The following example shows how to use the `AfterResponse` event.  \\n  \\n [!code-csharp[SendActivity#2](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#2)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(true)]\n\n      public event EventHandler<System.Workflow.Activities.SendActivityEventArgs> AfterResponse;\n    return:\n      type: System.EventHandler{System.Workflow.Activities.SendActivityEventArgs}\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.AfterResponseEvent\n  commentId: F:System.Workflow.Activities.SendActivity.AfterResponseEvent\n  id: AfterResponseEvent\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: AfterResponseEvent\n  nameWithType: SendActivity.AfterResponseEvent\n  fullName: SendActivity.AfterResponseEvent\n  type: Field\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref href=\"System.Workflow.Activities.SendActivity.AfterResponse\"></xref> event.\n  remarks: This dependency event property can be used to bind the send activity's <xref:System.Workflow.Activities.SendActivity.AfterResponse> event to a public event handler on the workflow class.\n  syntax:\n    content: public static readonly System.Workflow.ComponentModel.DependencyProperty AfterResponseEvent;\n    return:\n      type: System.Workflow.ComponentModel.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.BeforeSend\n  commentId: E:System.Workflow.Activities.SendActivity.BeforeSend\n  id: BeforeSend\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: BeforeSend\n  nameWithType: SendActivity.BeforeSend\n  fullName: SendActivity.BeforeSend\n  type: Event\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Occurs before the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> activity sends the message to the service.\n  remarks: \"This event handler associated with this event can be used to set the parameter values for the service operation being invoked.  \\n  \\n> [!NOTE]\\n>  The context of a <xref:System.Workflow.Activities.SendActivity> cannot be set in this event handler.\"\n  example:\n  - \"The following example shows how to use the `BeforeSend` event. This example was adapted from the `Conversations` SDK sample.  \\n  \\n [!code-csharp[SendActivity#3](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#3)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(true)]\n\n      public event EventHandler<System.Workflow.Activities.SendActivityEventArgs> BeforeSend;\n    return:\n      type: System.EventHandler{System.Workflow.Activities.SendActivityEventArgs}\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.BeforeSendEvent\n  commentId: F:System.Workflow.Activities.SendActivity.BeforeSendEvent\n  id: BeforeSendEvent\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: BeforeSendEvent\n  nameWithType: SendActivity.BeforeSendEvent\n  fullName: SendActivity.BeforeSendEvent\n  type: Field\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref href=\"System.Workflow.Activities.SendActivity.BeforeSend\"></xref> event.\n  remarks: This dependency event property can be used to bind the send activity's <xref:System.Workflow.Activities.SendActivity.BeforeSend> event to a public event handler on the workflow class.\n  syntax:\n    content: public static readonly System.Workflow.ComponentModel.DependencyProperty BeforeSendEvent;\n    return:\n      type: System.Workflow.ComponentModel.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.ChannelToken\n  commentId: P:System.Workflow.Activities.SendActivity.ChannelToken\n  id: ChannelToken\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: ChannelToken\n  nameWithType: SendActivity.ChannelToken\n  fullName: SendActivity.ChannelToken\n  type: Property\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: <xref href=\"System.Workflow.Activities.ChannelToken\"></xref> used by the <xref href=\"System.Workflow.Activities.SendActivity\"></xref> to associate itself with a client channel.\n  remarks: \"A channel token specifies the name of the channel, the scope of the channel, and the endpoint configuration name to be used in establishing the channel. The endpoint name in the configuration file has the address, binding, and contract information for a service that the <xref:System.Workflow.Activities.SendActivity> activity communicates with.  \\n  \\n The channel token also specifies a unique channel name and an owner activity name for the token. A channel token can be shared between multiple send activities that want to use the same endpoint to communicate with a service.\"\n  example:\n  - \"The following example shows how to access the `ChannelToken` property. This example was adapted from the `CalculatorClient` SDK sample.  \\n  \\n [!code-csharp[SendActivity#7](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#7)]\"\n  syntax:\n    content: public System.Workflow.Activities.ChannelToken ChannelToken { get; set; }\n    return:\n      type: System.Workflow.Activities.ChannelToken\n      description: A <xref href=\"System.Workflow.Activities.ChannelToken\"></xref> defining a client channel that a <xref href=\"System.Workflow.Activities.SendActivity\"></xref> uses to communicate with a service.\n  overload: System.Workflow.Activities.SendActivity.ChannelToken*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.Context\n  commentId: P:System.Workflow.Activities.SendActivity.Context\n  id: Context\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: Context\n  nameWithType: SendActivity.Context\n  fullName: SendActivity.Context\n  type: Property\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Returns a dictionary that contains the context used for communication between the client and the service it is communicating with, including such things as identification for correlation.\n  remarks: Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.\n  example:\n  - \"The following example shows how to access the `Context` property. This example was adapted from the `CalculatorClient` SDK sample.  \\n  \\n [!code-csharp[SendActivity#8](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#8)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public System.Collections.Generic.IDictionary<string,string> Context { get; set; }\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: A dictionary-based collection that contains <xref href=\"System.Xml.XmlQualifiedName\"></xref> keys and their associated <xref href=\"System.String\"></xref> values.\n  overload: System.Workflow.Activities.SendActivity.Context*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.CustomAddress\n  commentId: P:System.Workflow.Activities.SendActivity.CustomAddress\n  id: CustomAddress\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: CustomAddress\n  nameWithType: SendActivity.CustomAddress\n  fullName: SendActivity.CustomAddress\n  type: Property\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Gets or sets the custom address used to communicate with a service.\n  remarks: If present, this value is used to define the endpoint address for the operation.\n  example:\n  - \"The following example shows how to access the `CustomAddress` property. This example was adapted from the `CalculatorClient` SDK sample.  \\n  \\n [!code-csharp[SendActivity#9](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#9)]\"\n  syntax:\n    content: public string CustomAddress { get; set; }\n    return:\n      type: System.String\n      description: String value whose value is the address a service is listening on.\n  overload: System.Workflow.Activities.SendActivity.CustomAddress*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.CustomAddressProperty\n  commentId: F:System.Workflow.Activities.SendActivity.CustomAddressProperty\n  id: CustomAddressProperty\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: CustomAddressProperty\n  nameWithType: SendActivity.CustomAddressProperty\n  fullName: SendActivity.CustomAddressProperty\n  type: Field\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> for the <xref href=\"System.Workflow.Activities.SendActivity.CustomAddress\"></xref> property.\n  remarks: If present, this value is used to define the endpoint address for the operation.\n  syntax:\n    content: public static readonly System.Workflow.ComponentModel.DependencyProperty CustomAddressProperty;\n    return:\n      type: System.Workflow.ComponentModel.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  commentId: M:System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: Execute(ActivityExecutionContext)\n  nameWithType: SendActivity.Execute(ActivityExecutionContext)\n  fullName: SendActivity.Execute(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: ''\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: ''\n  overload: System.Workflow.Activities.SendActivity.Execute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)\n  commentId: M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)\n  id: GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: GetContext(Activity, ChannelToken, Type)\n  nameWithType: SendActivity.GetContext(Activity, ChannelToken, Type)\n  fullName: SendActivity.GetContext(Activity, ChannelToken, Type)\n  type: Method\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Gets or sets the context information for a send operation.\n  remarks: Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.\n  example:\n  - \"The following example shows how to use the `GetContext` method.  \\n  \\n [!code-csharp[SendActivity#12](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#12)]\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,string> GetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType);\n    parameters:\n    - id: activity\n      type: System.Workflow.ComponentModel.Activity\n      description: Activity whose context information is required.\n    - id: endpoint\n      type: System.Workflow.Activities.ChannelToken\n      description: Endpoint information for correlation with a service.\n    - id: contractType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the contract implemented by a service.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: A dictionary-based collection that contains <xref href=\"System.Xml.XmlQualifiedName\"></xref> keys and their associated <xref href=\"System.String\"></xref> values.\n  overload: System.Workflow.Activities.SendActivity.GetContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)\n  commentId: M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)\n  id: GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: GetContext(Activity, String, String, Type)\n  nameWithType: SendActivity.GetContext(Activity, String, String, Type)\n  fullName: SendActivity.GetContext(Activity, String, String, Type)\n  type: Method\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Static method that returns context information given an activity instance, an endpoint name used by that activity, the name of the owner activity, and a <xref href=\"System.Type\"></xref> object that represents the type of the contract.\n  remarks: Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.\n  example:\n  - \"The following example shows how to use the `GetContext` method.  \\n  \\n [!code-csharp[SendActivity#15](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#15)]\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,string> GetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType);\n    parameters:\n    - id: activity\n      type: System.Workflow.ComponentModel.Activity\n      description: Activity whose context information is required.\n    - id: endpointName\n      type: System.String\n      description: Name of the endpoint used for correlation with a service.\n    - id: ownerActivityName\n      type: System.String\n      description: The name of the owning activity.\n    - id: contractType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the contract implemented by a service.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: A dictionary-based collection that contains <xref href=\"System.Xml.XmlQualifiedName\"></xref> keys and their associated <xref href=\"System.String\"></xref> values.\n  overload: System.Workflow.Activities.SendActivity.GetContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.InitializeProperties\n  commentId: M:System.Workflow.Activities.SendActivity.InitializeProperties\n  id: InitializeProperties\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: InitializeProperties()\n  nameWithType: SendActivity.InitializeProperties()\n  fullName: SendActivity.InitializeProperties()\n  type: Method\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override void InitializeProperties ();\n    parameters: []\n  overload: System.Workflow.Activities.SendActivity.InitializeProperties*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.ParameterBindings\n  commentId: P:System.Workflow.Activities.SendActivity.ParameterBindings\n  id: ParameterBindings\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: ParameterBindings\n  nameWithType: SendActivity.ParameterBindings\n  fullName: SendActivity.ParameterBindings\n  type: Property\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Gets the collection of bindable parameters as found in the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] service's formal parameter list.\n  remarks: \"<xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> can be used to specify bindings between the service operation parameters and public field and properties of the workflow that contains the <xref:System.Workflow.Activities.SendActivity> activity. When the <xref:System.Workflow.Activities.SendActivity> activity executes, the corresponding parameter values are read from the workflow properties they are bound to and are sent to the service as service operation parameters.  \\n  \\n <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> can also be used to retrieve the return values from a service operation.  \\n  \\n All parameters of the service operation should be bound. Unbound service operation parameters produce compiler warnings and the default values of the parameter are sent when the <xref:System.Workflow.Activities.SendActivity> is invoked.\"\n  example:\n  - \"The following example shows how to access the `ParameterBindings` property. This example was adapted from the `Conversations` SDK sample.  \\n  \\n [!code-csharp[SendActivity#0](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#0)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings { get; }\n    return:\n      type: System.Workflow.ComponentModel.WorkflowParameterBindingCollection\n      description: The <xref href=\"System.Workflow.ComponentModel.WorkflowParameterBindingCollection\"></xref> of parameters to bind to.\n  overload: System.Workflow.Activities.SendActivity.ParameterBindings*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.ReturnValuePropertyName\n  commentId: F:System.Workflow.Activities.SendActivity.ReturnValuePropertyName\n  id: ReturnValuePropertyName\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: ReturnValuePropertyName\n  nameWithType: SendActivity.ReturnValuePropertyName\n  fullName: SendActivity.ReturnValuePropertyName\n  type: Field\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Name of the property that is used for the return value sent by the service that the `SendActivity` activity is communicating with.\n  remarks: This string can be used to retrieve the return value from the <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> associated with the <xref:System.Workflow.Activities.SendActivity> activity in the <xref:System.Workflow.Activities.SendActivity.AfterResponse> event handler.\n  example:\n  - \"The following example shows how to access the `ReturnValuePropertyName` field.  \\n  \\n [!code-csharp[SendActivity#6](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#6)]\"\n  syntax:\n    content: public const string ReturnValuePropertyName;\n    return:\n      type: System.String\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.ServiceOperationInfo\n  commentId: P:System.Workflow.Activities.SendActivity.ServiceOperationInfo\n  id: ServiceOperationInfo\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: ServiceOperationInfo\n  nameWithType: SendActivity.ServiceOperationInfo\n  fullName: SendActivity.ServiceOperationInfo\n  type: Property\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: Defines the contract and operation of the service that the `SendActivity` activity communicates with.\n  remarks: The <xref:System.Workflow.Activities.SendActivity> activity always refers to an existing contract and its defined operations. There is no provision that allows a <xref:System.Workflow.Activities.SendActivity> activity to define a contract itself.\n  example:\n  - \"The following example shows how to access the `ServiceOperationInfo` property. This example was adapted from the `Conversations` SDK sample.  \\n  \\n [!code-csharp[SendActivity#1](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(true)]\n\n      public System.Workflow.Activities.TypedOperationInfo ServiceOperationInfo { get; set; }\n    return:\n      type: System.Workflow.Activities.TypedOperationInfo\n      description: A <xref href=\"System.Workflow.Activities.TypedOperationInfo\"></xref> object that contains the contract name, the contract type, the operation name, (which may be distinct from the actual method name), whether the operation is a one-way operation, and method information including parameters about the operation.\n  overload: System.Workflow.Activities.SendActivity.ServiceOperationInfo*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  commentId: M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  id: SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: SetContext(Activity, ChannelToken, Type, IDictionary<String,String>)\n  nameWithType: SendActivity.SetContext(Activity, ChannelToken, Type, IDictionary<String,String>)\n  fullName: SendActivity.SetContext(Activity, ChannelToken, Type, IDictionary<String,String>)\n  type: Method\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: A static method that sets context information for a <xref href=\"System.Workflow.Activities.SendActivity\"></xref> activity, given an activity instance, an endpoint used by that activity, a <xref href=\"System.Type\"></xref> object that represents the type of the contract, and the context information itself.\n  remarks: Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation.\n  example:\n  - The following example shows how to use the `SetContext` method.\n  syntax:\n    content: public static void SetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType, System.Collections.Generic.IDictionary<string,string> context);\n    parameters:\n    - id: activity\n      type: System.Workflow.ComponentModel.Activity\n      description: The Activity instance to associate the context information with.\n    - id: endpoint\n      type: System.Workflow.Activities.ChannelToken\n      description: The endpoint used for correlation with a service.\n    - id: contractType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the contract implemented by a service.\n    - id: context\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: The context information to set.\n  overload: System.Workflow.Activities.SendActivity.SetContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  commentId: M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  id: SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.Workflow.Activities.SendActivity\n  langs:\n  - csharp\n  name: SetContext(Activity, String, String, Type, IDictionary<String,String>)\n  nameWithType: SendActivity.SetContext(Activity, String, String, Type, IDictionary<String,String>)\n  fullName: SendActivity.SetContext(Activity, String, String, Type, IDictionary<String,String>)\n  type: Method\n  assemblies:\n  - System.WorkflowServices\n  namespace: System.Workflow.Activities\n  summary: A static method that sets context information for a <xref href=\"System.Workflow.Activities.SendActivity\"></xref> activity, given an activity instance, an endpoint name used by that activity, the name of the owner activity, a <xref href=\"System.Type\"></xref> object that represents the type of the contract, and the context information itself.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the `SetContext` method.  \\n  \\n [!code-csharp[SendActivity#15](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#15)]\"\n  syntax:\n    content: public static void SetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType, System.Collections.Generic.IDictionary<string,string> context);\n    parameters:\n    - id: activity\n      type: System.Workflow.ComponentModel.Activity\n      description: The Activity instance to associate the context information with.\n    - id: endpointName\n      type: System.String\n      description: The name of an endpoint used for correlation with a service.\n    - id: ownerActivityName\n      type: System.String\n      description: The name of the owning activity\n    - id: contractType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the contract implemented by a service.\n    - id: context\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: The context information to set.\n  overload: System.Workflow.Activities.SendActivity.SetContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Workflow.ComponentModel.Activity\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Workflow.ComponentModel.Activity\n- uid: System.Workflow.Activities.SendActivity.#ctor\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: SendActivity()\n  nameWithType: SendActivity.SendActivity()\n  fullName: SendActivity.SendActivity()\n- uid: System.Workflow.Activities.SendActivity.#ctor(System.String)\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: SendActivity(String)\n  nameWithType: SendActivity.SendActivity(String)\n  fullName: SendActivity.SendActivity(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Activities.SendActivity.AfterResponse\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: AfterResponse\n  nameWithType: SendActivity.AfterResponse\n  fullName: SendActivity.AfterResponse\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Workflow.Activities.SendActivityEventArgs\n  name: SendActivityEventArgs\n  nameWithType: SendActivityEventArgs\n  fullName: System.Workflow.Activities.SendActivityEventArgs\n- uid: System.EventHandler{System.Workflow.Activities.SendActivityEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<SendActivityEventArgs>\n  nameWithType: EventHandler<SendActivityEventArgs>\n  fullName: System.EventHandler<System.Workflow.Activities.SendActivityEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Workflow.Activities.SendActivityEventArgs\n    name: SendActivityEventArgs\n    nameWithType: SendActivityEventArgs\n    fullName: System.Workflow.Activities.SendActivityEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Workflow.Activities.SendActivity.AfterResponseEvent\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: AfterResponseEvent\n  nameWithType: SendActivity.AfterResponseEvent\n  fullName: SendActivity.AfterResponseEvent\n- uid: System.Workflow.ComponentModel.DependencyProperty\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Workflow.ComponentModel.DependencyProperty\n- uid: System.Workflow.Activities.SendActivity.BeforeSend\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: BeforeSend\n  nameWithType: SendActivity.BeforeSend\n  fullName: SendActivity.BeforeSend\n- uid: System.Workflow.Activities.SendActivity.BeforeSendEvent\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: BeforeSendEvent\n  nameWithType: SendActivity.BeforeSendEvent\n  fullName: SendActivity.BeforeSendEvent\n- uid: System.Workflow.Activities.SendActivity.ChannelToken\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: ChannelToken\n  nameWithType: SendActivity.ChannelToken\n  fullName: SendActivity.ChannelToken\n- uid: System.Workflow.Activities.ChannelToken\n  parent: System.Workflow.Activities\n  isExternal: false\n  name: ChannelToken\n  nameWithType: ChannelToken\n  fullName: System.Workflow.Activities.ChannelToken\n- uid: System.Workflow.Activities.SendActivity.Context\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: Context\n  nameWithType: SendActivity.Context\n  fullName: SendActivity.Context\n- uid: System.Collections.Generic.IDictionary`2\n  name: IDictionary<TKey,TValue>\n  nameWithType: IDictionary<TKey,TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey,TValue>\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IDictionary<String,String>\n  nameWithType: IDictionary<String,String>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Workflow.Activities.SendActivity.CustomAddress\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: CustomAddress\n  nameWithType: SendActivity.CustomAddress\n  fullName: SendActivity.CustomAddress\n- uid: System.Workflow.Activities.SendActivity.CustomAddressProperty\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: CustomAddressProperty\n  nameWithType: SendActivity.CustomAddressProperty\n  fullName: SendActivity.CustomAddressProperty\n- uid: System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: Execute(ActivityExecutionContext)\n  nameWithType: SendActivity.Execute(ActivityExecutionContext)\n  fullName: SendActivity.Execute(ActivityExecutionContext)\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatus\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatus\n  nameWithType: ActivityExecutionStatus\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus\n- uid: System.Workflow.ComponentModel.ActivityExecutionContext\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionContext\n  nameWithType: ActivityExecutionContext\n  fullName: System.Workflow.ComponentModel.ActivityExecutionContext\n- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: GetContext(Activity, ChannelToken, Type)\n  nameWithType: SendActivity.GetContext(Activity, ChannelToken, Type)\n  fullName: SendActivity.GetContext(Activity, ChannelToken, Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: GetContext(Activity, String, String, Type)\n  nameWithType: SendActivity.GetContext(Activity, String, String, Type)\n  fullName: SendActivity.GetContext(Activity, String, String, Type)\n- uid: System.Workflow.Activities.SendActivity.InitializeProperties\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: InitializeProperties()\n  nameWithType: SendActivity.InitializeProperties()\n  fullName: SendActivity.InitializeProperties()\n- uid: System.Workflow.Activities.SendActivity.ParameterBindings\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: ParameterBindings\n  nameWithType: SendActivity.ParameterBindings\n  fullName: SendActivity.ParameterBindings\n- uid: System.Workflow.ComponentModel.WorkflowParameterBindingCollection\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: WorkflowParameterBindingCollection\n  nameWithType: WorkflowParameterBindingCollection\n  fullName: System.Workflow.ComponentModel.WorkflowParameterBindingCollection\n- uid: System.Workflow.Activities.SendActivity.ReturnValuePropertyName\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: ReturnValuePropertyName\n  nameWithType: SendActivity.ReturnValuePropertyName\n  fullName: SendActivity.ReturnValuePropertyName\n- uid: System.Workflow.Activities.SendActivity.ServiceOperationInfo\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: ServiceOperationInfo\n  nameWithType: SendActivity.ServiceOperationInfo\n  fullName: SendActivity.ServiceOperationInfo\n- uid: System.Workflow.Activities.TypedOperationInfo\n  parent: System.Workflow.Activities\n  isExternal: false\n  name: TypedOperationInfo\n  nameWithType: TypedOperationInfo\n  fullName: System.Workflow.Activities.TypedOperationInfo\n- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: SetContext(Activity, ChannelToken, Type, IDictionary<String,String>)\n  nameWithType: SendActivity.SetContext(Activity, ChannelToken, Type, IDictionary<String,String>)\n  fullName: SendActivity.SetContext(Activity, ChannelToken, Type, IDictionary<String,String>)\n- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: SetContext(Activity, String, String, Type, IDictionary<String,String>)\n  nameWithType: SendActivity.SetContext(Activity, String, String, Type, IDictionary<String,String>)\n  fullName: SendActivity.SetContext(Activity, String, String, Type, IDictionary<String,String>)\n- uid: System.Workflow.Activities.SendActivity.#ctor*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: SendActivity\n  nameWithType: SendActivity.SendActivity\n  fullName: SendActivity.SendActivity\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.GetContext*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: GetContext\n  nameWithType: SendActivity.GetContext\n  fullName: SendActivity.GetContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.SetContext*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: SetContext\n  nameWithType: SendActivity.SetContext\n  fullName: SendActivity.SetContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.ChannelToken*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: ChannelToken\n  nameWithType: SendActivity.ChannelToken\n  fullName: SendActivity.ChannelToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.Context*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: Context\n  nameWithType: SendActivity.Context\n  fullName: SendActivity.Context\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.CustomAddress*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: CustomAddress\n  nameWithType: SendActivity.CustomAddress\n  fullName: SendActivity.CustomAddress\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.Execute*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: Execute\n  nameWithType: SendActivity.Execute\n  fullName: SendActivity.Execute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.InitializeProperties*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: InitializeProperties\n  nameWithType: SendActivity.InitializeProperties\n  fullName: SendActivity.InitializeProperties\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.ParameterBindings*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: ParameterBindings\n  nameWithType: SendActivity.ParameterBindings\n  fullName: SendActivity.ParameterBindings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Workflow.Activities.SendActivity.ServiceOperationInfo*\n  parent: System.Workflow.Activities.SendActivity\n  isExternal: false\n  name: ServiceOperationInfo\n  nameWithType: SendActivity.ServiceOperationInfo\n  fullName: SendActivity.ServiceOperationInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SendActivity.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Workflow.ComponentModel.Activity.ToString\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ToString()\n  nameWithType: Activity.ToString()\n  fullName: Activity.ToString()\n- uid: System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: AddHandler(DependencyProperty, Object)\n  nameWithType: DependencyObject.AddHandler(DependencyProperty, Object)\n  fullName: DependencyObject.AddHandler(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.DesignMode\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: DesignMode\n  nameWithType: DependencyObject.DesignMode\n  fullName: DependencyObject.DesignMode\n- uid: System.Workflow.ComponentModel.DependencyObject.Dispose\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: Dispose()\n  nameWithType: DependencyObject.Dispose()\n  fullName: DependencyObject.Dispose()\n- uid: System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DependencyObject.Dispose(Boolean)\n  fullName: DependencyObject.Dispose(Boolean)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetBinding(DependencyProperty)\n  nameWithType: DependencyObject.GetBinding(DependencyProperty)\n  fullName: DependencyObject.GetBinding(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetBoundValue(ActivityBind, Type)\n  nameWithType: DependencyObject.GetBoundValue(ActivityBind, Type)\n  fullName: DependencyObject.GetBoundValue(ActivityBind, Type)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetInvocationList<T>(DependencyProperty)\n  nameWithType: DependencyObject.GetInvocationList<T>(DependencyProperty)\n  fullName: DependencyObject.GetInvocationList<T>(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetValue(DependencyProperty)\n  nameWithType: DependencyObject.GetValue(DependencyProperty)\n  fullName: DependencyObject.GetValue(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: GetValueBase(DependencyProperty)\n  nameWithType: DependencyObject.GetValueBase(DependencyProperty)\n  fullName: DependencyObject.GetValueBase(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: IsBindingSet(DependencyProperty)\n  nameWithType: DependencyObject.IsBindingSet(DependencyProperty)\n  fullName: DependencyObject.IsBindingSet(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: MetaEquals(DependencyObject)\n  nameWithType: DependencyObject.MetaEquals(DependencyObject)\n  fullName: DependencyObject.MetaEquals(DependencyObject)\n- uid: System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: ParentDependencyObject\n  nameWithType: DependencyObject.ParentDependencyObject\n  fullName: DependencyObject.ParentDependencyObject\n- uid: System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: RemoveHandler(DependencyProperty, Object)\n  nameWithType: DependencyObject.RemoveHandler(DependencyProperty, Object)\n  fullName: DependencyObject.RemoveHandler(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: RemoveProperty(DependencyProperty)\n  nameWithType: DependencyObject.RemoveProperty(DependencyProperty)\n  fullName: DependencyObject.RemoveProperty(DependencyProperty)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetBinding(DependencyProperty, ActivityBind)\n  nameWithType: DependencyObject.SetBinding(DependencyProperty, ActivityBind)\n  fullName: DependencyObject.SetBinding(DependencyProperty, ActivityBind)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetBoundValue(ActivityBind, Object)\n  nameWithType: DependencyObject.SetBoundValue(ActivityBind, Object)\n  fullName: DependencyObject.SetBoundValue(ActivityBind, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetReadOnlyPropertyValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetReadOnlyPropertyValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetReadOnlyPropertyValue(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetValue(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: SetValueBase(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValueBase(DependencyProperty, Object)\n  fullName: DependencyObject.SetValueBase(DependencyProperty, Object)\n- uid: System.Workflow.ComponentModel.DependencyObject.Site\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: Site\n  nameWithType: DependencyObject.Site\n  fullName: DependencyObject.Site\n- uid: System.Workflow.ComponentModel.DependencyObject.UserData\n  parent: System.Workflow.ComponentModel.DependencyObject\n  isExternal: false\n  name: UserData\n  nameWithType: DependencyObject.UserData\n  fullName: DependencyObject.UserData\n- uid: System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ActivityContextGuidProperty\n  nameWithType: Activity.ActivityContextGuidProperty\n  fullName: Activity.ActivityContextGuidProperty\n- uid: System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: Activity.Cancel(ActivityExecutionContext)\n  fullName: Activity.Cancel(ActivityExecutionContext)\n- uid: System.Workflow.ComponentModel.Activity.Canceling\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Canceling\n  nameWithType: Activity.Canceling\n  fullName: Activity.Canceling\n- uid: System.Workflow.ComponentModel.Activity.CancelingEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: CancelingEvent\n  nameWithType: Activity.CancelingEvent\n  fullName: Activity.CancelingEvent\n- uid: System.Workflow.ComponentModel.Activity.Clone\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Clone()\n  nameWithType: Activity.Clone()\n  fullName: Activity.Clone()\n- uid: System.Workflow.ComponentModel.Activity.Closed\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Closed\n  nameWithType: Activity.Closed\n  fullName: Activity.Closed\n- uid: System.Workflow.ComponentModel.Activity.ClosedEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ClosedEvent\n  nameWithType: Activity.ClosedEvent\n  fullName: Activity.ClosedEvent\n- uid: System.Workflow.ComponentModel.Activity.Compensating\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Compensating\n  nameWithType: Activity.Compensating\n  fullName: Activity.Compensating\n- uid: System.Workflow.ComponentModel.Activity.CompensatingEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: CompensatingEvent\n  nameWithType: Activity.CompensatingEvent\n  fullName: Activity.CompensatingEvent\n- uid: System.Workflow.ComponentModel.Activity.Description\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Description\n  nameWithType: Activity.Description\n  fullName: Activity.Description\n- uid: System.Workflow.ComponentModel.Activity.Enabled\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Enabled\n  nameWithType: Activity.Enabled\n  fullName: Activity.Enabled\n- uid: System.Workflow.ComponentModel.Activity.Executing\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Executing\n  nameWithType: Activity.Executing\n  fullName: Activity.Executing\n- uid: System.Workflow.ComponentModel.Activity.ExecutingEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ExecutingEvent\n  nameWithType: Activity.ExecutingEvent\n  fullName: Activity.ExecutingEvent\n- uid: System.Workflow.ComponentModel.Activity.ExecutionResult\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ExecutionResult\n  nameWithType: Activity.ExecutionResult\n  fullName: Activity.ExecutionResult\n- uid: System.Workflow.ComponentModel.Activity.ExecutionStatus\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: ExecutionStatus\n  nameWithType: Activity.ExecutionStatus\n  fullName: Activity.ExecutionStatus\n- uid: System.Workflow.ComponentModel.Activity.Faulting\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Faulting\n  nameWithType: Activity.Faulting\n  fullName: Activity.Faulting\n- uid: System.Workflow.ComponentModel.Activity.FaultingEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: FaultingEvent\n  nameWithType: Activity.FaultingEvent\n  fullName: Activity.FaultingEvent\n- uid: System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: GetActivityByName(String)\n  nameWithType: Activity.GetActivityByName(String)\n  fullName: Activity.GetActivityByName(String)\n- uid: System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: GetActivityByName(String, Boolean)\n  nameWithType: Activity.GetActivityByName(String, Boolean)\n  fullName: Activity.GetActivityByName(String, Boolean)\n- uid: System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: HandleFault(ActivityExecutionContext, Exception)\n  nameWithType: Activity.HandleFault(ActivityExecutionContext, Exception)\n  fullName: Activity.HandleFault(ActivityExecutionContext, Exception)\n- uid: System.Workflow.ComponentModel.Activity.Initialize(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Initialize(IServiceProvider)\n  nameWithType: Activity.Initialize(IServiceProvider)\n  fullName: Activity.Initialize(IServiceProvider)\n- uid: System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Invoke<T>(EventHandler<T>, T)\n  nameWithType: Activity.Invoke<T>(EventHandler<T>, T)\n  fullName: Activity.Invoke<T>(EventHandler<T>, T)\n- uid: System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener{``0},``0)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Invoke<T>(IActivityEventListener<T>, T)\n  nameWithType: Activity.Invoke<T>(IActivityEventListener<T>, T)\n  fullName: Activity.Invoke<T>(IActivityEventListener<T>, T)\n- uid: System.Workflow.ComponentModel.Activity.IsDynamicActivity\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: IsDynamicActivity\n  nameWithType: Activity.IsDynamicActivity\n  fullName: Activity.IsDynamicActivity\n- uid: System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Load(Stream, Activity)\n  nameWithType: Activity.Load(Stream, Activity)\n  fullName: Activity.Load(Stream, Activity)\n- uid: System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Load(Stream, Activity, IFormatter)\n  nameWithType: Activity.Load(Stream, Activity, IFormatter)\n  fullName: Activity.Load(Stream, Activity, IFormatter)\n- uid: System.Workflow.ComponentModel.Activity.Name\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Name\n  nameWithType: Activity.Name\n  fullName: Activity.Name\n- uid: System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: OnActivityExecutionContextLoad(IServiceProvider)\n  nameWithType: Activity.OnActivityExecutionContextLoad(IServiceProvider)\n  fullName: Activity.OnActivityExecutionContextLoad(IServiceProvider)\n- uid: System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: OnActivityExecutionContextUnload(IServiceProvider)\n  nameWithType: Activity.OnActivityExecutionContextUnload(IServiceProvider)\n  fullName: Activity.OnActivityExecutionContextUnload(IServiceProvider)\n- uid: System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: OnClosed(IServiceProvider)\n  nameWithType: Activity.OnClosed(IServiceProvider)\n  fullName: Activity.OnClosed(IServiceProvider)\n- uid: System.Workflow.ComponentModel.Activity.Parent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Parent\n  nameWithType: Activity.Parent\n  fullName: Activity.Parent\n- uid: System.Workflow.ComponentModel.Activity.QualifiedName\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: QualifiedName\n  nameWithType: Activity.QualifiedName\n  fullName: Activity.QualifiedName\n- uid: System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: RaiseEvent(DependencyProperty, Object, EventArgs)\n  nameWithType: Activity.RaiseEvent(DependencyProperty, Object, EventArgs)\n  fullName: Activity.RaiseEvent(DependencyProperty, Object, EventArgs)\n- uid: System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: RaiseGenericEvent<T>(DependencyProperty, Object, T)\n  nameWithType: Activity.RaiseGenericEvent<T>(DependencyProperty, Object, T)\n  fullName: Activity.RaiseGenericEvent<T>(DependencyProperty, Object, T)\n- uid: System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: RegisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n  nameWithType: Activity.RegisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n  fullName: Activity.RegisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n- uid: System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Save(Stream)\n  nameWithType: Activity.Save(Stream)\n  fullName: Activity.Save(Stream)\n- uid: System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Save(Stream, IFormatter)\n  nameWithType: Activity.Save(Stream, IFormatter)\n  fullName: Activity.Save(Stream, IFormatter)\n- uid: System.Workflow.ComponentModel.Activity.StatusChanged\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: StatusChanged\n  nameWithType: Activity.StatusChanged\n  fullName: Activity.StatusChanged\n- uid: System.Workflow.ComponentModel.Activity.StatusChangedEvent\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: StatusChangedEvent\n  nameWithType: Activity.StatusChangedEvent\n  fullName: Activity.StatusChangedEvent\n- uid: System.Workflow.ComponentModel.Activity.TrackData(System.Object)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: TrackData(Object)\n  nameWithType: Activity.TrackData(Object)\n  fullName: Activity.TrackData(Object)\n- uid: System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: TrackData(String, Object)\n  nameWithType: Activity.TrackData(String, Object)\n  fullName: Activity.TrackData(String, Object)\n- uid: System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: Uninitialize(IServiceProvider)\n  nameWithType: Activity.Uninitialize(IServiceProvider)\n  fullName: Activity.Uninitialize(IServiceProvider)\n- uid: System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: UnregisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n  nameWithType: Activity.UnregisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n  fullName: Activity.UnregisterForStatusChange(DependencyProperty, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)\n- uid: System.Workflow.ComponentModel.Activity.WorkflowInstanceId\n  parent: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: WorkflowInstanceId\n  nameWithType: Activity.WorkflowInstanceId\n  fullName: Activity.WorkflowInstanceId\n"}