{"nodes":[{"content":"Specifies an installer that copies properties from a component to use at install time.","nodes":[{"pos":[0,86],"content":"Specifies an installer that copies properties from a component to use at install time.","nodes":[{"content":"Specifies an installer that copies properties from a component to use at install time.","pos":[0,86]}]}],"pos":[732,819],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Configuration.Install.ComponentInstaller\"></xref> class.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.Install.ComponentInstaller\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Configuration.Install.ComponentInstaller\"></xref> class."}],"pos":[5082,5192],"yaml":true},{"content":"When overridden in a derived class, copies all the properties that are required at install time from the specified component.","nodes":[{"pos":[0,125],"content":"When overridden in a derived class, copies all the properties that are required at install time from the specified component.","nodes":[{"content":"When overridden in a derived class, copies all the properties that are required at install time from the specified component.","pos":[0,125]}]}],"pos":[6571,6697],"yaml":true},{"content":"The installer should take all the information it can from the live component, and store it for use at install time.","nodes":[{"pos":[0,115],"content":"The installer should take all the information it can from the live component, and store it for use at install time.","nodes":[{"content":"The installer should take all the information it can from the live component, and store it for use at install time.","pos":[0,115]}]}],"pos":[6708,6824],"yaml":true,"extradata":"MT"},{"content":"The component to copy from.","nodes":[{"pos":[0,27],"content":"The component to copy from.","nodes":[{"content":"The component to copy from.","pos":[0,27]}]}],"pos":[7954,7982],"yaml":true},{"content":"Determines if the specified installer installs the same object as this installer.","nodes":[{"pos":[0,81],"content":"Determines if the specified installer installs the same object as this installer.","nodes":[{"content":"Determines if the specified installer installs the same object as this installer.","pos":[0,81]}]}],"pos":[9391,9473],"yaml":true},{"content":"Typically, <xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A> returns `true` only if this installer and the installer specified by the `otherInstaller` parameter install the same object. In such a case, calling the <xref:System.Configuration.Install.Installer.Install%2A> or <xref:System.Configuration.Install.Installer.Uninstall%2A> method on either installer results in the same system state.","nodes":[{"pos":[0,423],"content":"Typically, <xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A> returns `true` only if this installer and the installer specified by the `otherInstaller` parameter install the same object. In such a case, calling the <xref:System.Configuration.Install.Installer.Install%2A> or <xref:System.Configuration.Install.Installer.Uninstall%2A> method on either installer results in the same system state.","nodes":[{"content":"Typically, <ph id=\"ph1\">&lt;xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph> only if this installer and the installer specified by the <ph id=\"ph3\">`otherInstaller`</ph> parameter install the same object.","pos":[0,215],"source":"Typically, <xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A> returns `true` only if this installer and the installer specified by the `otherInstaller` parameter install the same object."},{"content":"In such a case, calling the <ph id=\"ph1\">&lt;xref:System.Configuration.Install.Installer.Install%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Configuration.Install.Installer.Uninstall%2A&gt;</ph> method on either installer results in the same system state.","pos":[216,423],"source":" In such a case, calling the <xref:System.Configuration.Install.Installer.Install%2A> or <xref:System.Configuration.Install.Installer.Uninstall%2A> method on either installer results in the same system state."}]}],"pos":[9484,9908],"yaml":true,"extradata":"MT"},{"content":"The installer to compare.","nodes":[{"pos":[0,25],"content":"The installer to compare.","nodes":[{"content":"The installer to compare.","pos":[0,25]}]}],"pos":[11086,11112],"yaml":true},{"content":"`true` if this installer and the installer specified by the <code>otherInstaller</code> parameter install the same object; otherwise, `false`.","nodes":[{"pos":[0,142],"content":"<ph id=\"ph1\">`true`</ph> if this installer and the installer specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">otherInstaller</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter install the same object; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this installer and the installer specified by the <code>otherInstaller</code> parameter install the same object; otherwise, `false`."}],"pos":[11170,11315],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.Install.ComponentInstaller\n  commentId: T:System.Configuration.Install.ComponentInstaller\n  id: ComponentInstaller\n  children:\n  - System.Configuration.Install.ComponentInstaller.#ctor\n  - System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  - System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  langs:\n  - csharp\n  name: ComponentInstaller\n  nameWithType: ComponentInstaller\n  fullName: System.Configuration.Install.ComponentInstaller\n  type: Class\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Configuration.Install\n  summary: Specifies an installer that copies properties from a component to use at install time.\n  syntax:\n    content: 'public abstract class ComponentInstaller : System.Configuration.Install.Installer'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Configuration.Install.Installer\n  derivedClasses:\n  - System.Diagnostics.EventLogInstaller\n  - System.Diagnostics.PerformanceCounterInstaller\n  - System.Messaging.MessageQueueInstaller\n  - System.ServiceProcess.ServiceInstaller\n  - System.ServiceProcess.ServiceProcessInstaller\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Configuration.Install.Installer.AfterInstall\n  - System.Configuration.Install.Installer.AfterRollback\n  - System.Configuration.Install.Installer.AfterUninstall\n  - System.Configuration.Install.Installer.BeforeInstall\n  - System.Configuration.Install.Installer.BeforeRollback\n  - System.Configuration.Install.Installer.BeforeUninstall\n  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Committed\n  - System.Configuration.Install.Installer.Committing\n  - System.Configuration.Install.Installer.Context\n  - System.Configuration.Install.Installer.HelpText\n  - System.Configuration.Install.Installer.Install(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Installers\n  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Parent\n  - System.Configuration.Install.Installer.Rollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration.Install/ComponentInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Configuration.Install.ComponentInstaller.#ctor\n  commentId: M:System.Configuration.Install.ComponentInstaller.#ctor\n  id: '#ctor'\n  parent: System.Configuration.Install.ComponentInstaller\n  langs:\n  - csharp\n  name: ComponentInstaller()\n  nameWithType: ComponentInstaller.ComponentInstaller()\n  fullName: ComponentInstaller.ComponentInstaller()\n  type: Constructor\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Configuration.Install\n  summary: Initializes a new instance of the <xref href=\"System.Configuration.Install.ComponentInstaller\"></xref> class.\n  syntax:\n    content: protected ComponentInstaller ();\n    parameters: []\n  overload: System.Configuration.Install.ComponentInstaller.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration.Install/ComponentInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  commentId: M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  id: CopyFromComponent(System.ComponentModel.IComponent)\n  parent: System.Configuration.Install.ComponentInstaller\n  langs:\n  - csharp\n  name: CopyFromComponent(IComponent)\n  nameWithType: ComponentInstaller.CopyFromComponent(IComponent)\n  fullName: ComponentInstaller.CopyFromComponent(IComponent)\n  type: Method\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Configuration.Install\n  summary: When overridden in a derived class, copies all the properties that are required at install time from the specified component.\n  remarks: The installer should take all the information it can from the live component, and store it for use at install time.\n  example:\n  - \"The following example defines a class `MyInstallClass`, which creates the event log and copies the properties of the event log component to the <xref:System.Diagnostics.EventLogInstaller>. It also checks whether the <xref:System.ServiceProcess.ServiceInstaller> can perform the same kind of installation as the <xref:System.Diagnostics.EventLogInstaller>.  \\n  \\n [!code-cpp[ComponentInstaller_CopyFromComponent#1](~/samples/snippets/cpp/VS_Snippets_CLR/ComponentInstaller_CopyFromComponent/CPP/componentinstaller_copyfromcomponent.cpp#1)]\\n [!code-csharp[ComponentInstaller_CopyFromComponent#1](~/samples/snippets/csharp/VS_Snippets_CLR/ComponentInstaller_CopyFromComponent/CS/componentinstaller_copyfromcomponent.cs#1)]\\n [!code-vb[ComponentInstaller_CopyFromComponent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ComponentInstaller_CopyFromComponent/VB/componentinstaller_copyfromcomponent.vb#1)]\"\n  syntax:\n    content: public abstract void CopyFromComponent (System.ComponentModel.IComponent component);\n    parameters:\n    - id: component\n      type: System.ComponentModel.IComponent\n      description: The component to copy from.\n  overload: System.Configuration.Install.ComponentInstaller.CopyFromComponent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration.Install/ComponentInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  commentId: M:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  parent: System.Configuration.Install.ComponentInstaller\n  langs:\n  - csharp\n  name: IsEquivalentInstaller(ComponentInstaller)\n  nameWithType: ComponentInstaller.IsEquivalentInstaller(ComponentInstaller)\n  fullName: ComponentInstaller.IsEquivalentInstaller(ComponentInstaller)\n  type: Method\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Configuration.Install\n  summary: Determines if the specified installer installs the same object as this installer.\n  remarks: Typically, <xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A> returns `true` only if this installer and the installer specified by the `otherInstaller` parameter install the same object. In such a case, calling the <xref:System.Configuration.Install.Installer.Install%2A> or <xref:System.Configuration.Install.Installer.Uninstall%2A> method on either installer results in the same system state.\n  example:\n  - \"The following example defines a class `MyInstallClass`, which creates the event log and copies the properties of the event log component to the <xref:System.Diagnostics.EventLogInstaller> object. It also checks whether <xref:System.ServiceProcess.ServiceInstaller> object can handle the same kind of installation as <xref:System.Diagnostics.EventLogInstaller>.  \\n  \\n [!code-cpp[ComponentInstaller_CopyFromComponent#2](~/samples/snippets/cpp/VS_Snippets_CLR/ComponentInstaller_CopyFromComponent/CPP/componentinstaller_copyfromcomponent.cpp#2)]\\n [!code-csharp[ComponentInstaller_CopyFromComponent#2](~/samples/snippets/csharp/VS_Snippets_CLR/ComponentInstaller_CopyFromComponent/CS/componentinstaller_copyfromcomponent.cs#2)]\\n [!code-vb[ComponentInstaller_CopyFromComponent#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ComponentInstaller_CopyFromComponent/VB/componentinstaller_copyfromcomponent.vb#2)]\"\n  syntax:\n    content: public virtual bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);\n    parameters:\n    - id: otherInstaller\n      type: System.Configuration.Install.ComponentInstaller\n      description: The installer to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if this installer and the installer specified by the <code>otherInstaller</code> parameter install the same object; otherwise, `false`.'\n  overload: System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration.Install/ComponentInstaller.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Configuration.Install.Installer\n  parent: System.Configuration.Install\n  isExternal: false\n  name: Installer\n  nameWithType: Installer\n  fullName: System.Configuration.Install.Installer\n- uid: System.Configuration.Install.ComponentInstaller.#ctor\n  parent: System.Configuration.Install.ComponentInstaller\n  isExternal: false\n  name: ComponentInstaller()\n  nameWithType: ComponentInstaller.ComponentInstaller()\n  fullName: ComponentInstaller.ComponentInstaller()\n- uid: System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)\n  parent: System.Configuration.Install.ComponentInstaller\n  isExternal: false\n  name: CopyFromComponent(IComponent)\n  nameWithType: ComponentInstaller.CopyFromComponent(IComponent)\n  fullName: ComponentInstaller.CopyFromComponent(IComponent)\n- uid: System.ComponentModel.IComponent\n  parent: System.ComponentModel\n  isExternal: false\n  name: IComponent\n  nameWithType: IComponent\n  fullName: System.ComponentModel.IComponent\n- uid: System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)\n  parent: System.Configuration.Install.ComponentInstaller\n  isExternal: false\n  name: IsEquivalentInstaller(ComponentInstaller)\n  nameWithType: ComponentInstaller.IsEquivalentInstaller(ComponentInstaller)\n  fullName: ComponentInstaller.IsEquivalentInstaller(ComponentInstaller)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Configuration.Install.ComponentInstaller\n  parent: System.Configuration.Install\n  isExternal: false\n  name: ComponentInstaller\n  nameWithType: ComponentInstaller\n  fullName: System.Configuration.Install.ComponentInstaller\n- uid: System.Configuration.Install.ComponentInstaller.#ctor*\n  parent: System.Configuration.Install.ComponentInstaller\n  isExternal: false\n  name: ComponentInstaller\n  nameWithType: ComponentInstaller.ComponentInstaller\n  fullName: ComponentInstaller.ComponentInstaller\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration.Install/ComponentInstaller.xml\n- uid: System.Configuration.Install.ComponentInstaller.CopyFromComponent*\n  parent: System.Configuration.Install.ComponentInstaller\n  isExternal: false\n  name: CopyFromComponent\n  nameWithType: ComponentInstaller.CopyFromComponent\n  fullName: ComponentInstaller.CopyFromComponent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration.Install/ComponentInstaller.xml\n- uid: System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller*\n  parent: System.Configuration.Install.ComponentInstaller\n  isExternal: false\n  name: IsEquivalentInstaller\n  nameWithType: ComponentInstaller.IsEquivalentInstaller\n  fullName: ComponentInstaller.IsEquivalentInstaller\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration.Install/ComponentInstaller.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.ComponentModel.Component.ToString\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: ToString()\n  nameWithType: Component.ToString()\n  fullName: Component.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.ComponentModel.Component.CanRaiseEvents\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: CanRaiseEvents\n  nameWithType: Component.CanRaiseEvents\n  fullName: Component.CanRaiseEvents\n- uid: System.ComponentModel.Component.Container\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Container\n  nameWithType: Component.Container\n  fullName: Component.Container\n- uid: System.ComponentModel.Component.DesignMode\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: DesignMode\n  nameWithType: Component.DesignMode\n  fullName: Component.DesignMode\n- uid: System.ComponentModel.Component.Dispose\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Dispose()\n  nameWithType: Component.Dispose()\n  fullName: Component.Dispose()\n- uid: System.ComponentModel.Component.Dispose(System.Boolean)\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Component.Dispose(Boolean)\n  fullName: Component.Dispose(Boolean)\n- uid: System.ComponentModel.Component.Disposed\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Disposed\n  nameWithType: Component.Disposed\n  fullName: Component.Disposed\n- uid: System.ComponentModel.Component.Events\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Events\n  nameWithType: Component.Events\n  fullName: Component.Events\n- uid: System.ComponentModel.Component.GetService(System.Type)\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: Component.GetService(Type)\n  fullName: Component.GetService(Type)\n- uid: System.ComponentModel.Component.Site\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Site\n  nameWithType: Component.Site\n  fullName: Component.Site\n- uid: System.Configuration.Install.Installer.AfterInstall\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: AfterInstall\n  nameWithType: Installer.AfterInstall\n  fullName: Installer.AfterInstall\n- uid: System.Configuration.Install.Installer.AfterRollback\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: AfterRollback\n  nameWithType: Installer.AfterRollback\n  fullName: Installer.AfterRollback\n- uid: System.Configuration.Install.Installer.AfterUninstall\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: AfterUninstall\n  nameWithType: Installer.AfterUninstall\n  fullName: Installer.AfterUninstall\n- uid: System.Configuration.Install.Installer.BeforeInstall\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: BeforeInstall\n  nameWithType: Installer.BeforeInstall\n  fullName: Installer.BeforeInstall\n- uid: System.Configuration.Install.Installer.BeforeRollback\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: BeforeRollback\n  nameWithType: Installer.BeforeRollback\n  fullName: Installer.BeforeRollback\n- uid: System.Configuration.Install.Installer.BeforeUninstall\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: BeforeUninstall\n  nameWithType: Installer.BeforeUninstall\n  fullName: Installer.BeforeUninstall\n- uid: System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Commit(IDictionary)\n  nameWithType: Installer.Commit(IDictionary)\n  fullName: Installer.Commit(IDictionary)\n- uid: System.Configuration.Install.Installer.Committed\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Committed\n  nameWithType: Installer.Committed\n  fullName: Installer.Committed\n- uid: System.Configuration.Install.Installer.Committing\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Committing\n  nameWithType: Installer.Committing\n  fullName: Installer.Committing\n- uid: System.Configuration.Install.Installer.Context\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Context\n  nameWithType: Installer.Context\n  fullName: Installer.Context\n- uid: System.Configuration.Install.Installer.HelpText\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: HelpText\n  nameWithType: Installer.HelpText\n  fullName: Installer.HelpText\n- uid: System.Configuration.Install.Installer.Install(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Install(IDictionary)\n  nameWithType: Installer.Install(IDictionary)\n  fullName: Installer.Install(IDictionary)\n- uid: System.Configuration.Install.Installer.Installers\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Installers\n  nameWithType: Installer.Installers\n  fullName: Installer.Installers\n- uid: System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnAfterInstall(IDictionary)\n  nameWithType: Installer.OnAfterInstall(IDictionary)\n  fullName: Installer.OnAfterInstall(IDictionary)\n- uid: System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnAfterRollback(IDictionary)\n  nameWithType: Installer.OnAfterRollback(IDictionary)\n  fullName: Installer.OnAfterRollback(IDictionary)\n- uid: System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnAfterUninstall(IDictionary)\n  nameWithType: Installer.OnAfterUninstall(IDictionary)\n  fullName: Installer.OnAfterUninstall(IDictionary)\n- uid: System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnBeforeInstall(IDictionary)\n  nameWithType: Installer.OnBeforeInstall(IDictionary)\n  fullName: Installer.OnBeforeInstall(IDictionary)\n- uid: System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnBeforeRollback(IDictionary)\n  nameWithType: Installer.OnBeforeRollback(IDictionary)\n  fullName: Installer.OnBeforeRollback(IDictionary)\n- uid: System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnBeforeUninstall(IDictionary)\n  nameWithType: Installer.OnBeforeUninstall(IDictionary)\n  fullName: Installer.OnBeforeUninstall(IDictionary)\n- uid: System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnCommitted(IDictionary)\n  nameWithType: Installer.OnCommitted(IDictionary)\n  fullName: Installer.OnCommitted(IDictionary)\n- uid: System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: OnCommitting(IDictionary)\n  nameWithType: Installer.OnCommitting(IDictionary)\n  fullName: Installer.OnCommitting(IDictionary)\n- uid: System.Configuration.Install.Installer.Parent\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Parent\n  nameWithType: Installer.Parent\n  fullName: Installer.Parent\n- uid: System.Configuration.Install.Installer.Rollback(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Rollback(IDictionary)\n  nameWithType: Installer.Rollback(IDictionary)\n  fullName: Installer.Rollback(IDictionary)\n- uid: System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.Installer\n  isExternal: false\n  name: Uninstall(IDictionary)\n  nameWithType: Installer.Uninstall(IDictionary)\n  fullName: Installer.Uninstall(IDictionary)\n"}