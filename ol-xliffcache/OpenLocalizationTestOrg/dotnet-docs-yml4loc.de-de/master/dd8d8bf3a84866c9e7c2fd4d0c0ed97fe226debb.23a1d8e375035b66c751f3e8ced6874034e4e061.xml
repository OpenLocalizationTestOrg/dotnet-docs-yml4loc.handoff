{"nodes":[{"content":"Represents the abstract class from which all implementations of keyed hash algorithms must derive.","nodes":[{"pos":[0,98],"content":"Represents the abstract class from which all implementations of keyed hash algorithms must derive.","nodes":[{"content":"Represents the abstract class from which all implementations of keyed hash algorithms must derive.","pos":[0,98]}]}],"pos":[871,970],"yaml":true},{"content":"Hash functions map binary strings of an arbitrary length to small binary strings of a fixed length. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Small changes to the data result in large, unpredictable changes in the hash.  \n  \n A keyed hash algorithm is a key-dependent, one-way hash function used as a message authentication code. Only someone who knows the key can verify the hash. Keyed hash algorithms provide authenticity without secrecy.  \n  \n Hash functions are commonly used with digital signatures and for data integrity. The <xref:System.Security.Cryptography.HMACSHA1> class is an example of a keyed hash algorithm.","nodes":[{"pos":[0,319],"content":"Hash functions map binary strings of an arbitrary length to small binary strings of a fixed length. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Small changes to the data result in large, unpredictable changes in the hash.","nodes":[{"content":"Hash functions map binary strings of an arbitrary length to small binary strings of a fixed length. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Small changes to the data result in large, unpredictable changes in the hash.","pos":[0,319],"nodes":[{"content":"Hash functions map binary strings of an arbitrary length to small binary strings of a fixed length.","pos":[0,99]},{"content":"A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value.","pos":[100,241]},{"content":"Small changes to the data result in large, unpredictable changes in the hash.","pos":[242,319]}]}]},{"pos":[326,541],"content":"A keyed hash algorithm is a key-dependent, one-way hash function used as a message authentication code. Only someone who knows the key can verify the hash. Keyed hash algorithms provide authenticity without secrecy.","nodes":[{"content":"A keyed hash algorithm is a key-dependent, one-way hash function used as a message authentication code. Only someone who knows the key can verify the hash. Keyed hash algorithms provide authenticity without secrecy.","pos":[0,215],"nodes":[{"content":"A keyed hash algorithm is a key-dependent, one-way hash function used as a message authentication code.","pos":[0,103]},{"content":"Only someone who knows the key can verify the hash.","pos":[104,155]},{"content":"Keyed hash algorithms provide authenticity without secrecy.","pos":[156,215]}]}]},{"pos":[548,724],"content":"Hash functions are commonly used with digital signatures and for data integrity. The <xref:System.Security.Cryptography.HMACSHA1> class is an example of a keyed hash algorithm.","nodes":[{"content":"Hash functions are commonly used with digital signatures and for data integrity. The <xref:System.Security.Cryptography.HMACSHA1> class is an example of a keyed hash algorithm.","pos":[0,176],"nodes":[{"content":"Hash functions are commonly used with digital signatures and for data integrity.","pos":[0,80]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> class is an example of a keyed hash algorithm.","pos":[81,176],"source":" The <xref:System.Security.Cryptography.HMACSHA1> class is an example of a keyed hash algorithm."}]}]}],"pos":[981,1712],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> class.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> class."}],"pos":[5634,5744],"yaml":true},{"content":"You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.","nodes":[{"pos":[0,111],"content":"You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.","nodes":[{"content":"You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.","pos":[0,111],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code creates a new instance of a derived class.","pos":[52,111]}]}]}],"pos":[5755,5867],"yaml":true,"extradata":"MT"},{"content":"Creates an instance of the default implementation of a keyed hash algorithm.","nodes":[{"pos":[0,76],"content":"Creates an instance of the default implementation of a keyed hash algorithm.","nodes":[{"content":"Creates an instance of the default implementation of a keyed hash algorithm.","pos":[0,76]}]}],"pos":[7430,7507],"yaml":true},{"content":"By default, this overload uses the <xref:System.Security.Cryptography.HMACSHA1> implementation of a keyed hash algorithm. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class.","nodes":[{"pos":[0,464],"content":"By default, this overload uses the <xref:System.Security.Cryptography.HMACSHA1> implementation of a keyed hash algorithm. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class.","nodes":[{"content":"By default, this overload uses the <xref:System.Security.Cryptography.HMACSHA1> implementation of a keyed hash algorithm. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class.","pos":[0,464],"nodes":[{"content":"By default, this overload uses the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> implementation of a keyed hash algorithm.","pos":[0,121],"source":"By default, this overload uses the <xref:System.Security.Cryptography.HMACSHA1> implementation of a keyed hash algorithm."},{"content":"If you want to specify a different implementation, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29&gt;</ph> overload, which lets you specify an algorithm name, instead.","pos":[122,322],"source":" If you want to specify a different implementation, use the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead."},{"content":"The cryptography configuration system defines the default implementation of the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyedHashAlgorithm&gt;</ph> class.","pos":[323,464],"source":" The cryptography configuration system defines the default implementation of the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class."}]}]}],"pos":[7518,7983],"yaml":true,"extradata":"MT"},{"content":"A new <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> instance, unless the default settings have been changed.","nodes":[{"pos":[0,121],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA1\"&gt;&lt;/xref&gt;</ph> instance, unless the default settings have been changed.","source":"A new <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> instance, unless the default settings have been changed."}],"pos":[8189,8311],"yaml":true},{"content":"Creates an instance of the specified implementation of a keyed hash algorithm.","nodes":[{"pos":[0,78],"content":"Creates an instance of the specified implementation of a keyed hash algorithm.","nodes":[{"content":"Creates an instance of the specified implementation of a keyed hash algorithm.","pos":[0,78]}]}],"pos":[9679,9758],"yaml":true},{"content":"This method supports a number of algorithms, including MD5, SHA-1, SHA-256, and RIPEMD160. For a full list, see the supported values for the `algName` parameter.","nodes":[{"pos":[0,161],"content":"This method supports a number of algorithms, including MD5, SHA-1, SHA-256, and RIPEMD160. For a full list, see the supported values for the `algName` parameter.","nodes":[{"content":"This method supports a number of algorithms, including MD5, SHA-1, SHA-256, and RIPEMD160.","pos":[0,90]},{"content":"For a full list, see the supported values for the <ph id=\"ph1\">`algName`</ph> parameter.","pos":[91,161],"source":" For a full list, see the supported values for the `algName` parameter."}]}],"pos":[9769,9931],"yaml":true,"extradata":"MT"},{"content":"The keyed hash algorithm implementation to use. The following table shows the valid values for the <code>algName</code> parameter and the algorithms they map to.  \n  \n <table><thead><tr><th> Parameter value  \n  \n </th><th> Implements  \n  \n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> HMACMD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACMD5\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACMD5\"></xref></td></tr><tr><td> HMACRIPEMD160  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref></td></tr><tr><td> HMACSHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> HMACSHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA256\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA256\"></xref></td></tr><tr><td> HMACSHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA384\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA384\"></xref></td></tr><tr><td> HMACSHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA512\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA512\"></xref></td></tr><tr><td> MACTripleDES  \n  \n </td><td><xref href=\"System.Security.Cryptography.MACTripleDES\"></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES  \n  \n </td><td><xref href=\"System.Security.Cryptography.MACTripleDES\"></xref></td></tr></tbody></table>","nodes":[{"pos":[0,161],"content":"The keyed hash algorithm implementation to use. The following table shows the valid values for the <code>algName</code> parameter and the algorithms they map to.","nodes":[{"content":"The keyed hash algorithm implementation to use.","pos":[0,47]},{"content":"The following table shows the valid values for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">algName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter and the algorithms they map to.","pos":[48,161],"source":" The following table shows the valid values for the <code>algName</code> parameter and the algorithms they map to."}]},{"pos":[168,2221],"content":"<table><thead><tr><th> Parameter value  \n  \n </th><th> Implements  \n  \n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> HMACMD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACMD5\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACMD5\"></xref></td></tr><tr><td> HMACRIPEMD160  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACRIPEMD160\"></xref></td></tr><tr><td> HMACSHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA1\"></xref></td></tr><tr><td> HMACSHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA256\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA256\"></xref></td></tr><tr><td> HMACSHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA384\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA384\"></xref></td></tr><tr><td> HMACSHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA512\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.HMACSHA512\"></xref></td></tr><tr><td> MACTripleDES  \n  \n </td><td><xref href=\"System.Security.Cryptography.MACTripleDES\"></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES  \n  \n </td><td><xref href=\"System.Security.Cryptography.MACTripleDES\"></xref></td></tr></tbody></table>","nodes":[{"content":"Parameter value","pos":[23,43],"source":" Parameter value  \n  \n "},{"content":"Implements","pos":[55,70],"source":" Implements  \n  \n "},{"content":"System.Security.Cryptography.HMAC","pos":[106,144],"source":" System.Security.Cryptography.HMAC  \n  \n "},{"content":"System.Security.Cryptography.KeyedHashAlgorithm","pos":[232,284],"source":" System.Security.Cryptography.KeyedHashAlgorithm  \n  \n "},{"content":"HMACMD5","pos":[372,384],"source":" HMACMD5  \n  \n "},{"content":"System.Security.Cryptography.HMACMD5","pos":[471,512],"source":" System.Security.Cryptography.HMACMD5  \n  \n "},{"content":"HMACRIPEMD160","pos":[599,617],"source":" HMACRIPEMD160  \n  \n "},{"content":"System.Security.Cryptography.HMACRIPEMD160","pos":[710,757],"source":" System.Security.Cryptography.HMACRIPEMD160  \n  \n "},{"content":"HMACSHA1","pos":[850,863],"source":" HMACSHA1  \n  \n "},{"content":"System.Security.Cryptography.HMACSHA1","pos":[951,993],"source":" System.Security.Cryptography.HMACSHA1  \n  \n "},{"content":"HMACSHA256","pos":[1081,1096],"source":" HMACSHA256  \n  \n "},{"content":"System.Security.Cryptography.HMACSHA256","pos":[1186,1230],"source":" System.Security.Cryptography.HMACSHA256  \n  \n "},{"content":"HMACSHA384","pos":[1320,1335],"source":" HMACSHA384  \n  \n "},{"content":"System.Security.Cryptography.HMACSHA384","pos":[1425,1469],"source":" System.Security.Cryptography.HMACSHA384  \n  \n "},{"content":"HMACSHA512","pos":[1559,1574],"source":" HMACSHA512  \n  \n "},{"content":"System.Security.Cryptography.HMACSHA512","pos":[1664,1708],"source":" System.Security.Cryptography.HMACSHA512  \n  \n "},{"content":"MACTripleDES","pos":[1798,1815],"source":" MACTripleDES  \n  \n "},{"content":"System.Security.Cryptography.MACTripleDES","pos":[1907,1953],"source":" System.Security.Cryptography.MACTripleDES  \n  \n "}]}],"pos":[10120,12413],"yaml":true},{"content":"A new instance of the specified keyed hash algorithm.","nodes":[{"pos":[0,53],"content":"A new instance of the specified keyed hash algorithm.","nodes":[{"content":"A new instance of the specified keyed hash algorithm.","pos":[0,53]}]}],"pos":[12504,12558],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,160],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> and optionally releases the managed resources."}],"pos":[13938,14099],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.KeyedHashAlgorithm> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,249],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[82,187],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[188,249],"source":"`Finalize` invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[256,507],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.KeyedHashAlgorithm> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.KeyedHashAlgorithm&gt;</ph> references.","pos":[0,181],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.KeyedHashAlgorithm> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[182,251],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[14110,14622],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[14777,14880],"yaml":true},{"content":"Gets or sets the key to use in the hash algorithm.","nodes":[{"pos":[0,50],"content":"Gets or sets the key to use in the hash algorithm.","nodes":[{"content":"Gets or sets the key to use in the hash algorithm.","pos":[0,50]}]}],"pos":[16348,16399],"yaml":true},{"content":"This property is the public accessor for the <xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue> field.","nodes":[{"pos":[0,115],"content":"This property is the public accessor for the <xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue> field.","nodes":[{"content":"This property is the public accessor for the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue&gt;</ph> field.","pos":[0,115],"source":"This property is the public accessor for the <xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue> field."}]}],"pos":[16410,16526],"yaml":true,"extradata":"MT"},{"content":"The key to use in the hash algorithm.","nodes":[{"pos":[0,37],"content":"The key to use in the hash algorithm.","nodes":[{"content":"The key to use in the hash algorithm.","pos":[0,37]}]}],"pos":[17604,17642],"yaml":true},{"content":"An attempt was made to change the <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm.Key\"></xref> property after hashing has begun.","nodes":[{"pos":[0,140],"content":"An attempt was made to change the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.KeyedHashAlgorithm.Key\"&gt;&lt;/xref&gt;</ph> property after hashing has begun.","source":"An attempt was made to change the <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm.Key\"></xref> property after hashing has begun."}],"pos":[17869,18010],"yaml":true},{"content":"The key to use in the hash algorithm.","nodes":[{"pos":[0,37],"content":"The key to use in the hash algorithm.","nodes":[{"content":"The key to use in the hash algorithm.","pos":[0,37]}]}],"pos":[19419,19457],"yaml":true},{"content":"This field is accessed through the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A> property.","nodes":[{"pos":[0,106],"content":"This field is accessed through the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A> property.","nodes":[{"content":"This field is accessed through the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A&gt;</ph> property.","pos":[0,106],"source":"This field is accessed through the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A> property."}]}],"pos":[19468,19575],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  commentId: T:System.Security.Cryptography.KeyedHashAlgorithm\n  id: KeyedHashAlgorithm\n  children:\n  - System.Security.Cryptography.KeyedHashAlgorithm.#ctor\n  - System.Security.Cryptography.KeyedHashAlgorithm.Create\n  - System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)\n  - System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.KeyedHashAlgorithm.Key\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  langs:\n  - csharp\n  name: KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Represents the abstract class from which all implementations of keyed hash algorithms must derive.\n  remarks: \"Hash functions map binary strings of an arbitrary length to small binary strings of a fixed length. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Small changes to the data result in large, unpredictable changes in the hash.  \\n  \\n A keyed hash algorithm is a key-dependent, one-way hash function used as a message authentication code. Only someone who knows the key can verify the hash. Keyed hash algorithms provide authenticity without secrecy.  \\n  \\n Hash functions are commonly used with digital signatures and for data integrity. The <xref:System.Security.Cryptography.HMACSHA1> class is an example of a keyed hash algorithm.\"\n  example:\n  - \"The following code example demonstrates how to derive from the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class.  \\n  \\n [!code-csharp[KeyedHashAlgorithm#1](~/samples/snippets/csharp/VS_Snippets_CLR/keyedhashalgorithm/cs/program.cs#1)]\\n [!code-vb[KeyedHashAlgorithm#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/keyedhashalgorithm/vb/program.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  derivedClasses:\n  - System.Security.Cryptography.HMAC\n  - System.Security.Cryptography.MACTripleDES\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.HashFinal\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.Initialize\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor\n  commentId: M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  langs:\n  - csharp\n  name: KeyedHashAlgorithm()\n  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm()\n  fullName: KeyedHashAlgorithm.KeyedHashAlgorithm()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> class.\n  remarks: You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.\n  syntax:\n    content: protected KeyedHashAlgorithm ();\n    parameters: []\n  overload: System.Security.Cryptography.KeyedHashAlgorithm.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create\n  commentId: M:System.Security.Cryptography.KeyedHashAlgorithm.Create\n  id: Create\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: KeyedHashAlgorithm.Create()\n  fullName: KeyedHashAlgorithm.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of the default implementation of a keyed hash algorithm.\n  remarks: By default, this overload uses the <xref:System.Security.Cryptography.HMACSHA1> implementation of a keyed hash algorithm. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class.\n  syntax:\n    content: public static System.Security.Cryptography.KeyedHashAlgorithm Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeyedHashAlgorithm\n      description: A new <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> instance, unless the default settings have been changed.\n  overload: System.Security.Cryptography.KeyedHashAlgorithm.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)\n  commentId: M:System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: KeyedHashAlgorithm.Create(String)\n  fullName: KeyedHashAlgorithm.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of the specified implementation of a keyed hash algorithm.\n  remarks: This method supports a number of algorithms, including MD5, SHA-1, SHA-256, and RIPEMD160. For a full list, see the supported values for the `algName` parameter.\n  syntax:\n    content: public static System.Security.Cryptography.KeyedHashAlgorithm Create (string algName);\n    parameters:\n    - id: algName\n      type: System.String\n      description: \"The keyed hash algorithm implementation to use. The following table shows the valid values for the <code>algName</code> parameter and the algorithms they map to.  \\n  \\n <table><thead><tr><th> Parameter value  \\n  \\n </th><th> Implements  \\n  \\n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA1\\\"></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA1\\\"></xref></td></tr><tr><td> HMACMD5  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACMD5\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACMD5\\\"></xref></td></tr><tr><td> HMACRIPEMD160  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACRIPEMD160\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACRIPEMD160\\\"></xref></td></tr><tr><td> HMACSHA1  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA1\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA1\\\"></xref></td></tr><tr><td> HMACSHA256  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA256\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA256\\\"></xref></td></tr><tr><td> HMACSHA384  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA384\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA384\\\"></xref></td></tr><tr><td> HMACSHA512  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA512\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.HMACSHA512\\\"></xref></td></tr><tr><td> MACTripleDES  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.MACTripleDES\\\"></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.MACTripleDES\\\"></xref></td></tr></tbody></table>\"\n    return:\n      type: System.Security.Cryptography.KeyedHashAlgorithm\n      description: A new instance of the specified keyed hash algorithm.\n  overload: System.Security.Cryptography.KeyedHashAlgorithm.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: KeyedHashAlgorithm.Dispose(Boolean)\n  fullName: KeyedHashAlgorithm.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.KeyedHashAlgorithm> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Security.Cryptography.KeyedHashAlgorithm.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key\n  commentId: P:System.Security.Cryptography.KeyedHashAlgorithm.Key\n  id: Key\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  langs:\n  - csharp\n  name: Key\n  nameWithType: KeyedHashAlgorithm.Key\n  fullName: KeyedHashAlgorithm.Key\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the key to use in the hash algorithm.\n  remarks: This property is the public accessor for the <xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue> field.\n  example:\n  - \"The following code example demonstrates how to override the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A> property to retrieve the key used in the current <xref:System.Security.Cryptography.KeyedHashAlgorithm> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.KeyedHashAlgorithm#22](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.KeyedHashAlgorithm/CPP/contosokeyedhash.cpp#22)]\\n [!code-csharp[System.Security.Cryptography.KeyedHashAlgorithm#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.KeyedHashAlgorithm/CS/contosokeyedhash.cs#22)]\\n [!code-vb[System.Security.Cryptography.KeyedHashAlgorithm#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.KeyedHashAlgorithm/VB/contosokeyedhash.vb#22)]\"\n  syntax:\n    content: public virtual byte[] Key { get; set; }\n    return:\n      type: System.Byte[]\n      description: The key to use in the hash algorithm.\n  overload: System.Security.Cryptography.KeyedHashAlgorithm.Key*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An attempt was made to change the <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm.Key\"></xref> property after hashing has begun.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  commentId: F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  id: KeyValue\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  langs:\n  - csharp\n  name: KeyValue\n  nameWithType: KeyedHashAlgorithm.KeyValue\n  fullName: KeyedHashAlgorithm.KeyValue\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: The key to use in the hash algorithm.\n  remarks: This field is accessed through the <xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A> property.\n  syntax:\n    content: protected byte[] KeyValue;\n    return:\n      type: System.Byte[]\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: KeyedHashAlgorithm()\n  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm()\n  fullName: KeyedHashAlgorithm.KeyedHashAlgorithm()\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: Create()\n  nameWithType: KeyedHashAlgorithm.Create()\n  fullName: KeyedHashAlgorithm.Create()\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: Create(String)\n  nameWithType: KeyedHashAlgorithm.Create(String)\n  fullName: KeyedHashAlgorithm.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: KeyedHashAlgorithm.Dispose(Boolean)\n  fullName: KeyedHashAlgorithm.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: Key\n  nameWithType: KeyedHashAlgorithm.Key\n  fullName: KeyedHashAlgorithm.Key\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: KeyedHashAlgorithm.KeyValue\n  fullName: KeyedHashAlgorithm.KeyValue\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor*\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm\n  fullName: KeyedHashAlgorithm.KeyedHashAlgorithm\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create*\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: Create\n  nameWithType: KeyedHashAlgorithm.Create\n  fullName: KeyedHashAlgorithm.Create\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose*\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: Dispose\n  nameWithType: KeyedHashAlgorithm.Dispose\n  fullName: KeyedHashAlgorithm.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key*\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: Key\n  nameWithType: KeyedHashAlgorithm.Key\n  fullName: KeyedHashAlgorithm.Key\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeyedHashAlgorithm.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: HashAlgorithm.CanReuseTransform\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: HashAlgorithm.ComputeHash(Byte[])\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.HashCore(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.HashCore(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashFinal()\n  nameWithType: HashAlgorithm.HashFinal()\n  fullName: HashAlgorithm.HashFinal()\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  nameWithType: HashAlgorithm.HashSize\n  fullName: HashAlgorithm.HashSize\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.Initialize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Initialize()\n  nameWithType: HashAlgorithm.Initialize()\n  fullName: HashAlgorithm.Initialize()\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n"}