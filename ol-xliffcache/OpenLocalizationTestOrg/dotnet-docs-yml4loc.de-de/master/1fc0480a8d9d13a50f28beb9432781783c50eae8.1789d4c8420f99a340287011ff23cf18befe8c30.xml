{"nodes":[{"content":"Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects.","nodes":[{"pos":[0,104],"content":"Provides support for creating and scheduling <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> objects.","source":"Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects."}],"pos":[7410,7515],"yaml":true},{"content":"The .NET Framework provides two factories for creating and scheduling tasks:  \n  \n-   The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.  \n  \n-   The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.  \n  \n The <xref:System.Threading.Tasks.TaskFactory%601> class allows you to do the following:  \n  \n-   Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. You can call the overloads of this method to create and execute a task that requires non-default arguments.  \n  \n    > [!WARNING]\n    >  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.  \n  \n-   Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> or   <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.  \n  \n-   Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> or <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.  \n  \n The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.  \n  \n [!code-csharp[TPL_Factories#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/factoriestresult.cs#2)]\n [!code-vb[TPL_Factories#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factoriestresult.vb#2)]  \n  \n In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance. Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example.","nodes":[{"pos":[0,76],"content":"The .NET Framework provides two factories for creating and scheduling tasks:","nodes":[{"content":"The .NET Framework provides two factories for creating and scheduling tasks:","pos":[0,76]}]},{"pos":[86,239],"content":"The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class, which creates <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.","pos":[0,153],"source":"The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects."}]},{"pos":[249,367],"content":"The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class, which creates <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.","pos":[0,118],"source":"The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects."}]},{"pos":[374,461],"content":"The <xref:System.Threading.Tasks.TaskFactory%601> class allows you to do the following:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class allows you to do the following:","pos":[0,87],"source":"The <xref:System.Threading.Tasks.TaskFactory%601> class allows you to do the following:"}]},{"pos":[471,694],"content":"Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. You can call the overloads of this method to create and execute a task that requires non-default arguments.","nodes":[{"content":"Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. You can call the overloads of this method to create and execute a task that requires non-default arguments.","pos":[0,223],"nodes":[{"content":"Create a task and start it immediately by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method.","pos":[0,115],"source":"Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method."},{"content":"You can call the overloads of this method to create and execute a task that requires non-default arguments.","pos":[116,223]}]}]},{"pos":[706,968],"content":"[!WARNING]\nStarting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.","leadings":["","    >  "],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName&gt;</ph> method provides the easiest way to create a task with default configuration values and start it immediately.","pos":[11,255],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately."}]},{"pos":[978,1205],"content":"Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> or   <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.","nodes":[{"content":"Create a task that starts when any one of the tasks in an array has completed by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> or   <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> method.","pos":[0,227],"source":"Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> or   <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method."}]},{"pos":[1215,1434],"content":"Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> or <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.","nodes":[{"content":"Create a task that starts when all the tasks in an array have completed by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> method.","pos":[0,219],"source":"Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> or <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method."}]},{"pos":[1441,2064],"content":"The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.","nodes":[{"content":"The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.","pos":[0,623],"nodes":[{"content":"The static <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName&gt;</ph> property returns a default <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object.","pos":[0,166],"source":"The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object."},{"content":"You can also call one of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class constructors to configure the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects that  the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class creates.","pos":[167,395],"source":" You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates."},{"content":"The following example configures a new <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.","pos":[396,623],"source":" The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler."}]}]},{"pos":[2071,2302],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPL_Factories#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/factoriestresult.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPL_Factories#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factoriestresult.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[TPL_Factories#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/factoriestresult.cs#2)]\n[!code-vb[TPL_Factories#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factoriestresult.vb#2)]"},{"pos":[2309,2707],"content":"In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance. Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example.","nodes":[{"content":"In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance. Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example.","pos":[0,398],"nodes":[{"content":"In most cases, you do not have to instantiate a new <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instance.","pos":[0,107],"source":"In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance."},{"content":"Instead, you can use the static <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName&gt;</ph> property, which returns a factory object that uses default values.","pos":[108,281],"source":" Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values."},{"content":"You can then call its methods to start new tasks or define task continuations.","pos":[282,360]},{"content":"For an illustration, see the example.","pos":[361,398]}]}]}],"pos":[7526,10258],"yaml":true,"extradata":"MT"},{"content":"The return value of the <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects that the methods of this class create.","nodes":[{"pos":[0,121],"content":"The return value of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> objects that the methods of this class create.","source":"The return value of the <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects that the methods of this class create."}],"pos":[11521,11643],"yaml":true},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the default configuration.","nodes":[{"pos":[0,112],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph> instance with the default configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the default configuration."}],"pos":[13516,13629],"yaml":true},{"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,556],"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","pos":[0,556],"nodes":[{"content":"This constructor creates a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instance with a default configuration.","pos":[0,111],"source":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id=\"ph6\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","pos":[112,556],"source":" The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}]}]}],"pos":[13640,14197],"yaml":true,"extradata":"MT"},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the default configuration.","nodes":[{"pos":[0,112],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph> instance with the default configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the default configuration."}],"pos":[16023,16136],"yaml":true},{"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,556],"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","pos":[0,556],"nodes":[{"content":"This constructor creates a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instance with a default configuration.","pos":[0,111],"source":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id=\"ph6\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","pos":[112,556],"source":" The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}]}]}],"pos":[16147,16704],"yaml":true,"extradata":"MT"},{"content":"The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.","nodes":[{"pos":[0,225],"content":"The default cancellation token that will be assigned to tasks created by this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> unless another cancellation token is explicitly specified when calling the factory methods.","source":"The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another cancellation token is explicitly specified when calling the factory methods."}],"pos":[16912,17138],"yaml":true},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the specified configuration.","nodes":[{"pos":[0,114],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph> instance with the specified configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the specified configuration."}],"pos":[18893,19008],"yaml":true},{"content":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,545],"content":"With this constructor, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id=\"ph6\">`scheduler`</ph>, unless it's <ph id=\"ph7\">`null`</ph>, in which case the property is initialized to the current scheduler (see <ph id=\"ph8\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","source":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}],"pos":[19019,19565],"yaml":true,"extradata":"MT"},{"content":"The scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>. A null value indicates that the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> should be used.","nodes":[{"pos":[0,233],"content":"The scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>. A null value indicates that the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> should be used.","nodes":[{"content":"The scheduler to use to schedule any tasks created with this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,119],"source":"The scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>."},{"content":"A null value indicates that the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> should be used.","pos":[120,233],"source":" A null value indicates that the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> should be used."}]}],"pos":[19761,19995],"yaml":true},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the specified configuration.","nodes":[{"pos":[0,114],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph> instance with the specified configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the specified configuration."}],"pos":[22002,22117],"yaml":true},{"content":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,393],"content":"With this constructor, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">`creationOptions`</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">`continuationOptions`</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id=\"ph6\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","source":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}],"pos":[22128,22522],"yaml":true,"extradata":"MT"},{"content":"The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>.","nodes":[{"pos":[0,115],"content":"The default options to use when creating tasks with this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph>.","source":"The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>."}],"pos":[22810,22926],"yaml":true},{"content":"The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>.","nodes":[{"pos":[0,128],"content":"The default options to use when creating continuation tasks with this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph>.","source":"The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>."}],"pos":[23034,23163],"yaml":true},{"content":"<code>creationOptions</code> or <code>continuationOptions</code> specifies an invalid value.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;creationOptions&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;continuationOptions&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>creationOptions</code> or <code>continuationOptions</code> specifies an invalid value."}],"pos":[23347,23440],"yaml":true},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the specified configuration.","nodes":[{"pos":[0,114],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph> instance with the specified configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the specified configuration."}],"pos":[25692,25807],"yaml":true},{"content":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,471],"content":"With this constructor, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">`creationOptions`</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">`continuationOptions`</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id=\"ph6\">`scheduler`</ph>, unless it's <ph id=\"ph7\">`null`</ph>, in which case the property is initialized to the current scheduler (see <ph id=\"ph8\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","source":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}],"pos":[25818,26290],"yaml":true,"extradata":"MT"},{"content":"The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.","nodes":[{"pos":[0,225],"content":"The default cancellation token that will be assigned to tasks created by this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> unless another cancellation token is explicitly specified when calling the factory methods.","source":"The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another cancellation token is explicitly specified when calling the factory methods."}],"pos":[26674,26900],"yaml":true},{"content":"The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>.","nodes":[{"pos":[0,115],"content":"The default options to use when creating tasks with this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph>.","source":"The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>."}],"pos":[27000,27116],"yaml":true},{"content":"The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>.","nodes":[{"pos":[0,128],"content":"The default options to use when creating continuation tasks with this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph>.","source":"The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>."}],"pos":[27224,27353],"yaml":true},{"content":"The default scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>. A null value indicates that <xref href=\"System.Threading.Tasks.TaskScheduler.Current\"></xref> should be used.","nodes":[{"pos":[0,237],"content":"The default scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>. A null value indicates that <xref href=\"System.Threading.Tasks.TaskScheduler.Current\"></xref> should be used.","nodes":[{"content":"The default scheduler to use to schedule any tasks created with this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory`1\"&gt;&lt;/xref&gt;</ph>.","pos":[0,127],"source":"The default scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>."},{"content":"A null value indicates that <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler.Current\"&gt;&lt;/xref&gt;</ph> should be used.","pos":[128,237],"source":" A null value indicates that <xref href=\"System.Threading.Tasks.TaskScheduler.Current\"></xref> should be used."}]}],"pos":[27441,27679],"yaml":true},{"content":"<code>creationOptions</code> or <code>continuationOptions</code> specifies an invalid value.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;creationOptions&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;continuationOptions&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>creationOptions</code> or <code>continuationOptions</code> specifies an invalid value."}],"pos":[27863,27956],"yaml":true},{"content":"Gets the default cancellation token for this task factory.","nodes":[{"pos":[0,58],"content":"Gets the default cancellation token for this task factory.","nodes":[{"content":"Gets the default cancellation token for this task factory.","pos":[0,58]}]}],"pos":[29501,29560],"yaml":true},{"content":"This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.","nodes":[{"pos":[0,220],"content":"This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.","nodes":[{"content":"This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.","pos":[0,220]}]}],"pos":[29571,29792],"yaml":true,"extradata":"MT"},{"content":"The default cancellation token for this task factory.","nodes":[{"pos":[0,53],"content":"The default cancellation token for this task factory.","nodes":[{"content":"The default cancellation token for this task factory.","pos":[0,53]}]}],"pos":[29962,30016],"yaml":true},{"content":"Gets the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> enumeration value for this task factory.","nodes":[{"pos":[0,117],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> enumeration value for this task factory.","source":"Gets the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> enumeration value for this task factory."}],"pos":[31658,31776],"yaml":true},{"content":"This property returns the default continuation options for this factory. They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.","nodes":[{"pos":[0,209],"content":"This property returns the default continuation options for this factory. They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.","nodes":[{"content":"This property returns the default continuation options for this factory. They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.","pos":[0,209],"nodes":[{"content":"This property returns the default continuation options for this factory.","pos":[0,72]},{"content":"They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.","pos":[73,209]}]}]}],"pos":[31787,31997],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that specifies the default continuation options for this task factory.","nodes":[{"pos":[0,100],"content":"One of the enumeration values that specifies the default continuation options for this task factory.","nodes":[{"content":"One of the enumeration values that specifies the default continuation options for this task factory.","pos":[0,100]}]}],"pos":[32193,32294],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of a set of provided Tasks.","nodes":[{"pos":[0,96],"content":"Creates a continuation task that will be started upon the completion of a set of provided Tasks.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of a set of provided Tasks.","pos":[0,96]}]}],"pos":[34767,34864],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[34875,35098],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[35549,35592],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[35705,35816],"yaml":true},{"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"pos":[0,74],"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"content":"The cancellation token that will be assigned to the new continuation task.","pos":[0,74]}]}],"pos":[35910,35985],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","nodes":[{"pos":[0,134],"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","pos":[0,134],"nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task.","pos":[0,90]},{"content":"The NotOn* or OnlyOn* values are not valid.","pos":[91,134]}]}]}],"pos":[36093,36228],"yaml":true},{"content":"The scheduler that is used to schedule the created continuation task.","nodes":[{"pos":[0,69],"content":"The scheduler that is used to schedule the created continuation task.","nodes":[{"content":"The scheduler that is used to schedule the created continuation task.","pos":[0,69]}]}],"pos":[36316,36386],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[36459,36486],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."},{"pos":[121,125],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[132,178],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[36668,36857],"yaml":true},{"content":"The <code>tasks</code> array contains a null value or is empty.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value or is empty.","source":"The <code>tasks</code> array contains a null value or is empty."}],"pos":[36951,37015],"yaml":true},{"content":"<code>continuationOptions</code> specifies an invalid value.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;continuationOptions&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>continuationOptions</code> specifies an invalid value."}],"pos":[37129,37190],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,224],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[37296,37529],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of a set of provided Tasks.","nodes":[{"pos":[0,96],"content":"Creates a continuation task that will be started upon the completion of a set of provided Tasks.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of a set of provided Tasks.","pos":[0,96]}]}],"pos":[39597,39694],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[39705,39928],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[40277,40320],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[40433,40544],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","nodes":[{"pos":[0,134],"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","pos":[0,134],"nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task.","pos":[0,90]},{"content":"The NotOn* or OnlyOn* values are not valid.","pos":[91,134]}]}]}],"pos":[40652,40787],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[40860,40887],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."}],"pos":[41073,41144],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[41246,41367],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[41481,41555],"yaml":true},{"content":"The <code>tasks</code> array contains a null value or is empty.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value or is empty.","source":"The <code>tasks</code> array contains a null value or is empty."}],"pos":[41649,41713],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"pos":[0,96],"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","pos":[0,96]}]}],"pos":[43565,43662],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[43673,43896],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[44177,44220],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[44333,44444],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[44517,44544],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."}],"pos":[44730,44801],"yaml":true},{"content":"<code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;tasks&lt;/code&gt;</ph> array is <ph id=\"ph2\">`null`</ph>.","source":"<code>tasks</code> array is `null`."},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,101],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> is `null`."}],"pos":[44903,45011],"yaml":true},{"content":"The <code>tasks</code> array contains a null value or is empty.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value or is empty.","source":"The <code>tasks</code> array contains a null value or is empty."}],"pos":[45105,45169],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"pos":[0,96],"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","pos":[0,96]}]}],"pos":[47183,47280],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[47291,47514],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[47849,47892],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[48005,48116],"yaml":true},{"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"pos":[0,74],"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"content":"The cancellation token that will be assigned to the new continuation task.","pos":[0,74]}]}],"pos":[48210,48285],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[48358,48385],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,224],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[48571,48804],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n <code>continuationFunction</code> is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,101],"content":"<ph id=\"ph1\">&lt;code&gt;continuationFunction&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>continuationFunction</code> is `null`."}],"pos":[48906,49014],"yaml":true},{"content":"The <code>tasks</code> array contains a null value or is empty.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value or is empty.","source":"The <code>tasks</code> array contains a null value or is empty."}],"pos":[49108,49172],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"pos":[0,96],"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","pos":[0,96]}]}],"pos":[51234,51331],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[51342,51565],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[51922,51965],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[52097,52208],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[52275,52336],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[52409,52436],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."}],"pos":[52625,52696],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[52798,52919],"yaml":true},{"content":"The <code>tasks</code> array contains a null value or is empty.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value or is empty.","source":"The <code>tasks</code> array contains a null value or is empty."}],"pos":[53013,53077],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"pos":[0,96],"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","pos":[0,96]}]}],"pos":[55301,55398],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[55409,55632],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[56043,56086],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[56218,56329],"yaml":true},{"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"pos":[0,74],"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"content":"The cancellation token that will be assigned to the new continuation task.","pos":[0,74]}]}],"pos":[56423,56498],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[56565,56626],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[56699,56726],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,224],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[56915,57148],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[57250,57371],"yaml":true},{"content":"The <code>tasks</code> array contains a null value or is empty.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value or is empty.","source":"The <code>tasks</code> array contains a null value or is empty."}],"pos":[57465,57529],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"pos":[0,96],"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","pos":[0,96]}]}],"pos":[59807,59904],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[59915,60138],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[60563,60606],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[60738,60849],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","nodes":[{"pos":[0,134],"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","pos":[0,134],"nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task.","pos":[0,90]},{"content":"The NotOn* or OnlyOn* values are not valid.","pos":[91,134]}]}]}],"pos":[60957,61092],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[61159,61220],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[61293,61320],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."}],"pos":[61509,61580],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[61682,61803],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[61917,61991],"yaml":true},{"content":"The <code>tasks</code> array contains a null value or is empty.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value or is empty.","source":"The <code>tasks</code> array contains a null value or is empty."}],"pos":[62085,62149],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"pos":[0,96],"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of a set of provided tasks.","pos":[0,96]}]}],"pos":[64745,64842],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[64853,65076],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[65603,65646],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[65778,65889],"yaml":true},{"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"pos":[0,74],"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"content":"The cancellation token that will be assigned to the new continuation task.","pos":[0,74]}]}],"pos":[65983,66058],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","nodes":[{"pos":[0,134],"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.","pos":[0,134],"nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task.","pos":[0,90]},{"content":"The NotOn* or OnlyOn* values are not valid.","pos":[91,134]}]}]}],"pos":[66166,66301],"yaml":true},{"content":"The scheduler that is used to schedule the created continuation task.","nodes":[{"pos":[0,69],"content":"The scheduler that is used to schedule the created continuation task.","nodes":[{"content":"The scheduler that is used to schedule the created continuation task.","pos":[0,69]}]}],"pos":[66389,66459],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[66526,66587],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[66660,66687],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."},{"pos":[121,125],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[132,178],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[66872,67061],"yaml":true},{"content":"The <code>tasks</code> array contains a null value or is empty.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value or is empty.","source":"The <code>tasks</code> array contains a null value or is empty."}],"pos":[67155,67219],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[67333,67407],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,224],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[67513,67746],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"pos":[0,101],"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","pos":[0,101]}]}],"pos":[70120,70222],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[70233,70456],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[70905,70972],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[71083,71188],"yaml":true},{"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"pos":[0,74],"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"content":"The cancellation token that will be assigned to the new continuation task.","pos":[0,74]}]}],"pos":[71282,71357],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.","nodes":[{"pos":[0,138],"content":"One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task.","pos":[0,90]},{"content":"The <ph id=\"ph1\">`NotOn*`</ph> or <ph id=\"ph2\">`OnlyOn*`</ph> values are not valid.","pos":[91,138],"source":" The `NotOn*` or `OnlyOn*` values are not valid."}]}],"pos":[71465,71604],"yaml":true},{"content":"The task scheduler that is used to schedule the created continuation task.","nodes":[{"pos":[0,74],"content":"The task scheduler that is used to schedule the created continuation task.","nodes":[{"content":"The task scheduler that is used to schedule the created continuation task.","pos":[0,74]}]}],"pos":[71692,71767],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[71840,71867],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."},{"pos":[121,125],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[132,178],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[72049,72238],"yaml":true},{"content":"The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The <code>tasks</code> array contains a null value."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,107],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The <code>tasks</code> array is empty."}],"pos":[72332,72446],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value.","nodes":[{"pos":[0,141],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"The <code>continuationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value."}],"pos":[72560,72702],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,224],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[72808,73041],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"pos":[0,101],"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","pos":[0,101]}]}],"pos":[74881,74983],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[74994,75217],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[75496,75563],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[75674,75779],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[75852,75879],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."}],"pos":[76065,76136],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[76238,76359],"yaml":true},{"content":"The <code>tasks</code> array contains a null value or is empty.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value or is empty.","source":"The <code>tasks</code> array contains a null value or is empty."}],"pos":[76453,76517],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"pos":[0,101],"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","pos":[0,101]}]}],"pos":[78519,78621],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[78632,78855],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[79188,79255],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[79366,79471],"yaml":true},{"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"pos":[0,74],"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"content":"The cancellation token that will be assigned to the new continuation task.","pos":[0,74]}]}],"pos":[79565,79640],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[79713,79740],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,224],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[79926,80159],"yaml":true},{"content":"The <code>tasks</code> array is null.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,37],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The <code>tasks</code> array is null."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,110],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[80261,80378],"yaml":true},{"content":"The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The <code>tasks</code> array contains a null value."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,107],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The <code>tasks</code> array is empty."}],"pos":[80472,80586],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"pos":[0,101],"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","pos":[0,101]}]}],"pos":[82642,82744],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[82755,82978],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[83325,83392],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[83503,83608],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.","nodes":[{"pos":[0,138],"content":"One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task.","pos":[0,90]},{"content":"The <ph id=\"ph1\">`NotOn*`</ph> or <ph id=\"ph2\">`OnlyOn*`</ph> values are not valid.","pos":[91,138],"source":" The `NotOn*` or `OnlyOn*` values are not valid."}]}],"pos":[83716,83855],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[83928,83955],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."}],"pos":[84141,84212],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[84314,84435],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid enumeration value.","nodes":[{"pos":[0,85],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid enumeration value.","source":"The <code>continuationOptions</code> argument specifies an invalid enumeration value."}],"pos":[84549,84635],"yaml":true},{"content":"The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The <code>tasks</code> array contains a null value."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,107],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The <code>tasks</code> array is empty."}],"pos":[84729,84843],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"pos":[0,101],"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","pos":[0,101]}]}],"pos":[87427,87529],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[87540,87763],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[88288,88355],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[88485,88590],"yaml":true},{"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"pos":[0,74],"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"content":"The cancellation token that will be assigned to the new continuation task.","pos":[0,74]}]}],"pos":[88684,88759],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.","nodes":[{"pos":[0,138],"content":"One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task.","pos":[0,90]},{"content":"The <ph id=\"ph1\">`NotOn*`</ph> or <ph id=\"ph2\">`OnlyOn*`</ph> values are not valid.","pos":[91,138],"source":" The `NotOn*` or `OnlyOn*` values are not valid."}]}],"pos":[88867,89006],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,163],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[89094,89258],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[89325,89386],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[89459,89532],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."},{"pos":[121,125],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[132,176],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[89717,89904],"yaml":true},{"content":"The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The <code>tasks</code> array contains a null value."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,107],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The <code>tasks</code> array is empty."}],"pos":[89998,90112],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.","nodes":[{"pos":[0,97],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskContinuationOptions value.","source":"The <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value."}],"pos":[90226,90324],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,224],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[90430,90663],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"pos":[0,101],"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","pos":[0,101]}]}],"pos":[92929,93031],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[93042,93265],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[93688,93755],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[93885,93990],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.","nodes":[{"pos":[0,138],"content":"One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created continuation task.","pos":[0,90]},{"content":"The <ph id=\"ph1\">`NotOn*`</ph> or <ph id=\"ph2\">`OnlyOn*`</ph> values are not valid.","pos":[91,138],"source":" The `NotOn*` or `OnlyOn*` values are not valid."}]}],"pos":[94098,94237],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[94304,94365],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[94438,94511],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."}],"pos":[94700,94771],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[94873,94994],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid enumeration value.","nodes":[{"pos":[0,85],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid enumeration value.","source":"The <code>continuationOptions</code> argument specifies an invalid enumeration value."}],"pos":[95108,95194],"yaml":true},{"content":"The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The <code>tasks</code> array contains a null value."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,107],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The <code>tasks</code> array is empty."}],"pos":[95288,95402],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"pos":[0,101],"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","pos":[0,101]}]}],"pos":[97452,97554],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[97565,97788],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[98143,98210],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[98340,98445],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[98512,98573],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[98646,98719],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."}],"pos":[98908,98979],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[99081,99202],"yaml":true},{"content":"The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The <code>tasks</code> array contains a null value."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,107],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The <code>tasks</code> array is empty."}],"pos":[99296,99410],"yaml":true},{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"pos":[0,101],"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","nodes":[{"content":"Creates a continuation task that will be started upon the completion of any task in the provided set.","pos":[0,101]}]}],"pos":[101622,101724],"yaml":true},{"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"pos":[0,220],"content":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.","nodes":[{"content":"After completion, a task is in one of these states: <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.","pos":[0,220],"source":"After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states."}]}],"pos":[101735,101958],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[102367,102434],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[102564,102669],"yaml":true},{"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"pos":[0,74],"content":"The cancellation token that will be assigned to the new continuation task.","nodes":[{"content":"The cancellation token that will be assigned to the new continuation task.","pos":[0,74]}]}],"pos":[102763,102838],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[102905,102966],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[103039,103066],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,224],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[103255,103488],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[103590,103711],"yaml":true},{"content":"The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The <code>tasks</code> array contains a null value."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,107],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The <code>tasks</code> array is empty."}],"pos":[103805,103919],"yaml":true},{"content":"Gets the <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> enumeration value for this task factory.","nodes":[{"pos":[0,113],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> enumeration value for this task factory.","source":"Gets the <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> enumeration value for this task factory."}],"pos":[105452,105566],"yaml":true},{"content":"This property returns the default creation options for this factory. They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.","nodes":[{"pos":[0,192],"content":"This property returns the default creation options for this factory. They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.","nodes":[{"content":"This property returns the default creation options for this factory. They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.","pos":[0,192],"nodes":[{"content":"This property returns the default creation options for this factory.","pos":[0,68]},{"content":"They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.","pos":[69,192]}]}]}],"pos":[105577,105770],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that specifies the default creation options for this task factory.","nodes":[{"pos":[0,96],"content":"One of the enumeration values that specifies the default creation options for this task factory.","nodes":[{"content":"One of the enumeration values that specifies the default creation options for this task factory.","pos":[0,96]}]}],"pos":[105954,106051],"yaml":true},{"content":"Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.","nodes":[{"pos":[0,120],"content":"Creates a task that executes an end method function when a specified <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes."}],"pos":[107926,108047],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> whose completion should trigger the processing of the <code>endMethod</code>.","nodes":[{"pos":[0,122],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> whose completion should trigger the processing of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.IAsyncResult\"></xref> whose completion should trigger the processing of the <code>endMethod</code>."}],"pos":[108279,108402],"yaml":true},{"content":"The function delegate that processes the completed <code>asyncResult</code>.","nodes":[{"pos":[0,76],"content":"The function delegate that processes the completed <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The function delegate that processes the completed <code>asyncResult</code>."}],"pos":[108494,108571],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[108644,108741],"yaml":true},{"content":"The <code>asyncResult</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>asyncResult</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[108917,109036],"yaml":true},{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,122],"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","pos":[0,122]}]}],"pos":[111119,111242],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"pos":[0,135],"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[0,62],"source":"This method throws any exceptions thrown by the `beginMethod`."},{"content":"Exceptions for <ph id=\"ph1\">`endmethod`</ph> are thrown when waiting on the returned task.","pos":[63,135],"source":" Exceptions for `endmethod` are thrown when waiting on the returned task."}]}],"pos":[111253,111389],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[111710,111763],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[111855,111906],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[111967,112046],"yaml":true},{"content":"The created task that represents the asynchronous operation.","nodes":[{"pos":[0,60],"content":"The created task that represents the asynchronous operation.","nodes":[{"content":"The created task that represents the asynchronous operation.","pos":[0,60]}]}],"pos":[112119,112180],"yaml":true},{"content":"The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>beginMethod</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[112356,112475],"yaml":true},{"content":"Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.","nodes":[{"pos":[0,120],"content":"Creates a task that executes an end method function when a specified <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes."}],"pos":[114459,114580],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> whose completion should trigger the processing of the <code>endMethod</code>.","nodes":[{"pos":[0,122],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> whose completion should trigger the processing of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.IAsyncResult\"></xref> whose completion should trigger the processing of the <code>endMethod</code>."}],"pos":[114872,114995],"yaml":true},{"content":"The function delegate that processes the completed <code>asyncResult</code>.","nodes":[{"pos":[0,76],"content":"The function delegate that processes the completed <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The function delegate that processes the completed <code>asyncResult</code>."}],"pos":[115087,115164],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"pos":[0,77],"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created task.","pos":[0,77]}]}],"pos":[115264,115342],"yaml":true},{"content":"A task that represents the asynchronous operation.","nodes":[{"pos":[0,50],"content":"A task that represents the asynchronous operation.","nodes":[{"content":"A task that represents the asynchronous operation.","pos":[0,50]}]}],"pos":[115415,115466],"yaml":true},{"content":"The <code>asyncResult</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>asyncResult</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[115642,115761],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,69],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>creationOptions</code> argument specifies an invalid value."}],"pos":[115875,115945],"yaml":true},{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,122],"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","pos":[0,122]}]}],"pos":[118220,118343],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"pos":[0,135],"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[0,62],"source":"This method throws any exceptions thrown by the `beginMethod`."},{"content":"Exceptions for <ph id=\"ph1\">`endmethod`</ph> are thrown when waiting on the returned task.","pos":[63,135],"source":" Exceptions for `endmethod` are thrown when waiting on the returned task."}]}],"pos":[118354,118490],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[118871,118924],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[119016,119067],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[119128,119207],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"pos":[0,77],"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created task.","pos":[0,77]}]}],"pos":[119307,119385],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,106],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[119458,119565],"yaml":true},{"content":"The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>beginMethod</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[119741,119860],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,69],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>creationOptions</code> argument specifies an invalid value."}],"pos":[119974,120044],"yaml":true},{"content":"Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.","nodes":[{"pos":[0,120],"content":"Creates a task that executes an end method function when a specified <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes."}],"pos":[122184,122305],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> whose completion should trigger the processing of the <code>endMethod</code>.","nodes":[{"pos":[0,122],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> whose completion should trigger the processing of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.IAsyncResult\"></xref> whose completion should trigger the processing of the <code>endMethod</code>."}],"pos":[122645,122768],"yaml":true},{"content":"The function delegate that processes the completed <code>asyncResult</code>.","nodes":[{"pos":[0,76],"content":"The function delegate that processes the completed <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The function delegate that processes the completed <code>asyncResult</code>."}],"pos":[122860,122937],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"pos":[0,77],"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created task.","pos":[0,77]}]}],"pos":[123037,123115],"yaml":true},{"content":"The task scheduler that is used to schedule the task that executes the end method.","nodes":[{"pos":[0,82],"content":"The task scheduler that is used to schedule the task that executes the end method.","nodes":[{"content":"The task scheduler that is used to schedule the task that executes the end method.","pos":[0,82]}]}],"pos":[123203,123286],"yaml":true},{"content":"The created task that represents the asynchronous operation.","nodes":[{"pos":[0,60],"content":"The created task that represents the asynchronous operation.","nodes":[{"content":"The created task that represents the asynchronous operation.","pos":[0,60]}]}],"pos":[123359,123420],"yaml":true},{"content":"The <code>asyncResult</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>asyncResult</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."},{"pos":[119,123],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[130,176],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[123596,123783],"yaml":true},{"content":"The <code>creationOptions</code> parameter specifies an invalid value.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specifies an invalid value.","source":"The <code>creationOptions</code> parameter specifies an invalid value."}],"pos":[123897,123968],"yaml":true},{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,122],"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","pos":[0,122]}]}],"pos":[126498,126621],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"pos":[0,135],"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[0,62],"source":"This method throws any exceptions thrown by the `beginMethod`."},{"content":"Exceptions for <ph id=\"ph1\">`endmethod`</ph> are thrown when waiting on the returned task.","pos":[63,135],"source":" Exceptions for `endmethod` are thrown when waiting on the returned task."}]}],"pos":[126632,126768],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[127240,127293],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[127385,127436],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[127488,127556],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[127608,127677],"yaml":true},{"content":"The third argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The third argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The third argument passed to the <code>beginMethod</code> delegate."}],"pos":[127729,127797],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[127858,127937],"yaml":true},{"content":"An object that controls the behavior of the created task.","nodes":[{"pos":[0,57],"content":"An object that controls the behavior of the created task.","nodes":[{"content":"An object that controls the behavior of the created task.","pos":[0,57]}]}],"pos":[128037,128095],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[128150,128227],"yaml":true},{"content":"The type of the third argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,75],"content":"The type of the third argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the third argument passed to <code>beginMethod</code> delegate."}],"pos":[128262,128338],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[128373,128453],"yaml":true},{"content":"The created task that represents the asynchronous operation.","nodes":[{"pos":[0,60],"content":"The created task that represents the asynchronous operation.","nodes":[{"content":"The created task that represents the asynchronous operation.","pos":[0,60]}]}],"pos":[128526,128587],"yaml":true},{"content":"The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>beginMethod</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[128766,128885],"yaml":true},{"content":"The <code>creationOptions</code> parameter specifies an invalid value.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specifies an invalid value.","source":"The <code>creationOptions</code> parameter specifies an invalid value."}],"pos":[128999,129070],"yaml":true},{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,122],"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","pos":[0,122]}]}],"pos":[131408,131531],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"pos":[0,135],"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[0,62],"source":"This method throws any exceptions thrown by the `beginMethod`."},{"content":"Exceptions for <ph id=\"ph1\">`endmethod`</ph> are thrown when waiting on the returned task.","pos":[63,135],"source":" Exceptions for `endmethod` are thrown when waiting on the returned task."}]}],"pos":[131542,131678],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[132090,132143],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[132235,132286],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[132338,132406],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[132458,132527],"yaml":true},{"content":"The third argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The third argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The third argument passed to the <code>beginMethod</code> delegate."}],"pos":[132579,132647],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[132708,132787],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[132842,132919],"yaml":true},{"content":"The type of the third argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,75],"content":"The type of the third argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the third argument passed to <code>beginMethod</code> delegate."}],"pos":[132954,133030],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[133065,133145],"yaml":true},{"content":"The created task that represents the asynchronous operation.","nodes":[{"pos":[0,60],"content":"The created task that represents the asynchronous operation.","nodes":[{"content":"The created task that represents the asynchronous operation.","pos":[0,60]}]}],"pos":[133218,133279],"yaml":true},{"content":"The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>beginMethod</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[133458,133577],"yaml":true},{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,122],"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","pos":[0,122]}]}],"pos":[136026,136149],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"pos":[0,135],"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[0,62],"source":"This method throws any exceptions thrown by the `beginMethod`."},{"content":"Exceptions for <ph id=\"ph1\">`endmethod`</ph> are thrown when waiting on the returned task.","pos":[63,135],"source":" Exceptions for `endmethod` are thrown when waiting on the returned task."}]}],"pos":[136160,136296],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[136738,136791],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[136883,136934],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[136986,137054],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[137106,137175],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[137236,137315],"yaml":true},{"content":"An object that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,103],"content":"An object that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"An object that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[137415,137519],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[137574,137651],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[137686,137766],"yaml":true},{"content":"The created task that represents the asynchronous operation.","nodes":[{"pos":[0,60],"content":"The created task that represents the asynchronous operation.","nodes":[{"content":"The created task that represents the asynchronous operation.","pos":[0,60]}]}],"pos":[137839,137900],"yaml":true},{"content":"The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>beginMethod</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[138079,138198],"yaml":true},{"content":"The <code>creationOptions</code> parameter specifies an invalid value.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specifies an invalid value.","source":"The <code>creationOptions</code> parameter specifies an invalid value."}],"pos":[138312,138383],"yaml":true},{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,122],"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","pos":[0,122]}]}],"pos":[140640,140763],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"pos":[0,135],"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[0,62],"source":"This method throws any exceptions thrown by the `beginMethod`."},{"content":"Exceptions for <ph id=\"ph1\">`endmethod`</ph> are thrown when waiting on the returned task.","pos":[63,135],"source":" Exceptions for `endmethod` are thrown when waiting on the returned task."}]}],"pos":[140774,140910],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[141292,141345],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[141437,141488],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[141540,141608],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[141660,141729],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[141790,141869],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[141924,142001],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[142036,142116],"yaml":true},{"content":"The created task that represents the asynchronous operation.","nodes":[{"pos":[0,60],"content":"The created task that represents the asynchronous operation.","nodes":[{"content":"The created task that represents the asynchronous operation.","pos":[0,60]}]}],"pos":[142189,142250],"yaml":true},{"content":"The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>beginMethod</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[142429,142548],"yaml":true},{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,122],"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","pos":[0,122]}]}],"pos":[144724,144847],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"pos":[0,135],"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[0,62],"source":"This method throws any exceptions thrown by the `beginMethod`."},{"content":"Exceptions for <ph id=\"ph1\">`endmethod`</ph> are thrown when waiting on the returned task.","pos":[63,135],"source":" Exceptions for `endmethod` are thrown when waiting on the returned task."}]}],"pos":[144858,144994],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[145346,145399],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[145491,145542],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[145594,145662],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[145723,145802],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[145857,145937],"yaml":true},{"content":"The created task that represents the asynchronous operation.","nodes":[{"pos":[0,60],"content":"The created task that represents the asynchronous operation.","nodes":[{"content":"The created task that represents the asynchronous operation.","pos":[0,60]}]}],"pos":[146010,146071],"yaml":true},{"content":"The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>beginMethod</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[146250,146369],"yaml":true},{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,122],"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"content":"Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","pos":[0,122]}]}],"pos":[148737,148860],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"pos":[0,135],"content":"This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.","nodes":[{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[0,62],"source":"This method throws any exceptions thrown by the `beginMethod`."},{"content":"Exceptions for <ph id=\"ph1\">`endmethod`</ph> are thrown when waiting on the returned task.","pos":[63,135],"source":" Exceptions for `endmethod` are thrown when waiting on the returned task."}]}],"pos":[148871,149007],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[149419,149472],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[149564,149615],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[149667,149735],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[149796,149875],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"pos":[0,77],"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created task.","pos":[0,77]}]}],"pos":[149975,150053],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[150108,150188],"yaml":true},{"content":"The created task that represents the asynchronous operation.","nodes":[{"pos":[0,60],"content":"The created task that represents the asynchronous operation.","nodes":[{"content":"The created task that represents the asynchronous operation.","pos":[0,60]}]}],"pos":[150261,150322],"yaml":true},{"content":"The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>beginMethod</code> argument is `null`."},{"pos":[55,59],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[66,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>endMethod</code> argument is `null`."}],"pos":[150501,150620],"yaml":true},{"content":"The <code>creationOptions</code> parameter specifies an invalid value.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specifies an invalid value.","source":"The <code>creationOptions</code> parameter specifies an invalid value."}],"pos":[150734,150805],"yaml":true},{"content":"Gets the task scheduler for this task factory.","nodes":[{"pos":[0,46],"content":"Gets the task scheduler for this task factory.","nodes":[{"content":"Gets the task scheduler for this task factory.","pos":[0,46]}]}],"pos":[152302,152349],"yaml":true},{"content":"This property returns the default scheduler for this factory. It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.  \n  \n If this property returns `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> will be used.","nodes":[{"pos":[0,188],"content":"This property returns the default scheduler for this factory. It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.","nodes":[{"content":"This property returns the default scheduler for this factory. It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.","pos":[0,188],"nodes":[{"content":"This property returns the default scheduler for this factory.","pos":[0,61]},{"content":"It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.","pos":[62,188]}]}]},{"pos":[195,296],"content":"If this property returns <ph id=\"ph1\">`null`</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph> will be used.","source":"If this property returns `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> will be used."}],"pos":[152360,152661],"yaml":true,"extradata":"MT"},{"content":"The task scheduler for this task factory.","nodes":[{"pos":[0,41],"content":"The task scheduler for this task factory.","nodes":[{"content":"The task scheduler for this task factory.","pos":[0,41]}]}],"pos":[152827,152869],"yaml":true},{"content":"Creates and starts a task.","nodes":[{"pos":[0,26],"content":"Creates and starts a task.","nodes":[{"content":"Creates and starts a task.","pos":[0,26]}]}],"pos":[154822,154849],"yaml":true},{"content":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.","nodes":[{"pos":[0,238],"content":"Calling <ph id=\"ph1\">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.","source":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution."},{"pos":[245,379],"content":"However, unless creation and scheduling must be separated, <ph id=\"ph1\">`StartNew`</ph> is the recommended approach for both simplicity and performance.","source":"However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."}],"pos":[154860,155244],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"pos":[0,84],"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"content":"A function delegate that returns the future result to be available through the task.","pos":[0,84]}]}],"pos":[155522,155607],"yaml":true},{"content":"An object that contains data to be used by the <code>function</code> delegate.","nodes":[{"pos":[0,78],"content":"An object that contains data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object that contains data to be used by the <code>function</code> delegate."}],"pos":[155668,155747],"yaml":true},{"content":"The cancellation token that will be assigned to the new task.","nodes":[{"pos":[0,61],"content":"The cancellation token that will be assigned to the new task.","nodes":[{"content":"The cancellation token that will be assigned to the new task.","pos":[0,61]}]}],"pos":[155841,155903],"yaml":true},{"content":"The started task.","nodes":[{"pos":[0,17],"content":"The started task.","nodes":[{"content":"The started task.","pos":[0,17]}]}],"pos":[155976,155994],"yaml":true},{"content":"The cancellation token source that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,100],"content":"The cancellation token source that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The cancellation token source that created <code>cancellationToken</code> has already been disposed."}],"pos":[156173,156274],"yaml":true},{"content":"The <code>function</code> argument is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> argument is `null`."}],"pos":[156376,156422],"yaml":true},{"content":"Creates and starts a task.","nodes":[{"pos":[0,26],"content":"Creates and starts a task.","nodes":[{"content":"Creates and starts a task.","pos":[0,26]}]}],"pos":[158328,158355],"yaml":true},{"content":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.","nodes":[{"pos":[0,238],"content":"Calling <ph id=\"ph1\">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.","source":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution."},{"pos":[245,379],"content":"However, unless creation and scheduling must be separated, <ph id=\"ph1\">`StartNew`</ph> is the recommended approach for both simplicity and performance.","source":"However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."}],"pos":[158366,158750],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"pos":[0,84],"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"content":"A function delegate that returns the future result to be available through the task.","pos":[0,84]}]}],"pos":[159034,159119],"yaml":true},{"content":"An object that contains data to be used by the <code>function</code> delegate.","nodes":[{"pos":[0,78],"content":"An object that contains data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object that contains data to be used by the <code>function</code> delegate."}],"pos":[159180,159259],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"pos":[0,77],"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created task.","pos":[0,77]}]}],"pos":[159359,159437],"yaml":true},{"content":"The started task.","nodes":[{"pos":[0,17],"content":"The started task.","nodes":[{"content":"The started task.","pos":[0,17]}]}],"pos":[159510,159528],"yaml":true},{"content":"The <code>function</code> argument is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> argument is `null`."}],"pos":[159703,159749],"yaml":true},{"content":"The <code>creationOptions</code> parameter specifies an invalid value.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specifies an invalid value.","source":"The <code>creationOptions</code> parameter specifies an invalid value."}],"pos":[159863,159934],"yaml":true},{"content":"Creates and starts a task.","nodes":[{"pos":[0,26],"content":"Creates and starts a task.","nodes":[{"content":"Creates and starts a task.","pos":[0,26]}]}],"pos":[161711,161738],"yaml":true},{"content":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.","nodes":[{"pos":[0,238],"content":"Calling <ph id=\"ph1\">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.","source":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution."},{"pos":[245,379],"content":"However, unless creation and scheduling must be separated, <ph id=\"ph1\">`StartNew`</ph> is the recommended approach for both simplicity and performance.","source":"However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."}],"pos":[161749,162133],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"pos":[0,84],"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"content":"A function delegate that returns the future result to be available through the task.","pos":[0,84]}]}],"pos":[162375,162460],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"pos":[0,77],"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created task.","pos":[0,77]}]}],"pos":[162560,162638],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,63],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[162711,162775],"yaml":true},{"content":"The <code>function</code> argument is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> argument is `null`."}],"pos":[162950,162996],"yaml":true},{"content":"The <code>creationOptions</code> parameter specifies an invalid value.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specifies an invalid value.","source":"The <code>creationOptions</code> parameter specifies an invalid value."}],"pos":[163110,163181],"yaml":true},{"content":"Creates and starts a task.","nodes":[{"pos":[0,26],"content":"Creates and starts a task.","nodes":[{"content":"Creates and starts a task.","pos":[0,26]}]}],"pos":[165276,165303],"yaml":true},{"content":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.","nodes":[{"pos":[0,238],"content":"Calling <ph id=\"ph1\">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.","source":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution."},{"pos":[245,379],"content":"However, unless creation and scheduling must be separated, <ph id=\"ph1\">`StartNew`</ph> is the recommended approach for both simplicity and performance.","source":"However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."}],"pos":[165314,165698],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"pos":[0,84],"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"content":"A function delegate that returns the future result to be available through the task.","pos":[0,84]}]}],"pos":[166042,166127],"yaml":true},{"content":"The cancellation token that will be assigned to the new task.","nodes":[{"pos":[0,61],"content":"The cancellation token that will be assigned to the new task.","nodes":[{"content":"The cancellation token that will be assigned to the new task.","pos":[0,61]}]}],"pos":[166221,166283],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"pos":[0,77],"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created task.","pos":[0,77]}]}],"pos":[166383,166461],"yaml":true},{"content":"The task scheduler that is used to schedule the created task.","nodes":[{"pos":[0,61],"content":"The task scheduler that is used to schedule the created task.","nodes":[{"content":"The task scheduler that is used to schedule the created task.","pos":[0,61]}]}],"pos":[166549,166611],"yaml":true},{"content":"The started task.","nodes":[{"pos":[0,17],"content":"The started task.","nodes":[{"content":"The started task.","pos":[0,17]}]}],"pos":[166684,166702],"yaml":true},{"content":"The cancellation token source that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,100],"content":"The cancellation token source that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The cancellation token source that created <code>cancellationToken</code> has already been disposed."}],"pos":[166881,166982],"yaml":true},{"content":"The <code>function</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> argument is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[167084,167200],"yaml":true},{"content":"The <code>creationOptions</code> parameter specifies an invalid value.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specifies an invalid value.","source":"The <code>creationOptions</code> parameter specifies an invalid value."}],"pos":[167314,167385],"yaml":true},{"content":"Creates and starts a task.","nodes":[{"pos":[0,26],"content":"Creates and starts a task.","nodes":[{"content":"Creates and starts a task.","pos":[0,26]}]}],"pos":[169099,169126],"yaml":true},{"content":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.","nodes":[{"pos":[0,238],"content":"Calling <ph id=\"ph1\">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.","source":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution."},{"pos":[245,379],"content":"However, unless creation and scheduling must be separated, <ph id=\"ph1\">`StartNew`</ph> is the recommended approach for both simplicity and performance.","source":"However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."}],"pos":[169137,169521],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"pos":[0,84],"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"content":"A function delegate that returns the future result to be available through the task.","pos":[0,84]}]}],"pos":[169745,169830],"yaml":true},{"content":"An object that contains data to be used by the <code>function</code> delegate.","nodes":[{"pos":[0,78],"content":"An object that contains data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object that contains data to be used by the <code>function</code> delegate."}],"pos":[169891,169970],"yaml":true},{"content":"The started task.","nodes":[{"pos":[0,17],"content":"The started task.","nodes":[{"content":"The started task.","pos":[0,17]}]}],"pos":[170043,170061],"yaml":true},{"content":"The <code>function</code> argument is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> argument is `null`."}],"pos":[170236,170282],"yaml":true},{"content":"Creates and starts a task.","nodes":[{"pos":[0,26],"content":"Creates and starts a task.","nodes":[{"content":"Creates and starts a task.","pos":[0,26]}]}],"pos":[171867,171894],"yaml":true},{"content":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.","nodes":[{"pos":[0,239],"content":"Calling <ph id=\"ph1\">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors, and then calling the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.","source":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution."},{"pos":[246,380],"content":"However, unless creation and scheduling must be separated, <ph id=\"ph1\">`StartNew`</ph> is the recommended approach for both simplicity and performance.","source":"However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."}],"pos":[171905,172290],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"pos":[0,84],"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"content":"A function delegate that returns the future result to be available through the task.","pos":[0,84]}]}],"pos":[172472,172557],"yaml":true},{"content":"The started task.","nodes":[{"pos":[0,17],"content":"The started task.","nodes":[{"content":"The started task.","pos":[0,17]}]}],"pos":[172630,172648],"yaml":true},{"content":"The <code>function</code> argument is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> argument is `null`."}],"pos":[172823,172869],"yaml":true},{"content":"Creates and starts a task.","nodes":[{"pos":[0,26],"content":"Creates and starts a task.","nodes":[{"content":"Creates and starts a task.","pos":[0,26]}]}],"pos":[174616,174643],"yaml":true},{"content":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.","nodes":[{"pos":[0,238],"content":"Calling <ph id=\"ph1\">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.","source":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution."},{"pos":[245,379],"content":"However, unless creation and scheduling must be separated, <ph id=\"ph1\">`StartNew`</ph> is the recommended approach for both simplicity and performance.","source":"However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."}],"pos":[174654,175038],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"pos":[0,84],"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"content":"A function delegate that returns the future result to be available through the task.","pos":[0,84]}]}],"pos":[175274,175359],"yaml":true},{"content":"The cancellation token that will be assigned to the new task.","nodes":[{"pos":[0,61],"content":"The cancellation token that will be assigned to the new task.","nodes":[{"content":"The cancellation token that will be assigned to the new task.","pos":[0,61]}]}],"pos":[175453,175515],"yaml":true},{"content":"The started task.","nodes":[{"pos":[0,17],"content":"The started task.","nodes":[{"content":"The started task.","pos":[0,17]}]}],"pos":[175588,175606],"yaml":true},{"content":"The cancellation token source that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,100],"content":"The cancellation token source that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The cancellation token source that created <code>cancellationToken</code> has already been disposed."}],"pos":[175785,175886],"yaml":true},{"content":"The <code>function</code> argument is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> argument is `null`."}],"pos":[175988,176034],"yaml":true},{"content":"Creates and starts a task.","nodes":[{"pos":[0,26],"content":"Creates and starts a task.","nodes":[{"content":"Creates and starts a task.","pos":[0,26]}]}],"pos":[178258,178285],"yaml":true},{"content":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.","nodes":[{"pos":[0,238],"content":"Calling <ph id=\"ph1\">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.","source":"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution."},{"pos":[245,379],"content":"However, unless creation and scheduling must be separated, <ph id=\"ph1\">`StartNew`</ph> is the recommended approach for both simplicity and performance.","source":"However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."}],"pos":[178296,178680],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"pos":[0,84],"content":"A function delegate that returns the future result to be available through the task.","nodes":[{"content":"A function delegate that returns the future result to be available through the task.","pos":[0,84]}]}],"pos":[179066,179151],"yaml":true},{"content":"An object that contains data to be used by the <code>function</code> delegate.","nodes":[{"pos":[0,78],"content":"An object that contains data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object that contains data to be used by the <code>function</code> delegate."}],"pos":[179212,179291],"yaml":true},{"content":"The cancellation token that will be assigned to the new task.","nodes":[{"pos":[0,61],"content":"The cancellation token that will be assigned to the new task.","nodes":[{"content":"The cancellation token that will be assigned to the new task.","pos":[0,61]}]}],"pos":[179385,179447],"yaml":true},{"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"pos":[0,77],"content":"One of the enumeration values that controls the behavior of the created task.","nodes":[{"content":"One of the enumeration values that controls the behavior of the created task.","pos":[0,77]}]}],"pos":[179547,179625],"yaml":true},{"content":"The task scheduler that is used to schedule the created task.","nodes":[{"pos":[0,61],"content":"The task scheduler that is used to schedule the created task.","nodes":[{"content":"The task scheduler that is used to schedule the created task.","pos":[0,61]}]}],"pos":[179713,179775],"yaml":true},{"content":"The started task.","nodes":[{"pos":[0,17],"content":"The started task.","nodes":[{"content":"The started task.","pos":[0,17]}]}],"pos":[179848,179866],"yaml":true},{"content":"The cancellation token source that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,100],"content":"The cancellation token source that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The cancellation token source that created <code>cancellationToken</code> has already been disposed."}],"pos":[180045,180146],"yaml":true},{"content":"The <code>function</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> argument is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[180248,180364],"yaml":true},{"content":"The <code>creationOptions</code> parameter specifies an invalid value.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specifies an invalid value.","source":"The <code>creationOptions</code> parameter specifies an invalid value."}],"pos":[180478,180549],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks.TaskFactory`1\n  commentId: T:System.Threading.Tasks.TaskFactory`1\n  id: TaskFactory`1\n  children:\n  - System.Threading.Tasks.TaskFactory`1.#ctor\n  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.CancellationToken\n  - System.Threading.Tasks.TaskFactory`1.ContinuationOptions\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.CreationOptions\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.Scheduler\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  langs:\n  - csharp\n  name: TaskFactory<TResult>\n  nameWithType: TaskFactory<TResult>\n  fullName: System.Threading.Tasks.TaskFactory<TResult>\n  type: Class\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects.\n  remarks: \"The .NET Framework provides two factories for creating and scheduling tasks:  \\n  \\n-   The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.  \\n  \\n-   The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.  \\n  \\n The <xref:System.Threading.Tasks.TaskFactory%601> class allows you to do the following:  \\n  \\n-   Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. You can call the overloads of this method to create and execute a task that requires non-default arguments.  \\n  \\n    > [!WARNING]\\n    >  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.  \\n  \\n-   Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> or   <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.  \\n  \\n-   Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> or <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.  \\n  \\n The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.  \\n  \\n [!code-csharp[TPL_Factories#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/factoriestresult.cs#2)]\\n [!code-vb[TPL_Factories#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factoriestresult.vb#2)]  \\n  \\n In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance. Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example.\"\n  example:\n  - \"The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The first task returns a string array that is populated with the names of files in the user's MyDocuments directory, while the second returns a string array that is populated with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName> method, which displays information about the number of files and directories in the arrays returned by the two tasks after they have completed execution.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory2.cs#2)]\\n [!code-vb[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory2.vb#2)]\"\n  syntax:\n    content: public class TaskFactory<TResult>\n    typeParameters:\n    - id: TResult\n      description: The return value of the <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects that the methods of this class create.\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor\n  id: '#ctor'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: TaskFactory<TResult>()\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>()\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>()\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the default configuration.\n  remarks: This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory ();\n    parameters: []\n  overload: System.Threading.Tasks.TaskFactory`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)\n  id: '#ctor(System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: TaskFactory<TResult>(CancellationToken)\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken)\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the default configuration.\n  remarks: This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.\n  overload: System.Threading.Tasks.TaskFactory`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)\n  id: '#ctor(System.Threading.Tasks.TaskScheduler)'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: TaskFactory<TResult>(TaskScheduler)\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(TaskScheduler)\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>(TaskScheduler)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the specified configuration.\n  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>. A null value indicates that the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> should be used.\n  overload: System.Threading.Tasks.TaskFactory`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the specified configuration.\n  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory`1.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>creationOptions</code> or <code>continuationOptions</code> specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref> instance with the specified configuration.\n  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The default scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\"></xref>. A null value indicates that <xref href=\"System.Threading.Tasks.TaskScheduler.Current\"></xref> should be used.\n  overload: System.Threading.Tasks.TaskFactory`1.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>creationOptions</code> or <code>continuationOptions</code> specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken\n  commentId: P:System.Threading.Tasks.TaskFactory`1.CancellationToken\n  id: CancellationToken\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: CancellationToken\n  nameWithType: TaskFactory<TResult>.CancellationToken\n  fullName: TaskFactory<TResult>.CancellationToken\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the default cancellation token for this task factory.\n  remarks: This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.\n  syntax:\n    content: public System.Threading.CancellationToken CancellationToken { get; }\n    return:\n      type: System.Threading.CancellationToken\n      description: The default cancellation token for this task factory.\n  overload: System.Threading.Tasks.TaskFactory`1.CancellationToken*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions\n  commentId: P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions\n  id: ContinuationOptions\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinuationOptions\n  nameWithType: TaskFactory<TResult>.ContinuationOptions\n  fullName: TaskFactory<TResult>.ContinuationOptions\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> enumeration value for this task factory.\n  remarks: This property returns the default continuation options for this factory. They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.\n  syntax:\n    content: public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: One of the enumeration values that specifies the default continuation options for this task factory.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinuationOptions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of a set of provided Tasks.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The scheduler that is used to schedule the created continuation task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contains a null value or is empty.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>continuationOptions</code> specifies an invalid value.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"One of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of a set of provided Tasks.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contains a null value or is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAll(Task[], Func<Task[],TResult>)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>)\n  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contains a null value or is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new continuation task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"One of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n <code>continuationFunction</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contains a null value or is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contains a null value or is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new continuation task.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"One of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contains a null value or is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contains a null value or is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The scheduler that is used to schedule the created continuation task.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contains a null value or is empty.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"One of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The task scheduler that is used to schedule the created continuation task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> array is empty.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"One of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAny(Task[], Func<Task,TResult>)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>)\n  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contains a null value or is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new continuation task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"One of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid enumeration value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> array is empty.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"One of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid enumeration value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.\n  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new continuation task.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"One of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions\n  commentId: P:System.Threading.Tasks.TaskFactory`1.CreationOptions\n  id: CreationOptions\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: CreationOptions\n  nameWithType: TaskFactory<TResult>.CreationOptions\n  fullName: TaskFactory<TResult>.CreationOptions\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> enumeration value for this task factory.\n  remarks: This property returns the default creation options for this factory. They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.\n  syntax:\n    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }\n    return:\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: One of the enumeration values that specifies the default creation options for this task factory.\n  overload: System.Threading.Tasks.TaskFactory`1.CreationOptions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})\n  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)\n  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)\n  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> whose completion should trigger the processing of the <code>endMethod</code>.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The function delegate that processes the completed <code>asyncResult</code>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>asyncResult</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)\n  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  fullName: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created task that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>beginMethod</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> whose completion should trigger the processing of the <code>endMethod</code>.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The function delegate that processes the completed <code>asyncResult</code>.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: One of the enumeration values that controls the behavior of the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A task that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>asyncResult</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: One of the enumeration values that controls the behavior of the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>beginMethod</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> whose completion should trigger the processing of the <code>endMethod</code>.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The function delegate that processes the completed <code>asyncResult</code>.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: One of the enumeration values that controls the behavior of the created task.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The task scheduler that is used to schedule the task that executes the end method.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created task that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>asyncResult</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> parameter specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: arg3\n      type: TArg3\n      description: The third argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: An object that controls the behavior of the created task.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the third argument passed to <code>beginMethod</code> delegate.\n    - id: TArg3\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created task that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>beginMethod</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> parameter specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)\n  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: arg3\n      type: TArg3\n      description: The third argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the third argument passed to <code>beginMethod</code> delegate.\n    - id: TArg3\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created task that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>beginMethod</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: An object that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created task that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>beginMethod</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> parameter specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)\n  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created task that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>beginMethod</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)\n  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TArg1\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created task that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>beginMethod</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: One of the enumeration values that controls the behavior of the created task.\n    typeParameters:\n    - id: TArg1\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created task that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>beginMethod</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>endMethod</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> parameter specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.Scheduler\n  commentId: P:System.Threading.Tasks.TaskFactory`1.Scheduler\n  id: Scheduler\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: Scheduler\n  nameWithType: TaskFactory<TResult>.Scheduler\n  fullName: TaskFactory<TResult>.Scheduler\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the task scheduler for this task factory.\n  remarks: \"This property returns the default scheduler for this factory. It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.  \\n  \\n If this property returns `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> will be used.\"\n  syntax:\n    content: public System.Threading.Tasks.TaskScheduler Scheduler { get; }\n    return:\n      type: System.Threading.Tasks.TaskScheduler\n      description: The task scheduler for this task factory.\n  overload: System.Threading.Tasks.TaskFactory`1.Scheduler*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: StartNew(Func<Object,TResult>, Object, CancellationToken)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken)\n  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a task.\n  remarks: \"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \\n  \\n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: A function delegate that returns the future result to be available through the task.\n    - id: state\n      type: System.Object\n      description: An object that contains data to be used by the <code>function</code> delegate.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started task.\n  overload: System.Threading.Tasks.TaskFactory`1.StartNew*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The cancellation token source that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: StartNew(Func<Object,TResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a task.\n  remarks: \"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \\n  \\n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: A function delegate that returns the future result to be available through the task.\n    - id: state\n      type: System.Object\n      description: An object that contains data to be used by the <code>function</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: One of the enumeration values that controls the behavior of the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started task.\n  overload: System.Threading.Tasks.TaskFactory`1.StartNew*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> parameter specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: StartNew(Func<TResult>, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a task.\n  remarks: \"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \\n  \\n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: A function delegate that returns the future result to be available through the task.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: One of the enumeration values that controls the behavior of the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory`1.StartNew*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> parameter specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a task.\n  remarks: \"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \\n  \\n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: A function delegate that returns the future result to be available through the task.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new task.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: One of the enumeration values that controls the behavior of the created task.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The task scheduler that is used to schedule the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started task.\n  overload: System.Threading.Tasks.TaskFactory`1.StartNew*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The cancellation token source that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>function</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> parameter specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)\n  id: StartNew(System.Func{System.Object,`0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: StartNew(Func<Object,TResult>, Object)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object)\n  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a task.\n  remarks: \"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \\n  \\n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: A function delegate that returns the future result to be available through the task.\n    - id: state\n      type: System.Object\n      description: An object that contains data to be used by the <code>function</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started task.\n  overload: System.Threading.Tasks.TaskFactory`1.StartNew*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})\n  id: StartNew(System.Func{`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: StartNew(Func<TResult>)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>)\n  fullName: TaskFactory<TResult>.StartNew(Func<TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a task.\n  remarks: \"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \\n  \\n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: A function delegate that returns the future result to be available through the task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started task.\n  overload: System.Threading.Tasks.TaskFactory`1.StartNew*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)\n  id: StartNew(System.Func{`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: StartNew(Func<TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a task.\n  remarks: \"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \\n  \\n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: A function delegate that returns the future result to be available through the task.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started task.\n  overload: System.Threading.Tasks.TaskFactory`1.StartNew*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The cancellation token source that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  name: StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a task.\n  remarks: \"Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \\n  \\n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: A function delegate that returns the future result to be available through the task.\n    - id: state\n      type: System.Object\n      description: An object that contains data to be used by the <code>function</code> delegate.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be assigned to the new task.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: One of the enumeration values that controls the behavior of the created task.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The task scheduler that is used to schedule the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started task.\n  overload: System.Threading.Tasks.TaskFactory`1.StartNew*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The cancellation token source that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>function</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> parameter specifies an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: TaskFactory<TResult>()\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>()\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>()\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: TaskFactory<TResult>(CancellationToken)\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken)\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: TaskFactory<TResult>(TaskScheduler)\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(TaskScheduler)\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>(TaskScheduler)\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  nameWithType: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskCreationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCreationOptions\n  nameWithType: TaskCreationOptions\n  fullName: System.Threading.Tasks.TaskCreationOptions\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: CancellationToken\n  nameWithType: TaskFactory<TResult>.CancellationToken\n  fullName: TaskFactory<TResult>.CancellationToken\n- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinuationOptions\n  nameWithType: TaskFactory<TResult>.ContinuationOptions\n  fullName: TaskFactory<TResult>.ContinuationOptions\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.Tasks.Task[]\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task[]\n  nameWithType: Task[]\n  fullName: System.Threading.Tasks.Task[]\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: TResult\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Func{System.Threading.Tasks.Task[],TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task[],TResult>\n  nameWithType: Func<Task[],TResult>\n  fullName: System.Func<System.Threading.Tasks.Task[],TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll(Task[], Func<Task[],TResult>)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>)\n  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n- uid: TAntecedentResult\n  name: TAntecedentResult\n  nameWithType: TAntecedentResult\n  fullName: TAntecedentResult\n- uid: System.Threading.Tasks.Task{TAntecedentResult}[]\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<TAntecedentResult>[]\n  nameWithType: Task<TAntecedentResult>[]\n  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAntecedentResult\n    name: TAntecedentResult\n    nameWithType: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task<TAntecedentResult>[],TResult>\n  nameWithType: Func<Task<TAntecedentResult>[],TResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAntecedentResult\n    name: TAntecedentResult\n    nameWithType: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Func{System.Threading.Tasks.Task,TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task,TResult>\n  nameWithType: Func<Task,TResult>\n  fullName: System.Func<System.Threading.Tasks.Task,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny(Task[], Func<Task,TResult>)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>)\n  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task<TAntecedentResult>,TResult>\n  nameWithType: Func<Task<TAntecedentResult>,TResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAntecedentResult\n    name: TAntecedentResult\n    nameWithType: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: CreationOptions\n  nameWithType: TaskFactory<TResult>.CreationOptions\n  fullName: TaskFactory<TResult>.CreationOptions\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)\n  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)\n  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Func{System.IAsyncResult,TResult}\n  parent: System\n  isExternal: false\n  name: Func<IAsyncResult,TResult>\n  nameWithType: Func<IAsyncResult,TResult>\n  fullName: System.Func<System.IAsyncResult,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  fullName: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n- uid: System.Func`3\n  name: Func<T1,T2,TResult>\n  nameWithType: Func<T1,T2,TResult>\n  fullName: System.Func<T1,T2,TResult>\n- uid: System.AsyncCallback\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  isExternal: false\n  name: Func<AsyncCallback,Object,IAsyncResult>\n  nameWithType: Func<AsyncCallback,Object,IAsyncResult>\n  fullName: System.Func<System.AsyncCallback,System.Object,System.IAsyncResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    nameWithType: AsyncCallback\n    fullName: System.AsyncCallback\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n- uid: System.Func`6\n  name: Func<T1,T2,T3,T4,T5,TResult>\n  nameWithType: Func<T1,T2,T3,T4,T5,TResult>\n  fullName: System.Func<T1,T2,T3,T4,T5,TResult>\n- uid: TArg1\n  name: TArg1\n  nameWithType: TArg1\n  fullName: TArg1\n- uid: TArg2\n  name: TArg2\n  nameWithType: TArg2\n  fullName: TArg2\n- uid: TArg3\n  name: TArg3\n  nameWithType: TArg3\n  fullName: TArg3\n- uid: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  isExternal: false\n  name: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>\n  nameWithType: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>\n  fullName: System.Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>\n  spec.csharp:\n  - uid: System.Func`6\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TArg1\n    name: TArg1\n    nameWithType: TArg1\n    fullName: TArg1\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TArg2\n    name: TArg2\n    nameWithType: TArg2\n    fullName: TArg2\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TArg3\n    name: TArg3\n    nameWithType: TArg3\n    fullName: TArg3\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    nameWithType: AsyncCallback\n    fullName: System.AsyncCallback\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n- uid: System.Func`5\n  name: Func<T1,T2,T3,T4,TResult>\n  nameWithType: Func<T1,T2,T3,T4,TResult>\n  fullName: System.Func<T1,T2,T3,T4,TResult>\n- uid: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  isExternal: false\n  name: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>\n  nameWithType: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>\n  fullName: System.Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TArg1\n    name: TArg1\n    nameWithType: TArg1\n    fullName: TArg1\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TArg2\n    name: TArg2\n    nameWithType: TArg2\n    fullName: TArg2\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    nameWithType: AsyncCallback\n    fullName: System.AsyncCallback\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n- uid: System.Func`4\n  name: Func<T1,T2,T3,TResult>\n  nameWithType: Func<T1,T2,T3,TResult>\n  fullName: System.Func<T1,T2,T3,TResult>\n- uid: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  isExternal: false\n  name: Func<TArg1,AsyncCallback,Object,IAsyncResult>\n  nameWithType: Func<TArg1,AsyncCallback,Object,IAsyncResult>\n  fullName: System.Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TArg1\n    name: TArg1\n    nameWithType: TArg1\n    fullName: TArg1\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    nameWithType: AsyncCallback\n    fullName: System.AsyncCallback\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.Scheduler\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: Scheduler\n  nameWithType: TaskFactory<TResult>.Scheduler\n  fullName: TaskFactory<TResult>.Scheduler\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: StartNew(Func<Object,TResult>, Object, CancellationToken)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken)\n  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken)\n- uid: System.Func{System.Object,TResult}\n  parent: System\n  isExternal: false\n  name: Func<Object,TResult>\n  nameWithType: Func<Object,TResult>\n  fullName: System.Func<System.Object,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: StartNew(Func<Object,TResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: StartNew(Func<TResult>, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)\n  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)\n- uid: System.Func`1\n  parent: System\n  isExternal: false\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: StartNew(Func<Object,TResult>, Object)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object)\n  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: StartNew(Func<TResult>)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>)\n  fullName: TaskFactory<TResult>.StartNew(Func<TResult>)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: StartNew(Func<TResult>, CancellationToken)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)\n  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: TaskFactory<TResult>\n  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>\n  fullName: TaskFactory<TResult>.TaskFactory<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: CancellationToken\n  nameWithType: TaskFactory<TResult>.CancellationToken\n  fullName: TaskFactory<TResult>.CancellationToken\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinuationOptions\n  nameWithType: TaskFactory<TResult>.ContinuationOptions\n  fullName: TaskFactory<TResult>.ContinuationOptions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll\n  fullName: TaskFactory<TResult>.ContinueWhenAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>\n  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny\n  fullName: TaskFactory<TResult>.ContinueWhenAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>\n  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: CreationOptions\n  nameWithType: TaskFactory<TResult>.CreationOptions\n  fullName: TaskFactory<TResult>.CreationOptions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync\n  nameWithType: TaskFactory<TResult>.FromAsync\n  fullName: TaskFactory<TResult>.FromAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TArg3>\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync<TArg1,TArg2>\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>\n  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: FromAsync<TArg1>\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>\n  fullName: TaskFactory<TResult>.FromAsync<TArg1>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.Scheduler*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: Scheduler\n  nameWithType: TaskFactory<TResult>.Scheduler\n  fullName: TaskFactory<TResult>.Scheduler\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew*\n  parent: System.Threading.Tasks.TaskFactory`1\n  isExternal: false\n  name: StartNew\n  nameWithType: TaskFactory<TResult>.StartNew\n  fullName: TaskFactory<TResult>.StartNew\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}