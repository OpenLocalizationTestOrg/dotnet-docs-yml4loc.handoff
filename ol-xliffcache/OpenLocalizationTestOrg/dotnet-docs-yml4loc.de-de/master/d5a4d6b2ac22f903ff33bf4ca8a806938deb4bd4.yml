### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.HostFileChangeMonitor
  commentId: T:System.Runtime.Caching.HostFileChangeMonitor
  id: HostFileChangeMonitor
  children:
  - System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})
  - System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)
  - System.Runtime.Caching.HostFileChangeMonitor.FilePaths
  - System.Runtime.Caching.HostFileChangeMonitor.LastModified
  - System.Runtime.Caching.HostFileChangeMonitor.UniqueId
  langs:
  - csharp
  name: HostFileChangeMonitor
  nameWithType: HostFileChangeMonitor
  fullName: System.Runtime.Caching.HostFileChangeMonitor
  type: Class
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Monitors directories and file paths and notifies the cache of changes to the monitored items. This class cannot be inherited.
  remarks: "The <xref:System.Runtime.Caching.HostFileChangeMonitor> class is a concrete implementation of the <xref:System.Runtime.Caching.FileChangeMonitor> type. This class is sealed, therefore it cannot be extended. This class is useful if you want to use an existing cache implementation and to monitor files and directories for changes.  \n  \n For each specified file or directory path, the <xref:System.Runtime.Caching.HostFileChangeMonitor> class triggers a change notification if any of the following changes occur:  \n  \n-   The name of the monitored file or directory changes.  \n  \n-   The specified file or directory did not exist at the time the monitor was created, but was created later. In other words, a file or directory was created in the scope of the monitored items.  \n  \n-   The size of a monitored file changed.  \n  \n-   The contents of a monitored file changed, or the contents of a monitored directory changed.  \n  \n-   The access control list (ACL) of the file or directory was changed.  \n  \n-   The monitored file or directory was deleted.  \n  \n If too many changes occur for the monitored file or directory at the same time, the <xref:System.Runtime.Caching.HostFileChangeMonitor> instance can lose track of specific changes. In this scenario, the <xref:System.Runtime.Caching.HostFileChangeMonitor> class triggers a change notification. This scenario is more likely to occur when the <xref:System.Runtime.Caching.HostFileChangeMonitor> instance monitors a directory, and many changes occur in the scope of the directory structure in a short period of time.  \n  \n Because the purpose of the <xref:System.Runtime.Caching.HostFileChangeMonitor> class is only to signal that something has changed among the set of monitored files and directories, it is not considered important that details about a specific change are not captured. The purpose of the <xref:System.Runtime.Caching.HostFileChangeMonitor> class is to provide notification that state changed so that a cache entry (or entries) can be evicted. Because the <xref:System.Runtime.Caching.HostFileChangeMonitor> class does not indicate exactly what changed, internal-change tracking overflow is irrelevant.  \n  \n When you supply paths to a <xref:System.Runtime.Caching.HostFileChangeMonitor> instance, the directory and file paths must be full paths to the directory or file. Relative paths and wildcard characters in paths are not allowed.  \n  \n When the <xref:System.Runtime.Caching.HostFileChangeMonitor> class is used in an ASP.NET application, the Windows identity that is used for access to monitored items is the application identity for the ASP.NET application. In other words, the application identity will be one of the following:  \n  \n-   The process identity.  \n  \n-   The configured application identity.  \n  \n-   The UNC credential if the application is running from a UNC share.  \n  \n When the <xref:System.Runtime.Caching.HostFileChangeMonitor> class is used in a non-ASP.NET application, the <xref:System.IO.FileSystemWatcher> class is used internally to monitor files. As a result, whatever access control list (ACL) applies to a monitored file or directory is applied to the Windows identity of the current thread.  \n  \n> [!NOTE]\n>  Callers must have the appropriate level of code access security (CAS) permissions and must have NTFS permissions to all monitored directories and paths."
  example:
  - "The following example creates a cache item that uses a <xref:System.Runtime.Caching.HostFileChangeMonitor> object to monitor the state of the source data (which is a file) on the file system. The cache entry is defined using a <xref:System.Runtime.Caching.CacheItemPolicy> object to provide eviction and expiration details for the cache entry.  \n  \n [!code-csharp[CachingASPNetApplications#1](~/samples/snippets/csharp/VS_Snippets_WebNet/cachingaspnetapplications/cs/default.aspx.cs#1)]\n [!code-vb[CachingASPNetApplications#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/cachingaspnetapplications/vb/default.aspx.vb#1)]"
  syntax:
    content: 'public sealed class HostFileChangeMonitor : System.Runtime.Caching.FileChangeMonitor'
  inheritance:
  - System.Object
  - System.Runtime.Caching.ChangeMonitor
  - System.Runtime.Caching.FileChangeMonitor
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Runtime.Caching.ChangeMonitor.Dispose
  - System.Runtime.Caching.ChangeMonitor.HasChanged
  - System.Runtime.Caching.ChangeMonitor.InitializationComplete
  - System.Runtime.Caching.ChangeMonitor.IsDisposed
  - System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  - System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})
  commentId: M:System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})
  id: '#ctor(System.Collections.Generic.IList{System.String})'
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: HostFileChangeMonitor(IList<String>)
  nameWithType: HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)
  fullName: HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Initializes a new instance of the <xref href="System.Runtime.Caching.HostFileChangeMonitor"></xref> class.
  remarks: "Calls to the <xref:System.Runtime.Caching.HostFileChangeMonitor.%23ctor%2A> constructor must provide a non-null value for the `filePaths` parameter. At a minimum, the constructor validates the collection of paths that is passed into it and then initializes monitoring for those paths.  \n  \n> [!NOTE]\n>  The constructor performs only string validation of the path name. It does not canonicalize paths or validate that the paths exist."
  syntax:
    content: public HostFileChangeMonitor (System.Collections.Generic.IList<string> filePaths);
    parameters:
    - id: filePaths
      type: System.Collections.Generic.IList{System.String}
      description: A list that contains one or more directory paths or file paths to monitor.
  overload: System.Runtime.Caching.HostFileChangeMonitor.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>filePaths</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>filePaths</code> contains zero items.  \n  \n -or-  \n  \n A path in the <code>filePaths</code> list is `null` or an empty string."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)
  commentId: M:System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HostFileChangeMonitor.Dispose(Boolean)
  fullName: HostFileChangeMonitor.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: System.Runtime.Caching.HostFileChangeMonitor.Dispose*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
- uid: System.Runtime.Caching.HostFileChangeMonitor.FilePaths
  commentId: P:System.Runtime.Caching.HostFileChangeMonitor.FilePaths
  id: FilePaths
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: FilePaths
  nameWithType: HostFileChangeMonitor.FilePaths
  fullName: HostFileChangeMonitor.FilePaths
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets the collection of directories and file paths that was passed to the <xref href="System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})"></xref> constructor.
  syntax:
    content: public override System.Collections.ObjectModel.ReadOnlyCollection<string> FilePaths { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: A collection of directories and file paths.
  overload: System.Runtime.Caching.HostFileChangeMonitor.FilePaths*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.HostFileChangeMonitor.LastModified
  commentId: P:System.Runtime.Caching.HostFileChangeMonitor.LastModified
  id: LastModified
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: LastModified
  nameWithType: HostFileChangeMonitor.LastModified
  fullName: HostFileChangeMonitor.LastModified
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets a read-only value that indicates the last write time of a monitored file or path.
  remarks: If a file-change monitor is monitoring multiple files or paths, this property returns the most recent write time in the set of all files and paths.
  syntax:
    content: public override DateTimeOffset LastModified { get; }
    return:
      type: System.DateTimeOffset
      description: The last write time of a monitored file or path.
  overload: System.Runtime.Caching.HostFileChangeMonitor.LastModified*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.HostFileChangeMonitor.UniqueId
  commentId: P:System.Runtime.Caching.HostFileChangeMonitor.UniqueId
  id: UniqueId
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: UniqueId
  nameWithType: HostFileChangeMonitor.UniqueId
  fullName: HostFileChangeMonitor.UniqueId
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets an identifier for the <xref href="System.Runtime.Caching.HostFileChangeMonitor"></xref> instance that is based on the set of monitored directories and file paths.
  remarks: "The string that makes up the <xref:System.Runtime.Caching.HostFileChangeMonitor.UniqueId%2A> property value is constructed from the following parts:  \n  \n-   A file or directory path.  \n  \n-   The most recent write time in UTC time, measured as ticks but represented as a hexadecimal string.  \n  \n-   The file size, represented as a hexadecimal string.  \n  \n If a file change monitor is monitoring multiple paths, the information returned by this property is concatenated into a single string for all the monitored directories and file paths."
  syntax:
    content: public override string UniqueId { get; }
    return:
      type: System.String
      description: An identifier for the change monitor.
  overload: System.Runtime.Caching.HostFileChangeMonitor.UniqueId*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
references:
- uid: System.Runtime.Caching.FileChangeMonitor
  parent: System.Runtime.Caching
  isExternal: false
  name: FileChangeMonitor
  nameWithType: FileChangeMonitor
  fullName: System.Runtime.Caching.FileChangeMonitor
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: HostFileChangeMonitor(IList<String>)
  nameWithType: HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)
  fullName: HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)
- uid: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.String
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HostFileChangeMonitor.Dispose(Boolean)
  fullName: HostFileChangeMonitor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.HostFileChangeMonitor.FilePaths
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: FilePaths
  nameWithType: HostFileChangeMonitor.FilePaths
  fullName: HostFileChangeMonitor.FilePaths
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.HostFileChangeMonitor.LastModified
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: LastModified
  nameWithType: HostFileChangeMonitor.LastModified
  fullName: HostFileChangeMonitor.LastModified
- uid: System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Runtime.Caching.HostFileChangeMonitor.UniqueId
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: HostFileChangeMonitor.UniqueId
  fullName: HostFileChangeMonitor.UniqueId
- uid: System.Runtime.Caching.HostFileChangeMonitor.#ctor*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: HostFileChangeMonitor
  nameWithType: HostFileChangeMonitor.HostFileChangeMonitor
  fullName: HostFileChangeMonitor.HostFileChangeMonitor
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
- uid: System.Runtime.Caching.HostFileChangeMonitor.Dispose*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: Dispose
  nameWithType: HostFileChangeMonitor.Dispose
  fullName: HostFileChangeMonitor.Dispose
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
- uid: System.Runtime.Caching.HostFileChangeMonitor.FilePaths*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: FilePaths
  nameWithType: HostFileChangeMonitor.FilePaths
  fullName: HostFileChangeMonitor.FilePaths
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
- uid: System.Runtime.Caching.HostFileChangeMonitor.LastModified*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: LastModified
  nameWithType: HostFileChangeMonitor.LastModified
  fullName: HostFileChangeMonitor.LastModified
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
- uid: System.Runtime.Caching.HostFileChangeMonitor.UniqueId*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: HostFileChangeMonitor.UniqueId
  fullName: HostFileChangeMonitor.UniqueId
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/HostFileChangeMonitor.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: ChangeMonitor.Dispose()
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: ChangeMonitor.InitializationComplete()
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: ChangeMonitor.OnChanged(Object)
