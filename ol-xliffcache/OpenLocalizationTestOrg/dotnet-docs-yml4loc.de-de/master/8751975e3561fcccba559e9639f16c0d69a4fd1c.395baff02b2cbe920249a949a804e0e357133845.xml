{"nodes":[{"content":"Represents the abstract base class from which all implementations of the Digital Signature Algorithm (<xref href=\"System.Security.Cryptography.DSA\"></xref>) must inherit.","nodes":[{"pos":[0,170],"content":"Represents the abstract base class from which all implementations of the Digital Signature Algorithm (<ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph>) must inherit.","source":"Represents the abstract base class from which all implementations of the Digital Signature Algorithm (<xref href=\"System.Security.Cryptography.DSA\"></xref>) must inherit."}],"pos":[2137,2308],"yaml":true},{"content":"You can use the <xref:System.Security.Cryptography.DSA> class and derived classes to create digital signatures that help protect the integrity of your data.  The <xref:System.Security.Cryptography.DSACryptoServiceProvider> provides an implementation of this class.  \n  \n To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.  \n  \n Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSA> class, the <xref:System.Security.Cryptography.ECDsa> class, or the <xref:System.Security.Cryptography.ECDiffieHellman> class instead of the <xref:System.Security.Cryptography.DSA> class. Use <xref:System.Security.Cryptography.DSA> only for compatibility with legacy applications and data.  \n  \n This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","nodes":[{"pos":[0,264],"content":"You can use the <xref:System.Security.Cryptography.DSA> class and derived classes to create digital signatures that help protect the integrity of your data.  The <xref:System.Security.Cryptography.DSACryptoServiceProvider> provides an implementation of this class.","nodes":[{"content":"You can use the <xref:System.Security.Cryptography.DSA> class and derived classes to create digital signatures that help protect the integrity of your data.  The <xref:System.Security.Cryptography.DSACryptoServiceProvider> provides an implementation of this class.","pos":[0,264],"nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> class and derived classes to create digital signatures that help protect the integrity of your data.","pos":[0,156],"source":"You can use the <xref:System.Security.Cryptography.DSA> class and derived classes to create digital signatures that help protect the integrity of your data."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> provides an implementation of this class.","pos":[158,264],"source":"  The <xref:System.Security.Cryptography.DSACryptoServiceProvider> provides an implementation of this class."}]}]},{"pos":[271,1027],"content":"To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.","nodes":[{"content":"To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.","pos":[0,756],"nodes":[{"content":"To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest.","pos":[0,139]},{"content":"The sender then encrypts the message digest with the sender's private key to create the sender's personal signature.","pos":[140,256]},{"content":"Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used.","pos":[257,469]},{"content":"If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit.","pos":[470,654]},{"content":"Note that a signature can be verified by anyone, because the sender's public key is common knowledge.","pos":[655,756]}]}]},{"pos":[1034,1424],"content":"Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSA> class, the <xref:System.Security.Cryptography.ECDsa> class, or the <xref:System.Security.Cryptography.ECDiffieHellman> class instead of the <xref:System.Security.Cryptography.DSA> class. Use <xref:System.Security.Cryptography.DSA> only for compatibility with legacy applications and data.","nodes":[{"content":"Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSA> class, the <xref:System.Security.Cryptography.ECDsa> class, or the <xref:System.Security.Cryptography.ECDiffieHellman> class instead of the <xref:System.Security.Cryptography.DSA> class. Use <xref:System.Security.Cryptography.DSA> only for compatibility with legacy applications and data.","pos":[0,390],"nodes":[{"content":"Newer asymmetric algorithms are available.","pos":[0,42]},{"content":"Consider using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSA&gt;</ph> class, the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> class, or the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;</ph> class instead of the <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> class.","pos":[43,288],"source":" Consider using the <xref:System.Security.Cryptography.RSA> class, the <xref:System.Security.Cryptography.ECDsa> class, or the <xref:System.Security.Cryptography.ECDiffieHellman> class instead of the <xref:System.Security.Cryptography.DSA> class."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> only for compatibility with legacy applications and data.","pos":[289,390],"source":" Use <xref:System.Security.Cryptography.DSA> only for compatibility with legacy applications and data."}]}]},{"pos":[1431,1519],"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","nodes":[{"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","pos":[0,88]}]}],"pos":[2319,3847],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSA\"></xref> class.","nodes":[{"pos":[0,94],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSA\"></xref> class."}],"pos":[6379,6474],"yaml":true},{"content":"Creates the default cryptographic object used to perform the asymmetric algorithm.","nodes":[{"pos":[0,82],"content":"Creates the default cryptographic object used to perform the asymmetric algorithm.","nodes":[{"content":"Creates the default cryptographic object used to perform the asymmetric algorithm.","pos":[0,82]}]}],"pos":[7733,7816],"yaml":true},{"content":"A cryptographic object used to perform the asymmetric algorithm.","nodes":[{"pos":[0,64],"content":"A cryptographic object used to perform the asymmetric algorithm.","nodes":[{"content":"A cryptographic object used to perform the asymmetric algorithm.","pos":[0,64]}]}],"pos":[7992,8057],"yaml":true},{"content":"Creates the specified cryptographic object used to perform the asymmetric algorithm.","nodes":[{"pos":[0,84],"content":"Creates the specified cryptographic object used to perform the asymmetric algorithm.","nodes":[{"content":"Creates the specified cryptographic object used to perform the asymmetric algorithm.","pos":[0,84]}]}],"pos":[11323,11408],"yaml":true},{"content":"For <xref:System.Security.Cryptography.DSA>, use the name System.Security.Cryptography.DSA.","nodes":[{"pos":[0,91],"content":"For <xref:System.Security.Cryptography.DSA>, use the name System.Security.Cryptography.DSA.","nodes":[{"content":"For <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph>, use the name System.Security.Cryptography.DSA.","pos":[0,91],"source":"For <xref:System.Security.Cryptography.DSA>, use the name System.Security.Cryptography.DSA."}]}],"pos":[11419,11511],"yaml":true,"extradata":"MT"},{"content":"The name of the specific implementation of <xref href=\"System.Security.Cryptography.DSA\"></xref> to use.","nodes":[{"pos":[0,104],"content":"The name of the specific implementation of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> to use.","source":"The name of the specific implementation of <xref href=\"System.Security.Cryptography.DSA\"></xref> to use."}],"pos":[11685,11790],"yaml":true},{"content":"A cryptographic object used to perform the asymmetric algorithm.","nodes":[{"pos":[0,64],"content":"A cryptographic object used to perform the asymmetric algorithm.","nodes":[{"content":"A cryptographic object used to perform the asymmetric algorithm.","pos":[0,64]}]}],"pos":[11866,11931],"yaml":true},{"content":"When overridden in a derived class, creates the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,135],"content":"When overridden in a derived class, creates the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"When overridden in a derived class, creates the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."}],"pos":[13248,13384],"yaml":true},{"content":"The data to be signed.","nodes":[{"pos":[0,22],"content":"The data to be signed.","nodes":[{"content":"The data to be signed.","pos":[0,22]}]}],"pos":[13543,13566],"yaml":true},{"content":"The digital signature for the specified data.","nodes":[{"pos":[0,45],"content":"The digital signature for the specified data.","nodes":[{"content":"The digital signature for the specified data.","pos":[0,45]}]}],"pos":[13623,13669],"yaml":true},{"content":"When overridden in a derived class, exports the <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.","nodes":[{"pos":[0,112],"content":"When overridden in a derived class, exports the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSAParameters\"&gt;&lt;/xref&gt;</ph>.","source":"When overridden in a derived class, exports the <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>."}],"pos":[15007,15120],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[15349,15409],"yaml":true},{"content":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.","nodes":[{"pos":[0,73],"content":"The parameters for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph>.","source":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>."}],"pos":[15495,15569],"yaml":true},{"content":"Reconstructs a <xref href=\"System.Security.Cryptography.DSA\"></xref> object from an XML string.","nodes":[{"pos":[0,95],"content":"Reconstructs a <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> object from an XML string.","source":"Reconstructs a <xref href=\"System.Security.Cryptography.DSA\"></xref> object from an XML string."}],"pos":[16884,16980],"yaml":true},{"content":"The XML string to use to reconstruct the <xref href=\"System.Security.Cryptography.DSA\"></xref> object.","nodes":[{"pos":[0,102],"content":"The XML string to use to reconstruct the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> object.","source":"The XML string to use to reconstruct the <xref href=\"System.Security.Cryptography.DSA\"></xref> object."}],"pos":[17139,17242],"yaml":true},{"content":"The <code>xmlString</code> parameter is `null`.","nodes":[{"pos":[0,47],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">xmlString</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>xmlString</code> parameter is `null`."}],"pos":[17418,17466],"yaml":true},{"content":"The format of the <code>xmlString</code> parameter is not valid.","nodes":[{"pos":[0,64],"content":"The format of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">xmlString</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The format of the <code>xmlString</code> parameter is not valid."}],"pos":[17614,17679],"yaml":true},{"content":"When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm.","nodes":[{"pos":[0,138],"content":"When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm.","nodes":[{"content":"When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm.","pos":[0,138]}]}],"pos":[19186,19325],"yaml":true},{"content":"The data to be hashed.","nodes":[{"pos":[0,22],"content":"The data to be hashed.","nodes":[{"content":"The data to be hashed.","pos":[0,22]}]}],"pos":[19558,19581],"yaml":true},{"content":"The index of the first byte in <code>data</code> that is to be hashed.","nodes":[{"pos":[0,70],"content":"The index of the first byte in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> that is to be hashed.","source":"The index of the first byte in <code>data</code> that is to be hashed."}],"pos":[19642,19713],"yaml":true},{"content":"The number of bytes to hash.","nodes":[{"pos":[0,28],"content":"The number of bytes to hash.","nodes":[{"content":"The number of bytes to hash.","pos":[0,28]}]}],"pos":[19773,19802],"yaml":true},{"content":"The algorithm to use to hash the data.","nodes":[{"pos":[0,38],"content":"The algorithm to use to hash the data.","nodes":[{"content":"The algorithm to use to hash the data.","pos":[0,38]}]}],"pos":[19904,19943],"yaml":true},{"content":"The hashed data.","nodes":[{"pos":[0,16],"content":"The hashed data.","nodes":[{"content":"The hashed data.","pos":[0,16]}]}],"pos":[20000,20017],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[20192,20235],"yaml":true},{"content":"When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.","nodes":[{"pos":[0,128],"content":"When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.","nodes":[{"content":"When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.","pos":[0,128]}]}],"pos":[21369,21498],"yaml":true},{"content":"The binary stream to hash.","nodes":[{"pos":[0,26],"content":"The binary stream to hash.","nodes":[{"content":"The binary stream to hash.","pos":[0,26]}]}],"pos":[21721,21748],"yaml":true},{"content":"The algorithm to use to hash the data.","nodes":[{"pos":[0,38],"content":"The algorithm to use to hash the data.","nodes":[{"content":"The algorithm to use to hash the data.","pos":[0,38]}]}],"pos":[21850,21889],"yaml":true},{"content":"The hashed data.","nodes":[{"pos":[0,16],"content":"The hashed data.","nodes":[{"content":"The hashed data.","pos":[0,16]}]}],"pos":[21946,21963],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[22138,22181],"yaml":true},{"content":"When overridden in a derived class, imports the specified <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.","nodes":[{"pos":[0,122],"content":"When overridden in a derived class, imports the specified <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSAParameters\"&gt;&lt;/xref&gt;</ph>.","source":"When overridden in a derived class, imports the specified <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>."}],"pos":[23280,23403],"yaml":true},{"content":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.","nodes":[{"pos":[0,73],"content":"The parameters for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph>.","source":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>."}],"pos":[23632,23706],"yaml":true},{"content":"Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.","nodes":[{"pos":[0,122],"content":"Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.","pos":[0,122]}]}],"pos":[25173,25296],"yaml":true},{"content":"The input data for which to compute the hash.","nodes":[{"pos":[0,45],"content":"The input data for which to compute the hash.","nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]}],"pos":[25495,25541],"yaml":true},{"content":"The hash algorithm to use to create the hash value.","nodes":[{"pos":[0,51],"content":"The hash algorithm to use to create the hash value.","nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]}],"pos":[25643,25695],"yaml":true},{"content":"The DSA signature for the specified data.","nodes":[{"pos":[0,41],"content":"The DSA signature for the specified data.","nodes":[{"content":"The DSA signature for the specified data.","pos":[0,41]}]}],"pos":[25752,25794],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[25965,25994],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[26088,26243],"yaml":true},{"content":"Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.","nodes":[{"pos":[0,118],"content":"Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.","pos":[0,118]}]}],"pos":[27377,27496],"yaml":true},{"content":"The input stream for which to compute the hash.","nodes":[{"pos":[0,47],"content":"The input stream for which to compute the hash.","nodes":[{"content":"The input stream for which to compute the hash.","pos":[0,47]}]}],"pos":[27716,27764],"yaml":true},{"content":"The hash algorithm to use to create the hash value.","nodes":[{"pos":[0,51],"content":"The hash algorithm to use to create the hash value.","nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]}],"pos":[27866,27918],"yaml":true},{"content":"The DSA signature for the specified data.","nodes":[{"pos":[0,41],"content":"The DSA signature for the specified data.","nodes":[{"content":"The DSA signature for the specified data.","pos":[0,41]}]}],"pos":[27975,28017],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[28188,28217],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[28311,28466],"yaml":true},{"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.","nodes":[{"pos":[0,135],"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.","pos":[0,135]}]}],"pos":[29711,29847],"yaml":true},{"content":"The input data for which to compute the hash.","nodes":[{"pos":[0,45],"content":"The input data for which to compute the hash.","nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]}],"pos":[30077,30123],"yaml":true},{"content":"The offset into the array at which to begin using data.","nodes":[{"pos":[0,55],"content":"The offset into the array at which to begin using data.","nodes":[{"content":"The offset into the array at which to begin using data.","pos":[0,55]}]}],"pos":[30184,30240],"yaml":true},{"content":"The number of bytes in the array to use as data.","nodes":[{"pos":[0,48],"content":"The number of bytes in the array to use as data.","nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]}],"pos":[30300,30349],"yaml":true},{"content":"The hash algorithm to use to create the hash value.","nodes":[{"pos":[0,51],"content":"The hash algorithm to use to create the hash value.","nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]}],"pos":[30451,30503],"yaml":true},{"content":"The DSA signature for the specified data.","nodes":[{"pos":[0,41],"content":"The DSA signature for the specified data.","nodes":[{"content":"The DSA signature for the specified data.","pos":[0,41]}]}],"pos":[30560,30602],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[30773,30802],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[30896,31051],"yaml":true},{"content":"<code>offset</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than zero.","source":"<code>offset</code> is less than zero."},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,93],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,228],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph>.","source":"<code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."}],"pos":[31165,31404],"yaml":true},{"content":"Creates and returns an XML string representation of the current <xref href=\"System.Security.Cryptography.DSA\"></xref> object.","nodes":[{"pos":[0,125],"content":"Creates and returns an XML string representation of the current <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates and returns an XML string representation of the current <xref href=\"System.Security.Cryptography.DSA\"></xref> object."}],"pos":[32371,32497],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[32685,32745],"yaml":true},{"content":"An XML string encoding of the current <xref href=\"System.Security.Cryptography.DSA\"></xref> object.","nodes":[{"pos":[0,99],"content":"An XML string encoding of the current <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> object.","source":"An XML string encoding of the current <xref href=\"System.Security.Cryptography.DSA\"></xref> object."}],"pos":[32802,32902],"yaml":true},{"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"pos":[0,192],"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.","pos":[0,192]}]}],"pos":[34562,34755],"yaml":true},{"content":"The signed data.","nodes":[{"pos":[0,16],"content":"The signed data.","nodes":[{"content":"The signed data.","pos":[0,16]}]}],"pos":[35003,35020],"yaml":true},{"content":"The starting index at which to compute the hash.","nodes":[{"pos":[0,48],"content":"The starting index at which to compute the hash.","nodes":[{"content":"The starting index at which to compute the hash.","pos":[0,48]}]}],"pos":[35081,35130],"yaml":true},{"content":"The number of bytes to hash.","nodes":[{"pos":[0,28],"content":"The number of bytes to hash.","nodes":[{"content":"The number of bytes to hash.","pos":[0,28]}]}],"pos":[35190,35219],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[35284,35319],"yaml":true},{"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"pos":[0,61],"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]}],"pos":[35421,35483],"yaml":true},{"content":"`true` if the digital signature is valid; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if the digital signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the digital signature is valid; otherwise, `false`."}],"pos":[35541,35605],"yaml":true},{"content":"<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>signature</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,79],"content":"<ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>signature</code> is `null`."}],"pos":[35778,35864],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[35958,36113],"yaml":true},{"content":"<code>offset</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than zero.","source":"<code>offset</code> is less than zero."},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,93],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,228],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph>.","source":"<code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."}],"pos":[36227,36466],"yaml":true},{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"pos":[0,173],"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.","pos":[0,173]}]}],"pos":[37669,37843],"yaml":true},{"content":"The signed data.","nodes":[{"pos":[0,16],"content":"The signed data.","nodes":[{"content":"The signed data.","pos":[0,16]}]}],"pos":[38060,38077],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[38142,38177],"yaml":true},{"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"pos":[0,61],"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]}],"pos":[38279,38341],"yaml":true},{"content":"`true` if the digital signature is valid; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if the digital signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the digital signature is valid; otherwise, `false`."}],"pos":[38399,38463],"yaml":true},{"content":"<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>signature</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,79],"content":"<ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>signature</code> is `null`."}],"pos":[38636,38722],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[38816,38971],"yaml":true},{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"pos":[0,175],"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.","pos":[0,175]}]}],"pos":[40183,40359],"yaml":true},{"content":"The signed data.","nodes":[{"pos":[0,16],"content":"The signed data.","nodes":[{"content":"The signed data.","pos":[0,16]}]}],"pos":[40597,40614],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[40679,40714],"yaml":true},{"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"pos":[0,61],"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]}],"pos":[40816,40878],"yaml":true},{"content":"`true` if the digital signature is valid; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if the digital signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the digital signature is valid; otherwise, `false`."}],"pos":[40936,41000],"yaml":true},{"content":"<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>signature</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,79],"content":"<ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>signature</code> is `null`."}],"pos":[41173,41259],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[41353,41508],"yaml":true},{"content":"When overridden in a derived class, verifies the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,136],"content":"When overridden in a derived class, verifies the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"When overridden in a derived class, verifies the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."}],"pos":[42559,42696],"yaml":true},{"content":"The hash of the data signed with <code>rgbSignature</code>.","nodes":[{"pos":[0,59],"content":"The hash of the data signed with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The hash of the data signed with <code>rgbSignature</code>."}],"pos":[42874,42934],"yaml":true},{"content":"The signature to be verified for <code>rgbData</code>.","nodes":[{"pos":[0,54],"content":"The signature to be verified for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbData</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The signature to be verified for <code>rgbData</code>."}],"pos":[43002,43057],"yaml":true},{"content":"`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`.","nodes":[{"pos":[0,154],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept> matches the signature computed using the specified hash algorithm and key on <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">rgbHash</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`."}],"pos":[43115,43272],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.DSA\n  commentId: T:System.Security.Cryptography.DSA\n  id: DSA\n  children:\n  - System.Security.Cryptography.DSA.#ctor\n  - System.Security.Cryptography.DSA.Create\n  - System.Security.Cryptography.DSA.Create(System.Int32)\n  - System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSA.Create(System.String)\n  - System.Security.Cryptography.DSA.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.DSA.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.DSA.FromXmlString(System.String)\n  - System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: DSA\n  nameWithType: DSA\n  fullName: System.Security.Cryptography.DSA\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Represents the abstract base class from which all implementations of the Digital Signature Algorithm (<xref href=\"System.Security.Cryptography.DSA\"></xref>) must inherit.\n  remarks: \"You can use the <xref:System.Security.Cryptography.DSA> class and derived classes to create digital signatures that help protect the integrity of your data.  The <xref:System.Security.Cryptography.DSACryptoServiceProvider> provides an implementation of this class.  \\n  \\n To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.  \\n  \\n Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSA> class, the <xref:System.Security.Cryptography.ECDsa> class, or the <xref:System.Security.Cryptography.ECDiffieHellman> class instead of the <xref:System.Security.Cryptography.DSA> class. Use <xref:System.Security.Cryptography.DSA> only for compatibility with legacy applications and data.  \\n  \\n This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class DSA : System.Security.Cryptography.AsymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  derivedClasses:\n  - System.Security.Cryptography.DSACng\n  - System.Security.Cryptography.DSACryptoServiceProvider\n  - System.Security.Cryptography.DSAOpenSsl\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.#ctor\n  commentId: M:System.Security.Cryptography.DSA.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: DSA()\n  nameWithType: DSA.DSA()\n  fullName: DSA.DSA()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSA\"></xref> class.\n  syntax:\n    content: protected DSA ();\n    parameters: []\n  overload: System.Security.Cryptography.DSA.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.Create\n  commentId: M:System.Security.Cryptography.DSA.Create\n  id: Create\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: DSA.Create()\n  fullName: DSA.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates the default cryptographic object used to perform the asymmetric algorithm.\n  syntax:\n    content: public static System.Security.Cryptography.DSA Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.DSA\n      description: A cryptographic object used to perform the asymmetric algorithm.\n  overload: System.Security.Cryptography.DSA.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.Create(System.Int32)\n  commentId: M:System.Security.Cryptography.DSA.Create(System.Int32)\n  id: Create(System.Int32)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: Create(Int32)\n  nameWithType: DSA.Create(Int32)\n  fullName: DSA.Create(Int32)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.DSA Create (int keySizeInBits);\n    parameters:\n    - id: keySizeInBits\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Security.Cryptography.DSA\n      description: ''\n  overload: System.Security.Cryptography.DSA.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)\n  commentId: M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)\n  id: Create(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: Create(DSAParameters)\n  nameWithType: DSA.Create(DSAParameters)\n  fullName: DSA.Create(DSAParameters)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.DSA Create (System.Security.Cryptography.DSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.DSAParameters\n      description: ''\n    return:\n      type: System.Security.Cryptography.DSA\n      description: ''\n  overload: System.Security.Cryptography.DSA.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.Create(System.String)\n  commentId: M:System.Security.Cryptography.DSA.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: DSA.Create(String)\n  fullName: DSA.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates the specified cryptographic object used to perform the asymmetric algorithm.\n  remarks: For <xref:System.Security.Cryptography.DSA>, use the name System.Security.Cryptography.DSA.\n  syntax:\n    content: public static System.Security.Cryptography.DSA Create (string algName);\n    parameters:\n    - id: algName\n      type: System.String\n      description: The name of the specific implementation of <xref href=\"System.Security.Cryptography.DSA\"></xref> to use.\n    return:\n      type: System.Security.Cryptography.DSA\n      description: A cryptographic object used to perform the asymmetric algorithm.\n  overload: System.Security.Cryptography.DSA.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])\n  commentId: M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: DSA.CreateSignature(Byte[])\n  fullName: DSA.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, creates the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  syntax:\n    content: public abstract byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data to be signed.\n    return:\n      type: System.Byte[]\n      description: The digital signature for the specified data.\n  overload: System.Security.Cryptography.DSA.CreateSignature*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: DSA.ExportParameters(Boolean)\n  fullName: DSA.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, exports the <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.\n  syntax:\n    content: public abstract System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.DSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.\n  overload: System.Security.Cryptography.DSA.ExportParameters*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)\n  commentId: M:System.Security.Cryptography.DSA.FromXmlString(System.String)\n  id: FromXmlString(System.String)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: FromXmlString(String)\n  nameWithType: DSA.FromXmlString(String)\n  fullName: DSA.FromXmlString(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Reconstructs a <xref href=\"System.Security.Cryptography.DSA\"></xref> object from an XML string.\n  syntax:\n    content: public override void FromXmlString (string xmlString);\n    parameters:\n    - id: xmlString\n      type: System.String\n      description: The XML string to use to reconstruct the <xref href=\"System.Security.Cryptography.DSA\"></xref> object.\n  overload: System.Security.Cryptography.DSA.FromXmlString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>xmlString</code> parameter is `null`.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The format of the <code>xmlString</code> parameter is not valid.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSA.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSA.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm.\n  syntax:\n    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data to be hashed.\n    - id: offset\n      type: System.Int32\n      description: The index of the first byte in <code>data</code> that is to be hashed.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The algorithm to use to hash the data.\n    return:\n      type: System.Byte[]\n      description: The hashed data.\n  overload: System.Security.Cryptography.DSA.HashData*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: DSA.HashData(Stream, HashAlgorithmName)\n  fullName: DSA.HashData(Stream, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.\n  syntax:\n    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The binary stream to hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The algorithm to use to hash the data.\n    return:\n      type: System.Byte[]\n      description: The hashed data.\n  overload: System.Security.Cryptography.DSA.HashData*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)\n  commentId: M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)\n  id: ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSA.ImportParameters(DSAParameters)\n  fullName: DSA.ImportParameters(DSAParameters)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, imports the specified <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.\n  syntax:\n    content: public abstract void ImportParameters (System.Security.Cryptography.DSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.DSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.\n  overload: System.Security.Cryptography.DSA.ImportParameters*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: SignData(Byte[], HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[], HashAlgorithmName)\n  fullName: DSA.SignData(Byte[], HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.\n  syntax:\n    content: public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The DSA signature for the specified data.\n  overload: System.Security.Cryptography.DSA.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: SignData(Stream, HashAlgorithmName)\n  nameWithType: DSA.SignData(Stream, HashAlgorithmName)\n  fullName: DSA.SignData(Stream, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The input stream for which to compute the hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The DSA signature for the specified data.\n  overload: System.Security.Cryptography.DSA.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: offset\n      type: System.Int32\n      description: The offset into the array at which to begin using data.\n    - id: count\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The DSA signature for the specified data.\n  overload: System.Security.Cryptography.DSA.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.\"\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  commentId: M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  id: ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: ToXmlString(Boolean)\n  nameWithType: DSA.ToXmlString(Boolean)\n  fullName: DSA.ToXmlString(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates and returns an XML string representation of the current <xref href=\"System.Security.Cryptography.DSA\"></xref> object.\n  syntax:\n    content: public override string ToXmlString (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.String\n      description: An XML string encoding of the current <xref href=\"System.Security.Cryptography.DSA\"></xref> object.\n  overload: System.Security.Cryptography.DSA.ToXmlString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.\n  syntax:\n    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The signed data.\n    - id: offset\n      type: System.Int32\n      description: The starting index at which to compute the hash.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to hash.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Boolean\n      description: '`true` if the digital signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSA.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>signature</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.\"\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.\n  syntax:\n    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Boolean\n      description: '`true` if the digital signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSA.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>signature</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: VerifyData(Stream, Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.\n  syntax:\n    content: public virtual bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Boolean\n      description: '`true` if the digital signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSA.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>signature</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])\n  id: VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: VerifySignature(Byte[], Byte[])\n  nameWithType: DSA.VerifySignature(Byte[], Byte[])\n  fullName: DSA.VerifySignature(Byte[], Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, verifies the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  syntax:\n    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The hash of the data signed with <code>rgbSignature</code>.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature to be verified for <code>rgbData</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSA.VerifySignature*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.DSA.#ctor\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: DSA()\n  nameWithType: DSA.DSA()\n  fullName: DSA.DSA()\n- uid: System.Security.Cryptography.DSA.Create\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create()\n  nameWithType: DSA.Create()\n  fullName: DSA.Create()\n- uid: System.Security.Cryptography.DSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSA\n  nameWithType: DSA\n  fullName: System.Security.Cryptography.DSA\n- uid: System.Security.Cryptography.DSA.Create(System.Int32)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(Int32)\n  nameWithType: DSA.Create(Int32)\n  fullName: DSA.Create(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(DSAParameters)\n  nameWithType: DSA.Create(DSAParameters)\n  fullName: DSA.Create(DSAParameters)\n- uid: System.Security.Cryptography.DSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSAParameters\n  nameWithType: DSAParameters\n  fullName: System.Security.Cryptography.DSAParameters\n- uid: System.Security.Cryptography.DSA.Create(System.String)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(String)\n  nameWithType: DSA.Create(String)\n  fullName: DSA.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: DSA.CreateSignature(Byte[])\n  fullName: DSA.CreateSignature(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: DSA.ExportParameters(Boolean)\n  fullName: DSA.ExportParameters(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: DSA.FromXmlString(String)\n  fullName: DSA.FromXmlString(String)\n- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSA.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSA.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: DSA.HashData(Stream, HashAlgorithmName)\n  fullName: DSA.HashData(Stream, HashAlgorithmName)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSA.ImportParameters(DSAParameters)\n  fullName: DSA.ImportParameters(DSAParameters)\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Byte[], HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[], HashAlgorithmName)\n  fullName: DSA.SignData(Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Stream, HashAlgorithmName)\n  nameWithType: DSA.SignData(Stream, HashAlgorithmName)\n  fullName: DSA.SignData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: DSA.ToXmlString(Boolean)\n  fullName: DSA.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Stream, Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifySignature(Byte[], Byte[])\n  nameWithType: DSA.VerifySignature(Byte[], Byte[])\n  fullName: DSA.VerifySignature(Byte[], Byte[])\n- uid: System.Security.Cryptography.DSA.#ctor*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: DSA\n  nameWithType: DSA.DSA\n  fullName: DSA.DSA\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.Create*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create\n  nameWithType: DSA.Create\n  fullName: DSA.Create\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.CreateSignature*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: CreateSignature\n  nameWithType: DSA.CreateSignature\n  fullName: DSA.CreateSignature\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.ExportParameters*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ExportParameters\n  nameWithType: DSA.ExportParameters\n  fullName: DSA.ExportParameters\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.FromXmlString*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: FromXmlString\n  nameWithType: DSA.FromXmlString\n  fullName: DSA.FromXmlString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.HashData*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: HashData\n  nameWithType: DSA.HashData\n  fullName: DSA.HashData\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.ImportParameters*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ImportParameters\n  nameWithType: DSA.ImportParameters\n  fullName: DSA.ImportParameters\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.SignData*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData\n  nameWithType: DSA.SignData\n  fullName: DSA.SignData\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.ToXmlString*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ToXmlString\n  nameWithType: DSA.ToXmlString\n  fullName: DSA.ToXmlString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.VerifyData*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData\n  nameWithType: DSA.VerifyData\n  fullName: DSA.VerifyData\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Security.Cryptography.DSA.VerifySignature*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifySignature\n  nameWithType: DSA.VerifySignature\n  fullName: DSA.VerifySignature\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSA.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n  fullName: AsymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm\n  fullName: AsymmetricAlgorithm.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n  fullName: AsymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n  fullName: AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm\n  fullName: AsymmetricAlgorithm.SignatureAlgorithm\n"}