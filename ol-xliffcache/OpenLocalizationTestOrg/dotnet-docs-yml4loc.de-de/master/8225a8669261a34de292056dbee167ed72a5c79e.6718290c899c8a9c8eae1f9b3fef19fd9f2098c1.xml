{"nodes":[{"content":"Implements a <xref href=\"System.IO.TextWriter\"></xref> for writing information to a string. The information is stored in an underlying <xref href=\"System.Text.StringBuilder\"></xref>.","nodes":[{"pos":[0,182],"content":"Implements a <xref href=\"System.IO.TextWriter\"></xref> for writing information to a string. The information is stored in an underlying <xref href=\"System.Text.StringBuilder\"></xref>.","nodes":[{"content":"Implements a <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> for writing information to a string.","pos":[0,91],"source":"Implements a <xref href=\"System.IO.TextWriter\"></xref> for writing information to a string."},{"content":"The information is stored in an underlying <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph>.","pos":[92,182],"source":" The information is stored in an underlying <xref href=\"System.Text.StringBuilder\"></xref>."}]}],"pos":[1392,1575],"yaml":true},{"content":"<xref:System.IO.StringWriter> enables you to write to a string synchronously or asynchronously. You can write a character at a time with the <xref:System.IO.StringWriter.Write%28System.Char%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.Char%29> method, a string at a time using the <xref:System.IO.StringWriter.Write%28System.String%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.String%29> method. In addition, you can write a character, an array of characters or a string followed by the line terminator asynchronously with one of the <xref:System.IO.StringWriter.WriteLineAsync%2A> methods.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try` /`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,620],"content":"<xref:System.IO.StringWriter> enables you to write to a string synchronously or asynchronously. You can write a character at a time with the <xref:System.IO.StringWriter.Write%28System.Char%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.Char%29> method, a string at a time using the <xref:System.IO.StringWriter.Write%28System.String%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.String%29> method. In addition, you can write a character, an array of characters or a string followed by the line terminator asynchronously with one of the <xref:System.IO.StringWriter.WriteLineAsync%2A> methods.","nodes":[{"content":"<xref:System.IO.StringWriter> enables you to write to a string synchronously or asynchronously. You can write a character at a time with the <xref:System.IO.StringWriter.Write%28System.Char%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.Char%29> method, a string at a time using the <xref:System.IO.StringWriter.Write%28System.String%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.String%29> method. In addition, you can write a character, an array of characters or a string followed by the line terminator asynchronously with one of the <xref:System.IO.StringWriter.WriteLineAsync%2A> methods.","pos":[0,620],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.StringWriter&gt;</ph> enables you to write to a string synchronously or asynchronously.","pos":[0,95],"source":"<xref:System.IO.StringWriter> enables you to write to a string synchronously or asynchronously."},{"content":"You can write a character at a time with the <ph id=\"ph1\">&lt;xref:System.IO.StringWriter.Write%28System.Char%29&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.IO.StringWriter.WriteAsync%28System.Char%29&gt;</ph> method, a string at a time using the <ph id=\"ph3\">&lt;xref:System.IO.StringWriter.Write%28System.String%29&gt;</ph> or the <ph id=\"ph4\">&lt;xref:System.IO.StringWriter.WriteAsync%28System.String%29&gt;</ph> method.","pos":[96,425],"source":" You can write a character at a time with the <xref:System.IO.StringWriter.Write%28System.Char%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.Char%29> method, a string at a time using the <xref:System.IO.StringWriter.Write%28System.String%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.String%29> method."},{"content":"In addition, you can write a character, an array of characters or a string followed by the line terminator asynchronously with one of the <ph id=\"ph1\">&lt;xref:System.IO.StringWriter.WriteLineAsync%2A&gt;</ph> methods.","pos":[426,620],"source":" In addition, you can write a character, an array of characters or a string followed by the line terminator asynchronously with one of the <xref:System.IO.StringWriter.WriteLineAsync%2A> methods."}]}]},{"pos":[628,1155],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try` /`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try` /`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,525],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\"> /</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,270],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try` /`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[271,378],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[379,512],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[1162,1235],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[1242,1255],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[1256,1288],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[1356,1375],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[1376,1457],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[1462,1483],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[1484,1565],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[1570,1592],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[1593,1676],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[1681,1703],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[1704,1953],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[1958,1981],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[1982,2042],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[2047,2076],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[2077,2140],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[2145,2174],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[2175,2238],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[2243,2270],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[2271,2327],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[2332,2356],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[2357,2484],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[2489,2512],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[2513,2640],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[1586,4250],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class.","nodes":[{"pos":[0,84],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.StringWriter\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class."}],"pos":[9066,9151],"yaml":true},{"content":"A new <xref:System.Text.StringBuilder> object is automatically created and associated with the new instance of the <xref:System.IO.StringWriter> class. Since a format control is not specified for this constructor, the new instance will be initialized with <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,339],"content":"A new <xref:System.Text.StringBuilder> object is automatically created and associated with the new instance of the <xref:System.IO.StringWriter> class. Since a format control is not specified for this constructor, the new instance will be initialized with <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>.","nodes":[{"content":"A new <xref:System.Text.StringBuilder> object is automatically created and associated with the new instance of the <xref:System.IO.StringWriter> class. Since a format control is not specified for this constructor, the new instance will be initialized with <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>.","pos":[0,339],"nodes":[{"content":"A new <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is automatically created and associated with the new instance of the <ph id=\"ph2\">&lt;xref:System.IO.StringWriter&gt;</ph> class.","pos":[0,151],"source":"A new <xref:System.Text.StringBuilder> object is automatically created and associated with the new instance of the <xref:System.IO.StringWriter> class."},{"content":"Since a format control is not specified for this constructor, the new instance will be initialized with <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName&gt;</ph>.","pos":[152,339],"source":" Since a format control is not specified for this constructor, the new instance will be initialized with <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>."}]}]},{"pos":[346,419],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[426,439],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[440,472],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[540,559],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[560,641],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[646,667],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[668,749],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[754,776],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[777,860],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[865,887],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[888,1137],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[1142,1165],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[1166,1226],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[1231,1260],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1261,1324],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1329,1358],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1359,1422],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1427,1454],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1455,1511],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1516,1540],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1541,1668],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1673,1696],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1697,1824],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[9162,11005],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class with the specified format control.","nodes":[{"pos":[0,118],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.StringWriter\"&gt;&lt;/xref&gt;</ph> class with the specified format control.","source":"Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class with the specified format control."}],"pos":[13231,13350],"yaml":true},{"content":"A new <xref:System.Text.StringBuilder> object is automatically created and associated with the new instance of the <xref:System.IO.StringWriter> class.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,151],"content":"A new <xref:System.Text.StringBuilder> object is automatically created and associated with the new instance of the <xref:System.IO.StringWriter> class.","nodes":[{"content":"A new <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is automatically created and associated with the new instance of the <ph id=\"ph2\">&lt;xref:System.IO.StringWriter&gt;</ph> class.","pos":[0,151],"source":"A new <xref:System.Text.StringBuilder> object is automatically created and associated with the new instance of the <xref:System.IO.StringWriter> class."}]},{"pos":[158,231],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[238,251],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[252,284],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[352,371],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[372,453],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[458,479],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[480,561],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[566,588],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[589,672],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[677,699],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[700,949],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[954,977],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[978,1038],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[1043,1072],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1073,1136],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1141,1170],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1171,1234],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1239,1266],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1267,1323],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1328,1352],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1353,1480],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1485,1508],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1509,1636],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[13361,15016],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IFormatProvider\"></xref> object that controls formatting.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IFormatProvider\"&gt;&lt;/xref&gt;</ph> object that controls formatting.","source":"An <xref href=\"System.IFormatProvider\"></xref> object that controls formatting."}],"pos":[15708,15788],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class that writes to the specified <xref href=\"System.Text.StringBuilder\"></xref>.","nodes":[{"pos":[0,160],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.StringWriter\"&gt;&lt;/xref&gt;</ph> class that writes to the specified <ph id=\"ph2\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class that writes to the specified <xref href=\"System.Text.StringBuilder\"></xref>."}],"pos":[17422,17583],"yaml":true},{"content":"Since a format control is not specified for this constructor, the new instance will be initialized with <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,187],"content":"Since a format control is not specified for this constructor, the new instance will be initialized with <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>.","nodes":[{"content":"Since a format control is not specified for this constructor, the new instance will be initialized with <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName&gt;</ph>.","pos":[0,187],"source":"Since a format control is not specified for this constructor, the new instance will be initialized with <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>."}]},{"pos":[194,267],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[274,287],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[288,320],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[388,407],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[408,489],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[494,515],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[516,597],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[602,624],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[625,708],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[713,735],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[736,985],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[990,1013],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[1014,1074],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[1079,1108],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1109,1172],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1177,1206],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1207,1270],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1275,1302],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1303,1359],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1364,1388],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1389,1516],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1521,1544],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1545,1672],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[17594,19285],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Text.StringBuilder\"></xref> object to write to.","nodes":[{"pos":[0,70],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> object to write to.","source":"The <xref href=\"System.Text.StringBuilder\"></xref> object to write to."}],"pos":[20026,20097],"yaml":true},{"content":"<code>sb</code> is `null`.","nodes":[{"pos":[0,26],"content":"<ph id=\"ph1\">&lt;code&gt;sb&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>sb</code> is `null`."}],"pos":[20255,20282],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class that writes to the specified <xref href=\"System.Text.StringBuilder\"></xref> and has the specified format provider.","nodes":[{"pos":[0,198],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.StringWriter\"&gt;&lt;/xref&gt;</ph> class that writes to the specified <ph id=\"ph2\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> and has the specified format provider.","source":"Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class that writes to the specified <xref href=\"System.Text.StringBuilder\"></xref> and has the specified format provider."}],"pos":[21977,22176],"yaml":true},{"content":"The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,73],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[80,93],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[94,126],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[194,213],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[214,295],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[300,321],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[322,403],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[408,430],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[431,514],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[519,541],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[542,791],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[796,819],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[820,880],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[885,914],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[915,978],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[983,1012],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1013,1076],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1081,1108],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1109,1165],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1170,1194],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1195,1322],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1327,1350],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1351,1478],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[22187,23682],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Text.StringBuilder\"></xref> object to write to.","nodes":[{"pos":[0,70],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> object to write to.","source":"The <xref href=\"System.Text.StringBuilder\"></xref> object to write to."}],"pos":[23875,23946],"yaml":true},{"content":"An <xref href=\"System.IFormatProvider\"></xref> object that controls formatting.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IFormatProvider\"&gt;&lt;/xref&gt;</ph> object that controls formatting.","source":"An <xref href=\"System.IFormatProvider\"></xref> object that controls formatting."}],"pos":[24025,24105],"yaml":true},{"content":"<code>sb</code> is `null`.","nodes":[{"pos":[0,26],"content":"<ph id=\"ph1\">&lt;code&gt;sb&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>sb</code> is `null`."}],"pos":[24263,24290],"yaml":true},{"content":"Closes the current <xref href=\"System.IO.StringWriter\"></xref> and the underlying stream.","nodes":[{"pos":[0,89],"content":"Closes the current <ph id=\"ph1\">&lt;xref href=\"System.IO.StringWriter\"&gt;&lt;/xref&gt;</ph> and the underlying stream.","source":"Closes the current <xref href=\"System.IO.StringWriter\"></xref> and the underlying stream."}],"pos":[25703,25793],"yaml":true},{"content":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).  \n  \n This method overrides <xref:System.IO.Stream.Close%2A?displayProperty=fullName>.  \n  \n This implementation of `Close` calls the <xref:System.IO.StringWriter.Dispose%2A> method passing a `true` value.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","nodes":[{"pos":[0,475],"content":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).","nodes":[{"content":"For an example of creating a file and writing text to a file, see <bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>.","pos":[0,148],"source":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)."},{"content":"For an example of reading text from a file, see <bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>.","pos":[149,281],"source":" For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)."},{"content":"For an example of reading from and writing to a binary file, see <bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>.","pos":[282,475],"source":" For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)."}]},{"pos":[482,562],"content":"This method overrides <xref:System.IO.Stream.Close%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph>.","pos":[0,80],"source":"This method overrides <xref:System.IO.Stream.Close%2A?displayProperty=fullName>."}]},{"pos":[569,681],"content":"This implementation of <ph id=\"ph1\">`Close`</ph> calls the <ph id=\"ph2\">&lt;xref:System.IO.StringWriter.Dispose%2A&gt;</ph> method passing a <ph id=\"ph3\">`true`</ph> value.","source":"This implementation of `Close` calls the <xref:System.IO.StringWriter.Dispose%2A> method passing a `true` value."},{"pos":[688,1219],"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","nodes":[{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id=\"ph1\">`Close`</ph>.","pos":[0,93],"source":"Flushing the stream will not flush its underlying encoder unless you explicitly call `Close`."},{"content":"Setting <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[94,260],"source":" Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[261,385]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","pos":[386,531]}]}],"pos":[25804,27032],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.IO.StringWriter\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,135],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.StringWriter\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.IO.StringWriter\"></xref> and optionally releases the managed resources."}],"pos":[28904,29040],"yaml":true},{"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringWriter> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"pos":[0,224],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringWriter> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.IO.StringWriter&gt;</ph> references.","pos":[0,156],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringWriter> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[157,224],"source":" This method invokes the `Dispose` method of each referenced object."}]}],"pos":[29051,29276],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[29431,29534],"yaml":true},{"content":"Gets the <xref href=\"System.Text.Encoding\"></xref> in which the output is written.","nodes":[{"pos":[0,82],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding\"&gt;&lt;/xref&gt;</ph> in which the output is written.","source":"Gets the <xref href=\"System.Text.Encoding\"></xref> in which the output is written."}],"pos":[31036,31119],"yaml":true},{"content":"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the `StringWriter`. This allows the XML code to consume an arbitrary `StringWriter` and generate the correct XML header.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|","nodes":[{"pos":[0,233],"content":"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the `StringWriter`. This allows the XML code to consume an arbitrary `StringWriter` and generate the correct XML header.","nodes":[{"content":"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the <ph id=\"ph1\">`StringWriter`</ph>.","pos":[0,132],"source":"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the `StringWriter`."},{"content":"This allows the XML code to consume an arbitrary <ph id=\"ph1\">`StringWriter`</ph> and generate the correct XML header.","pos":[133,233],"source":" This allows the XML code to consume an arbitrary `StringWriter` and generate the correct XML header."}]},{"pos":[240,313],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[320,333],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[334,366],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[434,453],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[454,535],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[540,561],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[562,643],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[648,670],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[671,754],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"}],"pos":[31130,31896],"yaml":true,"extradata":"MT"},{"content":"The `Encoding` in which the output is written.","nodes":[{"pos":[0,46],"content":"The <ph id=\"ph1\">`Encoding`</ph> in which the output is written.","source":"The `Encoding` in which the output is written."}],"pos":[32583,32630],"yaml":true},{"content":"Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.","nodes":[{"pos":[0,125],"content":"Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.","nodes":[{"content":"Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.","pos":[0,125]}]}],"pos":[34149,34275],"yaml":true},{"content":"A task that represents the asynchronous flush operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous flush operation.","nodes":[{"content":"A task that represents the asynchronous flush operation.","pos":[0,56]}]}],"pos":[34514,34571],"yaml":true},{"content":"Returns the underlying <xref href=\"System.Text.StringBuilder\"></xref>.","nodes":[{"pos":[0,70],"content":"Returns the underlying <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the underlying <xref href=\"System.Text.StringBuilder\"></xref>."}],"pos":[36203,36274],"yaml":true},{"content":"This is either the `StringBuilder` that was passed to the constructor, or the `StringBuilder` that was automatically created.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|","nodes":[{"pos":[0,125],"content":"This is either the <ph id=\"ph1\">`StringBuilder`</ph> that was passed to the constructor, or the <ph id=\"ph2\">`StringBuilder`</ph> that was automatically created.","source":"This is either the `StringBuilder` that was passed to the constructor, or the `StringBuilder` that was automatically created."},{"pos":[132,205],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[212,225],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[226,258],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[326,345],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[346,427],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[432,453],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[454,535],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[540,562],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[563,646],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"}],"pos":[36285,36943],"yaml":true,"extradata":"MT"},{"content":"The underlying `StringBuilder`.","nodes":[{"pos":[0,31],"content":"The underlying <ph id=\"ph1\">`StringBuilder`</ph>.","source":"The underlying `StringBuilder`."}],"pos":[37661,37693],"yaml":true},{"content":"Returns a string containing the characters written to the current `StringWriter` so far.","nodes":[{"pos":[0,88],"content":"Returns a string containing the characters written to the current <ph id=\"ph1\">`StringWriter`</ph> so far.","source":"Returns a string containing the characters written to the current `StringWriter` so far."}],"pos":[39208,39297],"yaml":true},{"content":"The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|","nodes":[{"pos":[0,73],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[80,93],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[94,126],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[194,213],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[214,295],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[300,321],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[322,403],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[408,430],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[431,514],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"}],"pos":[39308,39832],"yaml":true,"extradata":"MT"},{"content":"The string containing the characters written to the current `StringWriter`.","nodes":[{"pos":[0,75],"content":"The string containing the characters written to the current <ph id=\"ph1\">`StringWriter`</ph>.","source":"The string containing the characters written to the current `StringWriter`."}],"pos":[40540,40616],"yaml":true},{"content":"Writes a character to the string.","nodes":[{"pos":[0,33],"content":"Writes a character to the string.","nodes":[{"content":"Writes a character to the string.","pos":[0,33]}]}],"pos":[42156,42190],"yaml":true},{"content":"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,84],"content":"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%2A?displayProperty=fullName&gt;</ph>.","pos":[0,84],"source":"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>."}]},{"pos":[91,164],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[171,184],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[185,217],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[285,304],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[305,386],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[391,412],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[413,494],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[499,521],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[522,605],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[610,632],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[633,882],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[887,910],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[911,971],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[976,1005],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1006,1069],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1074,1103],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1104,1167],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1172,1199],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1200,1256],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1261,1285],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1286,1413],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1418,1441],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1442,1569],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[42201,43789],"yaml":true,"extradata":"MT"},{"content":"The character to write.","nodes":[{"pos":[0,23],"content":"The character to write.","nodes":[{"content":"The character to write.","pos":[0,23]}]}],"pos":[44473,44497],"yaml":true},{"content":"The writer is closed.","nodes":[{"pos":[0,21],"content":"The writer is closed.","nodes":[{"content":"The writer is closed.","pos":[0,21]}]}],"pos":[44659,44681],"yaml":true},{"content":"Writes a string to the current string.","nodes":[{"pos":[0,38],"content":"Writes a string to the current string.","nodes":[{"content":"Writes a string to the current string.","pos":[0,38]}]}],"pos":[46171,46210],"yaml":true},{"content":"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>.  \n  \n If the specified string is `null`, nothing is written.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,84],"content":"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%2A?displayProperty=fullName&gt;</ph>.","pos":[0,84],"source":"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>."}]},{"pos":[91,145],"content":"If the specified string is <ph id=\"ph1\">`null`</ph>, nothing is written.","source":"If the specified string is `null`, nothing is written."},{"pos":[152,225],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[232,245],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[246,278],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[346,365],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[366,447],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[452,473],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[474,555],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[560,582],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[583,666],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[671,693],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[694,943],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[948,971],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[972,1032],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[1037,1066],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1067,1130],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1135,1164],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1165,1228],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1233,1260],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1261,1317],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1322,1346],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1347,1474],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1479,1502],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1503,1630],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[46221,47872],"yaml":true,"extradata":"MT"},{"content":"The string to write.","nodes":[{"pos":[0,20],"content":"The string to write.","nodes":[{"content":"The string to write.","pos":[0,20]}]}],"pos":[48570,48591],"yaml":true},{"content":"The writer is closed.","nodes":[{"pos":[0,21],"content":"The writer is closed.","nodes":[{"content":"The writer is closed.","pos":[0,21]}]}],"pos":[48753,48775],"yaml":true},{"content":"Writes a subarray of characters to the string.","nodes":[{"pos":[0,46],"content":"Writes a subarray of characters to the string.","nodes":[{"content":"Writes a subarray of characters to the string.","pos":[0,46]}]}],"pos":[50385,50432],"yaml":true},{"content":"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>.  \n  \n This method writes `count` characters of data to this `StringWriter` from `buffer`, starting at position `index`.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|","nodes":[{"pos":[0,84],"content":"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%2A?displayProperty=fullName&gt;</ph>.","pos":[0,84],"source":"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>."}]},{"pos":[91,204],"content":"This method writes <ph id=\"ph1\">`count`</ph> characters of data to this <ph id=\"ph2\">`StringWriter`</ph> from <ph id=\"ph3\">`buffer`</ph>, starting at position <ph id=\"ph4\">`index`</ph>.","source":"This method writes `count` characters of data to this `StringWriter` from `buffer`, starting at position `index`."},{"pos":[211,284],"content":"The following table lists examples of other typical or related I/O tasks.","nodes":[{"content":"The following table lists examples of other typical or related I/O tasks.","pos":[0,73]}]},{"pos":[291,304],"content":"To do this...","nodes":[{"content":"To do this...","pos":[0,13]}]},{"pos":[305,337],"content":"See the example in this topic...","nodes":[{"content":"See the example in this topic...","pos":[0,32]}]},{"pos":[405,424],"content":"Create a text file.","nodes":[{"content":"Create a text file.","pos":[0,19]}]},{"pos":[425,506],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[511,532],"content":"Write to a text file.","nodes":[{"content":"Write to a text file.","pos":[0,21]}]},{"pos":[533,614],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[619,641],"content":"Read from a text file.","nodes":[{"content":"Read from a text file.","pos":[0,22]}]},{"pos":[642,725],"content":"<bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[730,752],"content":"Append text to a file.","nodes":[{"content":"Append text to a file.","pos":[0,22]}]},{"pos":[753,1002],"content":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>","nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Open and Append to a Log File<ept id=\"p1\">](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","pos":[0,99],"source":"[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.File.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[112,172],"source":" <xref:System.IO.File.AppendText%2A?displayProperty=fullName>"},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName&gt;</ph>","pos":[185,249],"source":" <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>"}]},{"pos":[1007,1030],"content":"Get the size of a file.","nodes":[{"content":"Get the size of a file.","pos":[0,23]}]},{"pos":[1031,1091],"content":"<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>","nodes":[]},{"pos":[1096,1125],"content":"Get the attributes of a file.","nodes":[{"content":"Get the attributes of a file.","pos":[0,29]}]},{"pos":[1126,1189],"content":"<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1194,1223],"content":"Set the attributes of a file.","nodes":[{"content":"Set the attributes of a file.","pos":[0,29]}]},{"pos":[1224,1287],"content":"<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>","nodes":[]},{"pos":[1292,1319],"content":"Determine if a file exists.","nodes":[{"content":"Determine if a file exists.","pos":[0,27]}]},{"pos":[1320,1376],"content":"<xref:System.IO.File.Exists%2A?displayProperty=fullName>","nodes":[]},{"pos":[1381,1405],"content":"Read from a binary file.","nodes":[{"content":"Read from a binary file.","pos":[0,24]}]},{"pos":[1406,1533],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"},{"pos":[1538,1561],"content":"Write to a binary file.","nodes":[{"content":"Write to a binary file.","pos":[0,23]}]},{"pos":[1562,1689],"content":"<bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>","source":"[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)"}],"pos":[50443,52153],"yaml":true,"extradata":"MT"},{"content":"The character array to write data from.","nodes":[{"pos":[0,39],"content":"The character array to write data from.","nodes":[{"content":"The character array to write data from.","pos":[0,39]}]}],"pos":[52865,52905],"yaml":true},{"content":"The position in the buffer at which to start reading data.","nodes":[{"pos":[0,58],"content":"The position in the buffer at which to start reading data.","nodes":[{"content":"The position in the buffer at which to start reading data.","pos":[0,58]}]}],"pos":[52965,53024],"yaml":true},{"content":"The maximum number of characters to write.","nodes":[{"pos":[0,42],"content":"The maximum number of characters to write.","nodes":[{"content":"The maximum number of characters to write.","pos":[0,42]}]}],"pos":[53084,53127],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[53285,53316],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[53430,53484],"yaml":true},{"content":"(<code>index</code> + <code>count</code>)> <code>buffer</code>. `Length`.","nodes":[{"pos":[0,73],"content":"(<code>index</code> + <code>count</code>)> <code>buffer</code>. `Length`.","nodes":[{"content":"(<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> + </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>)&gt; <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">buffer</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","pos":[0,63],"source":"(<code>index</code> + <code>count</code>)> <code>buffer</code>."},{"content":"<ph id=\"ph1\">`Length`</ph>.","pos":[64,73],"source":"`Length`."}]}],"pos":[53578,53652],"yaml":true},{"content":"The writer is closed.","nodes":[{"pos":[0,21],"content":"The writer is closed.","nodes":[{"content":"The writer is closed.","pos":[0,21]}]}],"pos":[53758,53780],"yaml":true},{"content":"Writes a character to the string asynchronously.","nodes":[{"pos":[0,48],"content":"Writes a character to the string asynchronously.","nodes":[{"content":"Writes a character to the string asynchronously.","pos":[0,48]}]}],"pos":[55288,55337],"yaml":true},{"content":"The character to write to the string.","nodes":[{"pos":[0,37],"content":"The character to write to the string.","nodes":[{"content":"The character to write to the string.","pos":[0,37]}]}],"pos":[56006,56044],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[56115,56172],"yaml":true},{"content":"The string writer is disposed.","nodes":[{"pos":[0,30],"content":"The string writer is disposed.","nodes":[{"content":"The string writer is disposed.","pos":[0,30]}]}],"pos":[56339,56370],"yaml":true},{"content":"The string writer is currently in use by a previous write operation.","nodes":[{"pos":[0,68],"content":"The string writer is currently in use by a previous write operation.","nodes":[{"content":"The string writer is currently in use by a previous write operation.","pos":[0,68]}]}],"pos":[56480,56549],"yaml":true},{"content":"Writes a string to the current string asynchronously.","nodes":[{"pos":[0,53],"content":"Writes a string to the current string asynchronously.","nodes":[{"content":"Writes a string to the current string asynchronously.","pos":[0,53]}]}],"pos":[58144,58198],"yaml":true},{"content":"The string to write. If <code>value</code> is `null`, nothing is written to the text stream.","nodes":[{"pos":[0,92],"content":"The string to write. If <code>value</code> is `null`, nothing is written to the text stream.","nodes":[{"content":"The string to write.","pos":[0,20]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, nothing is written to the text stream.","pos":[21,92],"source":" If <code>value</code> is `null`, nothing is written to the text stream."}]}],"pos":[58871,58964],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[59035,59092],"yaml":true},{"content":"The string writer is disposed.","nodes":[{"pos":[0,30],"content":"The string writer is disposed.","nodes":[{"content":"The string writer is disposed.","pos":[0,30]}]}],"pos":[59259,59290],"yaml":true},{"content":"The string writer is currently in use by a previous write operation.","nodes":[{"pos":[0,68],"content":"The string writer is currently in use by a previous write operation.","nodes":[{"content":"The string writer is currently in use by a previous write operation.","pos":[0,68]}]}],"pos":[59400,59469],"yaml":true},{"content":"Writes a subarray of characters to the string asynchronously.","nodes":[{"pos":[0,61],"content":"Writes a subarray of characters to the string asynchronously.","nodes":[{"content":"Writes a subarray of characters to the string asynchronously.","pos":[0,61]}]}],"pos":[61184,61246],"yaml":true},{"content":"The character array to write data from.","nodes":[{"pos":[0,39],"content":"The character array to write data from.","nodes":[{"content":"The character array to write data from.","pos":[0,39]}]}],"pos":[61979,62019],"yaml":true},{"content":"The position in the buffer at which to start reading data.","nodes":[{"pos":[0,58],"content":"The position in the buffer at which to start reading data.","nodes":[{"content":"The position in the buffer at which to start reading data.","pos":[0,58]}]}],"pos":[62079,62138],"yaml":true},{"content":"The maximum number of characters to write.","nodes":[{"pos":[0,42],"content":"The maximum number of characters to write.","nodes":[{"content":"The maximum number of characters to write.","pos":[0,42]}]}],"pos":[62198,62241],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[62312,62369],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[62532,62563],"yaml":true},{"content":"The <code>index</code> plus <code>count</code> is greater than the buffer length.","nodes":[{"pos":[0,81],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> plus <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than the buffer length.","source":"The <code>index</code> plus <code>count</code> is greater than the buffer length."}],"pos":[62657,62739],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[62853,62907],"yaml":true},{"content":"The string writer is disposed.","nodes":[{"pos":[0,30],"content":"The string writer is disposed.","nodes":[{"content":"The string writer is disposed.","pos":[0,30]}]}],"pos":[63013,63044],"yaml":true},{"content":"The string writer is currently in use by a previous write operation.","nodes":[{"pos":[0,68],"content":"The string writer is currently in use by a previous write operation.","nodes":[{"content":"The string writer is currently in use by a previous write operation.","pos":[0,68]}]}],"pos":[63154,63223],"yaml":true},{"content":"Writes a character followed by a line terminator asynchronously to the string.","nodes":[{"pos":[0,78],"content":"Writes a character followed by a line terminator asynchronously to the string.","nodes":[{"content":"Writes a character followed by a line terminator asynchronously to the string.","pos":[0,78]}]}],"pos":[64830,64909],"yaml":true},{"content":"The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,111],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,111],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property."}]}],"pos":[64920,65032],"yaml":true,"extradata":"MT"},{"content":"The character to write to the string.","nodes":[{"pos":[0,37],"content":"The character to write to the string.","nodes":[{"content":"The character to write to the string.","pos":[0,37]}]}],"pos":[65695,65733],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[65804,65861],"yaml":true},{"content":"The string writer is disposed.","nodes":[{"pos":[0,30],"content":"The string writer is disposed.","nodes":[{"content":"The string writer is disposed.","pos":[0,30]}]}],"pos":[66032,66063],"yaml":true},{"content":"The string writer is currently in use by a previous write operation.","nodes":[{"pos":[0,68],"content":"The string writer is currently in use by a previous write operation.","nodes":[{"content":"The string writer is currently in use by a previous write operation.","pos":[0,68]}]}],"pos":[66173,66242],"yaml":true},{"content":"Writes a string followed by a line terminator asynchronously to the current string.","nodes":[{"pos":[0,83],"content":"Writes a string followed by a line terminator asynchronously to the current string.","nodes":[{"content":"Writes a string followed by a line terminator asynchronously to the current string.","pos":[0,83]}]}],"pos":[67861,67945],"yaml":true},{"content":"The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,111],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,111],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property."}]}],"pos":[67956,68068],"yaml":true,"extradata":"MT"},{"content":"The string to write. If the value is `null`, only a line terminator is written.","nodes":[{"pos":[0,79],"content":"The string to write. If the value is `null`, only a line terminator is written.","nodes":[{"content":"The string to write.","pos":[0,20]},{"content":"If the value is <ph id=\"ph1\">`null`</ph>, only a line terminator is written.","pos":[21,79],"source":" If the value is `null`, only a line terminator is written."}]}],"pos":[68733,68813],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[68884,68941],"yaml":true},{"content":"The string writer is disposed.","nodes":[{"pos":[0,30],"content":"The string writer is disposed.","nodes":[{"content":"The string writer is disposed.","pos":[0,30]}]}],"pos":[69112,69143],"yaml":true},{"content":"The string writer is currently in use by a previous write operation.","nodes":[{"pos":[0,68],"content":"The string writer is currently in use by a previous write operation.","nodes":[{"content":"The string writer is currently in use by a previous write operation.","pos":[0,68]}]}],"pos":[69253,69322],"yaml":true},{"content":"Writes a subarray of characters followed by a line terminator asynchronously to the string.","nodes":[{"pos":[0,91],"content":"Writes a subarray of characters followed by a line terminator asynchronously to the string.","nodes":[{"content":"Writes a subarray of characters followed by a line terminator asynchronously to the string.","pos":[0,91]}]}],"pos":[71061,71153],"yaml":true},{"content":"The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,111],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,111],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property."}]}],"pos":[71164,71276],"yaml":true,"extradata":"MT"},{"content":"The character array to write data from.","nodes":[{"pos":[0,39],"content":"The character array to write data from.","nodes":[{"content":"The character array to write data from.","pos":[0,39]}]}],"pos":[72003,72043],"yaml":true},{"content":"The position in the buffer at which to start reading data.","nodes":[{"pos":[0,58],"content":"The position in the buffer at which to start reading data.","nodes":[{"content":"The position in the buffer at which to start reading data.","pos":[0,58]}]}],"pos":[72103,72162],"yaml":true},{"content":"The maximum number of characters to write.","nodes":[{"pos":[0,42],"content":"The maximum number of characters to write.","nodes":[{"content":"The maximum number of characters to write.","pos":[0,42]}]}],"pos":[72222,72265],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[72336,72393],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[72560,72591],"yaml":true},{"content":"The <code>index</code> plus <code>count</code> is greater than the buffer length.","nodes":[{"pos":[0,81],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> plus <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than the buffer length.","source":"The <code>index</code> plus <code>count</code> is greater than the buffer length."}],"pos":[72685,72767],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[72881,72935],"yaml":true},{"content":"The string writer is disposed.","nodes":[{"pos":[0,30],"content":"The string writer is disposed.","nodes":[{"content":"The string writer is disposed.","pos":[0,30]}]}],"pos":[73041,73072],"yaml":true},{"content":"The string writer is currently in use by a previous write operation.","nodes":[{"pos":[0,68],"content":"The string writer is currently in use by a previous write operation.","nodes":[{"content":"The string writer is currently in use by a previous write operation.","pos":[0,68]}]}],"pos":[73182,73251],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.StringWriter\n  commentId: T:System.IO.StringWriter\n  id: StringWriter\n  children:\n  - System.IO.StringWriter.#ctor\n  - System.IO.StringWriter.#ctor(System.IFormatProvider)\n  - System.IO.StringWriter.#ctor(System.Text.StringBuilder)\n  - System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)\n  - System.IO.StringWriter.Close\n  - System.IO.StringWriter.Dispose(System.Boolean)\n  - System.IO.StringWriter.Encoding\n  - System.IO.StringWriter.FlushAsync\n  - System.IO.StringWriter.GetStringBuilder\n  - System.IO.StringWriter.ToString\n  - System.IO.StringWriter.Write(System.Char)\n  - System.IO.StringWriter.Write(System.String)\n  - System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)\n  - System.IO.StringWriter.WriteAsync(System.Char)\n  - System.IO.StringWriter.WriteAsync(System.String)\n  - System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.StringWriter.WriteLineAsync(System.Char)\n  - System.IO.StringWriter.WriteLineAsync(System.String)\n  - System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: StringWriter\n  nameWithType: StringWriter\n  fullName: System.IO.StringWriter\n  type: Class\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Implements a <xref href=\"System.IO.TextWriter\"></xref> for writing information to a string. The information is stored in an underlying <xref href=\"System.Text.StringBuilder\"></xref>.\n  remarks: \"<xref:System.IO.StringWriter> enables you to write to a string synchronously or asynchronously. You can write a character at a time with the <xref:System.IO.StringWriter.Write%28System.Char%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.Char%29> method, a string at a time using the <xref:System.IO.StringWriter.Write%28System.String%29> or the <xref:System.IO.StringWriter.WriteAsync%28System.String%29> method. In addition, you can write a character, an array of characters or a string followed by the line terminator asynchronously with one of the <xref:System.IO.StringWriter.WriteLineAsync%2A> methods.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try` /`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"The following code example demonstrates the creation of a continuous paragraph from a group of double-spaced sentences, and then the conversion of the paragraph back to the original text.  \\n  \\n [!code-cpp[System.IO.StringReaderWriter#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#1)]\\n [!code-csharp[System.IO.StringReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#1)]\\n [!code-vb[System.IO.StringReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class StringWriter : System.IO.TextWriter\n  inheritance:\n  - System.Object\n  - System.IO.TextWriter\n  implements: []\n  inheritedMembers:\n  - System.IO.TextWriter.CoreNewLine\n  - System.IO.TextWriter.Dispose\n  - System.IO.TextWriter.Flush\n  - System.IO.TextWriter.FormatProvider\n  - System.IO.TextWriter.NewLine\n  - System.IO.TextWriter.Null\n  - System.IO.TextWriter.Synchronized(System.IO.TextWriter)\n  - System.IO.TextWriter.Write(System.Boolean)\n  - System.IO.TextWriter.Write(System.Char[])\n  - System.IO.TextWriter.Write(System.Decimal)\n  - System.IO.TextWriter.Write(System.Double)\n  - System.IO.TextWriter.Write(System.Int32)\n  - System.IO.TextWriter.Write(System.Int64)\n  - System.IO.TextWriter.Write(System.Object)\n  - System.IO.TextWriter.Write(System.Single)\n  - System.IO.TextWriter.Write(System.String,System.Object)\n  - System.IO.TextWriter.Write(System.String,System.Object,System.Object)\n  - System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)\n  - System.IO.TextWriter.Write(System.String,System.Object[])\n  - System.IO.TextWriter.Write(System.UInt32)\n  - System.IO.TextWriter.Write(System.UInt64)\n  - System.IO.TextWriter.WriteAsync(System.Char[])\n  - System.IO.TextWriter.WriteLine\n  - System.IO.TextWriter.WriteLine(System.Boolean)\n  - System.IO.TextWriter.WriteLine(System.Char)\n  - System.IO.TextWriter.WriteLine(System.Char[])\n  - System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextWriter.WriteLine(System.Decimal)\n  - System.IO.TextWriter.WriteLine(System.Double)\n  - System.IO.TextWriter.WriteLine(System.Int32)\n  - System.IO.TextWriter.WriteLine(System.Int64)\n  - System.IO.TextWriter.WriteLine(System.Object)\n  - System.IO.TextWriter.WriteLine(System.Single)\n  - System.IO.TextWriter.WriteLine(System.String)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object[])\n  - System.IO.TextWriter.WriteLine(System.UInt32)\n  - System.IO.TextWriter.WriteLine(System.UInt64)\n  - System.IO.TextWriter.WriteLineAsync\n  - System.IO.TextWriter.WriteLineAsync(System.Char[])\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.#ctor\n  commentId: M:System.IO.StringWriter.#ctor\n  id: '#ctor'\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: StringWriter()\n  nameWithType: StringWriter.StringWriter()\n  fullName: StringWriter.StringWriter()\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class.\n  remarks: \"A new <xref:System.Text.StringBuilder> object is automatically created and associated with the new instance of the <xref:System.IO.StringWriter> class. Since a format control is not specified for this constructor, the new instance will be initialized with <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"The following code example demonstrates how to construct a string using the `StringWriter` class.  \\n  \\n [!code-cpp[System.IO.StringWriter1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#1)]\\n [!code-csharp[System.IO.StringWriter1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#1)]\\n [!code-vb[System.IO.StringWriter1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#1)]\"\n  syntax:\n    content: public StringWriter ();\n    parameters: []\n  overload: System.IO.StringWriter.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.#ctor(System.IFormatProvider)\n  commentId: M:System.IO.StringWriter.#ctor(System.IFormatProvider)\n  id: '#ctor(System.IFormatProvider)'\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: StringWriter(IFormatProvider)\n  nameWithType: StringWriter.StringWriter(IFormatProvider)\n  fullName: StringWriter.StringWriter(IFormatProvider)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class with the specified format control.\n  remarks: \"A new <xref:System.Text.StringBuilder> object is automatically created and associated with the new instance of the <xref:System.IO.StringWriter> class.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"The following code example demonstrates how to construct a string in a specific culture.  \\n  \\n [!code-cpp[System.IO.StringWriter2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter2/CPP/strwriter2.cpp#1)]\\n [!code-csharp[System.IO.StringWriter2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter2/CS/strwriter2.cs#1)]\\n [!code-vb[System.IO.StringWriter2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter2/VB/strwriter2.vb#1)]\"\n  syntax:\n    content: public StringWriter (IFormatProvider formatProvider);\n    parameters:\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: An <xref href=\"System.IFormatProvider\"></xref> object that controls formatting.\n  overload: System.IO.StringWriter.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.#ctor(System.Text.StringBuilder)\n  commentId: M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)\n  id: '#ctor(System.Text.StringBuilder)'\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: StringWriter(StringBuilder)\n  nameWithType: StringWriter.StringWriter(StringBuilder)\n  fullName: StringWriter.StringWriter(StringBuilder)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class that writes to the specified <xref href=\"System.Text.StringBuilder\"></xref>.\n  remarks: \"Since a format control is not specified for this constructor, the new instance will be initialized with <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"The following code example demonstrates using the <xref:System.Text.StringBuilder> class to modify the underlying string in a closed `StringWriter`.  \\n  \\n [!code-cpp[System.IO.StringWriter3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter3/CPP/strwriter3.cpp#1)]\\n [!code-csharp[System.IO.StringWriter3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter3/CS/strwriter3.cs#1)]\\n [!code-vb[System.IO.StringWriter3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter3/VB/strwriter3.vb#1)]\"\n  syntax:\n    content: public StringWriter (System.Text.StringBuilder sb);\n    parameters:\n    - id: sb\n      type: System.Text.StringBuilder\n      description: The <xref href=\"System.Text.StringBuilder\"></xref> object to write to.\n  overload: System.IO.StringWriter.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>sb</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)\n  commentId: M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)\n  id: '#ctor(System.Text.StringBuilder,System.IFormatProvider)'\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: StringWriter(StringBuilder, IFormatProvider)\n  nameWithType: StringWriter.StringWriter(StringBuilder, IFormatProvider)\n  fullName: StringWriter.StringWriter(StringBuilder, IFormatProvider)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.StringWriter\"></xref> class that writes to the specified <xref href=\"System.Text.StringBuilder\"></xref> and has the specified format provider.\n  remarks: \"The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  syntax:\n    content: public StringWriter (System.Text.StringBuilder sb, IFormatProvider formatProvider);\n    parameters:\n    - id: sb\n      type: System.Text.StringBuilder\n      description: The <xref href=\"System.Text.StringBuilder\"></xref> object to write to.\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: An <xref href=\"System.IFormatProvider\"></xref> object that controls formatting.\n  overload: System.IO.StringWriter.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>sb</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.Close\n  commentId: M:System.IO.StringWriter.Close\n  id: Close\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: StringWriter.Close()\n  fullName: StringWriter.Close()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Closes the current <xref href=\"System.IO.StringWriter\"></xref> and the underlying stream.\n  remarks: \"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).  \\n  \\n This method overrides <xref:System.IO.Stream.Close%2A?displayProperty=fullName>.  \\n  \\n This implementation of `Close` calls the <xref:System.IO.StringWriter.Dispose%2A> method passing a `true` value.  \\n  \\n Flushing the stream will not flush its underlying encoder unless you explicitly call `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringWriter.%23ctor%28System.Text.StringBuilder%29> constructor.  \\n  \\n [!code-cpp[System.IO.StringWriter3#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter3/CPP/strwriter3.cpp#2)]\\n [!code-csharp[System.IO.StringWriter3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter3/CS/strwriter3.cs#2)]\\n [!code-vb[System.IO.StringWriter3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter3/VB/strwriter3.vb#2)]\"\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: System.IO.StringWriter.Close*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.Dispose(System.Boolean)\n  commentId: M:System.IO.StringWriter.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: StringWriter.Dispose(Boolean)\n  fullName: StringWriter.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.StringWriter\"></xref> and optionally releases the managed resources.\n  remarks: When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringWriter> references. This method invokes the `Dispose` method of each referenced object.\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.IO.StringWriter.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.Encoding\n  commentId: P:System.IO.StringWriter.Encoding\n  id: Encoding\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: Encoding\n  nameWithType: StringWriter.Encoding\n  fullName: StringWriter.Encoding\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Gets the <xref href=\"System.Text.Encoding\"></xref> in which the output is written.\n  remarks: \"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the `StringWriter`. This allows the XML code to consume an arbitrary `StringWriter` and generate the correct XML header.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringWriter.%23ctor> constructor.  \\n  \\n [!code-cpp[System.IO.StringWriter1#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#4)]\\n [!code-csharp[System.IO.StringWriter1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#4)]\\n [!code-vb[System.IO.StringWriter1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#4)]\"\n  syntax:\n    content: public override System.Text.Encoding Encoding { get; }\n    return:\n      type: System.Text.Encoding\n      description: The `Encoding` in which the output is written.\n  overload: System.IO.StringWriter.Encoding*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.FlushAsync\n  commentId: M:System.IO.StringWriter.FlushAsync\n  id: FlushAsync\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: FlushAsync()\n  nameWithType: StringWriter.FlushAsync()\n  fullName: StringWriter.FlushAsync()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task FlushAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous flush operation.\n  overload: System.IO.StringWriter.FlushAsync*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.GetStringBuilder\n  commentId: M:System.IO.StringWriter.GetStringBuilder\n  id: GetStringBuilder\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: GetStringBuilder()\n  nameWithType: StringWriter.GetStringBuilder()\n  fullName: StringWriter.GetStringBuilder()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Returns the underlying <xref href=\"System.Text.StringBuilder\"></xref>.\n  remarks: \"This is either the `StringBuilder` that was passed to the constructor, or the `StringBuilder` that was automatically created.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringWriter.%23ctor> constructor.  \\n  \\n [!code-cpp[System.IO.StringWriter1#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#3)]\\n [!code-csharp[System.IO.StringWriter1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#3)]\\n [!code-vb[System.IO.StringWriter1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#3)]\"\n  syntax:\n    content: public virtual System.Text.StringBuilder GetStringBuilder ();\n    parameters: []\n    return:\n      type: System.Text.StringBuilder\n      description: The underlying `StringBuilder`.\n  overload: System.IO.StringWriter.GetStringBuilder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.ToString\n  commentId: M:System.IO.StringWriter.ToString\n  id: ToString\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: StringWriter.ToString()\n  fullName: StringWriter.ToString()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Returns a string containing the characters written to the current `StringWriter` so far.\n  remarks: \"The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringWriter.%23ctor%28System.IFormatProvider%29> constructor.  \\n  \\n [!code-cpp[System.IO.StringWriter2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter2/CPP/strwriter2.cpp#2)]\\n [!code-csharp[System.IO.StringWriter2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter2/CS/strwriter2.cs#2)]\\n [!code-vb[System.IO.StringWriter2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter2/VB/strwriter2.vb#2)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The string containing the characters written to the current `StringWriter`.\n  overload: System.IO.StringWriter.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.Write(System.Char)\n  commentId: M:System.IO.StringWriter.Write(System.Char)\n  id: Write(System.Char)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: Write(Char)\n  nameWithType: StringWriter.Write(Char)\n  fullName: StringWriter.Write(Char)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a character to the string.\n  remarks: \"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringWriter.%23ctor> constructor.  \\n  \\n [!code-cpp[System.IO.StringWriter1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#2)]\\n [!code-csharp[System.IO.StringWriter1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#2)]\\n [!code-vb[System.IO.StringWriter1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#2)]\"\n  syntax:\n    content: public override void Write (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to write.\n  overload: System.IO.StringWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The writer is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.Write(System.String)\n  commentId: M:System.IO.StringWriter.Write(System.String)\n  id: Write(System.String)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: StringWriter.Write(String)\n  fullName: StringWriter.Write(String)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a string to the current string.\n  remarks: \"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>.  \\n  \\n If the specified string is `null`, nothing is written.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringWriter> class.  \\n  \\n [!code-cpp[System.IO.StringReaderWriter#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#3)]\\n [!code-csharp[System.IO.StringReaderWriter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#3)]\\n [!code-vb[System.IO.StringReaderWriter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#3)]\"\n  syntax:\n    content: public override void Write (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to write.\n  overload: System.IO.StringWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The writer is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)\n  id: Write(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: Write(Char[], Int32, Int32)\n  nameWithType: StringWriter.Write(Char[], Int32, Int32)\n  fullName: StringWriter.Write(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a subarray of characters to the string.\n  remarks: \"This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>.  \\n  \\n This method writes `count` characters of data to this `StringWriter` from `buffer`, starting at position `index`.  \\n  \\n The following table lists examples of other typical or related I/O tasks.  \\n  \\n|To do this...|See the example in this topic...|  \\n|-------------------|--------------------------------------|  \\n|Create a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Write to a text file.|[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)|  \\n|Read from a text file.|[How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)|  \\n|Append text to a file.|[How to: Open and Append to a Log File](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \\n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \\n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \\n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \\n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \\n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  \\n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.StringWriter.%23ctor> constructor.  \\n  \\n [!code-cpp[System.IO.StringWriter1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#2)]\\n [!code-csharp[System.IO.StringWriter1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#2)]\\n [!code-vb[System.IO.StringWriter1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#2)]\"\n  syntax:\n    content: public override void Write (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write data from.\n    - id: index\n      type: System.Int32\n      description: The position in the buffer at which to start reading data.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to write.\n  overload: System.IO.StringWriter.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: (<code>index</code> + <code>count</code>)> <code>buffer</code>. `Length`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The writer is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.WriteAsync(System.Char)\n  commentId: M:System.IO.StringWriter.WriteAsync(System.Char)\n  id: WriteAsync(System.Char)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: WriteAsync(Char)\n  nameWithType: StringWriter.WriteAsync(Char)\n  fullName: StringWriter.WriteAsync(Char)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a character to the string asynchronously.\n  remarks: ''\n  example:\n  - \"The following example shows how to write characters by using the <xref:System.IO.StringWriter.WriteAsync%28System.Char%29> method.  \\n  \\n [!code-csharp[System.IO.StringWriter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example5.cs#5)]\\n [!code-vb[System.IO.StringWriter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example5.vb#5)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task WriteAsync (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to write to the string.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.StringWriter.WriteAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The string writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.WriteAsync(System.String)\n  commentId: M:System.IO.StringWriter.WriteAsync(System.String)\n  id: WriteAsync(System.String)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: WriteAsync(String)\n  nameWithType: StringWriter.WriteAsync(String)\n  fullName: StringWriter.WriteAsync(String)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a string to the current string asynchronously.\n  remarks: ''\n  example:\n  - \"The following example shows how to write a string by using the <xref:System.IO.StringWriter.WriteAsync%28System.String%29> method.  \\n  \\n [!code-csharp[System.IO.StringWriter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example4.cs#4)]\\n [!code-vb[System.IO.StringWriter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example4.vb#4)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task WriteAsync (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to write. If <code>value</code> is `null`, nothing is written to the text stream.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.StringWriter.WriteAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The string writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  id: WriteAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: WriteAsync(Char[], Int32, Int32)\n  nameWithType: StringWriter.WriteAsync(Char[], Int32, Int32)\n  fullName: StringWriter.WriteAsync(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a subarray of characters to the string asynchronously.\n  remarks: ''\n  example:\n  - \"The following example shows how to write characters by using the <xref:System.IO.StringWriter.WriteAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.  \\n  \\n [!code-csharp[System.IO.StringWriter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example6.cs#6)]\\n [!code-vb[System.IO.StringWriter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example6.vb#6)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task WriteAsync (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write data from.\n    - id: index\n      type: System.Int32\n      description: The position in the buffer at which to start reading data.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to write.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.StringWriter.WriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>index</code> plus <code>count</code> is greater than the buffer length.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The string writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.WriteLineAsync(System.Char)\n  commentId: M:System.IO.StringWriter.WriteLineAsync(System.Char)\n  id: WriteLineAsync(System.Char)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: WriteLineAsync(Char)\n  nameWithType: StringWriter.WriteLineAsync(Char)\n  fullName: StringWriter.WriteLineAsync(Char)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a character followed by a line terminator asynchronously to the string.\n  remarks: The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property.\n  example:\n  - \"The following example shows how to write characters by using the <xref:System.IO.StringWriter.WriteLineAsync%28System.Char%29> method.  \\n  \\n [!code-csharp[System.IO.StringWriter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example2.cs#2)]\\n [!code-vb[System.IO.StringWriter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example2.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task WriteLineAsync (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to write to the string.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.StringWriter.WriteLineAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The string writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.WriteLineAsync(System.String)\n  commentId: M:System.IO.StringWriter.WriteLineAsync(System.String)\n  id: WriteLineAsync(System.String)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: WriteLineAsync(String)\n  nameWithType: StringWriter.WriteLineAsync(String)\n  fullName: StringWriter.WriteLineAsync(String)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a string followed by a line terminator asynchronously to the current string.\n  remarks: The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property.\n  example:\n  - \"The following example shows how to write a string by using the <xref:System.IO.StringWriter.WriteLineAsync%28System.String%29> method.  \\n  \\n [!code-csharp[System.IO.StringWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example.cs#1)]\\n [!code-vb[System.IO.StringWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task WriteLineAsync (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to write. If the value is `null`, only a line terminator is written.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.StringWriter.WriteLineAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The string writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  id: WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringWriter\n  langs:\n  - csharp\n  name: WriteLineAsync(Char[], Int32, Int32)\n  nameWithType: StringWriter.WriteLineAsync(Char[], Int32, Int32)\n  fullName: StringWriter.WriteLineAsync(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a subarray of characters followed by a line terminator asynchronously to the string.\n  remarks: The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property.\n  example:\n  - \"The following example shows how to write characters by using the <xref:System.IO.StringWriter.WriteLineAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.  \\n  \\n [!code-csharp[System.IO.StringWriter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example3.cs#3)]\\n [!code-vb[System.IO.StringWriter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example3.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task WriteLineAsync (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write data from.\n    - id: index\n      type: System.Int32\n      description: The position in the buffer at which to start reading data.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to write.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.StringWriter.WriteLineAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>index</code> plus <code>count</code> is greater than the buffer length.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The string writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The string writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.IO.StringWriter.#ctor\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: StringWriter()\n  nameWithType: StringWriter.StringWriter()\n  fullName: StringWriter.StringWriter()\n- uid: System.IO.StringWriter.#ctor(System.IFormatProvider)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: StringWriter(IFormatProvider)\n  nameWithType: StringWriter.StringWriter(IFormatProvider)\n  fullName: StringWriter.StringWriter(IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.IO.StringWriter.#ctor(System.Text.StringBuilder)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: StringWriter(StringBuilder)\n  nameWithType: StringWriter.StringWriter(StringBuilder)\n  fullName: StringWriter.StringWriter(StringBuilder)\n- uid: System.Text.StringBuilder\n  parent: System.Text\n  isExternal: false\n  name: StringBuilder\n  nameWithType: StringBuilder\n  fullName: System.Text.StringBuilder\n- uid: System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: StringWriter(StringBuilder, IFormatProvider)\n  nameWithType: StringWriter.StringWriter(StringBuilder, IFormatProvider)\n  fullName: StringWriter.StringWriter(StringBuilder, IFormatProvider)\n- uid: System.IO.StringWriter.Close\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Close()\n  nameWithType: StringWriter.Close()\n  fullName: StringWriter.Close()\n- uid: System.IO.StringWriter.Dispose(System.Boolean)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: StringWriter.Dispose(Boolean)\n  fullName: StringWriter.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.StringWriter.Encoding\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Encoding\n  nameWithType: StringWriter.Encoding\n  fullName: StringWriter.Encoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.IO.StringWriter.FlushAsync\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: StringWriter.FlushAsync()\n  fullName: StringWriter.FlushAsync()\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.IO.StringWriter.GetStringBuilder\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: GetStringBuilder()\n  nameWithType: StringWriter.GetStringBuilder()\n  fullName: StringWriter.GetStringBuilder()\n- uid: System.IO.StringWriter.ToString\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: ToString()\n  nameWithType: StringWriter.ToString()\n  fullName: StringWriter.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.StringWriter.Write(System.Char)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Write(Char)\n  nameWithType: StringWriter.Write(Char)\n  fullName: StringWriter.Write(Char)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.IO.StringWriter.Write(System.String)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Write(String)\n  nameWithType: StringWriter.Write(String)\n  fullName: StringWriter.Write(String)\n- uid: System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Write(Char[], Int32, Int32)\n  nameWithType: StringWriter.Write(Char[], Int32, Int32)\n  fullName: StringWriter.Write(Char[], Int32, Int32)\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.StringWriter.WriteAsync(System.Char)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: WriteAsync(Char)\n  nameWithType: StringWriter.WriteAsync(Char)\n  fullName: StringWriter.WriteAsync(Char)\n- uid: System.IO.StringWriter.WriteAsync(System.String)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: WriteAsync(String)\n  nameWithType: StringWriter.WriteAsync(String)\n  fullName: StringWriter.WriteAsync(String)\n- uid: System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: WriteAsync(Char[], Int32, Int32)\n  nameWithType: StringWriter.WriteAsync(Char[], Int32, Int32)\n  fullName: StringWriter.WriteAsync(Char[], Int32, Int32)\n- uid: System.IO.StringWriter.WriteLineAsync(System.Char)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: WriteLineAsync(Char)\n  nameWithType: StringWriter.WriteLineAsync(Char)\n  fullName: StringWriter.WriteLineAsync(Char)\n- uid: System.IO.StringWriter.WriteLineAsync(System.String)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: WriteLineAsync(String)\n  nameWithType: StringWriter.WriteLineAsync(String)\n  fullName: StringWriter.WriteLineAsync(String)\n- uid: System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: WriteLineAsync(Char[], Int32, Int32)\n  nameWithType: StringWriter.WriteLineAsync(Char[], Int32, Int32)\n  fullName: StringWriter.WriteLineAsync(Char[], Int32, Int32)\n- uid: System.IO.StringWriter.#ctor*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: StringWriter\n  nameWithType: StringWriter.StringWriter\n  fullName: StringWriter.StringWriter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.IO.StringWriter.Close*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Close\n  nameWithType: StringWriter.Close\n  fullName: StringWriter.Close\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.IO.StringWriter.Dispose*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Dispose\n  nameWithType: StringWriter.Dispose\n  fullName: StringWriter.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.IO.StringWriter.Encoding*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Encoding\n  nameWithType: StringWriter.Encoding\n  fullName: StringWriter.Encoding\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.IO.StringWriter.FlushAsync*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: FlushAsync\n  nameWithType: StringWriter.FlushAsync\n  fullName: StringWriter.FlushAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.IO.StringWriter.GetStringBuilder*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: GetStringBuilder\n  nameWithType: StringWriter.GetStringBuilder\n  fullName: StringWriter.GetStringBuilder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.IO.StringWriter.ToString*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: ToString\n  nameWithType: StringWriter.ToString\n  fullName: StringWriter.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.IO.StringWriter.Write*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: Write\n  nameWithType: StringWriter.Write\n  fullName: StringWriter.Write\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.IO.StringWriter.WriteAsync*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: WriteAsync\n  nameWithType: StringWriter.WriteAsync\n  fullName: StringWriter.WriteAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.IO.StringWriter.WriteLineAsync*\n  parent: System.IO.StringWriter\n  isExternal: false\n  name: WriteLineAsync\n  nameWithType: StringWriter.WriteLineAsync\n  fullName: StringWriter.WriteLineAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/StringWriter.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.IO.TextWriter.CoreNewLine\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: CoreNewLine\n  nameWithType: TextWriter.CoreNewLine\n  fullName: TextWriter.CoreNewLine\n- uid: System.IO.TextWriter.Dispose\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Dispose()\n  nameWithType: TextWriter.Dispose()\n  fullName: TextWriter.Dispose()\n- uid: System.IO.TextWriter.Flush\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Flush()\n  nameWithType: TextWriter.Flush()\n  fullName: TextWriter.Flush()\n- uid: System.IO.TextWriter.FormatProvider\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: FormatProvider\n  nameWithType: TextWriter.FormatProvider\n  fullName: TextWriter.FormatProvider\n- uid: System.IO.TextWriter.NewLine\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: NewLine\n  nameWithType: TextWriter.NewLine\n  fullName: TextWriter.NewLine\n- uid: System.IO.TextWriter.Null\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: \"Null\"\n  nameWithType: TextWriter.Null\n  fullName: TextWriter.Null\n- uid: System.IO.TextWriter.Synchronized(System.IO.TextWriter)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Synchronized(TextWriter)\n  nameWithType: TextWriter.Synchronized(TextWriter)\n  fullName: TextWriter.Synchronized(TextWriter)\n- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(String, Object, Object, Object)\n  nameWithType: TextWriter.Write(String, Object, Object, Object)\n  fullName: TextWriter.Write(String, Object, Object, Object)\n- uid: System.IO.TextWriter.Write(System.String,System.Object[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(String, Object[])\n  nameWithType: TextWriter.Write(String, Object[])\n  fullName: TextWriter.Write(String, Object[])\n- uid: System.IO.TextWriter.Write(System.String,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(String, Object)\n  nameWithType: TextWriter.Write(String, Object)\n  fullName: TextWriter.Write(String, Object)\n- uid: System.IO.TextWriter.Write(System.UInt64)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(UInt64)\n  nameWithType: TextWriter.Write(UInt64)\n  fullName: TextWriter.Write(UInt64)\n- uid: System.IO.TextWriter.Write(System.UInt32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(UInt32)\n  nameWithType: TextWriter.Write(UInt32)\n  fullName: TextWriter.Write(UInt32)\n- uid: System.IO.TextWriter.Write(System.Single)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Single)\n  nameWithType: TextWriter.Write(Single)\n  fullName: TextWriter.Write(Single)\n- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(String, Object, Object)\n  nameWithType: TextWriter.Write(String, Object, Object)\n  fullName: TextWriter.Write(String, Object, Object)\n- uid: System.IO.TextWriter.Write(System.Int64)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Int64)\n  nameWithType: TextWriter.Write(Int64)\n  fullName: TextWriter.Write(Int64)\n- uid: System.IO.TextWriter.Write(System.Int32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Int32)\n  nameWithType: TextWriter.Write(Int32)\n  fullName: TextWriter.Write(Int32)\n- uid: System.IO.TextWriter.Write(System.Double)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Double)\n  nameWithType: TextWriter.Write(Double)\n  fullName: TextWriter.Write(Double)\n- uid: System.IO.TextWriter.Write(System.Decimal)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Decimal)\n  nameWithType: TextWriter.Write(Decimal)\n  fullName: TextWriter.Write(Decimal)\n- uid: System.IO.TextWriter.Write(System.Char[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Char[])\n  nameWithType: TextWriter.Write(Char[])\n  fullName: TextWriter.Write(Char[])\n- uid: System.IO.TextWriter.Write(System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Object)\n  nameWithType: TextWriter.Write(Object)\n  fullName: TextWriter.Write(Object)\n- uid: System.IO.TextWriter.Write(System.Boolean)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Boolean)\n  nameWithType: TextWriter.Write(Boolean)\n  fullName: TextWriter.Write(Boolean)\n- uid: System.IO.TextWriter.WriteAsync(System.Char[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteAsync(Char[])\n  nameWithType: TextWriter.WriteAsync(Char[])\n  fullName: TextWriter.WriteAsync(Char[])\n- uid: System.IO.TextWriter.WriteLine(System.String)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: TextWriter.WriteLine(String)\n  fullName: TextWriter.WriteLine(String)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String, Object, Object)\n  nameWithType: TextWriter.WriteLine(String, Object, Object)\n  fullName: TextWriter.WriteLine(String, Object, Object)\n- uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Char[], Int32, Int32)\n  nameWithType: TextWriter.WriteLine(Char[], Int32, Int32)\n  fullName: TextWriter.WriteLine(Char[], Int32, Int32)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String, Object[])\n  nameWithType: TextWriter.WriteLine(String, Object[])\n  fullName: TextWriter.WriteLine(String, Object[])\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String, Object)\n  nameWithType: TextWriter.WriteLine(String, Object)\n  fullName: TextWriter.WriteLine(String, Object)\n- uid: System.IO.TextWriter.WriteLine(System.UInt64)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(UInt64)\n  nameWithType: TextWriter.WriteLine(UInt64)\n  fullName: TextWriter.WriteLine(UInt64)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String, Object, Object, Object)\n  nameWithType: TextWriter.WriteLine(String, Object, Object, Object)\n  fullName: TextWriter.WriteLine(String, Object, Object, Object)\n- uid: System.IO.TextWriter.WriteLine(System.UInt32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(UInt32)\n  nameWithType: TextWriter.WriteLine(UInt32)\n  fullName: TextWriter.WriteLine(UInt32)\n- uid: System.IO.TextWriter.WriteLine(System.Single)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Single)\n  nameWithType: TextWriter.WriteLine(Single)\n  fullName: TextWriter.WriteLine(Single)\n- uid: System.IO.TextWriter.WriteLine(System.Double)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Double)\n  nameWithType: TextWriter.WriteLine(Double)\n  fullName: TextWriter.WriteLine(Double)\n- uid: System.IO.TextWriter.WriteLine(System.Int64)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Int64)\n  nameWithType: TextWriter.WriteLine(Int64)\n  fullName: TextWriter.WriteLine(Int64)\n- uid: System.IO.TextWriter.WriteLine(System.Int32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Int32)\n  nameWithType: TextWriter.WriteLine(Int32)\n  fullName: TextWriter.WriteLine(Int32)\n- uid: System.IO.TextWriter.WriteLine(System.Decimal)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Decimal)\n  nameWithType: TextWriter.WriteLine(Decimal)\n  fullName: TextWriter.WriteLine(Decimal)\n- uid: System.IO.TextWriter.WriteLine(System.Char[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Char[])\n  nameWithType: TextWriter.WriteLine(Char[])\n  fullName: TextWriter.WriteLine(Char[])\n- uid: System.IO.TextWriter.WriteLine(System.Char)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Char)\n  nameWithType: TextWriter.WriteLine(Char)\n  fullName: TextWriter.WriteLine(Char)\n- uid: System.IO.TextWriter.WriteLine(System.Boolean)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Boolean)\n  nameWithType: TextWriter.WriteLine(Boolean)\n  fullName: TextWriter.WriteLine(Boolean)\n- uid: System.IO.TextWriter.WriteLine\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine()\n  nameWithType: TextWriter.WriteLine()\n  fullName: TextWriter.WriteLine()\n- uid: System.IO.TextWriter.WriteLine(System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Object)\n  nameWithType: TextWriter.WriteLine(Object)\n  fullName: TextWriter.WriteLine(Object)\n- uid: System.IO.TextWriter.WriteLineAsync\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLineAsync()\n  nameWithType: TextWriter.WriteLineAsync()\n  fullName: TextWriter.WriteLineAsync()\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLineAsync(Char[])\n  nameWithType: TextWriter.WriteLineAsync(Char[])\n  fullName: TextWriter.WriteLineAsync(Char[])\n"}