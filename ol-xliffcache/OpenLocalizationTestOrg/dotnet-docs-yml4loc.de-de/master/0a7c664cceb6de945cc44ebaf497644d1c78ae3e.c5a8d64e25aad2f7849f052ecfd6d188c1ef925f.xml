{"nodes":[{"content":"Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <xref href=\"System.Threading.Tasks.Task\"></xref> instances.","nodes":[{"pos":[0,152],"content":"Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances.","source":"Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <xref href=\"System.Threading.Tasks.Task\"></xref> instances."}],"pos":[647,800],"yaml":true},{"content":"Creates a proxy <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation of a <xref href=\"System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)\"></xref>.","nodes":[{"pos":[0,236],"content":"Creates a proxy <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation of a <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a proxy <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation of a <xref href=\"System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)\"></xref>."}],"pos":[2865,3102],"yaml":true},{"content":"It is often useful to be able to return a Task from a <xref:System.Threading.Tasks.Task%601>, where the inner Task represents work done as part of the outer <xref:System.Threading.Tasks.Task%601>. However, doing so results in a `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.","nodes":[{"pos":[0,470],"content":"It is often useful to be able to return a Task from a <xref:System.Threading.Tasks.Task%601>, where the inner Task represents work done as part of the outer <xref:System.Threading.Tasks.Task%601>. However, doing so results in a `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.","nodes":[{"content":"It is often useful to be able to return a Task from a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, where the inner Task represents work done as part of the outer <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[0,196],"source":"It is often useful to be able to return a Task from a <xref:System.Threading.Tasks.Task%601>, where the inner Task represents work done as part of the outer <xref:System.Threading.Tasks.Task%601>."},{"content":"However, doing so results in a <ph id=\"ph1\">`Task&lt;Task&gt;`</ph> (C#) or <ph id=\"ph2\">`Task (Of Task)`</ph> (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.","pos":[197,352],"source":" However, doing so results in a `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior."},{"content":"Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.","pos":[353,470]}]}],"pos":[3113,3584],"yaml":true,"extradata":"MT"},{"content":"The `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic) to unwrap.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">`Task&lt;Task&gt;`</ph> (C#) or <ph id=\"ph2\">`Task (Of Task)`</ph> (Visual Basic) to unwrap.","source":"The `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic) to unwrap."}],"pos":[4245,4313],"yaml":true},{"content":"A Task that represents the asynchronous operation of the provided `System.Threading.Tasks.Task(Of Task)`.","nodes":[{"pos":[0,105],"content":"A Task that represents the asynchronous operation of the provided <ph id=\"ph1\">`System.Threading.Tasks.Task(Of Task)`</ph>.","source":"A Task that represents the asynchronous operation of the provided `System.Threading.Tasks.Task(Of Task)`."}],"pos":[4384,4490],"yaml":true},{"content":"The exception that is thrown if the <code>task</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">task</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown if the <code>task</code> argument is null."}],"pos":[4664,4736],"yaml":true},{"content":"Creates a proxy <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation of a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).","nodes":[{"pos":[0,175],"content":"Creates a proxy <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation of a <ph id=\"ph2\">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id=\"ph3\">`Task (Of Task(Of T))`</ph> (Visual Basic).","source":"Creates a proxy <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation of a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic)."}],"pos":[6477,6653],"yaml":true},{"content":"It is often useful to be able to return a <xref:System.Threading.Tasks.Task> from a <xref:System.Threading.Tasks.Task>, where the inner <xref:System.Threading.Tasks.Task> represents work done as part of the outer <xref:System.Threading.Tasks.Task>. However, doing so results in a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy <xref:System.Threading.Tasks.Task%601> that represents the entire asynchronous operation of such a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).","nodes":[{"pos":[0,622],"content":"It is often useful to be able to return a <xref:System.Threading.Tasks.Task> from a <xref:System.Threading.Tasks.Task>, where the inner <xref:System.Threading.Tasks.Task> represents work done as part of the outer <xref:System.Threading.Tasks.Task>. However, doing so results in a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy <xref:System.Threading.Tasks.Task%601> that represents the entire asynchronous operation of such a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).","nodes":[{"content":"It is often useful to be able to return a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> from a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, where the inner <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> represents work done as part of the outer <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.","pos":[0,248],"source":"It is often useful to be able to return a <xref:System.Threading.Tasks.Task> from a <xref:System.Threading.Tasks.Task>, where the inner <xref:System.Threading.Tasks.Task> represents work done as part of the outer <xref:System.Threading.Tasks.Task>."},{"content":"However, doing so results in a <ph id=\"ph1\">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id=\"ph2\">`Task (Of Task(Of T))`</ph> (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.","pos":[249,413],"source":" However, doing so results in a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior."},{"content":"Unwrap solves this problem by creating a proxy <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> that represents the entire asynchronous operation of such a <ph id=\"ph2\">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id=\"ph3\">`Task (Of Task(Of T))`</ph> (Visual Basic).","pos":[414,622],"source":" Unwrap solves this problem by creating a proxy <xref:System.Threading.Tasks.Task%601> that represents the entire asynchronous operation of such a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic)."}]}],"pos":[6664,7287],"yaml":true,"extradata":"MT"},{"content":"The `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic) to unwrap.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id=\"ph2\">`Task (Of Task(Of T))`</ph> (Visual Basic) to unwrap.","source":"The `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic) to unwrap."}],"pos":[7584,7661],"yaml":true},{"content":"The type of the task's result.","nodes":[{"pos":[0,30],"content":"The type of the task's result.","nodes":[{"content":"The type of the task's result.","pos":[0,30]}]}],"pos":[7718,7749],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation of the provided `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).","nodes":[{"pos":[0,172],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation of the provided <ph id=\"ph2\">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id=\"ph3\">`Task (Of Task(Of T))`</ph> (Visual Basic).","source":"A <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation of the provided `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic)."}],"pos":[7822,7995],"yaml":true},{"content":"The exception that is thrown if the <code>task</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">task</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown if the <code>task</code> argument is null."}],"pos":[8172,8244],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks.TaskExtensions\n  commentId: T:System.Threading.Tasks.TaskExtensions\n  id: TaskExtensions\n  children:\n  - System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  langs:\n  - csharp\n  name: TaskExtensions\n  nameWithType: TaskExtensions\n  fullName: System.Threading.Tasks.TaskExtensions\n  type: Class\n  assemblies:\n  - System.Threading.Tasks\n  - System.Core\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <xref href=\"System.Threading.Tasks.Task\"></xref> instances.\n  syntax:\n    content: public static class TaskExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  id: Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.TaskExtensions\n  langs:\n  - csharp\n  name: Unwrap(Task<Task>)\n  nameWithType: TaskExtensions.Unwrap(Task<Task>)\n  fullName: TaskExtensions.Unwrap(Task<Task>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - System.Core\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Creates a proxy <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation of a <xref href=\"System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)\"></xref>.\n  remarks: It is often useful to be able to return a Task from a <xref:System.Threading.Tasks.Task%601>, where the inner Task represents work done as part of the outer <xref:System.Threading.Tasks.Task%601>. However, doing so results in a `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.\n  example:\n  - \"The following example shows how to unwrap a task:  \\n  \\n [!code-csharp[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/cs/unwrap.cs#01)]\\n [!code-vb[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/vb/unwrap.vb#01)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task Unwrap (this System.Threading.Tasks.Task<System.Threading.Tasks.Task> task);\n    parameters:\n    - id: task\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n      description: The `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic) to unwrap.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A Task that represents the asynchronous operation of the provided `System.Threading.Tasks.Task(Of Task)`.\n  overload: System.Threading.Tasks.TaskExtensions.Unwrap*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown if the <code>task</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  id: Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.TaskExtensions\n  langs:\n  - csharp\n  name: Unwrap<TResult>(Task<Task<TResult>>)\n  nameWithType: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)\n  fullName: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - System.Core\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Creates a proxy <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation of a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).\n  remarks: It is often useful to be able to return a <xref:System.Threading.Tasks.Task> from a <xref:System.Threading.Tasks.Task>, where the inner <xref:System.Threading.Tasks.Task> represents work done as part of the outer <xref:System.Threading.Tasks.Task>. However, doing so results in a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy <xref:System.Threading.Tasks.Task%601> that represents the entire asynchronous operation of such a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult> Unwrap<TResult> (this System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> task);\n    parameters:\n    - id: task\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}\n      description: The `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic) to unwrap.\n    typeParameters:\n    - id: TResult\n      description: The type of the task's result.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation of the provided `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).\n  overload: System.Threading.Tasks.TaskExtensions.Unwrap``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown if the <code>task</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.TaskExtensions\n  isExternal: false\n  name: Unwrap(Task<Task>)\n  nameWithType: TaskExtensions.Unwrap(Task<Task>)\n  fullName: TaskExtensions.Unwrap(Task<Task>)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Task>\n  nameWithType: Task<Task>\n  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.TaskExtensions\n  isExternal: false\n  name: Unwrap<TResult>(Task<Task<TResult>>)\n  nameWithType: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)\n  fullName: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)\n- uid: TResult\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Task<TResult>>\n  nameWithType: Task<Task<TResult>>\n  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap*\n  parent: System.Threading.Tasks.TaskExtensions\n  isExternal: false\n  name: Unwrap\n  nameWithType: TaskExtensions.Unwrap\n  fullName: TaskExtensions.Unwrap\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskExtensions.xml\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap``1*\n  parent: System.Threading.Tasks.TaskExtensions\n  isExternal: false\n  name: Unwrap<TResult>\n  nameWithType: TaskExtensions.Unwrap<TResult>\n  fullName: TaskExtensions.Unwrap<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskExtensions.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}